! This file was generated by gpufort
          
           
module vector_dot_kernels
  use hipfort
  use hipfort_check
  implicit none

  

 
  interface

    subroutine launch_krnl_cecba2_8(grid,&
        block,&
        sharedMem,&
        stream,&
        N,&
        x,&
        x_n1,&
        x_lb1,&
        y,&
        y_n1,&
        y_lb1) bind(c, name="launch_krnl_cecba2_8")
      use iso_c_binding
      use hipfort
      use hipfort_check
      implicit none
      type(dim3),intent(in) :: grid
      type(dim3),intent(in) :: block
      integer(c_int),intent(in) :: sharedMem
      type(c_ptr),value,intent(in) :: stream
      integer,value :: N
      type(c_ptr),value :: x
      integer(c_int),value,intent(in) :: x_n1
      integer(c_int),value,intent(in) :: x_lb1
      type(c_ptr),value :: y
      integer(c_int),value,intent(in) :: y_n1
      integer(c_int),value,intent(in) :: y_lb1
    end subroutine

    subroutine launch_krnl_cecba2_8_auto(sharedMem,&
        stream,&
        N,&
        x,&
        x_n1,&
        x_lb1,&
        y,&
        y_n1,&
        y_lb1) bind(c, name="launch_krnl_cecba2_8_auto")
      use iso_c_binding
      use hipfort
      use hipfort_check
      implicit none
      integer(c_int),value,intent(in) :: sharedMem
      type(c_ptr),value,intent(in) :: stream
      integer,value :: N
      type(c_ptr),value :: x
      integer(c_int),value,intent(in) :: x_n1
      integer(c_int),value,intent(in) :: x_lb1
      type(c_ptr),value :: y
      integer(c_int),value,intent(in) :: y_n1
      integer(c_int),value,intent(in) :: y_lb1
    end subroutine

    subroutine launch_krnl_e7eb26_15(grid,&
        block,&
        sharedMem,&
        stream,&
        N,&
        res,&
        x,&
        x_n1,&
        x_lb1,&
        y,&
        y_n1,&
        y_lb1) bind(c, name="launch_krnl_e7eb26_15")
      use iso_c_binding
      use hipfort
      use hipfort_check
      implicit none
      type(dim3),intent(in) :: grid
      type(dim3),intent(in) :: block
      integer(c_int),intent(in) :: sharedMem
      type(c_ptr),value,intent(in) :: stream
      integer,value :: N
      integer(4) :: res
      type(c_ptr),value :: x
      integer(c_int),value,intent(in) :: x_n1
      integer(c_int),value,intent(in) :: x_lb1
      type(c_ptr),value :: y
      integer(c_int),value,intent(in) :: y_n1
      integer(c_int),value,intent(in) :: y_lb1
    end subroutine

    subroutine launch_krnl_e7eb26_15_auto(sharedMem,&
        stream,&
        N,&
        res,&
        x,&
        x_n1,&
        x_lb1,&
        y,&
        y_n1,&
        y_lb1) bind(c, name="launch_krnl_e7eb26_15_auto")
      use iso_c_binding
      use hipfort
      use hipfort_check
      implicit none
      integer(c_int),value,intent(in) :: sharedMem
      type(c_ptr),value,intent(in) :: stream
      integer,value :: N
      integer(4) :: res
      type(c_ptr),value :: x
      integer(c_int),value,intent(in) :: x_n1
      integer(c_int),value,intent(in) :: x_lb1
      type(c_ptr),value :: y
      integer(c_int),value,intent(in) :: y_n1
      integer(c_int),value,intent(in) :: y_lb1
    end subroutine

  end interface

  contains

    subroutine launch_krnl_cecba2_8_cpu(sharedMem,&
        stream,&
        N,&
        x,&
        x_n1,&
        x_lb1,&
        y,&
        y_n1,&
        y_lb1)
      use iso_c_binding
      use hipfort
      use hipfort_check
      implicit none
      integer(c_int),value,intent(in) :: sharedMem
      type(c_ptr),value,intent(in) :: stream
      integer,value :: N
      type(c_ptr),value :: x
      integer(c_int),value,intent(in) :: x_n1
      integer(c_int),value,intent(in) :: x_lb1
      type(c_ptr),value :: y
      integer(c_int),value,intent(in) :: y_n1
      integer(c_int),value,intent(in) :: y_lb1
      integer :: i
      integer(4),allocatable,dimension(:),target :: x
      integer(4),allocatable,dimension(:),target :: y
      allocate(x(x_lb1:x_lb1+x_n1-1))
      CALL hipCheck(hipMemcpy(c_loc(x),d_x,4_8*SIZE(x),hipMemcpyDeviceToHost))
      allocate(y(y_lb1:y_lb1+y_n1-1))
      CALL hipCheck(hipMemcpy(c_loc(y),d_y,4_8*SIZE(y),hipMemcpyDeviceToHost))
        !$acc parallel loop
        do i = 1, N
          x(i) = 1
          y(i) = 2
        end do
      CALL hipCheck(hipMemcpy(d_x,c_loc(x),4_8*SIZE(x),hipMemcpyHostToDevice))
      deallocate(x)
      CALL hipCheck(hipMemcpy(d_y,c_loc(y),4_8*SIZE(y),hipMemcpyHostToDevice))
      deallocate(y)

    end subroutine

    subroutine launch_krnl_e7eb26_15_cpu(sharedMem,&
        stream,&
        N,&
        res,&
        x,&
        x_n1,&
        x_lb1,&
        y,&
        y_n1,&
        y_lb1)
      use iso_c_binding
      use hipfort
      use hipfort_check
      implicit none
      integer(c_int),value,intent(in) :: sharedMem
      type(c_ptr),value,intent(in) :: stream
      integer,value :: N
      integer(4) :: res
      type(c_ptr),value :: x
      integer(c_int),value,intent(in) :: x_n1
      integer(c_int),value,intent(in) :: x_lb1
      type(c_ptr),value :: y
      integer(c_int),value,intent(in) :: y_n1
      integer(c_int),value,intent(in) :: y_lb1
      integer :: i
      integer(4),allocatable,dimension(:),target :: x
      integer(4),allocatable,dimension(:),target :: y
      allocate(x(x_lb1:x_lb1+x_n1-1))
      CALL hipCheck(hipMemcpy(c_loc(x),d_x,4_8*SIZE(x),hipMemcpyDeviceToHost))
      allocate(y(y_lb1:y_lb1+y_n1-1))
      CALL hipCheck(hipMemcpy(c_loc(y),d_y,4_8*SIZE(y),hipMemcpyDeviceToHost))
        !$acc parallel loop reduction(+:res)
        do i = 1, N
          res = res + x(i) * y(i)
        end do
      CALL hipCheck(hipMemcpy(d_x,c_loc(x),4_8*SIZE(x),hipMemcpyHostToDevice))
      deallocate(x)
      CALL hipCheck(hipMemcpy(d_y,c_loc(y),4_8*SIZE(y),hipMemcpyHostToDevice))
      deallocate(y)

    end subroutine


end module vector_dot_kernels