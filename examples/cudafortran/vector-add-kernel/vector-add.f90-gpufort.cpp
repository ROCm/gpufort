// This file was generated by GPUFORT

#ifndef VECTOR_ADD_F90_GPUFORT_CPP
#define VECTOR_ADD_F90_GPUFORT_CPP
#include "cudafor-fort2x.cpp"

// BEGIN hostdevicefun 

/**
   HIP C++ implementation of the function/loop body of:

      attributes(host,device) subroutine hostdeviceFun(i,a,x,y,N)
        implicit none
        integer :: i,N
        real :: x(N), y(N), a
        if (i < N) then
          y(i) = y(i) + a*x(i)
        endif
      end subroutine

*/

__global__ void  hostdevicefun(
    int i,
    float a,
    gpufort::array1<float> x,
    gpufort::array1<float> y,
    int n
){
  if ((i<n)) {
    y(i)=(y(i)+a*x(i));
  }
}

// END hostdevicefun 

// BEGIN gpukernel 

/**
   HIP C++ implementation of the function/loop body of:

      attributes(global) subroutine gpuKernel(a,x,y,N)
        use devicelib
        implicit none
        integer :: i,N
        real :: x(N), y(N), a
        i = threadidx%x + (blockIdx%x-1)*blockDim%x
        if (i <= N) then
          call deviceFun(a,x(i),y(i),N)
        endif
      end subroutine

*/

__global__ void  gpukernel(
    float a,
    gpufort::array1<float> x,
    gpufort::array1<float> y,
    int n
){
  int i;
  i=((1+threadIdx.x)+((1+blockIdx.x)-1)*blockDim.x);
  if ((i<=n)) {
    devicefun(a,x(i),y(i),n);
  }
}

// END gpukernel 

// BEGIN gpukernel 

extern "C" hipError_t launch_gpukernel_hip_(
    dim3& grid,
    dim3& block,
    const int& sharedmem,
    hipStream_t& stream,
    float& a,
    gpufort::array1<float>& x,
    gpufort::array1<float>& y,
    int& n) {
  hipError_t ierr = hipSuccess;
  hipLaunchKernelGGL((gpukernel), grid, block, sharedmem, stream, a,x,y,n);
  #if defined(SYNCHRONIZE_ALL) || defined(SYNCHRONIZE_gpukernel)
  HIP_CHECK(hipStreamSynchronize(stream));
  #elif defined(SYNCHRONIZE_DEVICE_ALL) || defined(SYNCHRONIZE_DEVICE_gpukernel)
  HIP_CHECK(hipDeviceSynchronize());
  #endif
  ierr = hipGetLastError();	
  if ( ierr != hipSuccess ) return ierr;
  return ierr;
}

extern "C" hipError_t launch_gpukernel_hip_ps_(
    dim3& problem_size,
    dim3& block,
    const int& sharedmem,
    hipStream_t& stream,
    float& a,
    gpufort::array1<float>& x,
    gpufort::array1<float>& y,
    int& n) {
  hipError_t ierr = hipSuccess;
  dim3 grid(divideAndRoundUp(problem_size.x,block.x),
            divideAndRoundUp(problem_size.y,block.y),
            divideAndRoundUp(problem_size.z,block.z));   
  hipLaunchKernelGGL((gpukernel), grid, block, sharedmem, stream, a,x,y,n);
  #if defined(SYNCHRONIZE_ALL) || defined(SYNCHRONIZE_gpukernel)
  HIP_CHECK(hipStreamSynchronize(stream));
  #elif defined(SYNCHRONIZE_DEVICE_ALL) || defined(SYNCHRONIZE_DEVICE_gpukernel)
  HIP_CHECK(hipDeviceSynchronize());
  #endif
  ierr = hipGetLastError();	
  if ( ierr != hipSuccess ) return ierr;
  return ierr;
}

// END gpukernel 
#endif // VECTOR_ADD_F90_GPUFORT_CPP