#ifdef _GPUFORT
! This file was generated by GPUFORT
#endif
! SPDX-License-Identifier: MIT
! Copyright (c) 2020-2022 Advanced Micro Devices, Inc. All rights reserved.
#ifdef _GPUFORT
program main
  use iso_c_binding
  use hipfort_check
  use hipfort
#else
program main
  use cudafor
#endif
  implicit none
  integer, parameter :: N = 40000
  real :: x(N), y(N), a
#ifdef _GPUFORT
  real,pointer,dimension(:) :: x_d
  real,pointer,dimension(:) :: y_d
#else
  real, device, allocatable :: x_d(:)
  real, allocatable :: y_d(:)
#endif
  !real, device :: x_d(N), y_d(N) ! fixed-size arrays are not fully 
                       ! supported yet as alloc/dealloc are not generated yet
  type(dim3) :: grid, tBlock
  integer :: i

#ifndef _GPUFORT
  attributes(device) :: y_d
#endif

  tBlock = dim3(256,1,1)
  grid = dim3(ceiling(real(N)/tBlock%x),1,1)

#ifdef _GPUFORT
  call hipCheck(hipMalloc(x_d, N))
  call hipCheck(hipMalloc(y_d, N))
#else
  allocate(x_d(N),y_d(N))
#endif

  x = 1.0; y = 2.0; a = 2.0
#ifdef _GPUFORT
  call hipCheck(hipMemcpy(x_d, x, hipMemcpyHostToDevice))
  call hipCheck(hipMemcpy(y_d, y, hipMemcpyHostToDevice))
  
  call launch_gpuKernel(grid,tBlock,0,c_null_ptr,a,c_loc(x_d),size(x_d,1),lbound(x_d,1),c_loc(y_d),size(y_d,1),lbound(y_d,1),N)

  call hipCheck(hipMemcpy(y, y_d, hipMemcpyDeviceToHost))

  call hipCheck(hipFree(x_d))
  call hipCheck(hipFree(y_d))
#else
  x_d = x
  y_d = y
  
  call gpuKernel<<<grid, tBlock>>>(a,x_d,y_d,N)

  y = y_d

  deallocate(x_d,y_d)
#endif

  write(*,*) 'Max error: ', maxval(abs(y-4.0))

contains 
  
#ifdef _GPUFORT
   subroutine hostFun(i,a,x,y,N)
#else
   attributes(host) subroutine hostFun(i,a,x,y,N)
#endif
     implicit none
     integer :: i,N
     real :: x(N), y(N), a
     if (i < N) then
       y(i) = y(i) + a*x(i)
     endif
   end subroutine
   
#ifdef _GPUFORT
   subroutine hostdeviceFun(i,a,x,y,N)
     implicit none
     integer :: i,N
     real :: x(N), y(N), a
     if (i < N) then
       y(i) = y(i) + a*x(i)
     endif
   end subroutine

   ! extracted to HIP C++ file
#else
   attributes(host,device) subroutine hostdeviceFun(i,a,x,y,N)
     implicit none
     integer :: i,N
     real :: x(N), y(N), a
     if (i < N) then
       y(i) = y(i) + a*x(i)
     endif
   end subroutine

   attributes(global) subroutine gpuKernel(a,x,y,N)
     use devicelib
     implicit none
     integer :: i,N
     real :: x(N), y(N), a
     i = threadidx%x + (blockIdx%x-1)*blockDim%x
     if (i <= N) then
       call deviceFun(a,x(i),y(i),N)
     endif
   end subroutine
#endif
end program main