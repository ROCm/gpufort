// This file was generated by GPUFORT

#ifndef VECTOR_ADD_MODULE_VARS_F90_GPUFORT_CPP
#define VECTOR_ADD_MODULE_VARS_F90_GPUFORT_CPP
#include "datatypes-fort2x.cpp"

// BEGIN main_23 b349fc

/**
   HIP C++ implementation of the function/loop body of:

     !$acc parallel loop
     do i = 1, N
       x1(i) = 1
       x2(i) = 1
       y(i) = 2
     end do

*/

__global__ void  main_23(
    gpufort::array1<int> x1,
    int i,
    gpufort::array1<int> x2,
    gpufort::array1<int> y,
    int n
){
  int i = 1 + (1)*(threadIdx.x + blockIdx.x * blockDim.x);
  if (loop_cond(i,n,1)) {
    x1(i)=1;
    x2(i)=1;
    y(i)=2;
  }
}

// END main_23 b349fc

// BEGIN main_30 751176

/**
   HIP C++ implementation of the function/loop body of:

     !$acc parallel loop
     do i = 1, N
       y(i) = x1(i) + x2(i) + y(i)
     end do

*/

__global__ void  main_30(
    gpufort::array1<int> y,
    int i,
    gpufort::array1<int> x1,
    gpufort::array1<int> x2,
    int n
){
  int i = 1 + (1)*(threadIdx.x + blockIdx.x * blockDim.x);
  if (loop_cond(i,n,1)) {
    y(i)=(x1(i)+x2(i)+y(i));
  }
}

// END main_30 751176

// BEGIN main_23 b349fc

extern "C" hipError_t launch_main_23_hip_(
    dim3& grid,
    dim3& block,
    const int& sharedmem,
    hipStream_t& stream,
    gpufort::array1<int>& x1,
    int& i,
    gpufort::array1<int>& x2,
    gpufort::array1<int>& y,
    int& n) {
  hipError_t ierr = hipSuccess;
  hipLaunchKernelGGL((main_23), grid, block, sharedmem, stream, x1,i,x2,y,n);
  #if defined(SYNCHRONIZE_ALL) || defined(SYNCHRONIZE_main_23)
  HIP_CHECK(hipStreamSynchronize(stream));
  #elif defined(SYNCHRONIZE_DEVICE_ALL) || defined(SYNCHRONIZE_DEVICE_main_23)
  HIP_CHECK(hipDeviceSynchronize());
  #endif
  ierr = hipGetLastError();	
  if ( ierr != hipSuccess ) return ierr;
  return ierr;
}

extern "C" hipError_t launch_main_23_hip_ps_(
    dim3& problem_size,
    dim3& block,
    const int& sharedmem,
    hipStream_t& stream,
    gpufort::array1<int>& x1,
    int& i,
    gpufort::array1<int>& x2,
    gpufort::array1<int>& y,
    int& n) {
  hipError_t ierr = hipSuccess;
  dim3 grid(divideAndRoundUp(problem_size.x,block.x),
            divideAndRoundUp(problem_size.y,block.y),
            divideAndRoundUp(problem_size.z,block.z));   
  hipLaunchKernelGGL((main_23), grid, block, sharedmem, stream, x1,i,x2,y,n);
  #if defined(SYNCHRONIZE_ALL) || defined(SYNCHRONIZE_main_23)
  HIP_CHECK(hipStreamSynchronize(stream));
  #elif defined(SYNCHRONIZE_DEVICE_ALL) || defined(SYNCHRONIZE_DEVICE_main_23)
  HIP_CHECK(hipDeviceSynchronize());
  #endif
  ierr = hipGetLastError();	
  if ( ierr != hipSuccess ) return ierr;
  return ierr;
}

// END main_23 b349fc

// BEGIN main_30 751176

extern "C" hipError_t launch_main_30_hip_(
    dim3& grid,
    dim3& block,
    const int& sharedmem,
    hipStream_t& stream,
    gpufort::array1<int>& y,
    int& i,
    gpufort::array1<int>& x1,
    gpufort::array1<int>& x2,
    int& n) {
  hipError_t ierr = hipSuccess;
  hipLaunchKernelGGL((main_30), grid, block, sharedmem, stream, y,i,x1,x2,n);
  #if defined(SYNCHRONIZE_ALL) || defined(SYNCHRONIZE_main_30)
  HIP_CHECK(hipStreamSynchronize(stream));
  #elif defined(SYNCHRONIZE_DEVICE_ALL) || defined(SYNCHRONIZE_DEVICE_main_30)
  HIP_CHECK(hipDeviceSynchronize());
  #endif
  ierr = hipGetLastError();	
  if ( ierr != hipSuccess ) return ierr;
  return ierr;
}

extern "C" hipError_t launch_main_30_hip_ps_(
    dim3& problem_size,
    dim3& block,
    const int& sharedmem,
    hipStream_t& stream,
    gpufort::array1<int>& y,
    int& i,
    gpufort::array1<int>& x1,
    gpufort::array1<int>& x2,
    int& n) {
  hipError_t ierr = hipSuccess;
  dim3 grid(divideAndRoundUp(problem_size.x,block.x),
            divideAndRoundUp(problem_size.y,block.y),
            divideAndRoundUp(problem_size.z,block.z));   
  hipLaunchKernelGGL((main_30), grid, block, sharedmem, stream, y,i,x1,x2,n);
  #if defined(SYNCHRONIZE_ALL) || defined(SYNCHRONIZE_main_30)
  HIP_CHECK(hipStreamSynchronize(stream));
  #elif defined(SYNCHRONIZE_DEVICE_ALL) || defined(SYNCHRONIZE_DEVICE_main_30)
  HIP_CHECK(hipDeviceSynchronize());
  #endif
  ierr = hipGetLastError();	
  if ( ierr != hipSuccess ) return ierr;
  return ierr;
}

// END main_30 751176
#endif // VECTOR_ADD_MODULE_VARS_F90_GPUFORT_CPP
