// This file was generated by GPUFORT

#ifndef VECTOR_ADD_PROCEDURES_F90_GPUFORT_CPP
#define VECTOR_ADD_PROCEDURES_F90_GPUFORT_CPP

// BEGIN vector_add_gpu_36 173b19

/**
   HIP C++ implementation of the function/loop body of:

     !$acc parallel loop
     do i = 1, N
       y(i) = x(i) + y(i)
     end do

*/

__global__ void  vector_add_gpu_36(
    gpufort::array1<int> y,
    int i,
    gpufort::array1<int> x,
    int n
){
  int i = 1 + (1)*(threadIdx.x + blockIdx.x * blockDim.x);
  if (loop_cond(i,n,1)) {
    y(i)=(x(i)+y(i));
  }
}

// END vector_add_gpu_36 173b19

// BEGIN vector_add_gpu_36 173b19

/**
   HIP C++ implementation of the function/loop body of:

     !$acc parallel loop
     do i = 1, N
       y(i) = x(i) + y(i)
     end do

*/

__global__ void  vector_add_gpu_36(
    gpufort::array1<int> y,
    int i,
    gpufort::array1<int> x,
    int n
){
  int i = 1 + (1)*(threadIdx.x + blockIdx.x * blockDim.x);
  if (loop_cond(i,n,1)) {
    y(i)=(x(i)+y(i));
  }
}

// END vector_add_gpu_36 173b19

// BEGIN vector_add_gpu_36 173b19

extern "C" hipError_t launch_vector_add_gpu_36_hip_(
    dim3& grid,
    dim3& block,
    const int& sharedmem,
    hipStream_t& stream,
    gpufort::array1<int>& y,
    int& i,
    gpufort::array1<int>& x,
    int& n) {
  hipError_t ierr = hipSuccess;
  hipLaunchKernelGGL((vector_add_gpu_36), grid, block, sharedmem, stream, y,i,x,n);
  #if defined(SYNCHRONIZE_ALL) || defined(SYNCHRONIZE_vector_add_gpu_36)
  HIP_CHECK(hipStreamSynchronize(stream));
  #elif defined(SYNCHRONIZE_DEVICE_ALL) || defined(SYNCHRONIZE_DEVICE_vector_add_gpu_36)
  HIP_CHECK(hipDeviceSynchronize());
  #endif
  ierr = hipGetLastError();	
  if ( ierr != hipSuccess ) return ierr;
  return ierr;
}

extern "C" hipError_t launch_vector_add_gpu_36_hip_ps_(
    dim3& problem_size,
    dim3& block,
    const int& sharedmem,
    hipStream_t& stream,
    gpufort::array1<int>& y,
    int& i,
    gpufort::array1<int>& x,
    int& n) {
  hipError_t ierr = hipSuccess;
  dim3 grid(divideAndRoundUp(problem_size.x,block.x),
            divideAndRoundUp(problem_size.y,block.y),
            divideAndRoundUp(problem_size.z,block.z));   
  hipLaunchKernelGGL((vector_add_gpu_36), grid, block, sharedmem, stream, y,i,x,n);
  #if defined(SYNCHRONIZE_ALL) || defined(SYNCHRONIZE_vector_add_gpu_36)
  HIP_CHECK(hipStreamSynchronize(stream));
  #elif defined(SYNCHRONIZE_DEVICE_ALL) || defined(SYNCHRONIZE_DEVICE_vector_add_gpu_36)
  HIP_CHECK(hipDeviceSynchronize());
  #endif
  ierr = hipGetLastError();	
  if ( ierr != hipSuccess ) return ierr;
  return ierr;
}

// END vector_add_gpu_36 173b19

// BEGIN vector_add_gpu_36 173b19

extern "C" hipError_t launch_vector_add_gpu_36_hip_(
    dim3& grid,
    dim3& block,
    const int& sharedmem,
    hipStream_t& stream,
    gpufort::array1<int>& y,
    int& i,
    gpufort::array1<int>& x,
    int& n) {
  hipError_t ierr = hipSuccess;
  hipLaunchKernelGGL((vector_add_gpu_36), grid, block, sharedmem, stream, y,i,x,n);
  #if defined(SYNCHRONIZE_ALL) || defined(SYNCHRONIZE_vector_add_gpu_36)
  HIP_CHECK(hipStreamSynchronize(stream));
  #elif defined(SYNCHRONIZE_DEVICE_ALL) || defined(SYNCHRONIZE_DEVICE_vector_add_gpu_36)
  HIP_CHECK(hipDeviceSynchronize());
  #endif
  ierr = hipGetLastError();	
  if ( ierr != hipSuccess ) return ierr;
  return ierr;
}

extern "C" hipError_t launch_vector_add_gpu_36_hip_ps_(
    dim3& problem_size,
    dim3& block,
    const int& sharedmem,
    hipStream_t& stream,
    gpufort::array1<int>& y,
    int& i,
    gpufort::array1<int>& x,
    int& n) {
  hipError_t ierr = hipSuccess;
  dim3 grid(divideAndRoundUp(problem_size.x,block.x),
            divideAndRoundUp(problem_size.y,block.y),
            divideAndRoundUp(problem_size.z,block.z));   
  hipLaunchKernelGGL((vector_add_gpu_36), grid, block, sharedmem, stream, y,i,x,n);
  #if defined(SYNCHRONIZE_ALL) || defined(SYNCHRONIZE_vector_add_gpu_36)
  HIP_CHECK(hipStreamSynchronize(stream));
  #elif defined(SYNCHRONIZE_DEVICE_ALL) || defined(SYNCHRONIZE_DEVICE_vector_add_gpu_36)
  HIP_CHECK(hipDeviceSynchronize());
  #endif
  ierr = hipGetLastError();	
  if ( ierr != hipSuccess ) return ierr;
  return ierr;
}

// END vector_add_gpu_36 173b19
#endif // VECTOR_ADD_PROCEDURES_F90_GPUFORT_CPP