# SPDX-License-Identifier: MIT                                                
# Copyright (c) 2021 GPUFORT Advanced Micro Devices, Inc. All rights reserved.
import os
import copy
import logging

import addtoplevelpath
import fort2hip.model as model
import translator.translator as translator
import indexer.indexer as indexer
import indexer.scoper as scoper
import scanner.scanner as scanner
import utils.logging
import utils.fileutils

INDEXER_ERROR_CODE = 1000

def GET_DEFAULT_BLOCK_DIMS(kernelName,dim):
    block_dims = { 1 : [128], 2 : [128,1,1], 3: [128,1,1] }
    return block_dims[dim]

def GET_DEFAULT_LAUNCH_BOUNDS(kernelName):
    return None

fort2hipDir = os.path.dirname(__file__)
exec(open("{0}/fort2hip_options.py.in".format(fort2hipDir)).read())

def __convertDim3(dim3,dimensions,doFilter=True):
     result = []
     specified = dim3
     if doFilter:
         specified = [ x for x in dim3 if type(x) != int or x > 0 ]
     for i,value in enumerate(specified):
          if i >= dimensions:
              break
          el = {}
          el["dim"]   = chr(ord("X")+i)
          el["value"] = value
          result.append(el)
     return result

# arg for kernel generator
# array is split into multiple args
def __initArg(argName,fType,kind,qualifiers=[],cType="",isArray=False):
    fTypeFinal = fType
    if len(kind):
        fTypeFinal += "({})".format(kind)
    arg = {
      "name"            : argName.replace("%","_") , # TODO structures
      "callArgName"     : argName,
      "qualifiers"      : qualifiers,
      "type"            : fTypeFinal,
      "origType"        : fTypeFinal,
      "cType"           : cType,
      "cSize"           : "",
      "cValue"          : "",
      "cSuffix"         : "", # TODO still needed?
      "isArray"         : isArray,
      "reductionOp"     : "",
      "bytesPerElement" : translator.bytes(fType,kind,default="-1")
    }
    if not len(cType):
        arg["cType"] = translator.convertToCType(fType,kind,"void")
    if isArray:
        arg["cType"] += " * __restrict__"
    return arg

def __createArgumentContext(indexedVar,argName,deviceptrNames=[],isLoopKernelArg=False):
    """
    Create an argument context dictionary based on a indexed variable.

    :param indexedVar: A variable description provided by the indexer.
    :type indexedVar: STDeclaration
    :return: a dicts containing Fortran `type` and `qualifiers` (`type`, `qualifiers`), C type (`cType`), and `name` of the argument
    :rtype: dict
    """
    arg = __initArg(argName,indexedVar["fType"],indexedVar["kind"],[ "value" ],"",indexedVar["rank"]>0)
    if indexedVar["parameter"] and not indexedVar["value"] is None:
        arg["cValue"] = indexedVar["value"] 
    lowerBoundArgs = []  # additional arguments that we introduce if variable is an array
    countArgs      = []
    macro          = None
    # treat arrays
    rank = indexedVar["rank"] 
    if rank > 0:
        if argName in deviceptrNames:
            arg["callArgName"] = "c_loc({})".format(argName)
        else: 
            arg["callArgName"] = scanner.devVarName(argName)
        arg["type"]       = "type(c_ptr)"
        arg["qualifiers"] = [ "value" ]
        for d in range(1,rank+1):
             # lower bounds
             boundArg = __initArg("{}_lb{}".format(argName,d),"integer","c_int",["value","intent(in)"],"const int")
             boundArg["callArgName"] = "lbound({},{})".format(argName,d)
             lowerBoundArgs.append(boundArg)
             # number of elements per dimensions
             countArg = __initArg("{}_n{}".format(argName,d),"integer","c_int",["value","intent(in)"],"const int")
             countArg["callArgName"] = "size({},{})".format(argName,d)
             countArgs.append(countArg)
        # create macro expression
        if isLoopKernelArg and not indexedVar["unspecifiedBounds"]:
            macro = { "expr" : indexedVar["indexMacro"] }
        else:
            macro = { "expr" : indexedVar["indexMacroWithPlaceHolders"] }
    return arg, lowerBoundArgs, countArgs, macro

def __deriveKernelArguments(scope, identifiers, localVars, loopVars, whiteList=[], isLoopKernelArg=False, deviceptrNames=[]):
    """
    Derive code generation contexts for the different interfaces and subroutines that 
    are generated by the fort2hip module.

    :param: identifiers a list of Fortran identifiers or derived type memebers such as 'a%b%c'
    """
    utils.logging.logEnterFunction(LOG_PREFIX,"__deriveKernelArguments")
    
    kernelArgs          = []
    unknownArgs         = []
    cKernelLocalVars    = []
    macros              = []
    localArgs           = []
    localCpuRoutineArgs = []
    inputArrays         = []

    def includeArgument(name):
        nameLower = name.lower().strip()
        if len(whiteList):
            return nameLower in whiteList
        else:
            if nameLower.startswith("_"): # Fortran names never start with _; can be exploited when modifying code
                return False
            else:
                return True
    identifiersLower = [ident.lower() for ident in identifiers]

    for name in identifiersLower:
        if includeArgument(name):
            indexedVar, discovered = scoper.searchScopeForVariable(\
              scope,translator.createIndexSearchTagForVariable(name)) # TODO treat implicit here
            argName = name
            if not discovered:
                arg = __initArg(name,"TODO declaration not found","",[],"TODO declaration not found")
                unknownArgs.append(arg)
            else:
                arg, lowerBoundArgs, countArgs, macro = __createArgumentContext(indexedVar,name,deviceptrNames)
                argName = name.lower().replace("%","_") # TODO
                # modify argument
                if argName in loopVars: # specific for loop kernels
                    arg["qualifiers"]=[]
                    localCpuRoutineArgs.append(arg)
                elif argName in localVars:
                    arg["qualifiers"]=[]
                    if indexedVar["rank"] > 0:
                        arg["cSize"] = indexedVar["totalCount"]
                    localCpuRoutineArgs.append(arg)
                    cKernelLocalVars.append(arg)
                else:
                    rank = indexedVar["rank"]
                    if rank > 0: 
                        inputArrays.append({ "name" : name, "rank" : rank })
                        arg["cSize"]    = ""
                        dimensions = "dimension({0})".format(",".join([":"]*rank))
                        # Fortran size expression for allocate
                        fSize = []
                        for i in range(0,rank):
                            fSize.append("{lb}:{lb}+{siz}-1".format(\
                                lb=lowerBoundArgs[i]["name"],siz=countArgs[i]["name"]))
                        localCpuRoutineArgs.append(\
                          { "name" : name,
                            "type" : arg["origType"],
                            "qualifiers" : ["allocatable",dimensions,"target"],
                            "bounds" : ",".join(fSize),
                            "bytesPerElement" : arg["bytesPerElement"]
                          }\
                        )
                    kernelArgs.append(arg)
                    for countArg in countArgs:
                        kernelArgs.append(countArg)
                    for boundArg in lowerBoundArgs:
                        kernelArgs.append(boundArg)
                if not macro is None:
                    macros.append(macro)

    # remove unknown arguments that are actually bound variables (<arg>_n<dim> or <arg>_lb<dim>)
    for unknownKernelArg in unknownArgs:
        append = True
        for kernelArg in kernelArgs:
            if unknownKernelArg["name"].lower() == kernelArg["name"].lower():
                append = False
                break
        if append:
            kernelArgs.append(unknownKernelArg)

    utils.logging.logLeaveFunction(LOG_PREFIX,"__deriveKernelArguments")
    return kernelArgs, cKernelLocalVars, macros, inputArrays, localCpuRoutineArgs
    
def __update_context_from_loop_kernels(loop_kernels,index,hipContext,fContext):
    """
    loop_kernels is a list of STCufloop_kernel objects.
    hipContext, fContext are inout arguments for generating C/Fortran files, respectively.
    """
    utils.logging.logEnterFunction(LOG_PREFIX,"__updateContextFromLoopKernels")
    
    generateLauncher    = EMIT_KERNEL_LAUNCHER
    generateCPULauncher = generateLauncher and EMIT_CPU_IMPLEMENTATION
    
    hipContext["haveReductions"] = False
    for stkernel in loop_kernels:
        parentTag = stkernel._parent.tag()
        scope     = scoper.createScope(index,parentTag)
   
        # translate and analyze kernels
        kernelParseResult = translator.parse_loop_kernel(stkernel.code,scope)

        kernelArgs, cKernelLocalVars, macros, inputArrays, localCpuRoutineArgs =\
          __deriveKernelArguments(scope,\
            kernelParseResult.identifiersInBody(),\
            kernelParseResult.localScalars(),\
            kernelParseResult.loopVars(),\
            [], True, kernelParseResult.deviceptrs())

        # general
        kernelName         = stkernel.kernelName()
        kernelLauncherName = stkernel.kernelLauncherName()
   
        # treat reductionVars vars / acc default(present) vars
        hipContext["haveReductions"] = False # |= len(reductionOps)
        kernelCallArgNames    = []
        cpuKernelCallArgNames = []
        reductions            = kernelParseResult.gangTeamReductions(translator.make_c_str)
        reductionVars         = []
        for arg in kernelArgs:
            name  = arg["name"]
            cType = arg["cType"]
            cpuKernelCallArgNames.append(name)
            isReductionVar = False
            for op,variables in reductions.items():
                if name.lower() in [var.lower() for var in variables]:
                    # modify argument
                    arg["qualifiers"].remove("value")
                    arg["cType"] = cType + "*"
                    # reductionVars buffer var
                    bufferName = "_d_" + name
                    var = { "buffer": bufferName, "name" : name, "type" : cType, "op" : op }
                    reductionVars.append(var)
                    # call args
                    kernelCallArgNames.append(bufferName)
                    isReductionVar = True
            if not isReductionVar:
                kernelCallArgNames.append(name)
                if type(stkernel) is scanner.STAccLoopKernel:
                    if len(arg["cSize"]):
                        stkernel.appendDefaultPresentVar(name)
            hipContext["haveReductions"] |= isReductionVar
        # C loop kernel
        dimensions  = kernelParseResult.numDimensions()
        block = __convertDim3(kernelParseResult.numThreadsInBlock(),dimensions)
        # TODO more logging
        if not len(block):
            defaultBlockSize = GET_BLOCK_DIMS(kernelName,dimensions)
            block = __convertDim3(defaultBlockSize,dimensions)
        hipKernelDict = {}
        hipKernelDict["isLoopKernel"]          = True
        hipKernelDict["modifier"]              = "__global__"
        hipKernelDict["returnType"]            = "void"
        hipKernelDict["generateDebugCode"]     = EMIT_DEBUG_CODE
        hipKernelDict["generateLauncher"]      = generateLauncher 
        hipKernelDict["generateCPULauncher"]   = generateCPULauncher
        
        launchBounds = GET_LAUNCH_BOUNDS(kernelName)
        if launchBounds != None and len(launchBounds):
            hipKernelDict["launchBounds"]      = "__launch_bounds__({})".format(launchBounds)
        else:
            hipKernelDict["launchBounds"]      = ""
        hipKernelDict["size"]                  = __convertDim3(kernelParseResult.problemSize(),dimensions,doFilter=False)
        hipKernelDict["grid"]                  = __convertDim3(kernelParseResult.numGangsTeamsBlocks(),dimensions)
        hipKernelDict["block"]                 = block
        hipKernelDict["gridDims"  ]            = [ "{}_grid{}".format(kernelName,x["dim"])  for x in block ] # grid might not be always defined
        hipKernelDict["blockDims"  ]           = [ "{}_block{}".format(kernelName,x["dim"]) for x in block ]
        hipKernelDict["kernelName"]            = kernelName
        hipKernelDict["macros"]                = macros
        hipKernelDict["cBody"]                 = kernelParseResult.c_str()
        originalSnippet = "".join(stkernel.lines())
        if PRETTIFY_EMITTED_FORTRAN_CODE:
            hipKernelDict["fBody"]                 = utils.fileutils.prettifyFCode(originalSnippet)
        else:
            hipKernelDict["fBody"]                 = originalSnippet
        hipKernelDict["kernelArgs"]            = ["{} {}{}{}".format(a["cType"],a["name"],a["cSize"],a["cSuffix"]) for a in kernelArgs]
        hipKernelDict["kernelCallArgNames"]    = kernelCallArgNames
        hipKernelDict["cpuKernelCallArgNames"] = cpuKernelCallArgNames
        hipKernelDict["reductions"]            = reductionVars
        hipKernelDict["kernelLocalVars"]       = ["{} {}{}".format(a["cType"],a["name"],a["cSize"]) for a in cKernelLocalVars]
        hipKernelDict["interfaceName"]         = kernelLauncherName
        hipKernelDict["interfaceComment"]      = "" # kernelLaunchInfo.c_str()
        hipKernelDict["interfaceArgs"]         = hipKernelDict["kernelArgs"]
        hipKernelDict["interfaceArgNames"]     = [arg["name"] for arg in kernelArgs] # excludes the stream;
        hipKernelDict["inputArrays"]           = inputArrays
        #inoutArraysInBody                   = [name.lower for name in kernelParseResult.inoutArraysInBody()]
        #hipKernelDict["outputArrays"]       = [array for array in inputArrays if array.lower() in inoutArraysInBody]
        hipKernelDict["outputArrays"]          = inputArrays
        hipContext["kernels"].append(hipKernelDict)

        if generateLauncher:
            # Fortran interface with automatic derivation of stkernel launch parameters
            fInterfaceDictAuto = {}
            fInterfaceDictAuto["cName"]    = kernelLauncherName + "_auto"
            fInterfaceDictAuto["fName"]    = kernelLauncherName + "_auto"
            fInterfaceDictAuto["type"]     = "subroutine"
            fInterfaceDictAuto["args"]     = [
              {"type" : "integer(c_int)", "qualifiers" : ["value", "intent(in)"], "name" : "sharedMem", "cSize" : "" },
              {"type" : "type(c_ptr)"   , "qualifiers" : ["value", "intent(in)"], "name" : "stream",   "cSize": ""},
            ]
            fInterfaceDictAuto["args"]    += kernelArgs
            fInterfaceDictAuto["argNames"] = [arg["name"] for arg in fInterfaceDictAuto["args"]]

            # for test
            fInterfaceDictAuto["doTest"]   = False # True
            fInterfaceDictAuto["testComment"] = ["Fortran implementation:"] + f_snippet.split("\n")
            #fInterfaceDictAuto["testComment"] = ["","Hints:","Device variables in scope:"] + ["".join(declared.lines()).lower() for declared in deviceVarsInScope]

            #######################################################################
            # Feed argument names back to STLoopKernel for host code modification
            #######################################################################
            stkernel.kernelArgNames = [arg["callArgName"] for arg in kernelArgs]
            stkernel.gridFStr       = kernelParseResult.gridExpressionFStr()
            stkernel.blockFStr      = kernelParseResult.blockExpressionFStr()
            # TODO use indexer to check if block and dim expressions are actually dim3 types or introduce overloaded make_dim3 interface to hipfort
            stkernel.streamFStr     = kernelParseResult.stream()    # TODO consistency
            stkernel.sharedMemFstr  = kernelParseResult.sharedMem() # TODO consistency

            # Fortran interface with manual specification of stkernel launch parameters
            fInterfaceDictManual = copy.deepcopy(fInterfaceDictAuto)
            fInterfaceDictManual["cName"] = kernelLauncherName
            fInterfaceDictManual["fName"] = kernelLauncherName
            fInterfaceDictManual["args"] = [
              {"type" : "type(dim3)", "qualifiers" : ["intent(in)"], "name" : "grid", "cSize": ""},
              {"type" : "type(dim3)", "qualifiers" : ["intent(in)"], "name" : "block", "cSize": ""},
              {"type" : "integer(c_int)", "qualifiers" : ["value", "intent(in)"], "name" : "sharedMem", "cSize" : "" },
              {"type" : "type(c_ptr)"   , "qualifiers" : ["value", "intent(in)"], "name" : "stream",   "cSize": ""},
            ]
            fInterfaceDictManual["args"]    += kernelArgs
            fInterfaceDictManual["argNames"] = [arg["name"] for arg in fInterfaceDictManual["args"]]
            fInterfaceDictManual["doTest"]   = False
            
            fContext["interfaces"].append(fInterfaceDictManual)
            fContext["interfaces"].append(fInterfaceDictAuto)

            if generateCPULauncher:
                # External CPU interface
                fCPUInterfaceDict = copy.deepcopy(fInterfaceDictAuto)
                fCPUInterfaceDict["fName"] = kernelLauncherName + "_cpu" 
                fCPUInterfaceDict["cName"] = kernelLauncherName + "_cpu"
                fCPUInterfaceDict["doTest"] = False

                # Internal CPU routine
                fCPURoutineDict = copy.deepcopy(fInterfaceDictAuto)
                fCPURoutineDict["fName"]    = kernelLauncherName + "_cpu1" 
                fCPURoutineDict["cName"]    = kernelLauncherName + "_cpu1"
                
                # rename copied modified args
                for i,val in enumerate(fCPURoutineDict["args"]):
                    varName = val["name"]
                    if val.get("isArray",False):
                        fCPURoutineDict["args"][i]["name"] = "d_{}".format(varName)

                fCPURoutineDict["argNames"] = [a["name"] for a in fCPURoutineDict["args"]]
                fCPURoutineDict["args"]    += localCpuRoutineArgs # ordering important
                # add mallocs, memcpys , frees
                prolog = ""
                epilog = "\n"
                for arg in localCpuRoutineArgs:
                     if len(arg.get("bounds","")): # is local Fortran array
                       localArray = arg["name"]
                       # device to host
                       prolog += "allocate({var}({bounds}))\n".format(var=localArray,bounds=arg["bounds"])
                       prolog += "CALL hipCheck(hipMemcpy(c_loc({var}),d_{var},{bpe}_8*SIZE({var}),hipMemcpyDeviceToHost))\n".format(var=localArray,bpe=arg["bytesPerElement"])
                       # host to device
                       epilog += "CALL hipCheck(hipMemcpy(d_{var},c_loc({var}),{bpe}_8*SIZE({var}),hipMemcpyHostToDevice))\n".format(var=localArray,bpe=arg["bytesPerElement"])
                       epilog += "deallocate({var})\n".format(var=localArray)
                fCPURoutineDict["body"] = prolog + f_snippet.rstrip("\n") + epilog

                # Add all definitions to context
                fContext["interfaces"].append(fCPUInterfaceDict)
                fContext["routines"].append(fCPURoutineDict)
    
    utils.logging.logLeaveFunction(LOG_PREFIX,"__updateContextFromLoopKernels")

# TODO check if this can be combined with other routine
def __update_context_from_device_procedures(deviceProcedures,index,hipContext,fContext):
    """
    deviceProcedures is a list of STProcedure objects.
    hipContext, fContext are inout arguments for generating C/Fortran files, respectively.
    """
    global EMIT_KERNEL_LAUNCHER
    global EMIT_CPU_IMPLEMENTATION
    global EMIT_DEBUG_CODE

    utils.logging.logEnterFunction(LOG_PREFIX,"__update_context_from_device_procedures")
    
    for stprocedure in deviceProcedures:
        scope       = scoper.createScope(index,stprocedure.tag())
        iprocedure  = stprocedure._indexRecord
        isFunction  = iprocedure["kind"] == "function"
        
        hipContext["includes"] += __createIncludesFromUsedModules(iprocedure,index)

        fBody = "\n".join(stprocedure.code)
        if isFunction:
            resultName = indexValue["resultName"]
            resultVar = next([var for var in iprocedure["variables"] if var["name"] == indexValue["resultName"]],None)
            if resultVar != None:
                resultType = resultVar["cType"]
                parseResult = translator.parse_procedure_body(stprocedure.code,scope,iprocedure,resultVar["name"])
            else:
                msg = "could not identify return value for function ''"
                utils.logging.logError(msg)
                sys.exit(INDEXER_ERROR_CODE)
        else:
            resultType = "void"
            parseResult = translator.parse_procedure_body(stprocedure.code,scope,iprocedure)

        # TODO: look up functions and subroutines called internally and supply to parseResult before calling c_str()
    
        ## general
        generateLauncher   = EMIT_KERNEL_LAUNCHER and stprocedure.isKernelSubroutine()
        kernelName         = iprocedure["name"]
        kernelLauncherName = "launch_" + kernelName
        loopVars = []; localLValues = []

        # sort identifiers: put dummy args first
        # TODO(dominic): More detailed analysis what to do with non-dummy args
        dummyArgs = iprocedure["dummyArgs"]
        nonDummyArgs = []
        for indexedVar in iprocedure["variables"]:
            if indexedVar["name"] not in dummyArgs:  
                nonDummyArgs.append(indexedVar["name"])
        identifiers = dummyArgs + nonDummyArgs

        kernelArgs, cKernelLocalVars, macros, inputArrays, localCpuRoutineArgs =\
          __deriveKernelArguments(scope,identifiers,localLValues,loopVars,dummyArgs,False,deviceptrNames=[])
        #print(argNames)

        # C routine and C stprocedure launcher
        hipKernelDict = {}
        launchBounds = GET_LAUNCH_BOUNDS(kernelName)
        if launchBounds != None and len(launchBounds) and stprocedure.isKernelSubroutine():
            hipKernelDict["launchBounds"]      = "__launch_bounds__({})".format(launchBounds)
        else:
            hipKernelDict["launchBounds"]      = ""
        hipKernelDict["generateDebugCode"]   = EMIT_DEBUG_CODE
        hipKernelDict["generateLauncher"]    = generateLauncher
        hipKernelDict["generateCPULauncher"] = False
        hipKernelDict["modifier"]            = "__global__" if stprocedure.isKernelSubroutine() else "__device__"
        hipKernelDict["returnType"]          = resultType
        hipKernelDict["isLoopKernel"]        = False
        hipKernelDict["kernelName"]          = kernelName
        hipKernelDict["macros"]              = macros
        hipKernelDict["cBody"]               = parseResult.c_str()
        hipKernelDict["fBody"]               = "".join(stprocedure.lines())
        hipKernelDict["kernelArgs"] = []
        # device procedures take all C args as reference or pointer
        # kernel proceduers take all C args as value or (device) pointer
        for arg in kernelArgs:
            cType = arg["cType"]
            if not stprocedure.isKernelSubroutine() and not arg["isArray"]:
                cType += "&"
            hipKernelDict["kernelArgs"].append(cType + " " + arg["name"])
        hipKernelDict["kernelLocalVars"]       = ["{0} {1}{2} {3}".format(a["cType"],a["name"],a["cSize"],"= " + a["cValue"] if "cValue" in a else "") for a in cKernelLocalVars]
        hipKernelDict["interfaceName"]         = kernelLauncherName
        hipKernelDict["interfaceArgs"]         = hipKernelDict["kernelArgs"]
        hipKernelDict["interfaceComment"]      = ""
        hipKernelDict["interfaceArgNames"]     = [arg["name"] for arg in kernelArgs]
        hipKernelDict["inputArrays"]           = inputArrays
        #inoutArraysInBody                   = [name.lower for name in kernelParseResult.inoutArraysInBody()]
        #hipKernelDict["outputArrays"]       = [array for array in inputArrays if array.lower() in inoutArraysInBody]
        hipKernelDict["outputArrays"]          = inputArrays
        hipKernelDict["kernelCallArgNames"]    = hipKernelDict["interfaceArgNames"] # TODO(05/12/21): Normally this information must be passed to other kernels
        hipKernelDict["cpuKernelCallArgNames"] = hipKernelDict["interfaceArgNames"] 
        hipKernelDict["reductions"]            = []
        hipContext["kernels"].append(hipKernelDict)

        if generateLauncher:
            # Fortran interface with manual specification of kernel launch parameters
            fInterfaceDictManual = {}
            fInterfaceDictManual["cName"]       = kernelLauncherName
            fInterfaceDictManual["fName"]       = kernelLauncherName
            fInterfaceDictManual["testComment"] = ["Fortran implementation:"] + stprocedure.lines()
            fInterfaceDictManual["type"]        = "subroutine"
            fInterfaceDictManual["args"]        = [
                {"type" : "type(dim3)", "qualifiers" : ["intent(in)"], "name" : "grid"},
                {"type" : "type(dim3)", "qualifiers" : ["intent(in)"], "name" : "block"},
                {"type" : "integer(c_int)", "qualifiers" : ["value", "intent(in)"], "name" : "sharedMem"},
                {"type" : "type(c_ptr)", "qualifiers" : ["value", "intent(in)"], "name" : "stream"},
            ]
            fInterfaceDictManual["args"]    += kernelArgs
            fInterfaceDictManual["argNames"] = [arg["name"] for arg in fInterfaceDictManual["args"]]
            fInterfaceDictManual["doTest"]   = True
            fContext["interfaces"].append(fInterfaceDictManual)
    
    utils.logging.logEnterFunction(LOG_PREFIX,"__update_context_from_device_procedures")

def __writeFile(outfilePath,kind,content):
    utils.logging.logEnterFunction(LOG_PREFIX,"__writeFile")
    
    with open(outfilePath,"w") as outfile:
        outfile.write(content)
        msg = "created {}: ".format(kind).ljust(40) + outfilePath
        utils.logging.logInfo(LOG_PREFIX,"__writeFile",msg)
    
    utils.logging.logLeaveFunction(LOG_PREFIX,"__writeFile")


def __createIncludesFromUsedModules(indexRecord,index):
    """Create include statement for a module's/subprogram's used modules that are present in the index."""
    usedModules  = [irecord["name"] for irecord in indexRecord["usedModules"]]
    includes     = []
    for irecord in index:
        if irecord["name"] in usedModules:
            includes.append(irecord["name"] + HIP_FILE_EXT)
    return includes
# API

def generateGpufortHeaders(outputDir):
    """Create the header files that all GPUFORT HIP kernels rely on."""
    utils.logging.logEnterFunction(LOG_PREFIX,"__renderTemplates",\
      {"outputDir": outputDir})
    
    gpufortHeaderFilePath = outputDir + "/gpufort.h"
    model.GpufortHeaderModel().generateFile(gpufortHeaderFilePath)
    msg = "created gpufort main header: ".ljust(40) + gpufortHeaderFilePath
    utils.logging.logInfo(LOG_PREFIX,"__renderTemplates",msg)
    
    gpufortReductionsHeaderFilePath = outputDir + "/gpufort_reductions.h"
    model.GpufortReductionsHeaderModel().generateFile(gpufortReductionsHeaderFilePath)
    msg = "created gpufort reductions header file: ".ljust(40) + gpufortReductionsHeaderFilePath
    utils.logging.logInfo(LOG_PREFIX,"__renderTemplates",msg)

    utils.logging.logLeaveFunction(LOG_PREFIX,"generateGpufortHeaders")


def generateHipFiles(stree,index,kernelsToConvertToHip,translationSourcePath,generateCode):
    """
    :param stree:        [inout] the scanner tree holds nodes that store the Fortran code lines of the kernels
    :param generateCode: generate code or just feed kernel signature information
                         back to the scanner tree.
    :note The signatures of the identified kernels must be fed back to the 
          scanner tree even when no kernel files are written.
    """
    global FORTRAN_MODULE_PREAMBLE
    global PRETTIFY_EMITTED_C_CODE
    global PRETTIFY_EMITTED_FORTRAN_CODE
    global CLANG_FORMAT_STYLE
    global FORTRAN_MODULE_FILE_EXT
    global HIP_FILE_EXT    
    global FORTRAN_MODULE_SUFFIX

    utils.logging.logEnterFunction(LOG_PREFIX,"generateHipFiles",\
      {"kernelsToConvertToHip":" ".join(kernelsToConvertToHip),\
       "translationSourcePath": translationSourcePath,\
       "generateCode":generateCode})
    def select_(kernel):
        nonlocal kernelsToConvertToHip
        if not len(kernelsToConvertToHip):
            return False
        else: 
            condition1 = not kernel._ignoreInS2STranslation
            condition2 = \
                    kernelsToConvertToHip[0] == "*" or\
                    kernel.minLineno() in kernelsToConvertToHip or\
                    kernel.kernelName() in kernelsToConvertToHip
            return condition1 and condition2
    def loop_kernelFilter_(child):
        return isinstance(child, scanner.STLoopKernel) and select_(child)
    def deviceProcedureFilter_(child):
        return type(child) is scanner.STProcedure and\
          child.mustBeAvailableOnDevice() and select_(child)

    fortranModuleFilepath = None
    mainHipFilepath       = None
    outputDir             = os.path.dirname(translationSourcePath)
   
    haveReductions     = False
    hipModuleFilenames = []
    fortranModules     = []
    programOrModules = stree.find_all(filter=lambda child: type(child) in [scanner.STProgram,scanner.STModule], recursively=False)
    for stmodule in programOrModules:
        # file names & paths
        moduleName        = stmodule.name.lower()
        hipModuleFilename = moduleName + HIP_FILE_EXT
        hipModuleFilenames.append(hipModuleFilename)
        hipModuleFilepath = outputDir+"/"+hipModuleFilename
        guard             = hipModuleFilename.replace(".","_").replace("-","_").upper() 
        # extract kernels
        loop_kernels      = stmodule.find_all(filter=loop_kernelFilter_, recursively=True)
        deviceProcedures = stmodule.find_all(filter=deviceProcedureFilter_, recursively=True)
        # TODO: Also extract derived types
        # derivedtypes = ....
        
        # TODO handle includes
        imodule = next((irecord for irecord in index if irecord["name"] == moduleName),None)
        if imodule == None:
            utils.logging.logError(LOG_PREFIX,"generateHipFiles","could not find record for module '{}'.".format(moduleName))
            sys.exit() # TODO add error code
        includes = __createIncludesFromUsedModules(imodule,index)
        if len(loop_kernels) or len(deviceProcedures):
            utils.logging.logDebug2(LOG_PREFIX,"generateHipFiles",\
              "detected loop kernels: {}; detected device subprograms {}".format(\
              len(loop_kernels),len(deviceProcedures)))

            # Context for HIP implementation
            hipContext = {}
            hipContext["guard"]    = guard 
            hipContext["includes"] = [ "hip/hip_runtime.h", "hip/hip_complex.h" ] + includes
            hipContext["kernels"]  = []
            
            # Context for Fortran interface/implementation
            fContext = {}
            fContext["name"]     = moduleName + FORTRAN_MODULE_SUFFIX
            fContext["preamble"] = ""
            #fContext["preamble"]   = FORTRAN_MODULE_PREAMBLE
            fContext["used"]       = ["hipfort"]
            if EMIT_CPU_IMPLEMENTATION:
                fContext["used"].append("hipfort_check")

            fContext["interfaces"] = []
            fContext["routines"]   = []
            
            __update_context_from_loop_kernels(loop_kernels,index,hipContext,fContext)
            __update_context_from_device_procedures(deviceProcedures,index,hipContext,fContext)
            
            if generateCode:
                haveReductions = haveReductions or hipContext["haveReductions"]

                __writeFile(\
                   hipModuleFilepath,"HIP C++ implementation file",\
                   model.HipImplementationModel().generateCode(hipContext))
                if PRETTIFY_EMITTED_C_CODE:
                    utils.fileutils.prettifyCFile(hipModuleFilepath,CLANG_FORMAT_STYLE)
                if len(fContext["interfaces"]):
                   fortranModules.append(\
                     model.InterfaceModuleModel().generateCode(fContext))
        else:
            content = "\n".join(["#include \"{}\"".format(filename) for filename in includes])
            if len(content):
                content = "#ifndef {0}\n#define {0}\n{1}\n#endif // {0}".format(
                  guard,content)
            __writeFile(\
               hipModuleFilepath,"HIP C++ implementation file",content)

    if generateCode:
        # main HIP file
        mainHipFilepath = translationSourcePath + HIP_FILE_EXT
        content = "\n".join(["#include \"{}\"".format(filename) for filename in hipModuleFilenames])
        __writeFile(mainHipFilepath,"main HIP C++ file",content)

        # Fortran module file
        if len(fortranModules):
            fortranModuleFilepath = translationSourcePath + FORTRAN_MODULE_FILE_EXT
            content               = "\n".join(fortranModules)
            if len(FORTRAN_MODULE_PREAMBLE):
                content = FORTRAN_MODULE_PREAMBLE + "\n" + content
            __writeFile(fortranModuleFilepath,"interface/testing module",content)
            if PRETTIFY_EMITTED_FORTRAN_CODE:
                utils.fileutils.prettifyFFile(fortranModuleFilepath)
    
    utils.logging.logLeaveFunction(LOG_PREFIX,"generateHipFiles")
    
    return fortranModuleFilepath, mainHipFilepath
