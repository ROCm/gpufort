EMPTY_CPP_FILE_CONTEXT = {
  "prolog":"",
  "guard":"",
  "snippets":[],
  "includes":[],
  "includes_prolog":"",
  "includes_epilog":""
}
 
EMPTY_F03_MODULE_CONTEXT =  {
  "name": "",
  "prolog": "",
  "used_modules": [],
  "rendered_types": [],
  "rendered_interfaces": [],
  "rendered_routines": [] 
}

def fort2hip_module_name(stnode):
    """Name of module file generated by fort2hip for module/program/procedure.
    """
    global FORTRAN_SUFFIX
    return "{}{}".format(stnode.tag().replace(":","_"),FORTRAN_MODULE_SUFFIX)

def parent_fort2hip_modules(stnode):
    if not stnode.parent == None and not isinstance(stnode.parent,scanner.STRoot):
        return [{ "name": fort2hip_module_name(stnode.parent.name.lower), "only": [] }]
    else:
        return []

def used_modules(stnode,inode):
   used_modules = [{"name": mod,"only:"[]} for mod in ["gpufort_array"]
   used_modules += inode["used_modules"] # local modules
   used_modules += parent_fort2hip_modules(stnode)  
   return used_modules

def render_derived_types_f03(itypes,itypes_local,used_modules):
    derived_type_snippets = []
    procedure_snippets    = []

    derived_type_snippets.append(fort2hip.model.render_derived_types_f03(itypes,interop_suffix="_interop"))
    for itype in itypes_local:
        derived_type_snippets.append("".join(itype["statements"]))

    procedure_snippets.append(fort2hip.model.render_derived_type_copy_scalars_routines_f03(itypes,interop_suffix="_interop",used_modules=used_modules))
    procedure_snippets.append(fort2hip.model.render_derived_type_size_bytes_routines_f03(itypes,interop_suffix="_interop",used_modules=used_modules))
    procedure_snippets.append(fort2hip.model.render_derived_type_copy_array_member_routines_f03(itypes,interop_suffix="_interop",orig_var="orig_type",interop_var="interop_type",used_modules=used_modules))
   
    return derived_type_snippets, procedure_snippets
