! This file was generated by gpufort
{# Jinja2 template for generating tests for interface modules #}

program test_{{name}}
  use hipfort, hipfort_check
  implicit none
  {{preamble | indent(2,True)
  integer :: globalErrorCode = 0, errorCode, fails = 0, tests = 0
  ! declare test functions and return type
{% for interface in interfaces %}{% if interface.doTest %}  integer :: test_{{interface.fName}}
{% endif %}{# if interface.doTest #}
{% endfor %}
  write(*,*) "SUITE test_{{name}} run ..."
{% for interface in interfaces %}{% if interface.doTest %}  errorCode = test_{{interface.fName}}()
  IF (errorCode > 0) THEN
    fails = fails + 1
    write(*,*) "TEST test_{{interface.fName}} ... FAILURE"
  ELSE 
    write(*,*) "TEST test_{{interface.fName}} ... SUCCESS"
  END IF
  tests = tests + 1
  globalErrorCode = globalErrorCode + errorCode
{% endif %}{# if interface.doTest #}
{% endfor %}

  IF (globalErrorCode > 0) THEN
    write(*,*) "SUITE test_{{name}} ... FAILURE passed:",(tests-fails)," failed:",fails," total:",tests
  ELSE 
    write(*,*) "SUITE test_{{name}} ... SUCCESS passed:",(tests-fails)," failed:",fails," total:",tests
  END IF

  contains

{% for test in tests %} 
{% for line in test.testComment %}! {{line}}
{% endfor %}
    !> errorCode > 0 implies that the test has failed
    function test_{{test.fName}}() result(errorCode)
      use iso_c_binding
{% for module in used %}      use {{module}}
{% endfor %}
      use {{name}}
      !
      implicit none
      integer :: errorCode
      logical :: failure = .False.
      real(8) :: norm_cpu, norm_gpu
{% for arg in routine.args %}
      {{arg.type}}{%- if arg.qualifiers|length > 0 -%}, {%- endif -%}{{arg.qualifiers | join(",")}} :: {{arg.name}}
{% endfor %}
      !
      errorCode = 0
      ! copy to device,
{{test.preamble}}
      CALL {{test.fName}}(0,c_null_ptr,{{test.argNames | join(",") }}) ! Modify sharedMem if other than default 0
      CALL hipCheck(hipDeviceSynchronize())
      ! copy to host, compute some norm, 
{{test.epilog_gpu}}
      CALL {{test.fName | replace("_auto","") }}_cpu(0,c_null_ptr,{{test.argNames | join(",") }})
{{test.epilog}}
      if ( failure ) errorCode = 1
    end function

{% endfor %}
end program test_{{name}}
