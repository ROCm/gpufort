{#- SPDX-License-Identifier: MIT                                                -#}
{#- Copyright (c) 2021 GPUFORT Advanced Micro Devices, Inc. All rights reserved.-#}
{#- Jinja2 template for generating interface modules                            -#}
{#- This template works with data structures of the form :                      -#}
{#- *-name:str                                                                  -#}
{#-  -[enums:dict]-[constants:dict]-name: str                                   -#}          
{#-                                -value: str                                  -#}           
{#-  -[interfaces:dict]-f_name:str                                              -#}
{#-                    -c_name:str                                              -#}
{#-                    -type:str ; function/subroutine                          -#}
{#-                    -[argnames:str]                                          -#}
{#-                    -[args:dict]-type:str                                    -#}
{#-                                -[qualifiers:str]                            -#}
{#-                                -name:str                                    -#}
! This file was generated by gpufort
module {{name}}
  use iso_c_binding
{{preamble | indent(2,true)}}
{% if enums is defined and enums|length > 0 %}
{% for type in enums %}
  enum, bind(c)
{% for constant in type.constants %}
{% if constant.value is none %}    enumerator :: {{constant.name}}
{% else %}    enumerator :: {{constant.name}} = {{constant.value}}
{% endif %}
{% endfor %}
  end enum
{% endfor %}
{% endif %}

{% for derived_type in types %}
  type, bind(c) :: {{derived_type.f_name}}
{% for member in derived_type.members %}
    {{member.type}}{%- if member.qualifiers|length > 0 -%}, {%- endif -%}{{member.qualifiers | join(",")}} :: {{member.name}}
{% endfor %}
  end type {{derived_type.f_name}}
{% endfor %}

{% if interfaces is defined and interfaces|length > 0 %}  interface
{% for interface in interfaces %}
    {{interface.type}} {{interface.f_name}}({{interface.argnames | join(",&\n        ")}}) bind(c, name="{{interface.c_name}}")
      use iso_c_binding
{% for module in used %}      use {{module}}
{% endfor %}
      implicit none
{% for arg in interface.args %}
      {{arg.type}}{%- if arg.qualifiers|length > 0 -%}, {%- endif -%}{{arg.qualifiers | join(",")}} :: {{arg.name}}
{% endfor %}
    end {{interface.type}}
{% endfor %}
  end interface
{% endif %}
{% if routines is defined and routines|length > 0 %}  contains
{% for routine in routines %}
    {{routine.type}} {{routine.f_name}}({{routine.argnames | join(",&\n        ") }}) bind(c, name="{{routine.c_name}}")
      use iso_c_binding
{% for module in used %}      use {{module}}
{% endfor %}
      implicit none
{% for arg in routine.args %}
      {{arg.type}}{%- if arg.qualifiers|length > 0 -%}, {%- endif -%}{{arg.qualifiers | join(",")}} :: {{arg.name}}
{% endfor %}
{{routine.body | indent(6, True)}}
    end {{routine.type}}
{% endfor %}
{% endif %}
end module {{name}}
