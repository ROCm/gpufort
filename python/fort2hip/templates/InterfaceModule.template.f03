{# SPDX-License-Identifier: MIT                                                 #}
{# Copyright (c) 2021 GPUFORT Advanced Micro Devices, Inc. All rights reserved. #}
! This file was generated by gpufort
{# Jinja2 template for generating interface modules      #}
{# This template works with data structures of the form :#}
{# *-name:str                                            #}
{#  -[enums:dict]-[constants:dict]-name: str             #}          
{#                                -value: str            #}           
{#  -[interfaces:dict]-fName:str                         #}
{#                    -cName:str                         #}
{#                    -type:str ; function/subroutine    #}
{#                    -[argnames:str]                    #}
{#                    -[args:dict]-type:str              #}
{#                                -[qualifiers:str]      #}
{#                                -name:str              #}
module {{name}}
{{preamble | indent(2,True)}}
{% if enums is defined and enums|length > 0 %}
{% for type in enums %}
  enum, bind(c)
{% for constant in type.constants %}
{% if constant.value is none %}    enumerator :: {{constant.name}}
{% else %}    enumerator :: {{constant.name}} = {{constant.value}}
{% endif %}
{% endfor %}
  end enum

{% endfor %}
{% endif %}
 
{% if interfaces is defined and interfaces|length > 0 %}  interface

{% for interface in interfaces %}
    {{interface.type}} {{interface.fName}}({{interface.argnames | join(",&\n        ")}}) bind(c, name="{{interface.cName}}")
      use iso_c_binding
{% for module in used %}      use {{module}}
{% endfor %}
      implicit none
{% for arg in interface.args %}
      {{arg.type}}{%- if arg.qualifiers|length > 0 -%}, {%- endif -%}{{arg.qualifiers | join(",")}} :: {{arg.name}}
{% endfor %}
    end {{interface.type}}

{% endfor %}
  end interface{% endif %}


{% if routines is defined and routines|length > 0 %}  contains

{% for routine in routines %}
    {{routine.type}} {{routine.fName}}({{routine.argnames | join(",&\n        ") }}) bind(c, name="{{routine.cName}}")
      use iso_c_binding
{% for module in used %}      use {{module}}
{% endfor %}
      implicit none
{% for arg in routine.args %}
      {{arg.type}}{%- if arg.qualifiers|length > 0 -%}, {%- endif -%}{{arg.qualifiers | join(",")}} :: {{arg.name}}
{% endfor %}
{{routine.body | indent(6, True)}}
    end {{routine.type}}

{% endfor %}
{% endif %}

end module {{name}}