{# ==============================================================================#}
{# GPUFORT                                                                       #}
{# ==============================================================================#}
{# Copyright (c) 2021 Advanced Micro Devices, Inc. All rights reserved.          #}
{# [MITx11 License]                                                              #}
{#                                                                               #}
{# Permission is hereby granted, free of charge, to any person obtaining a copy  #}
{# of this software and associated documentation files (the "Software"), to deal #}
{# in the Software without restriction, including without limitation the rights  #}
{# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell     #}
{# copies of the Software, and to permit persons to whom the Software is         #}
{# furnished to do so, subject to the following conditions:                      #}
{#                                                                               #}
{# The above copyright notice and this permission notice shall be included in    #}
{# all copies or substantial portions of the Software.                           #}
{#                                                                               #}
{# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR    #}
{# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,      #}
{# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE  #}
{# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER        #}
{# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, #}
{# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN     #}
{# THE SOFTWARE.                                                                 #}

! This file was generated by gpufort
{# Jinja2 template for generating interface modules      #}
{# This template works with data structures of the form :#}
{# *-name:str                                            #}
{#  -[enums:dict]-[constants:dict]-name: str             #}          
{#                                -value: str            #}           
{#  -[interfaces:dict]-fName:str                         #}
{#                    -cName:str                         #}
{#                    -type:str ; function/subroutine    #}
{#                    -[argNames:str]                    #}
{#                    -[args:dict]-type:str              #}
{#                                -[qualifiers:str]      #}
{#                                -name:str              #}
module {{name}}
{% for module in used %}  use {{module}}
{% endfor %}
  implicit none

{{preamble | indent(2,True)}}

{% if enums is defined and enums|length > 0 %}
{% for type in enums %}
  enum, bind(c)
{% for constant in type.constants %}
{% if constant.value is none %}    enumerator :: {{constant.name}}
{% else %}    enumerator :: {{constant.name}} = {{constant.value}}
{% endif %}
{% endfor %}
  end enum

{% endfor %}
{% endif %}
 
{% if interfaces is defined and interfaces|length > 0 %}  interface

{% for interface in interfaces %}
    {{interface.type}} {{interface.fName}}({{interface.argNames | join(",&\n        ")}}) bind(c, name="{{interface.cName}}")
      use iso_c_binding
{% for module in used %}      use {{module}}
{% endfor %}
      implicit none
{% for arg in interface.args %}
      {{arg.type}}{%- if arg.qualifiers|length > 0 -%}, {%- endif -%}{{arg.qualifiers | join(",")}} :: {{arg.name}}
{% endfor %}
    end {{interface.type}}

{% endfor %}
  end interface{% endif %}


{% if routines is defined and routines|length > 0 %}  contains

{% for routine in routines %}
    {{routine.type}} {{routine.fName}}({{routine.argNames | join(",&\n        ") }})
      use iso_c_binding
{% for module in used %}      use {{module}}
{% endfor %}
      implicit none
{% for arg in routine.args %}
      {{arg.type}}{%- if arg.qualifiers|length > 0 -%}, {%- endif -%}{{arg.qualifiers | join(",")}} :: {{arg.name}}
{% endfor %}
{{routine.body | indent(6, True)}}
    end {{routine.type}}

{% endfor %}
{% endif %}

end module {{name}}
