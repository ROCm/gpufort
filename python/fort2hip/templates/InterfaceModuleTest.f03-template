! This file was generated by gpufort
{# Jinja2 template for generating tests for interface modules #}


program test_{{name}}
  implicit none
  integer :: globalErrorCode = 0, errorCode, fails = 0, tests = 0
  ! declare test functions and return type
{% for interface in interfaces %}{% if interface.doTest %}  integer :: test_{{interface.fName}}
{% endif %}{# if interface.doTest #}
{% endfor %}
  write(*,*) "SUITE test_{{name}} run ..."
{% for interface in interfaces %}{% if interface.doTest %}  errorCode = test_{{interface.fName}}()
  IF (errorCode > 0) THEN
    fails = fails + 1
    write(*,*) "TEST test_{{interface.fName}} ... FAILURE"
  ELSE 
    write(*,*) "TEST test_{{interface.fName}} ... SUCCESS"
  END IF
  tests = tests + 1
  globalErrorCode = globalErrorCode + errorCode
{% endif %}{# if interface.doTest #}
{% endfor %}

  IF (globalErrorCode > 0) THEN
    write(*,*) "SUITE test_{{name}} ... FAILURE passed:",(tests-fails)," failed:",fails," total:",tests
  ELSE 
    write(*,*) "SUITE test_{{name}} ... SUCCESS passed:",(tests-fails)," failed:",fails," total:",tests
  END IF

  contains

{% for interface in interfaces %}{% if interface.doTest %} 
{% for line in interface.testComment %}! {{line}}
{% endfor %}
    function test_{{interface.fName}}()
      ! errorCode > 0 implies that the test has failed
      use iso_c_binding
      use hipfort
      use hipfort_check
      use {{name}}
      implicit none
      integer :: errorCode = 1
      ! TODO fix parameters
      ! - Add missing arguments
      ! - Determine size of arrays (typically indicated by 'type(c_ptr)' type)
      ! - Add target where we need a pointer
    {% for arg in interface.args %}
      {{arg.type}}{%- if arg.qualifiers|length > 0 -%}, {%- endif -%}{{arg.qualifiers | join(",") | replace(", value","") }} :: {{arg.name}}
    {% endfor %}
      ! TODO Create initial data on host
      ! TODO Copy data to device ! (dest,src,size,direction)
      CALL hipCheck(hipMemcpy(???,c_loc(???),C_SIZEOF(???),hipMemcpyHostToDevice)) ! 
      CALL hipCheck(hipMemcpy(???,c_loc(???),C_SIZEOF(???),hipMemcpyHostToDevice)) ! 
      ! ... might be more (or less) than two memcopies 
      ! TODO run the test
      CALL {{interface.fName}}(0,c_null_ptr,{{interface.argNames | join(",") }}) ! Modify sharedMem if other than default 0
      CALL hipCheck(hipDeviceSynchronize())
      CALL {{interface.fName | replace("_auto","") }}_cpu(0,c_null_ptr,{{interface.argNames | join(",") }})
    
      ! TODO Copy results back to host
      CALL hipCheck(hipMemcpy(c_loc(???),???,C_SIZEOF(???),hipMemcpyDeviceToHost)
      CALL hipCheck(hipMemcpy(c_loc(???),???,C_SIZEOF(???),hipMemcpyDeviceToHost)
      ! ... might be more (or less) than two memcopies 
      ! TODO Compare results
      ! TODO Update error code if the results do not match
      return errorCode
    end function

{% endif %}{# if interface.doTest #}
{% endfor %}
end program test_{{name}}
