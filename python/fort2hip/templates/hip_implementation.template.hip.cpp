{# SPDX-License-Identifier: MIT                                                 #}
{# Copyright (c) 2021 Advanced Micro Devices, Inc. All rights reserved. #}
// This file was generated by gpufort
{# Jinja2 template for generating interface modules      #}
{# This template works with data structures of the form :#}
{# *-[includes:str]                                      #}
{#  -[kernels:dict]-c_name:str                           #}
{#                 -[kernel_args:dict]                   #}
{#                 -[kernel_call_arg_names:str]          #}
{#                 -[interface_args:dict]                #}
{#                 -[reductions:dict]                    #}
{#                 -[c_body:str]                         #}
{#                 -[f_body:str]                         #}
{% import "hip_implementation.macros.hip.cpp" as hm %}
#ifndef {{ guard }}
#define {{ guard }}
#include "gpufort.h"
#include "gpufort_array.h"
{% for file in includes %}
#include "{{file}}"
{% endfor %}

{% for rendered_types in rendered_typess %}
{{rendered_types}}
{% endfor %}

{% for rendered_kernel in rendered_kernels %}
{{rendered_kernel}}
{% endfor %}
{% if kernel.generate_launcher -%}
extern "C" void {{iface_prefix}}(
    dim3* grid,
    dim3* block,  
    const int sharedmem, 
    hipStream_t stream{{"," if (kernel.interface_args|length > 0) else ") {"}}
{% for arg in kernel.interface_args %}
{{ arg | indent(4,True) }}{{"," if not loop.last else ") {"}}
{% endfor -%}
{{ reductions_prepare(kernel,"*") }}{% if kernel.generate_debug_code %}
  #if defined(GPUFORT_PRINT_KERNEL_ARGS_ALL) || defined(GPUFORT_PRINT_KERNEL_ARGS_{{krnl_prefix}})
  std::cout << "{{krnl_prefix}}:gpu:args:";
  GPUFORT_PRINT_ARGS((*grid).x,(*grid).y,(*grid).z,(*block).x,(*block).y,(*block).z,sharedmem,stream,{{kernel.kernel_call_arg_names | join(",")}});
  #endif
  #if defined(GPUFORT_PRINT_INPUT_ARRAYS_ALL) || defined(GPUFORT_PRINT_INPUT_ARRAYS_{{krnl_prefix}})
  {% for array in kernel.input_arrays %}
  {{ print_array(krnl_prefix+":gpu","in","true","true",array.name,array.rank) }}
  {% endfor %}
  #elif defined(GPUFORT_PRINT_INPUT_ARRAY_NORMS_ALL) || defined(GPUFORT_PRINT_INPUT_ARRAY_NORMS_{{krnl_prefix}})
  {% for array in kernel.input_arrays %}
  {{ print_array(krnl_prefix+":gpu","in","false","true",array.name,array.rank) }}
  {% endfor %}
  #endif{% endif +%}
  // launch kernel
  hipLaunchKernelGGL(({{krnl_prefix}}), *grid, *block, sharedmem, stream, {{kernel.kernel_call_arg_names | join(",")}});
{{ reductions_finalize(kernel,"*") }}
{% if kernel.generate_debug_code %}
  {{ synchronize(krnl_prefix) }}
  #if defined(GPUFORT_PRINT_OUTPUT_ARRAYS_ALL) || defined(GPUFORT_PRINT_OUTPUT_ARRAYS_{{krnl_prefix}})
  {% for array in kernel.output_arrays %}
  {{ print_array(krnl_prefix+":gpu","out","true","true",array.name,array.rank) }}
  {% endfor %}
  #elif defined(GPUFORT_PRINT_OUTPUT_ARRAY_NORMS_ALL) || defined(GPUFORT_PRINT_OUTPUT_ARRAY_NORMS_{{krnl_prefix}})
  {% for array in kernel.output_arrays %}
  {{ print_array(krnl_prefix+":gpu","out","false","true",array.name,array.rank) }}
  {% endfor %}
  #endif
{% endif %}
}
{% if kernel.is_loop_kernel %}
extern "C" void {{iface_prefix}}_auto(
    const int sharedmem, 
    hipStream_t stream{{"," if (kernel.interface_args|length > 0) else ") {"}}
{% for arg in kernel.interface_args %}
{{ arg | indent(4,True) }}{{"," if not loop.last else ") {"}}
{% endfor -%}
{{ make_block(kernel) }}
{{ make_grid(kernel) }}   
{{ reductions_prepare(kernel,"") }}{% if kernel.generate_debug_code %}
  #if defined(GPUFORT_PRINT_KERNEL_ARGS_ALL) || defined(GPUFORT_PRINT_KERNEL_ARGS_{{krnl_prefix}})
  std::cout << "{{krnl_prefix}}:gpu:args:";
  GPUFORT_PRINT_ARGS(grid.x,grid.y,grid.z,block.x,block.y,block.z,sharedmem,stream,{{kernel.kernel_call_arg_names | join(",")}});
  #endif
  #if defined(GPUFORT_PRINT_INPUT_ARRAYS_ALL) || defined(GPUFORT_PRINT_INPUT_ARRAYS_{{krnl_prefix}})
  {% for array in kernel.input_arrays %}
  {{ print_array(krnl_prefix+":gpu","in","true","true",array.name,array.rank) }}
  {% endfor %}
  #elif defined(GPUFORT_PRINT_INPUT_ARRAY_NORMS_ALL) || defined(GPUFORT_PRINT_INPUT_ARRAY_NORMS_{{krnl_prefix}})
  {% for array in kernel.input_arrays %}
  {{ print_array(krnl_prefix+":gpu","in","false","true",array.name,array.rank) }}
  {% endfor %}
  #endif{% endif +%}
  // launch kernel
  hipLaunchKernelGGL(({{krnl_prefix}}), grid, block, sharedmem, stream, {{kernel.kernel_call_arg_names | join(",")}});
{{ reductions_finalize(kernel,"") }}
{% if kernel.generate_debug_code %}
  {{ synchronize(krnl_prefix) }}
  #if defined(GPUFORT_PRINT_OUTPUT_ARRAYS_ALL) || defined(GPUFORT_PRINT_OUTPUT_ARRAYS_{{krnl_prefix}})
  {% for array in kernel.output_arrays %}
  {{ print_array(krnl_prefix+":gpu","out","true","true",array.name,array.rank) }}
  {% endfor %}
  #elif defined(GPUFORT_PRINT_OUTPUT_ARRAY_NORMS_ALL) || defined(GPUFORT_PRINT_OUTPUT_ARRAY_NORMS_{{krnl_prefix}})
  {% for array in kernel.output_arrays %}
  {{ print_array(krnl_prefix+":gpu","out","false","true",array.name,array.rank) }}
  {% endfor %}
  #endif
{% endif %}
}
{% endif %}
{% if kernel.generate_cpu_launcher -%}
extern "C" void {{iface_prefix}}_cpu1(
    const int sharedmem, 
    hipStream_t stream{{"," if (kernel.interface_args|length > 0) else ") {"}}
{% for arg in kernel.interface_args %}
{{ arg | indent(4,True) }}{{"," if not loop.last else ");"}}
{% endfor +%}
extern "C" void {{iface_prefix}}_cpu(
    const int sharedmem, 
    hipStream_t stream{{"," if (kernel.interface_args|length > 0) else ") {"}}
{% for arg in kernel.interface_args %}
{{ arg | indent(4,True) }}{{"," if not loop.last else ") {"}}
{% endfor -%}
{% if kernel.generate_debug_code %}
  #if defined(GPUFORT_PRINT_KERNEL_ARGS_ALL) || defined(GPUFORT_PRINT_KERNEL_ARGS_{{krnl_prefix}})
  std::cout << "{{krnl_prefix}}:cpu:args:";
  GPUFORT_PRINT_ARGS(sharedmem,stream,{{kernel.cpu_kernel_call_arg_names | join(",")}});
  #endif
  #if defined(GPUFORT_PRINT_INPUT_ARRAYS_ALL) || defined(GPUFORT_PRINT_INPUT_ARRAYS_{{krnl_prefix}})
  {% for array in kernel.input_arrays %}
  {{ print_array(krnl_prefix+":cpu","in","true","true",array.name,array.rank) }}
  {% endfor %}
  #elif defined(GPUFORT_PRINT_INPUT_ARRAY_NORMS_ALL) || defined(GPUFORT_PRINT_INPUT_ARRAY_NORMS_{{krnl_prefix}})
  {% for array in kernel.input_arrays %}
  {{ print_array(krnl_prefix+":cpu","in","false","true",array.name,array.rank) }}
  {% endfor %}
  #endif{% endif +%}
  // launch kernel
  {{iface_prefix}}_cpu1(sharedmem, stream, {{kernel.cpu_kernel_call_arg_names | join(",")}});
{% if kernel.generate_debug_code %}
  #if defined(GPUFORT_PRINT_OUTPUT_ARRAYS_ALL) || defined(GPUFORT_PRINT_OUTPUT_ARRAYS_{{krnl_prefix}})
  {% for array in kernel.output_arrays %}
  {{ print_array(krnl_prefix+":cpu","out","true","true",array.name,array.rank) }}
  {% endfor %}
  #elif defined(GPUFORT_PRINT_OUTPUT_ARRAY_NORMS_ALL) || defined(GPUFORT_PRINT_OUTPUT_ARRAY_NORMS_{{krnl_prefix}})
  {% for array in kernel.output_arrays %}
  {{ print_array(krnl_prefix+":cpu","out","false","true",array.name,array.rank) }}
  {% endfor %}
  #endif
{% endif %}
}{% endif %}
{% endif +%}
// END {{krnl_prefix}}
{% endfor %}{# kernels #}
#endif // {{ guard }} 
