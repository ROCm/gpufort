# SPDX-License-Identifier: MIT                                                
# Copyright (c) 2021 Advanced Micro Devices, Inc. All rights reserved.
# Defaults
LOG_PREFIX = "fort2x.fort2x"
        # Prefix for log output that this component writes.

CPP_FILE_PREAMBLE = "// This file was generated by GPUFORT\n" 
        # Preamble to write at the top of the generated HIP C++ files.
        # Use it to place a copyright message at the top
        # of a file, for example.

FORTRAN_MODULE_PREAMBLE = "! This file was generated by GPUFORT\n" 
        # Preamble to write at the top of the generated Fortran module file.
        # Use it to place a copyright message at the top
        # of a file, for example.

FORTRAN_MODULE_SUFFIX = "_fort2x"
        # Suffix for generated hip modules.

FORTRAN_MODULE_FILE_EXT = "-fort2x.f08"
        # Suffix appended to the generated Fortran module.

CPP_FILE_EXT = "-fort2x.cpp"
        # Suffix appended to the generated C++ files.

GPUFORT_HEADERS_MAX_DIM = 7
        # Generate rank-dependent classes and expressions up to
        # this dimension.
GPUFORT_HEADERS_DATATYPES = [
        {"c_type":"bool"            ,"f_kind":"c_bool"          ,"bytes":"c_bool"            ,"f_type":"logical(c_bool)" },
        {"c_type":"short"           ,"f_kind":"c_short"         ,"bytes":"c_short"           ,"f_type":"integer(c_short)"},
        {"c_type":"int"             ,"f_kind":"c_int"           ,"bytes":"c_int"             ,"f_type":"integer(c_int)"  },
        {"c_type":"long"            ,"f_kind":"c_long"          ,"bytes":"c_long"            ,"f_type":"integer(c_long)" },
        {"c_type":"float"           ,"f_kind":"c_float"         ,"bytes":"c_float"           ,"f_type":"real(c_float)" },
        {"c_type":"double"          ,"f_kind":"c_double"        ,"bytes":"c_double"          ,"f_type":"real(c_double)"},
        {"c_type":"hipFloatComplex" ,"f_kind":"c_float_complex" ,"bytes":"2*c_float_complex" ,"f_type":"complex(c_float_complex)"},
        {"c_type":"hipDoubleComplex","f_kind":"c_double_complex","bytes":"2*c_double_complex","f_type":"complex(c_double_complex)"},
        ]
        # Generate rank-dependent classes and expressions for these
        # datatypes.
