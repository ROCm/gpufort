        # SPDX-License-Identifier: MIT
        # Copyright (c) 2020-2022 Advanced Micro Devices, Inc. All rights reserved.
        # Defaults
log_prefix = "fort2x.codegen"
        # Prefix for log output that this component writes.

cpp_file_preamble = "// This file was generated by GPUFORT\n"
        # Preamble to write at the top of the generated HIP C++ files.
        # Use it to place a copyright message at the top
        # of a file, for example.

fortran_module_preamble = "! This file was generated by GPUFORT\n"
        # Preamble to write at the top of the generated Fortran module file.
        # Use it to place a copyright message at the top
        # of a file, for example.

fortran_module_suffix = "_fort2x"
        # Suffix for generated hip modules.

fortran_module_file_ext = "-fort2x.f08"
        # Suffix appended to the generated Fortran module.

cpp_file_ext = "-fort2x.cpp"
        # Suffix appended to the generated C++ files.

fortran_default_modules = [
    "iso_c_binding",
    "hipfort",
    "gpufort_array",
]
cpp_default_includes = [
    "gpufort.h",
    "gpufort_reduction.h",
    "gpufort_array.h",
]

#namespace_per_scope_create = True
#        # Create a namespace per scope that can store parameters and other lines.
#
#def default_namespace_per_scope_render_parameters(f_type,f_kind,max_rank=0):
#    return False
#namespace_per_scope_render_parameters_callback = default_namespace_per_scope_render_parameters_callback
#        # Convert all parameters in the given scope to 
#        # 
#def default_namespace_per_scope_prepend_callback(scope_tag):
#    """:return C++ code lines to prepend to the
#    body of the namespace mapped to the scope tag."""
#    return []
#def default_namespace_per_scope_append_callback(scope_tag):
#    """:return C++ code lines to prepend to the
#    body of the namespace mapped to the scope tag."""
#    return []
#render_scope_prepend_callback = default_render_scope_prepend_callback
#render_scope_append_callback = default_render_scope_append_callback
