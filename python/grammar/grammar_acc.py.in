# We can base our work on this grammar if we want to ensure that clauses are legal in later versions of gpufort
# Should probably be done on the translator level in
# order to generate better error messages
# https://pyccel.readthedocs.io/pyccelext/openacc_specs.html

#from grammar_acc import *

# OpenACC
ACC,KERNELS,PARALLEL,LOOP,DATA,ENTER,EXIT,HOST_DATA,ATOMIC,UPDATE,SERIAL,CACHE,ROUTINE,DECLARE = makeCaselessLiteral("acc,kernels,parallel,loop,data,enter,exit,host_data,atomic,update,serial,cache,routine,declare",suppress=True)

ASYNC,WAIT,NUM_GANGS,NUM_WORKERS,VECTOR_LENGTH,DEVICE_TYPE,COPY,COPYIN,COPYOUT,CREATE,NO_CREATE,PRESENT,DEVICEPTR,ATTACH,DETACH,DEFAULT,NONE,PRIVATE,FIRST_PRIVATE,REDUCTION,DELETE,ROUTINE,USE_DEVICE,COLLAPSE,SELF,DEVICE,HOST,BIND,DEVICE_RESIDENT,LINK,TILE=\
  makeCaselessLiteral("async,wait,num_gangs,num_workers,vector_length,device_type,copy,copyin,copyout,create,no_create,present,deviceptr,attach,detach,default,none,private,first_private,reduction,delete,routine,use_device,collapse,self,device,host,bind,device_resident,link,tile",suppress=True)

GANG,VECTOR,WORKER = makeCaselessLiteral("gang,vector,worker",suppress=False)

accVarList = Group(delimitedList(allocateRvalue)) 

accReductionOperator = oneOf("+ * max min iand ior ieor .and. .or. .eqv. .neqv.", caseless=CASELESS)
accReductionVar      = accReductionOperator + Suppress(":") + allocateRvalue
accReductionVarList  = Group(delimitedList(accReductionVar))

# clauses
acc_clause_gang             = GANG + Optional(LPAR + integer + RPAR,default = CLAUSE_VALUE_NOT_SPECIFIED)
acc_clause_worker           = WORKER + Optional(LPAR + integer + RPAR,default = CLAUSE_VALUE_NOT_SPECIFIED)
acc_clause_vector           = VECTOR + Optional(LPAR + integer + RPAR,default = CLAUSE_VALUE_NOT_SPECIFIED)
acc_clause_num_gangs        = NUM_GANGS + LPAR + integer + RPAR 
acc_clause_num_workers      = NUM_WORKERS + LPAR + integer + RPAR 
acc_clause_vector_length    = VECTOR_LENGTH + LPAR + integer + RPAR

acc_clause_device_type      = DEVICE_TYPE + LPAR + Group(delimitedList(identifier | Literal("*"))) + RPAR
acc_clause_if               = IF + LPAR + arithmeticLogicalExpression + RPAR
acc_clause_copy             = COPY + LPAR + accVarList + RPAR
acc_clause_copyin           = COPYIN + LPAR + accVarList + RPAR
acc_clause_copyout          = COPYOUT + LPAR + accVarList + RPAR

acc_clause_create           = CREATE + LPAR + accVarList + RPAR
acc_clause_no_create        = NO_CREATE + LPAR + accVarList + RPAR
acc_clause_present          = PRESENT + LPAR + accVarList + RPAR
acc_clause_deviceptr        = DEVICEPTR + LPAR + accVarList + RPAR
acc_clause_attach           = ATTACH + LPAR + accVarList + RPAR
acc_clause_detach           = DETACH + LPAR + accVarList + RPAR
acc_clause_default          = DEFAULT + LPAR +  (CASELESS_LITERAL("none") | CASELESS_LITERAL("present")) + RPAR
acc_clause_use_device       = USE_DEVICE + LPAR + accVarList + RPAR
acc_clause_private          = PRIVATE + LPAR + accVarList + RPAR
acc_clause_reduction        = REDUCTION + LPAR + accReductionVarList + RPAR
acc_clause_delete           = DELETE + LPAR + accVarList + RPAR
acc_clause_private          = PRIVATE + LPAR + accVarList + RPAR
acc_clause_first_private    = FIRST_PRIVATE + LPAR + accVarList + RPAR 
acc_clause_collapse         = COLLAPSE + LPAR + integer + RPAR
acc_clause_host             = HOST + LPAR + accVarList + RPAR
acc_clause_self             = SELF + LPAR + accVarList + RPAR
acc_clause_bind             = BIND + LPAR + identifier + RPAR
acc_clause_device_resident  = DEVICE_RESIDENT + LPAR + accVarList + RPAR
acc_clause_link             = LINK + LPAR + accVarList + RPAR
acc_clause_tile             = TILE + LPAR + Group(integer + Suppress(",") + integer) + RPAR
acc_clause_wait             = WAIT + Optional(LPAR + accVarList + RPAR, default=[])
acc_clause_async            = ASYNC + Optional(LPAR + rvalue + RPAR, default = CLAUSE_VALUE_NOT_SPECIFIED) 

acc_clause_seq,acc_clause_auto,acc_clause_independent,acc_clause_read,acc_clause_write,acc_clause_capture,acc_clause_nohost,acc_clause_finalize,acc_clause_if_present = makeCaselessLiteral("seq,auto,independent,read,write,capture,nohost,finalize,if_present",suppress=False)

# ACC LoopKernel directive
ACC_START = PRAGMA + ACC
ACC_END   = ACC_START.copy() + END

acc_clause = acc_clause_if | acc_clause_self | acc_clause_host | acc_clause_async | acc_clause_wait | acc_clause_num_gangs | acc_clause_num_workers | acc_clause_vector_length | acc_clause_device_type |\
    acc_clause_copy | acc_clause_copyin | acc_clause_copyout | acc_clause_create | acc_clause_present | acc_clause_deviceptr | acc_clause_default |\
    acc_clause_private | acc_clause_first_private | acc_clause_no_create | acc_clause_delete | acc_clause_reduction | acc_clause_detach | acc_clause_collapse |\
    acc_clause_use_device | acc_clause_bind | acc_clause_device_resident | acc_clause_link | acc_clause_tile | acc_clause_seq | acc_clause_auto |\
    acc_clause_independent | acc_clause_gang | acc_clause_worker | acc_clause_vector | acc_clause_read | acc_clause_write | acc_clause_capture |\
    acc_clause_nohost | acc_clause_finalize | acc_clause_if_present 

accClauseList = Optional(OneOrMore(Optional(ACC_START + Literal("&")).suppress() + acc_clause), default=[])

##
## DIRECTVIES
##
ACC_END_HOST_DATA    = ACC_END + HOST_DATA
ACC_END_DATA         = ACC_END + DATA
ACC_END_ATOMIC       = ACC_END + ATOMIC

acc_update           = ACC_START + UPDATE + accClauseList # 2 tokens -> [(False|True),[*]],*

acc_wait             = ACC_START + acc_clause_wait + accClauseList

acc_host_data        = ACC_START + HOST_DATA + accClauseList 

acc_data             = ACC_START + HOST_DATA + accClauseList 

acc_enter_data       = ACC_START + ENTER + DATA + accClauseList
acc_exit_data        = ACC_START + EXIT  + DATA + accClauseList

acc_routine          = ACC_START + ROUTINE + Optional(LPAR + identifier + RPAR,default = None) + accClauseList
acc_declare          = ACC_START + DECLARE + accClauseList

acc_atomic           = ACC_START + ATOMIC + Optional(accClauseList,default=None)

acc_cache            = ACC_START + CACHE + LPAR + accVarList + RPAR

acc_loop             = ACC_START + LOOP + accClauseList

# kernels / parallels
acc_serial         = ACC_START + SERIAL + accClauseList
acc_kernels        = ACC_START + KERNELS  + ~LOOP + accClauseList
acc_parallel       = ACC_START + PARALLEL + ~LOOP + accClauseList
acc_parallel_loop  = ACC_START + PARALLEL + LOOP  + accClauseList
acc_kernels_loop   = ACC_START + KERNELS  + LOOP  + accClauseList

ACC_END_SERIAL        = ACC_END + SERIAL
ACC_END_KERNELS       = ACC_END + KERNELS  + ~LOOP
ACC_END_PARALLEL      = ACC_END + PARALLEL + ~LOOP
ACC_END_PARALLEL_LOOP = ACC_END_PARALLEL.copy() + LOOP # copy() allows us to attach different parse action
ACC_END_KERNELS_LOOP  = ACC_END_KERNELS.copy()  + LOOP

#
# Regions
#
acc_data_region          = acc_data + block + ACC_END_DATA 

acc_host_data_region     = acc_host_data + block + ACC_END_HOST_DATA 

acc_atomic_region        = acc_atomic + block + Optional(ACC_END_ATOMIC)

acc_serial_region        = acc_serial + block + Optional(ACC_END_SERIAL)
acc_parallel_region      = acc_parallel + block + Optional(ACC_END_PARALLEL)
acc_kernels_region       = acc_kernels + block + Optional(ACC_END_KERNELS) 
acc_parallel_loop_region = acc_parallel_loop + annotatedDoLoop + Optional(ACC_END_PARALLEL_LOOP)
acc_kernels_loop_region  = acc_kernels_loop  + annotatedDoLoop + Optional(ACC_END_KERNELS_LOOP)

# manual grouping
accDirective = acc_kernels_loop | acc_parallel_loop | acc_kernels | acc_parallel | acc_wait | acc_host_data | acc_data | acc_enter_data | acc_exit_data | acc_loop | acc_routine | acc_atomic | acc_update | acc_serial | acc_cache | acc_declare

accKernelBodyDirective = acc_loop | acc_serial_region | acc_atomic_region | acc_cache

# Ideally pass the following:
# multiple acc directives/lines 
# !acc ...
# !acc ...
# some Fortran code
