# SPDX-License-Identifier: MIT                                                
# Copyright (c) 2021 GPUFORT Advanced Micro Devices, Inc. All rights reserved.
LPAR,RPAR = map(Suppress, "()")
EQ,ELEM,COMMA,DOT,UNDERSCORE = map(Suppress, "=%,._")
PEQ=Suppress("=>")
COLONS=Suppress("::")
OPTCOMMA = Optional(COMMA)

CALL,ATTRIBUTES,LEN,KIND,DIM = makeCaselessLiteral("call,attributes,len,kind,dim",suppress=True)

# basic

identifier = pyparsing_common.identifier.copy()
integer    = pyparsing_common.integer.copy()
#number     = Regex(r"[+-]?(?:\.|\d+\.?)\d*([dDeE][+-]?\d+)?(_\w+)?\b") # \b necessary?
number     = Regex(r"[+-]?(?:\.|\d+\.?)\d*([dDeE][+-]?\d+)?(_\w+)?") # Adapted from https://stackoverflow.com/a/49890855; original wouldn't match <number>_DP
logical    = Regex(r"\.[tT][rR][uU][eE]\.|\.[fF][aA][lL][sS][eE]\.")
character  = QuotedString('"', escQuote='\\') | QuotedString("'", escQuote="\\")
OPTSIGN    = Optional(Regex("[-+]") | CASELESS_LITERAL(".not."),default="")

# arithmetic logical expressions and assignments
funcRValue = Forward()

funcKind = COMMA + ( KIND + EQ + Regex(r"[0-9]+|([sSdDqQ][pP])") ) | Regex(r"[sSdDqQ][pP]") # ! emits one token
argList = Group(delimitedList(Group(~funcKind + funcRValue)))
funcCall = identifier + LPAR + Optional(argList, default=[]) + RPAR # emits 2 tokens: *,*,*

# derivedTypes
simpleStructRValue = Forward()
simpleDerivedTypeMember   = identifier + ELEM + simpleStructRValue
simpleStructRValue <<= simpleDerivedTypeMember | identifier
#
derivedTypeRValue = Forward()
derivedTypeElem = (( funcCall | identifier ) + ELEM + derivedTypeRValue )
derivedTypeRValue <<= derivedTypeElem | funcCall | identifier

complexArithmeticExpression = Forward()
conversion      = Forward()
inquiryFunction = Forward()

rvalue = OPTSIGN + (conversion | inquiryFunction | complexArithmeticExpression | derivedTypeElem | funcCall | identifier | logical | character | number)  # |: ordered OR, order is important
fortran_subroutine_call = CALL + funcCall

# assignments
lArithOperator  = MatchFirst(L_ARITH_OPERATOR);
#rArithOperator  = MatchFirst(R_ARITH_OPERATOR_STR);
conditionOp=oneOf(COMP_OPERATOR_LOWER_STR,caseless=CASELESS)
arithmeticExpression = infixNotation(rvalue,
    [
      (lArithOperator, 2, opAssoc.LEFT),
    ],
)
arithmeticLogicalExpression = infixNotation(rvalue, #NOTE: Slower because of the additional operators
    [
      (lArithOperator, 2, opAssoc.LEFT),
      (conditionOp, 2, opAssoc.LEFT),
    ],
)

# use in preprocessing step
powerValue1 = OPTSIGN + (conversion | inquiryFunction | derivedTypeElem | funcCall | identifier | number)
powerValue2 = LPAR + arithmeticExpression + RPAR
powerValue  = powerValue2 | powerValue1
power       = powerValue + Suppress("**") + powerValue

lvalue          = derivedTypeElem | funcCall | identifier
lvalueList      = Group(delimitedList(lvalue))
assignmentBegin = lvalue + EQ
assignment      = lvalue + EQ + arithmeticExpression # ! emits 2 tokens: *,*

MATLPAR                    = Regex(r"\(\/|\[").suppress()
MATRPAR                    = Regex(r"\/\)|\]").suppress()
matrixAssignment           = lvalue + EQ + matrixArithmeticExpression

complexArithmeticExpression <<= LPAR + Group(arithmeticExpression + COMMA + arithmeticExpression) + RPAR 
complexAssignment = lvalue + EQ + complexArithmeticExpression

fortran_assignment = matrixAssignment | complexAssignment | assignment

singleColon   = (Literal(":") + ~Literal(":")).suppress()
stride        = singleColon + arithmeticExpression
matrixRange0  = singleColon.copy().setParseAction(lambda tokens: [None,None])           
matrixRange1a = (arithmeticExpression + singleColon).setParseAction(lambda tokens: [None,tokens[0]]) 
matrixRange1b = (singleColon + arithmeticExpression).setParseAction(lambda tokens: [tokens[0],None])
matrixRange2  = (arithmeticExpression + singleColon + arithmeticExpression)
matrixRange   = (matrixRange2 | matrixRange1b | matrixRange1a | matrixRange0) + Optional(stride,default=None)
# define forward declared tokens
funcRValue       <<= matrixRange | arithmeticLogicalExpression

# conversion functions
# TODO check type of variable when translating
# see http://userweb.eng.gla.ac.uk/peter.smart/com/com/f77-conv.htm
# for now, always assume conversion between complex and float types 
REAL,FLOAT,DBLE,CMPLX,DCMPLX,AIMAG,CONJG,DCONJG = makeCaselessLiteral("real,float,dble,cmplx,dcmplx,aimag,conjg,dconjg",suppress=True)
singleArgPlusKind = LPAR + (~funcKind+arithmeticExpression) + Optional(funcKind,default=None) + RPAR # emits 2 tokens: *,*,*
doubleArgPlusKind = LPAR + (~funcKind+arithmeticExpression) + Optional(COMMA + (~funcKind+arithmeticExpression),default="0") +\
                           Optional(funcKind,default=None) + RPAR # emits 2 tokens: *,*,*

convertToExtractReal   = ( REAL | FLOAT ) + singleArgPlusKind # emits 2 tokens,
convertToDouble        = DBLE   + singleArgPlusKind # emits 2 tokens, 
convertToComplex       = CMPLX  + doubleArgPlusKind # emits 3 tokens, op (x,y) -> x+iy | c.x = x, c.y = b  ; op: x -> (x,0) -> x+i0 -> | c.x = x, c.y =0
convertToDoubleComplex = DCMPLX + doubleArgPlusKind # emits 3 tokens, op (x,y) -> x+iy | c.x = x, c.y = b  ; op: x -> (x,0) -> x+i0 -> | c.x = x, c.y =0
extractImag            = AIMAG  + singleArgPlusKind # emits 1 tokens, op: x+iy -> y
conjugate              = CONJG  + singleArgPlusKind # emits 1 tokens, op: x+iy -> x-iy | c.y = -c.y
conjugateDoubleComplex = DCONJG + singleArgPlusKind # emits 1 tokens, op: x+iy -> x-iy | c.y = -c.y

conversion <<= convertToExtractReal | convertToDouble | convertToComplex | convertToDoubleComplex | extractImag | conjugate | conjugateDoubleComplex

# inquiry functions
SIZE,LBOUND,UBOUND = makeCaselessLiteral("size,lbound,ubound",suppress=True)
inquiryDimArg  = ( integer | arithmeticExpression ) 
inquiryKindArg = ( integer | arithmeticExpression ) 
inquiryFunctionArg = lvalue + Optional(COMMA + Optional(DIM + EQ) + inquiryDimArg,default=None) + Optional(COMMA + Optional(KIND + EQ) + inquiryKindArg,default=None)
sizeInquiry   = SIZE   + LPAR + inquiryFunctionArg + RPAR  
lboundInquiry = LBOUND + LPAR + inquiryFunctionArg + RPAR 
uboundInquiry = UBOUND + LPAR + inquiryFunctionArg + RPAR 
inquiryFunction <<= sizeInquiry | lboundInquiry | uboundInquiry

## Condition
### If statement
WHILE,IF,THEN,DO,END,SELECT,CASE,DEFAULT,WHERE,FORALL,FOREACH = makeCaselessLiteral(
 "while,if,then,do,end,select,case,default,where,forall,foreach",suppress=True)
ELSE      = CASELESS_LITERAL("else").suppress()
ENDIF     = END + IF.copy() # Otherwise parse actions apply
ENDSELECT = END + SELECT.copy()

block = Forward() # forward declaration

# Example:
#
#  IF (x < 50) THEN
#     Grade = 'f'
#  ELSE IF (x < 60) THEN
#     Grade = 'd'
#  ELSEIF (x < 70) THEN
#     Grade = 'c'
#  ELSE IF (x < 80) THEN
#     Grade = 'b'
#  ELSE
#     Grade = 'a'
#  END IF
fortran_if_else_if = Optional(ELSE,default="") + IF + LPAR + arithmeticLogicalExpression + RPAR + THEN
fortran_else       = ELSE

#[name:] select case (expression) 
#   case (selector1)          
#   ! some statements          
#   ... case (selector2)           
#   ! other statements           
#   ...       
#   case default          
#   ! more statements          
#   ...   
#end select [name]
fortran_select_case     = Regex(r"(\w+:)?\s*select\s+case\s*(",re.IGNORECASE).suppress() + arithmeticLogicalExpression + RPAR
fortran_case            = Regex(r"case\s*(") + arithmeticLogicalExpression + RPAR
fortran_case_default    = Regex(r"case\s+default")
fortran_end_select_case = Regex(r"end\s*select(\s+\w+)?",re.IGNORECASE).suppress()

## Do/while Loop
doLoopEnd     = Regex(r"end\s*do(\s+\w+)?",re.IGNORECASE).suppress()
doLoopStart   = Regex(r"(\w+:)?\s*do",re.IGNORECASE).suppress()

fortan_do    = doLoopStart + assignment + COMMA + arithmeticExpression + Optional(COMMA + arithmeticExpression,default="1")

fortan_do_while = doLoopStart   + WHILE + LPAR + arithmeticLogicalExpression + RPAR 

# TODO Dominic: Simplify
## Declaration  // example: "real(kind=8), device, host, parameter :: rhx, rhy"
TYPE,CHARACTER,INTEGER,LOGICAL,REAL,COMPLEX,DOUBlE,PRECISION = makeCaselessLiteral(\
  "type,character,integer,logical,real,complex,double,precision")
MULT=Literal("*")
kindRValue = MULT | integer | ( ~LEN + identifier )
kindList =\
      LPAR +\
        Optional(( KIND + EQ + kindRValue) |\
        ( KIND + LPAR + kindRValue + RPAR) |\
        kindRValue,default=None) +\
        OPTCOMMA +\
        Optional(LEN + EQ + kindRValue,default=None) +\
      RPAR  # emits 2 tokens [kind,len]
multType = ( MULT.suppress() + Optional(LPAR) + kindRValue + Optional(RPAR)).setParseAction(lambda tokens: [tokens[0],tokens[0]]) # emits 2 tokens

sizeOf = Optional( Group(multType) | Group(kindList), default = [None,None] )

logicalType         = LOGICAL + sizeOf                                                                              # emits 2 tokens                
characterType       = CHARACTER + sizeOf                                                                            # emits 2 tokens                                                  
integerType         = INTEGER + sizeOf                                                                              # emits 2 tokens                
realType            = REAL + sizeOf                                                                                 # emits 2 tokens                     
doublePrecisionType = (DOUBlE + PRECISION).setParseAction(lambda tokens: ["real",["8",None]])                       # emits 2 tokens !                   
complexType         = COMPLEX + sizeOf                                                                              # emits 2 tokens                           
typeType            = (TYPE + LPAR + identifier + RPAR).setParseAction(lambda tokens: [tokens[0],[tokens[1],None]]) # emits 2 tokens                           

datatype_comment = characterType | typeType 
datatype_convert = logicalType | integerType | realType | doublePrecisionType | complexType
datatype         = ( datatype_comment | datatype_convert )

# attributes/qualifiers
INTENT,IN,OUT,INOUT,DIMENSION = makeCaselessLiteral(\
  "intent,in,out,inout,dimension")
INTENT = INTENT.suppress()
DIMENSION = DIMENSION.suppress()

PUBLIC,PRIVATE,EXTERNAL,INTRINSIC = makeCaselessLiteral(\
  "public,private,external,intrinsic")
simpleAttribute = Regex(r"\b(public|private|external|intrinsic|value|parameter|allocatable|pointer|save|target|shared|device|pinned|managed|optional|vartype|contiguous)\b",re.IGNORECASE)
# TODO identify how many what dimension(5) means. Range 1:5?
dimensionValue     = matrixRange | arithmeticExpression | Literal("*")
bounds             = Group(LPAR + delimitedList(dimensionValue) + RPAR)
matrixRanges       = Group(LPAR + delimitedList(matrixRange) + RPAR)
dimensionQualifier = Group(DIMENSION + bounds) # emits [*]
intentQualifier    = Group(INTENT + LPAR + (INOUT|IN|OUT) + RPAR)   # emits *
qualifier          = intentQualifier | dimensionQualifier | simpleAttribute
qualifierList      = Group(delimitedList(qualifier))
declaredVariable   = Group( identifier + Optional(bounds,default=None) + Optional(( EQ | PEQ )  + ( matrixArithmeticExpression | complexArithmeticExpression | arithmeticExpression ), default=None)) # ! emits [*,[*],*]
declarationLhs = datatype + Optional(COMMA + qualifierList,default=[]) + COLONS
fortran_declaration = declarationLhs + Group(delimitedList(declaredVariable))   # ! emits *,[*],[*]
#precisionDeclaredVariable = identifier + EQ + CASELESS_LITERAL("selected_kind").suppress() + LPAR + integer + COMMA + integer + RPAR # ! emits [*,[*],*]
#precisionDeclaration      = integerType + COMMA + qualifierList + COLONS + Group(delimitedList(precisionDeclaredVariableVariable))   # ! emits *,[*],[*]

# Define forward-declared block
comment           = Combine(Literal("!") + ~(~White()+Literal("$")) + restOfLine())
printStatement    = Combine(oneOf("print write read format",caseless=CASELESS) + restOfLine)
returnStatement   = CASELESS_LITERAL("return")
controlStatements = returnStatement

## Attributes // example: attributes
attributes = CASELESS_LITERAL("attributes").suppress() + LPAR + qualifierList + RPAR + COLONS + Group(delimitedList(identifier))

## Program / Subroutine / Function
PROGRAM,MODULE,PROCEDURE,FUNCTION,SUBROUTINE,ATTRIBUTES,IMPLICIT,NONE,USE,ONLY,CONTAINS,INTERFACE =  makeCaselessLiteral(\
  "program,module,procedure,function,subroutine,attributes,implicit,none,use,only,contains,interface",suppress=True)
# preprocessorDirective = "

# Example:
# attributes(global) subroutine testlibm( a, b )
#   use libm
#   real, device :: a(*), b(*)
#   i = threadIdx%x
#   b(i) = cbrt(a(i))
# end subroutine 
# USE namespace [, rename-list], [ONLY: only-list]
NONSTRUCTURE = DO|IF|SELECT|WHERE|FORALL|FOREACH|TYPE|INTERFACE

# TODO does not consider pointer mappings 'use foo, only: bar => bar2'
only = Group(identifier + Optional(PEQ + identifier,default=None))
use = USE + Optional(COMMA + INTRINSIC,default=None) + identifier + Optional(COMMA + ONLY + singleColon.suppress() + Group(delimitedList(only)),default=[]) # emits 3 tokens; [*,*,[*]] 
implicit = IMPLICIT + NONE # TODO no complete description

declarationSectionEntry = use | implicit | declaration | attributes 
procedureBody = Group(ZeroOrMore(declarationSectionEntry | block))

rawIdentifier     = pyparsing_common.identifier.copy() # produces a string instead of a identifier translator tree node
rawIdentifierList = Group(delimitedList(rawIdentifier))

subroutineStart = Optional(ATTRIBUTES + LPAR + rawIdentifierList + RPAR,default=[]) + SUBROUTINE + identifier +\
        Optional(LPAR + rawIdentifierList + RPAR, default=[]) # emits 3 tokens -> *,*,[*]
subroutineEnd = END + ~(NONSTRUCTURE|FUNCTION) + Optional(SUBROUTINE) + Optional(LPAR + identifier.suppress() + RPAR)
#subroutine = subroutineStart + procedureBody + subroutineEnd

PURE,RECURSIVE,RESULT = makeCaselessLiteral("pure,recursive,result",suppress=True)
#funtionResult = function func(i) result(j)
functionStart = Optional(PURE | RECURSIVE) + Optional(ATTRIBUTES + LPAR + rawIdentifierList + RPAR,default=[]) +\
                Optional(datatype).suppress() +\
                FUNCTION + identifier + Optional(LPAR + rawIdentifierList + RPAR, default=[]) +\
                Optional(RESULT + LPAR + identifier + RPAR,default=None) # ! emits 4  tokens -> *,*,[*],*
functionEnd = END + ~(NONSTRUCTURE|SUBROUTINE) + Optional(FUNCTION) + Optional(identifier.suppress()) # ! emits 0 tokens
#function = functionStart + procedureBody + functionEnd

###
###
# Some extra definitions for the kernelextractor.py app
###
###
moduleStart     = MODULE + (~PROCEDURE + identifier) 
moduleEnd       = END + ~(NONSTRUCTURE) + MODULE + Optional(identifier.suppress())
moduleProcedure = MODULE + PROCEDURE  + delimitedList(identifier)

PUBLIC,PRIVATE,EXTERNAL = makeCaselessLiteral("public,private,external",suppress=False)
publicPrivate = ( PUBLIC | PRIVATE ) + COLONS + delimitedList(identifier)
external  = EXTERNAL + COLONS + delimitedList(identifier)
procedure = PROCEDURE + LPAR + delimitedList(identifier) + RPAR + COLONS - delimitedList(identifier)

programStart = PROGRAM + identifier
programEnd = END + PROGRAM + Optional(identifier.suppress())

# pick this up: https://fortran-lang.org/learn/quickstart/derived_types
#typeAttributeList = attribute-list


simpleTypeAttribute  = Regex(r"\b((abstract|public|private)\b|bind\s*\(\s*c\s*\))",\
        re.IGNORECASE).setParseAction(lambda tokens: tokens[0].replace(" ",""))
extendsTypeAttribute = Regex(r"extends\s*\(\w+\)",re.IGNORECASE).\
        setParseAction(lambda tokens: tokens[0].replace(" ",""))
typeAttributeList    = Group(delimitedList(extendsTypeAttribute | simpleTypeAttribute))
typeStart = TYPE.suppress() + Optional(COMMA + typeAttributeList,default=[]) + Optional(COLONS) + identifier # ! emits 2 tokens: [[*], *]
typeEnd   = Regex(r"\bend\s*type\b",re.IGNORECASE).suppress() + Optional(identifier).suppress()

structureEnd = END + ~(NONSTRUCTURE) + Optional(FUNCTION|SUBROUTINE|MODULE).suppress() + Optional(identifier).suppress()