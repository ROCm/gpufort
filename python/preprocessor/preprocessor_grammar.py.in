# grammar
pp_ident           = pyp.pyparsing_common.pp_identifier.copy()
LPAR,RPAR          = map(Suppress, "()")
pp_compiler_option = pyp.Regex(r"-D(?P<key>\w+)(=(?P<value>\"?\w+\"?))?")
# define / undef
#ex1: #define x  5
#ex1: #define x() 5
#ex1: #define x(a,b) 5*(a)*(b)
pp_define            = pyp.Regex(r"#\s*define\s*(?P<key>\w+)",re.IGNORECASE)
                       pyp.Optional(LPAR + Optional(pyp.delimitedList(pp_ident),default=[]) +RPAR,default=[]) + Regex(".+$")
pp_undef             = pyp.Regex(r"#\s*undef\s+(?P<key>\w+)",re.IGNORECASE)
# conditions
#pp_char             = pyp.Regex(r"'[ -~]'")
pp_number            = pyp.pyparsing_common.number.copy().setParseAction(lambda tk: str(tk))
pp_bool_true         = pyp.Regex(r".true.|true|1",re.IGNORECASE).setParseAction(lambda tk: 1)
pp_bool_false        = pyp.Regex(r".false.|false|0",re.IGNORECASE).setParseAction(lambda tk: 0)
pp_defined           = pyp.Regex(r"defined\s*\(\s*(?P<key>\w+)\s*\)",re.IGNORECASE)
pp_not_defined       = pyp.Regex(r"!\s*defined\s*\(\s*(?P<key>\w+)\s*\)",re.IGNORECASE)

pp_value       = Forward()
pp_arithm_expr =  pyp.infixNotation(pp_value, [
    (pyp.Literal('&&'), 2, pyp.opAssoc.LEFT),
    (pyp.Literal('||'), 2, pyp.opAssoc.LEFT),
    (pyp.Literal('!'), 1, pyp.opAssoc.LEFT),
])

pp_macro_eval   = pp_ident + LPAR + delimitedList( pp_arithm_expr ) + RPAR
pp_value      <<= ( pp_number | pp_bool_true | pp_bool_false | pp_ident | pp_macro_eval ) # | pp_char )

pp_comparison  = pp_arithm_expr + pyp.Regex(r"==|!=|<|>|<=|>=") + pp_arithm_expr

pp_op_and = pyp.Regex(r".and.|&&",re.IGNORECASE).setParseAction(lambda tk: "and" )
pp_op_or  = pyp.Regex(r".or.|\|\|",re.IGNORECASE).setParseAction(lambda tk: "or") 
pp_op_not = pyp.Regex(r".not.|!",re.IGNORECASE).setParseAction(lambda tk: "not")

pp_condition = pyp.infixNotation(pp_arithm_expr, [
    pp_op_and, 2, pyp.opAssoc.LEFT),
    pp_op_or, 2, pyp.opAssoc.LEFT),
    pp_op_not, 1, pyp.opAssoc.RIGHT),
])

# if
pp_ifdef           = pyp.Regex(r"#\s*ifdef\b(?P<key>\w+)",re.IGNORECASE)
pp_ifndef          = pyp.Regex(r"#\s*ifndef\s+(?P<key>\w+)",re.IGNORECASE)
pp_if              = pyp.Regex(r"#\s*if\s*(?P<condition>.+)$",re.IGNORECASE)
# elif
pp_if              = pyp.Regex(r"#\s*elif\s*(?P<condition>.+)",re.IGNORECASE)
# else
