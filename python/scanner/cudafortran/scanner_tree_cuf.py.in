# SPDX-License-Identifier: MIT                                                
# Copyright (c) 2021 GPUFORT Advanced Micro Devices, Inc. All rights reserved.
class CufBackendBase:
    def __init__(self,stnode):
        self._stnode = stnode

CUF_LOOP_KERNEL_BACKENDS = {} 

def register_cuf_backend(name,loop_kernel_generator_class,runtime_module_name):
    global SUPPORTED_DESTINATION_DIALECTS
    global RUNTIME_MODULE_NAMES
    global CUF_LOOP_KERNEL_BACKENDS
    
    if not name in SUPPORTED_DESTINATION_DIALECTS:
        SUPPORTED_DESTINATION_DIALECTS.append(name)
    RUNTIME_MODULE_NAMES[name]     = runtime_module_name
    CUF_LOOP_KERNEL_BACKENDS[name] = loop_kernel_generator_class

exec(open("{0}/cudafortran/scanner_tree_cuf2omp.py.in".format(scanner_dir)).read())
exec(open("{0}/cudafortran/scanner_tree_cuf2hip.py.in".format(scanner_dir)).read())

class STCufDirective(STDirective):
    """
    This class has the functionality of a kernel if the stored lines 
    contain a parallel or kernels directive.
    
    https://www.openacc.org/sites/default/files/inline-files/OpenCUF.2.7.pdf)
    """
    def __init__(self,parent,lineno,lines,directive_no):
        STDirective.__init__(self,parent,lineno,lines,directive_no,sentinel="!$cuf")
        self._default_present_vars = []
    def transform(self,joined_lines,joined_statements,statements_fully_cover_lines,index_hints=[]):
        assert False, "Currently, there are only CUF parallel directives"

class STCufLoopKernel(STCufDirective,STLoopKernel):
    def __init__(self,parent,lineno,lines,directive_no):
        STCufDirective.__init__(self,parent,lineno,lines,directive_no)
        STLoopKernel.__init__(self,parent,lineno,lines)
    def transform(self,joined_lines,joined_statements,statements_fully_cover_lines,index_hints=[],destination_dialect=""):
        """
        :param destination_dialect: allows to override default if this kernel
                                   should be translated via another backend.
        """
        checked_dialect = check_destination_dialect(\
            DESTINATION_DIALECT if not len(destination_dialect) else destination_dialect)
        return CUF_LOOP_KERNEL_BACKENDS[checked_dialect](self).transform(\
          joined_lines,joined_statements,statements_fully_cover_lines,index_hints)