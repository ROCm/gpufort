# SPDX-License-Identifier: MIT                                                
# Copyright (c) 2021 Advanced Micro Devices, Inc. All rights reserved.
class AccBackendBase:
    def __init__(self,stnode):
        self._stnode = stnode

ACC_BACKENDS             = {} 
ACC_LOOP_KERNEL_BACKENDS = {} 

def register_acc_backend(name,directive_generator_class,loop_kernel_generator_class,runtime_module_name):
    global SUPPORTED_DESTINATION_DIALECTS
    global RUNTIME_MODULE_NAMES
    global ACC_BACKENDS
    global ACC_LOOP_KERNEL_BACKENDS
    
    if not name in SUPPORTED_DESTINATION_DIALECTS:
        SUPPORTED_DESTINATION_DIALECTS.append(name)
    RUNTIME_MODULE_NAMES[name]     = runtime_module_name
    ACC_BACKENDS[name]             = directive_generator_class 
    ACC_LOOP_KERNEL_BACKENDS[name] = loop_kernel_generator_class

exec(open("{0}/openacc/scanner_tree_acc2omp.py.in".format(scanner_dir)).read())
exec(open("{0}/openacc/scanner_tree_acc2hipgpufortrt.py.in".format(scanner_dir)).read())
exec(open("{0}/openacc/scanner_tree_acc2hipgccrt.py.in".format(scanner_dir)).read())

class STAccDirective(STDirective):
    """
    This class has the functionality of a kernel if the stored lines 
    contain a parallel or kernels directive.
    
    https://www.openacc.org/sites/default/files/inline-files/OpenACC.2.7.pdf)
    """
    def __init__(self,parent,first_linemap,first_linemap_first_statement,directive_no):
        STDirective.__init__(self,parent,first_linemap,first_linemap_first_statement,directive_no,sentinel="!$acc")
        self._default_present_vars = []
    def find_substring(self,token):
        return token in self.single_line_statement()
    def find_any_substring(self,tokens):
        result = False
        for token in tokens:
            result = result or self.find_substring(token)
        return result
    def find_all_substrings(self,tokens):
        result = True
        for token in tokens:
            result = result and self.find_substring(token)
        return result
    def is_end_directive(self):
        return self.find_substring("acc end")
    def is_data_directive(self):
        return self.find_substring("acc data")
    def is_enter_directive(self):
        return self.find_substring("acc enter")
    def is_exit_directive(self):
        return self.find_substring("acc exit")
    def is_init_directive(self):
        return self.find_substring("acc init")
    def is_shutdown_directive(self):
        return self.find_substring("acc shutdown")
    def is_wait_directive(self):
        return self.find_substring("acc wait")
    def is_loop_directive(self):
        return self.find_substring("acc loop")
    def is_kernels_directive(self):
        return not self.find_substring("acc kernels loop") and\
            self.find_substring("acc kernels")
    def is_parallel_directive(self):
        return not self.find_substring("acc parallel loop") and\
            self.find_substring("acc parallel")
    def is_loop_directive(self):
        return self.find_substring("acc loop")
    def is_parallel_loop_directive(self):
        return self.find_substring("acc parallel loop")
    def is_kernels_loop_directive(self):
        return self.find_substring("acc kernels loop")
    def __str__(self):
        return """
{{ single_line_statement={single_line_statement},
         is_init_directive={is_init_directive},
         is_shutdown_directive={is_shutdown_directive},
         is_end_directive={is_end_directive},
         is_enter_directive={is_enter_directive},
         is_exit_directive={is_exit_directive},
         is_wait_directive={is_wait_directive},
         is_loop_directive={is_loop_directive},
         is_parallel_directive={is_parallel_directive},
         is_kernels_directive={is_kernels_directive},
         is_parallel_loop_directive={is_parallel_loop_directive} }}
""".format(
         single_line_statement=self.single_line_statement(),
         is_init_directive=self.is_init_directive(),
         is_shutdown_directive=self.is_shutdown_directive(),
         is_end_directive=self.is_end_directive(),
         is_enter_directive=self.is_enter_directive(),
         is_exit_directive=self.is_exit_directive(),
         is_wait_directive=self.is_wait_directive(),
         is_loop_directive=self.is_loop_directive(),
         is_parallel_directive=self.is_parallel_directive(),
         is_kernels_directive=self.is_kernels_directive(),
         is_parallel_loop_directive=self.is_parallel_loop_directive()
         ).strip().replace("\n","")
    __repr__ = __str__ 
    def transform(self,joined_lines,joined_statements,statements_fully_cover_lines,index_hints=[]):
        checked_dialect = check_destination_dialect(DESTINATION_DIALECT)
        return ACC_BACKENDS[checked_dialect](self).transform(\
                joined_lines,joined_statements,statements_fully_cover_lines,index_hints)
class STAccLoopKernel(STAccDirective,STLoopKernel):
    def __init__(self,parent,first_linemap,first_linemap_first_statement,directive_no):
        STAccDirective.__init__(self,parent,first_linemap,first_linemap_first_statement,directive_no)
        STLoopKernel.__init__(self,parent,first_linemap,first_linemap_first_statement)
    def transform(self,joined_lines,joined_statements,statements_fully_cover_lines,index_hints=[],destination_dialect=""):
        """
        :param destination_dialect: allows to override default if this kernel
                                   should be translated via another backend.
        """
        checked_dialect = check_destination_dialect(\
            DESTINATION_DIALECT if not len(destination_dialect) else destination_dialect)
        return ACC_LOOP_KERNEL_BACKENDS[checked_dialect](self).transform(\
                joined_lines,joined_statements,statements_fully_cover_lines,index_hints)