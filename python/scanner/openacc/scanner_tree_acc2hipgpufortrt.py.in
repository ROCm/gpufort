# SPDX-License-Identifier: MIT                                                
# Copyright (c) 2021 Advanced Micro Devices, Inc. All rights reserved.
# init shutdown
HIP_GPUFORT_RT_ACC_INIT     = "{indent}call gpufort_acc_init()\n"
HIP_GPUFORT_RT_ACC_SHUTDOWN = "{indent}call gpufort_acc_shutdown()\n"
# regions
HIP_GPUFORT_RT_ACC_ENTER_REGION = "{indent}call gpufort_acc_enter_region()\n"
HIP_GPUFORT_RT_ACC_EXIT_REGION = "{indent}call gpufort_acc_exit_region()\n"
# create
HIP_GPUFORT_RT_ACC_CREATE = "{indent}{dev_var} = gpufort_acc_create({var})\n"
# no_create
HIP_GPUFORT_RT_ACC_NO_CREATE = "{indent}{dev_var} = gpufort_acc_no_create({var})\n"
# delete
HIP_GPUFORT_RT_ACC_DELETE = "{indent}call gpufort_acc_delete({var}{finalize})\n"
# copyin
HIP_GPUFORT_RT_ACC_COPYIN = "{indent}{dev_var} = gpufort_acc_copyin({var}{asyncr})\n"
# copy
HIP_GPUFORT_RT_ACC_COPY = "{indent}{dev_var} = gpufort_acc_copy({var}{asyncr})\n"
# copyout
HIP_GPUFORT_RT_ACC_COPYOUT = "{indent}{dev_var} = gpufort_acc_copyout({var}{asyncr})\n"
# update host
HIP_GPUFORT_RT_ACC_UPDATE_HOST = "{indent}call gpufort_acc_update_host({var}{asyncr})\n"
# update device
HIP_GPUFORT_RT_ACC_UPDATE_DEVICE = "{indent}call gpufort_acc_update_device({var}{asyncr})\n"
# present
HIP_GPUFORT_RT_ACC_PRESENT = "{indent}{dev_var} = gpufort_acc_present({var})\n"
# wait
HIP_GPUFORT_RT_ACC_WAIT = "{indent}call gpufort_acc_wait({queue}{asyncr})\n"

MAPPING_CLAUSE_2_TEMPLATE_MAP = {
  "create": HIP_GPUFORT_RT_ACC_CREATE,
  "no_create": HIP_GPUFORT_RT_ACC_NO_CREATE,
  "delete": HIP_GPUFORT_RT_ACC_DELETE,
  "copyin": HIP_GPUFORT_RT_ACC_COPYIN,
  "copy": HIP_GPUFORT_RT_ACC_COPY,
  "copyout": HIP_GPUFORT_RT_ACC_COPYOUT,
  "present": HIP_GPUFORT_RT_ACC_PRESENT
}

def dev_var_name(var):
    #tokens = var.split("%")
    #tokens[-1] = ACC_DEV_PREFIX+tokens[-1]+ACC_DEV_SUFFIX
    #return "%".join(tokens)
    result = var.replace("%","_")
    result = result.replace("(","$")
    result = result.replace(")","$")
    result = "".join(c for c in result if c.isalnum() or c in "_$")
    result = result.replace("$$","")
    result = result.replace("$","_")
    return ACC_DEV_PREFIX + result + ACC_DEV_SUFFIX

class Acc2HipGpufortRT(AccBackendBase):
    # clauses 
    def _handle_async(self,queue=None,prefix=",asyncr="):
        """
        :return: Empty string if no queue was found
        :rtype: str
        """
        result = ""
        if queue is None:
            for parse_result in translator.acc_clause_async.searchString(queue,1):
                #print(parse_result)
                # TODO find ...
                result = parse_result[0].queue()
        if len(result):
           result = prefix + result
        return result
    def _handle_finalize(self):
        """
        :return: If a finalize clause is present
        :rtype: bool
        """
        return len(translator.acc_clause_finalize.searchString(self.single_line_statement(),1))
    def _handle_mapping_clauses(self):
        """
        """
        result = ""
        temp_vars = set()
        indent = self._stnode.first_line_indent()
        #
        for parse_result in translator.acc_mapping_clause.scanString(self._stnode.single_line_statement()):
            clause         = parse_result[0][0]
            if clause.kind() in MAPPING_CLAUSE_2_TEMPLATE_MAP:
                var_names       = clause.var_names()
                var_expressions = clause.var_expressions()
                for i,var_expr in enumerate(var_expressions):
                    deviceptr = dev_var_name(var_names[i])
                    template = MAPPING_CLAUSE_2_TEMPLATE_MAP[clause.kind()]
                    result += template.format(indent=indent,var=var_expr,dev_var=deviceptr,asyncr=self._handle_async())
                    temp_vars.add(deviceptr)
        return result, len(result), temp_vars
    def _handle_default(self):
        """
        Emits a acc_clause_present command for every variable in the list
        """
        result   = ""
        temp_vars = set()
        template = HIP_GPUFORT_RT_ACC_PRESENT
        indent   = self._stnode.first_line_indent()
        for parse_result in translator.acc_clause_default.scanString(self._stnode.single_line_statement(),1):
            value = str(parse_result[0][0]).lower()
            #print(value)
            if value == "present":
                for var_expr in self._default_present_vars:
                    deviceptr = dev_var_name(var_expr)
                    temp_vars.add(deviceptr)
                    result += template.format(indent=indent,var=var_expr,dev_var=deviceptr)
        return result, len(result), temp_vars
    def _handle_update(self):
        """
        Emits a acc_clause_copy command for every variable in the list
        """
        result = ""
        temp_vars = set()
        indent = self._stnode.first_line_indent()
        # update host
        #for parse_result in translator.acc_clause_update.scanString(self.single_line_statement()):
        #    #print(parse_result[0][0])
        #    #print(parse_result[0][1])
        #    asyncr=self._handle_async(parse_result[0][1])
        #    #print(asyncr)
        #    for dest in parse_result[0][0]:
        #        #print(dest)
        #        template = HIP_GPUFORT_RT_ACC_UPDATE_HOST
        #        if dest[0]: # -> device
        #           template = HIP_GPUFORT_RT_ACC_UPDATE_DEVICE
        #        #print(dest[0])
        #        #print(dest[1])
        #        for rvalue in dest[1]:
        #            #print(rvalue)
        #            var_expr = rvalue.f_str()
        #            deviceptr = dev_var_name(var_expr)
        #            result += template.format(indent=indent,var=var_expr,dev_var=deviceptr,asyncr=asyncr)
        return result, len(result), temp_vars
    def _handle_wait(self):
        """
        Emits a acc_clause_wait command for every variable in the list
        """
        result = ""
        temp_vars = set()
        # wait
        indent = self._stnode.first_line_indent()
        template = HIP_GPUFORT_RT_ACC_WAIT
        for parse_result in translator.acc_clause_wait.scanString(self._stnode.single_line_statement()):
            queue_list=[]
            asyncr_list=[]
            for rvalue in parse_result[0][0]: # queue ids
                queue_list.append(rvalue.var_name())
            for rvalue in parse_result[0][1]: # asyncr queue ids
                asyncr_list.append(rvalue.var_name())
            queue=""
            asyncr=""
            if len(queue_list):
                queue = ",[{}]".format(",".join(queue_list))
            if len(asyncr_list):
                asyncr = ",[{}]".format(",".join(asyncr_list))
            result += template.format(indent=indent,queue=queue,asyncr=asyncr)
        return result, len(result), temp_vars
    def _handle_if(self):
        """
        :return: Empty string if no if was found
        :rtype: str
        """
        condition = ""
        for parse_result in translator.acc_clause_if.searchString(self._stnode.single_line_statement(),1):
            condition = parse_result[0].condition()
        return condition
    def transform(self,joined_lines,joined_statements,statements_fully_cover_lines,index_hints=[],handle_if=True):
        """
        :param line: An excerpt from a Fortran file, possibly multiple lines
        :type line: str
        :return: If the text was changed at all
        :rtype: bool
        """
        result = ""
        all_temp_vars = set()
        
        ## Init 
        stnode = self._stnode
        indent = stnode.first_line_indent()
        if stnode.is_init_directive():
            result += HIP_GPUFORT_RT_ACC_INIT.format(indent=indent)
        
        ## Enter region commands must come first
        emit_enter_region = stnode.is_enter_directive()
        emit_enter_region = emit_enter_region or stnode.is_data_directive()
        #emit_enter_region = emit_enter_region or stnode.is_parallel_directive()
        #emit_enter_region = emit_enter_region or stnode.is_parallel_loop_directive() 
        emit_enter_region = emit_enter_region or stnode.is_kernels_directive()
        if emit_enter_region:
            result += HIP_GPUFORT_RT_ACC_ENTER_REGION.format(indent=indent)

        ## Other directives/clauses
        # create
        partial_result, transformed, temp_vars = self._handle_mapping_clauses()
        if transformed:
            result += partial_result
            all_temp_vars.update(temp_vars)
        
        # update directive
        partial_result, transformed, temp_vars = self._handle_update()
        if transformed:
            result += partial_result
            all_temp_vars.update(temp_vars)
        
        ## wait
        partial_result, transformed, _ = self._handle_wait()
        if transformed:
            result += partial_result
        
        ## Exit region commands must come last
        emit_exit_region = stnode.is_exit_directive()
        emit_exit_region = emit_exit_region or (stnode.is_end_directive() and stnode.find_substring("kernels") and not stnode.find_substring("loop"))
        #emit_exit_region = emit_exit_region or (stnode.is_end_directive() and stnode.find_substring("parallel") and not stnode.find_substring("loop"))
        emit_exit_region = emit_exit_region or (stnode.is_end_directive() and stnode.find_substring("data"))
        if emit_exit_region:
            result += HIP_GPUFORT_RT_ACC_EXIT_REGION.format(indent=indent)
        if stnode.is_shutdown_directive():
            result += HIP_GPUFORT_RT_ACC_SHUTDOWN.format(indent=indent)
       
        # _handle if 
        condition = self._handle_if()
        if len(condition) and handle_if:
            result = "if ( {condition} ) then\n{result}\n endif".format(\
                    condition=condition, result=result.rstrip("\n"))
       
        # introduce the new variables 
        if len(all_temp_vars):
            begin  = stnode._parent.find_last(filter=lambda child : not child._ignore_in_s2s_translation and type(child) in [STUseStatement,STDeclaration,STPlaceHolder])
            indent = stnode.first_line_indent()
            if begin is not None:
                for var in all_temp_vars:
                     begin.add_to_epilog("{indent}type(c_ptr) :: {name}\n".format(indent=indent,name=var))
            else:
                stnode.add_to_prolog("! TODO(gpufort): move declarations and use statement to appropriate place\n")
                for var in all_temp_vars:
                    stnode.add_to_prolog("{indent}type(c_ptr) :: {name}\n".format(indent=indent,name=var))

        return result, len(result)

class AccLoopKernel2HipGpufortRT(Acc2HipGpufortRT):
    def transform(self,joined_lines,joined_statements,statements_fully_cover_lines,index_hints=[]):
        result = ""
        stnode = self._stnode
        indent = stnode.first_line_indent()
        if stnode.is_parallel_loop_directive() or stnode.is_kernels_loop_directive():
            partial_result, _ = Acc2HipGpufortRT.transform(self,joined_lines,joined_statements,statements_fully_cover_lines,index_hints,handle_if=False) 
            result = partial_result
        partial_result, _ = STLoopKernel.transform(stnode,joined_lines,joined_statements,statements_fully_cover_lines,index_hints) 
        result += partial_result
        # add wait call if necessary
        queue = self._handle_async(None,"")
        if not len(queue):
            result += "\n" + HIP_GPUFORT_RT_ACC_WAIT.format(indent=indent,queue=queue,asyncr="")
        #if stnode.is_parallel_loop_directive() or stnode.is_kernels_loop_directive():
        if stnode.is_kernels_loop_directive():
           result += "\n"+HIP_GPUFORT_RT_ACC_EXIT_REGION.format(indent=indent)

        # wrap in ifdef if necessary
        condition = self._handle_if()
        if len(condition):
            result = "if ( {condition} ) then\n{result}\nelse\n {original}\n endif".format(\
                    condition=condition, result=result.rstrip("\n"), original="".join(stnode._lines).rstrip("\n"))
        return result, len(result)

register_acc_backend("hip-gpufort-rt",Acc2HipGpufortRT,AccLoopKernel2HipGpufortRT,"gpufort_acc_runtime")