# SPDX-License-Identifier: MIT                                                
# Copyright (c) 2021 GPUFORT Advanced Micro Devices, Inc. All rights reserved.
pAttributes = re.compile(r"attributes\s*\(\s*\w+\s*(,\s*\w+)?\s*\)\s*", flags=re.IGNORECASE)

def remove_type_prefix(var_name):
    return var_name.split("%")[-1]

def replace_ignore_case(key,subst,text):
    return re.sub(re.escape(key), subst, text, flags=re.IGNORECASE)

def flatten_list(items):
    """Yield items from any nested iterable"""
    for x in items:
        if isinstance(x, Iterable) and not isinstance(x, (str, bytes)):
            for sub_x in flatten_list(x):
                yield sub_x
        else:
            yield x

# Object representation

# We create an object tree because we want to preserve scope.

class Tagged:
    def tag(self):
        """
        Construct a tag that can be used to search the index.
        """
        result = self.name.lower()
        def recursive_parent_lookup(curr):
            nonlocal result
            if type(curr) != STRoot:
                result = curr.name.lower() + ":" + result
                recursive_parent_lookup(curr._parent)
        recursive_parent_lookup(self._parent)        
        return result

class STNode:
    def __init__(self,parent,first_linemap,first_statement_index=0):
        self.name                    = None
        self.kind                    = None
        self._linemaps               = []
        if first_linemap != None:
            self._linemaps.append(first_linemap)
        self._first_statement_index  = first_statement_index
        self._last_statement_index   = first_statement_index # inclusive
        self._children               = []
        self._parent                 = parent
        self._ignore_in_s2s_translation = False 
    def __get_linemap_content(self,key,first_linemap_first_elem=0,last_linemap_last_elem=-1):
        """Collects entries for the given key from all linemaps associated
        with this node."""
        result = []
        for i,linemap in enumerate(self._linemaps):
            if i == 0: 
                result += linemap[key][first_linemap_first_elem:]
            elif i == len(self._linemaps)-1:
                if last_linemap_last_elem == -1:
                    result += linemap[key]
                else:
                    result += linemap[key][0:last_linemap_last_elem+1]
            else:
                result += linemap[key]
        return result
    def add_linemap(self,linemap):
        """Adds a linemap if it differs from the last linemap."""
        if not len(self._linemaps) or self._linemaps[-1]["lineno"] < linemap["lineno"]:
            self._linemaps.append(linemap)
    def complete_init(self):
        """Complete the initialization
        
        This routine is called after all associated linemaps have
        been added to this node.
        """
        pass
    def remove_comments(self,lines):
        """Remove comments but keep directives."""
        # TODO move somewhere else
        for line in list(lines): # shallow copy
            stripped_line = line.lstrip("\t ")
            if stripped_line[0] in ["*","c","C","!"] and not\
               stripped_line[1] == "$": 
                 lines.remove(line)
    def remove_whitespaces(self,lines):
        """Remove any whitespace and line continuation characters."""
        for i,line in enumerate(lines):
            lines[i] = line.replace(" ","").replace("\t","").replace("\n","").replace("&","")
    def lines(self):
        return self.__get_linemap_content("lines")
    def statements(self,include_none_entries=False):
        """
        Extract the statements associated with this node from the linemaps associated with this node.
        :param bool include_none_entries: Also include entries that are None [default=False].
        :note: None entries might have been introduced by other nodes transforming the same linemap(s).
        """
        result = self.__get_linemap_content("statements",\
          self._first_statement_index,self._last_statement_index)
        if not include_none_entries:
            return [stmt.rstrip("\n\t ;") for stmt in result if stmt != None]
    def min_lineno(self):
        """
        :return: Inclusive first line number belonging to this object.
        """
        return self._linemaps[0]["lineno"]
    def max_lineno(self):
        """
        :return: Inclusive last line number belonging to this object.
        """
        last_linemap = self._linemaps[-1]
        return last_linemap["lineno"]+len(last_linemap["lines"])-1
    def first_line(self):
        """
        :return: First line in first linemap.
        """
        return self._linemaps[0]["lines"][0]
    def first_line_indent(self):
        """Indent chars at beginning of first line."""
        first_line      = self.first_line()
        num_indent_chars = len(first_line) - len(first_line.lstrip(" \t"))
        return first_line[0:num_indent_chars]
    def first_statement(self):
        """
        :return: First line in first linemap.
        """
        return self._linemaps[0]["statements"][0]
    def append(self,child):
        self._children.append(child)
    def list_of_parents(self):
        """
        Returns a list that contains all
        parents of a node plus the node itself._
        """
        result = []
        def recursive_parent_lookup(curr):
            if curr != None:
                result.append(curr)
                recursive_parent_lookup(curr._parent)

        recursive_parent_lookup(self)        
        return result
    def find_all(self,filter=lambda child : True,recursively=False):
        result = []
        def descend(curr):
            for child in curr._children:
                if filter(child):
                    result.append(child) 
                elif recursively:
                    descend(child)
        descend(self)       
        return result
    def find_first(self,filter=lambda child: True):
        for child in self._children:
            if filter(child):
                return child
        return None
    def find_last(self,filter=lambda child: True):
        for child in reversed(self._children):
            if filter(child):
                return child
        return None
    def extract_first(self,text,expression):
        """
        Extract (first) part of the text that contains a given expression.
        :rtype: str
        :return: The first part of the text that matches the expression.
        """ 
        for tokens,start,end in expression.scanString(text):
             return text[start:end]
        return ""
    def extract_all(self,text,expression):
        """Extract all parts of the text that contain a given pyparsing expression.
        :rtype: list
        :return: All parts of the text that match the pyparsing expression
        """
        result = []
        for tokens,start,end in expression.scanString(text):
             result.append(text[start:end])
        return result
    def add_to_prolog(self,line):
        """Add some prolog lines to the first linemap."""
        if not line in self._linemaps[0]["prolog"]:
            self._linemaps[0]["prolog"].append(line)
    def add_to_epilog(self,line):
        """Add some epilog lines to the first linemap."""
        if not line in self._linemaps[-1]["epilog"]:
            self._linemaps[-1]["epilog"].append(line)
    def transform(self,joined_lines,joined_statements,statements_fully_cover_lines,index_hints=[]):
        """Transforms statements associated with underlying linemaps (hook)
        :param line: An excerpt from a Fortran file, possibly multiple lines
        :type line: str
        :return: If the text was changed at all
        :rtype: bool
        """
        if statements_fully_cover_lines:
            return joined_lines, False
        else:
            return joined_statements, False
    def __modify_linemaps(self,substitution):
        """
        Replaces first statement associated with node in first associated linemap by 'subst' argument.
        Replaces all other other statements in first and all other linemaps associated
        with node by 'None'. Marks all linemaps associated with this node as modified.
        :param str subst: The text that should be written in first associated statement in first
                          associated linemap.
        :note: Post processing working with the modified statements must ignore all 'None' statements.
        :note: We assume that the statements of an expression that spreads over multiples lines are only modified once.
        :note: We write 'None' entries into the statements instead of clipping them away because 
               if multiple statements per line are present and other nodes modify those, removing elements from the list
               of statements might mess with the indexing.
        """
        first_linemap_first_elem = self._first_statement_index
        last_linemap_last_elem   = self._last_statement_index
        # write subst into first linemap first statement
        self._linemaps[0]["modified"]                         = True
        self._linemaps[0]["statements"][first_linemap_first_elem] = substitution
        assert len(self._linemaps), "self._linemaps should not be empty"
        last_linemap_ubound = last_linemap_last_elem
        if last_linemap_ubound != -1:
            last_linemap_ubound += 1
        def assign_none_(statements,lbound=0,ubound=-1):
            if ubound == -1:
                ubound = len(statements)
            for i in range(lbound,ubound):
                statements[i] = None
        if len(self._linemaps) == 1:
            assign_none_(self._linemaps[0]["statements"],first_linemap_first_elem+1,last_linemap_ubound)
        else:
            self._linemaps[-1]["modified"] = True
            assign_none_(self._linemaps[0]["statements"],first_linemap_first_elem+1)
            assign_none_(self._linemaps[-1]["statements"],0,last_linemap_ubound)
            for linemap in self._linemaps[1:-1]: # upper bound exclusive
                linemap["modified"] = True
                assign_none_(linemap["statements"])
    def transform_statements(self,index_hints=[]):
        """
        Replaces original statements by generated code. Modifies the 'statements' 
        entries of the associated linemaps.
        :param list index_hints: TBA
        :note: When multiple linemaps contain the expression associated with this note,
               the transformed code is written into the first associated statement in 
               the first linemap and the remaining associated statements in the first
               and all other linemaps are replaced by None.
        :note: When prepending a preamble, it is assumed that the modified statement is the 
        first in the linemap/line and that this statement is only modified once.
        :note: When appending an epilog, it is assumed that the modified statement is the 
        last in the linemap/line and that this statement is only modified once.
        """
        if not self._ignore_in_s2s_translation:
            have_first_in_first_linemap    = self._first_statement_index == 0
            have_last_in_last_linemap      = self._last_statement_index  == -1 or\
                                        self._last_statement_index  == len(self._linemaps[-1]["statements"])-1
            statements_fully_cover_lines = have_first_in_first_linemap and have_last_in_last_linemap
        
            joined_lines                = "".join(self.lines())
            joined_statements           = "\n".join(self.statements())
            transformed_code, modified  = self.transform(joined_lines,joined_statements,statements_fully_cover_lines,index_hints)
            if modified:
                self.__modify_linemaps(transformed_code)

class STEndOrReturn(STNode):
    pass

class STRoot(STNode):
    def __init__(self):
        STNode.__init__(self,None,None,-1)

class STModule(STNode,Tagged):
    def __init__(self,name,parent,first_linemap,first_linemap_first_statement):
        STNode.__init__(self,parent,first_linemap,first_linemap_first_statement)
        self.name = name.lower()
        self.kind = "module"

class STProgram(STNode,Tagged):
    def __init__(self,name,parent,first_linemap,first_linemap_first_statement):
        STNode.__init__(self,parent,first_linemap,first_linemap_first_statement)
        self.name = name.lower()
        self.kind = "program"

class STUseStatement(STNode):
    def __init__(self,parent,first_linemap,first_linemap_first_statement):
        STNode.__init__(self,parent,first_linemap,first_linemap_first_statement)
    def transform(self,joined_lines,joined_statements,statements_fully_cover_lines,index_hints=[]):
        # TODO clean
        indent  = self.first_line_indent() 
        snippet = joined_statements
        use_cuda = False
        for lib in HOST_MODULES:
            lib_lower = lib.lower()
            if lib_lower in snippet.lower():
                use_cuda = True
                if lib_lower == "cudafor":
                    snippet = re.sub(r"\bcudafor\b",HIP_MODULE_NAME,snippet,re.IGNORECASE)
                    snippet = snippet.rstrip("\n")+"\n" + "{0}use hipfort_check".format(indent) 
                snippet = re.sub(r"\bcu(\w+)\b",HIP_MATH_MODULE_PREFIX+r"hip\1",snippet,re.IGNORECASE)
        return snippet, use_cuda

class STPlaceHolder(STNode):
    def __init__(self,parent,first_linemap,first_linemap_first_statement):
        STNode.__init__(self,parent,first_linemap,first_linemap_first_statement)
        self.name = None

class STProcedure(STNode,Tagged):
    def __init__(self,name,kind,parent,first_linemap,first_linemap_first_statement,index):
        STNode.__init__(self,parent,first_linemap,first_linemap_first_statement)
        self.name = name
        self.kind = kind
        self.code = []
        # check attributes
        self.index_record, _ = scoper.search_index_for_subprogram(index,self._parent.tag(),name)
    def __must_be_available_on_host(self):
        return not len(self.index_record["attributes"]) or\
               "host" in self.index_record["attributes"]
    def __attributes_present(self):
        return len(self.index_record["attributes"])
    def complete_init(self):
        # exclude begin/end statement of procedure
        self.code = self.statements()[1:-1] # implies copy
    def has_attribute(self,attribute):
        return attribute in self.index_record["attributes"]
    def is_kernel_subroutine(self):
        return self.has_attribute("global")
    def must_be_available_on_device(self):
        return self.has_attribute("device") or\
               self.has_attribute("global")
    def keep_recording(self):
        """
        No recording if the function needs to be kept only on the host.
        """
        return self.must_be_available_on_device()
    def transform(self,joined_lines,joined_statements,statements_fully_cover_lines,index=[]):
        """
        Treats CUF and OpenACC subroutines/functions that carry CUF-specific attributes
        or require a device version as specified in a directive.

        :note: Removes 'attributes(...)' objects from the procedure header
        when encountering a CUF device procedure that
        needs to be kept on the host too.
        """
        attributes_present       = self.__attributes_present()
        must_be_available_on_device = self.must_be_available_on_device()
        must_be_available_on_host   = self.__must_be_available_on_host()

        original = joined_lines
        if attributes_present: # CUF case
            if must_be_available_on_host:
                return pAttributes.sub("", original), True
            elif must_be_available_on_device: # and not must_be_available_on_host
                indent = self.first_line_indent()
                return "{0}! extracted to HIP C++ file".format(indent), True
        else: 
            return original, False

class STDirective(STNode):
    def __init__(self,parent,first_linemap,first_linemap_first_statement,directive_no,sentinel="!$cuf"):
        STNode.__init__(self,parent,first_linemap,first_linemap_first_statement)
        self._sentinel        = sentinel
        self._directive_no     = directive_no
        self._first_directive  = self._linemaps[0]["statements"][0]
    def single_line_statement(self):
        """
        Express the statement as lower case single-line statement
        """
        return self._first_directive

class STLoopKernel(STNode):
    def __init__(self,parent,first_linemap,first_linemap_first_statement):
        STNode.__init__(self,parent,first_linemap,first_linemap_first_statement)
        self.grid_f_str             = None
        self.block_f_str            = None
        self.sharedmem_f_str        = "0" # set from extraction routine
        self.stream_f_str           = "c_null_ptr" # set from extraction routine
        self.kernel_arg_names       = [] # set from extraction routine
        self.code                 = []
        self._do_loop_ctr_memorised  = -1
    def __hash(self):
        """Compute hash code for this kernel. Must be done before any transformations are performed."""
        statements    = list(self.code) # copy
        self.remove_comments(statements)
        self.remove_whitespaces(statements)
        snippet       = "".join(statements)
        return hashlib.md5(snippet.encode()).hexdigest()[0:6]
    def complete_init(self):
        self.code = self.statements()
    def kernel_name(self):
        """Derive a name for the kernel"""
        return LOOP_KERNEL_NAME_TEMPLATE.format(parent=self._parent.name.lower(),lineno=self.min_lineno(),hash=self.__hash())
    def kernel_launcher_name(self):
        return "launch_{}".format(self.kernel_name())
    def transform(self,joined_lines,joined_statements,statements_fully_cover_lines,index_hints=[]):
        indent = self.first_line_indent()
        try:
            stream_as_int = int(self.stream_f_str)
            stream = "c_null_ptr" if stream_as_int < 1 else self.stream_f_str
        except:
            stream = self.stream_f_str
        if self.grid_f_str == None or self.block_f_str == None or LOOP_KERNEL_DEFAULT_LAUNCHER == "cpu": # use auto or cpu launcher 
            result="{indent}! extracted to HIP C++ file\n{indent}call {0}_{launcher}({1},{2},{3})".format(\
              self.kernel_launcher_name(),self.sharedmem_f_str,stream,\
                ",".join(self.kernel_arg_names),indent=indent,launcher=LOOP_KERNEL_DEFAULT_LAUNCHER)
        else:
            result="{indent}! extracted to HIP C++ file\n{indent}call {0}({1},{2},{3},{4},{5})".format(\
              self.kernel_launcher_name(),self.grid_f_str,self.block_f_str,self.sharedmem_f_str,stream,\
                ",".join(self.kernel_arg_names),indent=indent)
        return result, True

class STDeclaration(STNode):
    """
    Works with Fortran declarations such as
    ```Fortran
    Complex(DP), allocatable, device :: dev_array(:,:)
    ```
    """
    def __init__(self,parent,first_linemap,first_linemap_first_statement):
        STNode.__init__(self,parent,first_linemap,first_linemap_first_statement)
        self._ttdeclaration   = translator.parse_declaration(self.first_statement())
        self._vars            = [name.lower() for name in self._ttdeclaration.variable_names()]
    def create_codegen_context(self):
        return translator.create_index_records_from_declaration(self._ttdeclaration)
    def transform(self,joined_lines,joined_statements,statements_fully_cover_lines,index_hints=[]):
        """
        if device and allocatable, remove device, add pointer
        if device and fixed size array, remove device, add pointer, replace fixed bounds by other bounds
           find first code line and add allocation to preamble if no dummy argument. Do similar things
           with deallocation -> double pass
        if pinned and allocatable, add pointer
        if pinned and fixed size array, remove pinned, add pointer, replace fixed bounds by other bounds
           find first code line and add allocation to preamble if no dummy argument -> double pass
        if integer with stream kind, 
        """
        if len(index_hints):
            index = index_hints
        else:
            index = copy.copy(scoper.EMPTY)
            index["variables"] = self.create_codegen_context()
        original_datatype          = translator.make_f_str(self._ttdeclaration.datatype_f_str())
        original_qualifiers        = [translator.make_f_str(q).lower() for q in self._ttdeclaration.qualifiers]
        unchanged_variables        = []  
        new_device_pointer_variables = []
        new_host_pointer_variables   = []
        
        indent = self.first_line_indent()
        # argument names if declared in procedure
        if isinstance(self._parent, STProcedure):
            argnames = list(self._parent.index_record["dummy_args"])
        else:
            argnames = []
        result = ""
        for var_name in self._vars:
             ivar,discovered = scoper.search_index_for_variable(\
               index,self._parent.tag(),\
                 var_name)
             rank           = ivar["rank"]
             has_device      = "device" in ivar["qualifiers"]
             has_pinned      = "pinned" in ivar["qualifiers"]
             has_allocatable = "allocatable" in ivar["qualifiers"]  
             # clean qualifiers
             new_qualifiers = []
             for q in original_qualifiers:
                if not q in ["target","pinned","device","allocatable"] and not q.startswith("dimension"):
                    new_qualifiers.append(q)
             if var_name in argnames: 
                 new_qualifiers.append("target")
             else:
                 new_qualifiers.append("pointer")
             if rank > 0:
                 new_qualifiers.append("dimension(:"+",:"*(rank-1)+")")
             if has_device and rank > 0:
                 new_device_pointer_variables.append(var_name)
                 result += "\n" + indent + original_datatype + "," + ",".join(new_qualifiers) + " :: " + var_name
             elif has_pinned:
                 new_host_pointer_variables.append(var_name)
                 result += "\n" + indent + original_datatype + "," + ",".join(new_qualifiers) + " :: " + var_name

        # TODO handle side effects if no allocatable present
        if len(new_device_pointer_variables) + len(new_host_pointer_variables) < len(self._ttdeclaration._rhs): 
            result = indent + self._ttdeclaration.f_str(extra_ignore_list=new_device_pointer_variables+new_host_pointer_variables) +\
                     result
        if len(new_device_pointer_variables) or len(new_host_pointer_variables):
            return result.lstrip("\n"), True
        else:
            return "", False
            
class STAttributes(STNode):
    """
    CUDA Fortran specific intrinsic that needs to be removed/commented out
    in any case.
    """
    def __init__(self,parent,first_linemap,first_linemap_first_statement):
        STNode.__init__(self,parent,first_linemap,first_linemap_first_statement)
    def transform(self,joined_lines,joined_statements,statements_fully_cover_lines,index_hints=[]): # TODO
        return "", True

class STNonZeroCheck(STNode):
    def __init__(self,parent,first_linemap,first_linemap_first_statement):
        STNode.__init__(self,parent,first_linemap,first_linemap_first_statement)
    def transform(self,joined_lines,joined_statements,statements_fully_cover_lines,index_hints=[]): # TODO
        result = snippet
        transformed = False
        for tokens,start,end in translator.non_zero_check.scanString(result):
            parse_result = tokens[0]
            lhs_name     = parse_result.lhs_f_str()
            ivar,_  = scoper.search_index_for_variable(index_hints,self._parent.tag(),\
              lhs_name)
            on_device    = scoper.index_variable_is_on_device(ivar)
            transformed |= on_device
            if on_device:
                subst = parse_result.f_str() # TODO backend specific
                result = result.replace(result[start:end],subst)
        return result, transformed

class STAllocated(STNode):
    def __init__(self,parent,first_linemap,first_linemap_first_statement):
        STNode.__init__(self,parent,first_linemap,first_linemap_first_statement)
    def transform(self,joined_lines,joined_statements,statements_fully_cover_lines,index_hints=[]): # TODO
        def repl(parse_result):
            var_name    = parse_result.var_name()
            ivar,_ = scoper.search_index_for_variable(index_hints,self._parent.tag(),\
              var_name)
            on_device    = scoper.index_variable_is_on_device(ivar)
            return (parse_result.f_str(), on_device) # TODO backend specific
        result, transformed = utils.pyparsingutils.replace_all(snippet,translator.allocated,repl)
        assert result != None
        return result, transformed

class STAllocate(STNode):
    def __init__(self,parent,first_linemap,first_linemap_first_statement):
        STNode.__init__(self,parent,first_linemap,first_linemap_first_statement)
    def transform(self,joined_lines,joined_statements,statements_fully_cover_lines,index_hints=[]): # TODO
        indent = self.first_line_indent()
        def repl(parse_result):
            nonlocal indent
            transformed     = False
            bytes_per_element = []
            array_qualifiers = []
            for array_name in parse_result.variable_names():
                ivar,_  = scoper.search_index_for_variable(index_hints,self._parent.tag(),\
                  array_name)
                bytes_per_element.append(ivar["bytes_per_element"])
                on_device   = scoper.index_variable_is_on_device(ivar)
                pinned     = ["pinned"] in ivar["qualifiers"]
                if on_device: 
                    array_qualifiers.append("device")
                elif pinned: 
                    array_qualifiers.append("pinned")
                else:
                    array_qualifiers.append(None)
                transformed |= on_device | pinned
            subst = parse_result.hip_f_str(bytes_per_element,array_qualifiers,indent=indent).lstrip(" ")
            return (subst, transformed)
        return utils.pyparsingutils.replace_all(joined_statements,translator.allocate,repl)
             
class STDeallocate(STNode):
    def __init__(self,parent,first_linemap,first_linemap_first_statement):
        STNode.__init__(self,parent,first_linemap,first_linemap_first_statement)
    def transform(self,joined_lines,joined_statements,statements_fully_cover_lines,index_hints=[]): # TODO
        """
        :note: `wrap_in_if_def` can be deactivated if a higher level function
        embeds the outcome already in an `ifdef`.
        """
        indent = self.first_line_indent()
        def repl(parse_result):
            nonlocal indent
            transformed     = False
            array_qualifiers = []
            for array_name in parse_result.variable_names():
                ivar,_  = scoper.search_index_for_variable(index_hints,self._parent.tag(),\
                  array_name)
                on_device   = scoper.index_variable_is_on_device(ivar)
                pinned     = ["pinned"] in ivar["qualifiers"]
                if on_device: 
                    array_qualifiers.append("device")
                elif pinned: 
                    array_qualifiers.append("pinned")
                else:
                    array_qualifiers.append(None)
                transformed |= on_device | pinned
            subst = parse_result.hip_f_str(array_qualifiers,indent=indent).lstrip(" ")
            return (subst, transformed)
        return utils.pyparsingutils.replace_all(joined_statements,translator.deallocate,repl)
         
class STMemcpy(STNode):
    def __init__(self,parent,first_linemap,first_linemap_first_statement):
        STNode.__init__(self,parent,first_linemap,first_linemap_first_statement)
    def transform(self,joined_lines,joined_statements,statements_fully_cover_lines,index_hints=[]): # TODO
        def repl_memcpy(parse_result):
            dest_name = parse_result.dest_name_f_str()
            src_name  = parse_result.src_name_f_str()
            dest_indexed_var,_ = scoper.search_index_for_variable(index_hints,self._parent.tag(),\
              dest_name)
            src_indexed_var,_  = scoper.search_index_for_variable(index_hints,self._parent.tag(),\
              src_name)
            dest_on_device = scoper.index_variable_is_on_device(dest_indexed_var)
            src_on_device  = scoper.index_variable_is_on_device(src_indexed_var)
            bytes_per_element = dest_indexed_var["bytes_per_element"]
            if dest_on_device or src_on_device:
                subst = parse_result.hip_f_str(dest_on_device,src_on_device)
                return (subst,True)
            else:
                return ("",False) # no transformation; will not be considered
        return utils.pyparsingutils.replace_all(joined_statements,translator.memcpy,repl_memcpy)

class STCudaLibCall(STNode):
    def __init__(self,parent,first_linemap,first_linemap_first_statement):
        STNode.__init__(self,parent,first_linemap,first_linemap_first_statement)
        self._cuda_api = ""
        self._has_cublas = False
    def has_cublas(self):
        """
        :return: Scanned code lines contain a cublas call.
        :rtype: bool
        """
        return self._has_cublas
    def transform(self,joined_lines,joined_statements,statements_fully_cover_lines,index_hints=[]):
        global CUBLAS_VERSION 
        global KEEP_CUDA_LIB_NAMES
        snippet     = joined_statements
        oldf_snippet = snippet
        indent      = self.first_line_indent()
        transformed = False
        if not KEEP_CUDA_LIB_NAMES:
            def repl_memcpy(parse_result):
                dest_name = parse_result.dest_name_f_str()
                src_name  = parse_result.src_name_f_str()
                dest_indexed_var,_ = scoper.search_index_for_variable(index_hints,self._parent.tag(),\
                  dest_name)
                src_indexed_var ,_ = scoper.search_index_for_variable(index_hints,self._parent.tag(),\
                  src_name)
                dest_on_device = scoper.index_variable_is_on_device(dest_indexed_var)
                src_on_device  = scoper.index_variable_is_on_device(src_indexed_var)
                subst = parse_result.hip_f_str(dest_on_device,src_on_device)
                return (subst, True)
            snippet,_ = utils.pyparsingutils.replace_all(snippet,translator.cuf_cudamemcpy_variant,repl_memcpy)
        def repl_cublas(parse_result):
            subst = parse_result.f_str(indent)
            return (subst, True)
        snippet,have_cublas = utils.pyparsingutils.replace_all(snippet,translator.cuf_cublas_call,repl_cublas)
        if have_cublas:
            self._has_cublas = True
        for elem in CUDA_RUNTIME_ENUMS:
             snippet = replace_ignore_case(elem,elem.replace("cuda","hip").replace("CUDA","HIP"),snippet)
        for elem in CUDA_LIB_ENUMS:
             snippet = replace_ignore_case(elem,elem.replace("cu","hip").replace("CU","HIP"),snippet)
        for elem in ALL_HOST_ROUTINES: # runtime routines
             snippet = replace_ignore_case(elem,elem.replace("cuda","hip"),snippet)
        for elem in CUDA_MATH_LIB_FUNCTIONS:
             snippet = replace_ignore_case(elem,elem.replace("cu","hip"),snippet)
        transformed = snippet.lower() != oldf_snippet 
        return snippet, transformed

class STCudaKernelCall(STNode):
    """TODO(gpufort): Fix
    Translates a CUDA kernel call to a call to a subroutine interface.
    """
    def transform(self,joined_lines,joined_statements,statements_fully_cover_lines,index_hints=[]):
        snippet = joined_statements
        for tokens,start,end in translator.cuf_kernel_call.scanString(snippet):
            parse_result = tokens[0]
            kernel_args  = []
            for ttexpr in parse_result._args:
                # expand array arguments
                max_rank = 0
                for rvalue in translator.find_all(ttexpr,translator.TTRValue):
                    # TODO lookup the subprogram first 
                    ivar, discovered = scoper.search_index_for_variable(index_hints,self._parent.tag(),\
                       rvalue.name())
                    if discovered:
                        max_rank = max(max_rank,ivar["rank"])
                expr_f_str = translator.make_f_str(ttexpr)
                if max_rank > 0:
                    kernel_args.append("c_loc("+expr_f_str+")")
                else:
                    kernel_args.append(expr_f_str)
                for rank in range(1,max_rank+1):
                    kernel_args.append("size({0},{1})".format(expr_f_str,rank))
                for rank in range(1,max_rank+1):
                    kernel_args.append("lbound({0},{1})".format(expr_f_str,rank))
            kernel_launch_info = translator.cuf_kernel_call.parseString(self.first_statement())[0]
            subst="call launch_{0}({1},{2},{3},{4},{5})".format(\
              kernel_launch_info.kernel_name_f_str(),\
              kernel_launch_info.grid_f_str(),
              kernel_launch_info.block_f_str(),\
              kernel_launch_info.sharedmem_f_str(),
              kernel_launch_info.stream_f_str(),\
              ",".join(kernel_args)
            )
            snippet = snippet.replace(snippet[start:end],subst)
            break
        return snippet, True
