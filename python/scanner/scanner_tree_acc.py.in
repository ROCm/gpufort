class AccBackendBase():
    def __init__(self,stnode):
        self._stnode = stnode
    def gpufortFStr():
        assert False, "Not implemented!"

ACC_BACKENDS             = {} 
ACC_LOOP_KERNEL_BACKENDS = {} 

def registerAccBackend(name,directiveGeneratorClass,loopKernelGeneratorClass,runtimeModuleName):
    global SUPPORTED_DESTINATION_DIALECTS
    global RUNTIME_MODULE_NAMES
    global ACC_BACKENDS
    global ACC_LOOP_KERNEL_BACKENDS
    
    if not name in SUPPORTED_DESTINATION_DIALECTS:
        SUPPORTED_DESTINATION_DIALECTS.append(name)
    RUNTIME_MODULE_NAMES[name]     = runtimeModuleName
    ACC_BACKENDS[name]             = directiveGeneratorClass 
    ACC_LOOP_KERNEL_BACKENDS[name] = loopKernelGeneratorClass

exec(open("{0}/acc_backends/scanner_tree_acc2omp.py.in".format(scannerDir)).read())

exec(open("{0}/acc_backends/scanner_tree_acc2hipgpufortrt.py.in".format(scannerDir)).read())
exec(open("{0}/acc_backends/scanner_tree_acc2hipgccrt.py.in".format(scannerDir)).read())

class STAccDirective(STDirective):
    """
    This class has the functionality of a kernel if the stored lines 
    contain a parallel or kernels directive.
    
    https://www.openacc.org/sites/default/files/inline-files/OpenACC.2.7.pdf)
    """
    def __init__(self,parent,lineno,lines,directiveNo):
        STDirective.__init__(self,parent,lineno,lines,directiveNo,sentinel="!$acc")
        self._defaultPresentVars = []
    def considerInSource2SourceTranslation(self):
        """
        Consider this object when transforming host code.
        :return: The default implementation returns False if the parent
                 of the object is a device subroutine.
        """
        return not isinstance(self._parent, STAccDirective) or not self._parent.isParallelLoopDirective()
    def findSubstring(self,token):
        return token in self.singleLineStatement()
    def findAnySubstring(self,tokens):
        result = False
        for token in tokens:
            result = result or self.findSubstring(token)
        return result
    def findAllSubstrings(self,tokens):
        result = True
        for token in tokens:
            result = result and self.findSubstring(token)
        return result
    def isEndDirective(self):
        return self.findSubstring("acc end")
    def isDataDirective(self):
        return self.findSubstring("acc data")
    def isEnterDirective(self):
        return self.findSubstring("acc enter")
    def isExitDirective(self):
        return self.findSubstring("acc exit")
    def isInitDirective(self):
        return self.findSubstring("acc init")
    def isShutdownDirective(self):
        return self.findSubstring("acc shutdown")
    def isWaitDirective(self):
        return self.findSubstring("acc wait")
    def isLoopDirective(self):
        return self.findSubstring("acc loop")
    def isKernelsDirective(self):
        return not self.findSubstring("acc kernels loop") and\
            self.findSubstring("acc kernels")
    def isParallelDirective(self):
        return not self.findSubstring("acc parallel loop") and\
            self.findSubstring("acc parallel")
    def isLoopDirective(self):
        return self.findSubstring("acc loop")
    def isParallelLoopDirective(self):
        return self.findSubstring("acc parallel loop")
    def isKernelsLoopDirective(self):
        return self.findSubstring("acc kernels loop")
    def __str__(self):
        return """
{{ singleLineStatement={singleLineStatement},
         isInitDirective={isInitDirective},
         isShutdownDirective={isShutdownDirective},
         isEndDirective={isEndDirective},
         isEnterDirective={isEnterDirective},
         isExitDirective={isExitDirective},
         isWaitDirective={isWaitDirective},
         isLoopDirective={isLoopDirective},
         isParallelDirective={isParallelDirective},
         isKernelsDirective={isKernelsDirective},
         isParallelLoopDirective={isParallelLoopDirective} }}
""".format(
         singleLineStatement=self.singleLineStatement(),
         isInitDirective=self.isInitDirective(),
         isShutdownDirective=self.isShutdownDirective(),
         isEndDirective=self.isEndDirective(),
         isEnterDirective=self.isEnterDirective(),
         isExitDirective=self.isExitDirective(),
         isWaitDirective=self.isWaitDirective(),
         isLoopDirective=self.isLoopDirective(),
         isParallelDirective=self.isParallelDirective(),
         isKernelsDirective=self.isKernelsDirective(),
         isParallelLoopDirective=self.isParallelLoopDirective()
         ).strip().replace("\n","")
    __repr__ = __str__ 
    def gpufortFStr(self,indexHints=[]):
        checkedDialect = checkDestinationDialect(DESTINATION_DIALECT)
        return ACC_BACKENDS[checkedDialect](self).gpufortFStr(indexHints)

class STAccLoopKernel(STAccDirective,STLoopKernel):
    def __init__(self,parent,lineno,lines,directiveNo):
        STAccDirective.__init__(self,parent,lineno,lines,directiveNo)
        STLoopKernel.__init__(self,parent,lineno,lines)
    def lines(self):
        """
        :note: used for grouping scanner tree objects
        """
        return self._lines
    def gpufortFStr(self,indexHints=[],destinationDialect=""):
        """
        :param destinationDialect: allows to override default if this kernel
                                   should be translated by another backend.
        """
        checkedDialect = checkDestinationDialect(\
            DESTINATION_DIALECT if not len(destinationDialect) else destinationDialect)
        return ACC_LOOP_KERNEL_BACKENDS[checkedDialect](self).gpufortFStr(indexHints)
