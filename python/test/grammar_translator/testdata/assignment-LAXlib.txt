ab(i+desca%ir-1,j+desca%ic-1)=a(i,j)
ab(i+descb%ir-1,j+descb%ic-1)=b(i,j)
a((ii-1)/nproc+1,jj)=rcvbuf(il,j,ip+1)
a(i,j)=1.0d0/(DBLE(ii+jj)-1.0d0)
a(i,j)=ar(i+ir-1,j+ic-1)
a(i,j)=(DBLE(n-ii+1))/DBLE(n)+1.0d0/(DBLE(ii+jj)-1.0d0)
A(is(l),I)=F-G
A(k,I)=A(k,I)*ONE_OVER_SCALE
ALPHA=ALPHA*SAFMIN
ALPHA=AP(IL(I+1),I)
ALPHA=ONE/(ALPHA-BETA)
ALPHI=ALPHI*RSAFMN
ALPHR=ALPHR*RSAFMN
ANORM=DLANST('I',LEND-L+1,D(L),E(L))
AP(IL(I+1),I)=E(I)
AP(IL(I+1),I)=ONE
ar(i+ir-1,j+ic-1)=buf(i,j+noff)
auxa(ibuf+I)=A(I+ioff,J)
auxa(ibuf+I)=A(J,I+ioff)
auxa(ibuf+I)=CONJG(A(J,I+ioff))
auxc(ibuf+I)=C(I+ioff,J)
b=c*e(i)
B=C*E(I)
BETA=BETA*RSAFMN
BETA=-SIGN(DLAPY3(ALPHR,ALPHI,XNORM),ALPHR)
b(i,j)=rcvbuf(il,j,ip+1)
blacsmap(me_ortho(1)+1,me_ortho(2)+1)=BLACS_PNUM(world_cntx,0,me_blacs)
buf(i,j)=x(i+ioff,j+joff)
c=cv(1,i-l+1)
c=g/r
cicle=cicle+1
C(I+ioff,J)=AUXA(IBUF+I)
col=rank/nprow
CTEMP=WORK(L+J-1)
CTEMP=WORK(M+J-1)
CTMP=CTMP+CONJG(Q(KL,J+I+1))*Q(KL,I+1)
CTMP=-TAU(I)*CONJG(WORK(J))
cv(1,i-l+1)=c
cv(2,i-l+1)=s
dd=abs(d(m))+abs(d(m+1))
descla%cntx=-1
descla%mype=descla%myc+descla%myr*descla%npr
d(i+1)=d(i+1)-p
d(i+1)=g+p
D(I+1)=G+P
D(I)=G+P
D(L-1)=RT1
D(L+1)=RT2
d(l)=d(l)-p
D(L)=D(L)-P
e(i+1)=r
E(I)=SCALEF*G
e(l-1)=e(l)
E(L-1)=RZERO
EPS2=EPS**2
f=s*e(i)
F=S*E(I)
f=u(l+2)
fv2(k)=z(k,i+1)
g=c*r-b
G=C*R-B
g=d(i+1)-p
G=D(I+1)-P
G=D(I)-P
g=(d(l+1)-d(l))/(2.0_DP*e(l))
G=(D(L+1)-P)/(TWO*E(L))
G=(D(L-1)-P)/(TWO*E(L-1))
g=d(m)-d(l)+e(l)/(g+sign(r,g))
G=D(M)-P+(E(L-1)/(G+SIGN(R,G)))
G=D(M)-P+(E(L)/(G+SIGN(R,G)))
gind_block=(Q+1)*me+lind
gind_block=Q*me+R+lind
gind_block_sca=lind+me*nb
gind_cyclic=(lind-1)*np+me+1
G=-SIGN(SQRT(SIGMA),F)
h(1,2)=(0.d0,-2.d0)
h_h(1,2)=(0.d0,-2.d0)
H=SIGMA-F*G
I1=IL(I+1)
I1=IL(I+1)+1
I2=IL(I+2)
ia_e=ia_s+na_loc-1
ia_s=me/(nproc_ia+1)+1
ia_s=(me-(nproc_ia+1)*r)/nproc_ia+1+r
ib=ib+1
ib_sour=(Q+1)*IP+1
ib_sour=Q*IP+R+1
ib_s=(Q+1)*(ME-1)+1
ib_s=Q*(ME-1)+R+1
ibuf=ibuf+ldx
IBUF=IBUF+ldx
icb=ic_new-ic_old+1
icb_new(ipc_old)=ic_old-ic_new+1
icdst=MOD(colid-ln+np,np)
icdst=MOD(colid+ln+np,np)
icdst=MOD(icol-irow-1+np,np)
ice_new(ipc_old)=icb_new(ipc_old)+ncsnd(ipc_old)-1
icol=MOD(colid+rowid+1+np,np)
ICOMPZ=-1
icsrc=MOD(colid-ln+np,np)
icsrc=MOD(colid+ln+np,np)
icx_new=ic_new+nc_new-1
icx_old=ic_old+nc_old-1
idcolref=count+1
idrecv=idref-1
I=II-1
ii=ii+np
ii=i+ip_ir-1
ii=i+ir-1
ii=me+1
il=il+1
IL(I)=QI+1
INFO=-1
INFO=-2
INFO=-6
info=cudaMemcpy(a,rhos,SIZE(rhos,1)*SIZE(rhos,2),cudaMemcpyDeviceToDevice)
ioff=(ib-1)*bsiz
ioff=ib_s-1
ioff=IB_SOUR-1
ioff=nb*bsiz
irb=ir_new-ir_old+1
irb_new(ipr_old)=ir_old-ir_new+1
irdst=MOD(irow-icol-1+np,np)
irdst=MOD(rowid-ln+np,np)
irdst=MOD(rowid+ln+np,np)
ire_new(ipr_old)=irb_new(ipr_old)+nrsnd(ipr_old)-1
irow=MOD(rowid+colid+1+np,np)
irsrc=MOD(rowid-ln+np,np)
irsrc=MOD(rowid+ln+np,np)
irx_new=ir_new+nr_new-1
irx_old=ir_old+nr_old-1
IS(I)=(I-1)/NPROC
IS(I)=IS(I)+1
iter=iter+1
J1=IL(J+1)
J1=IL(J+1)+1
j=j+2;
jj=j+ic-1
jj=j+ip_ic-1
JL=JL+1
J=ME+(JL-1)*NPROC+1
joff=(jb-1)*bsiz
joff=mb*bsiz
JTOT=JTOT+1
kappa=p(l+1)
k=k+1
k=k+NPROC
k=ME+1
K=ME+(KL-1)*NPROC+1
KNT=KNT+1
L1=M+1
lambda_dist(i-ir+1,j-ic+1)=val
lambda_dist(i,j)=lambda_repl(i+ir-1,j+ic-1)
lambda_repl(i+ir-1,j+ic-1)=lambda_dist(i,j)
latency_matrix(i,ii)=latency_matrix(i,ii)/perf_count(i,ii)
ldim_block=q+1
ldim_cyclic=q+1
ldx=m/nproc+1
LENDM1=LEND-1
LENDP1=LEND+1
L=I-1
lind_cyclic=(ig-1)/np+1
liwork=-1
liwork=3+5*n
liwork_h=3+5*SIZE(rhos,1)
liwork=itmp(1)+1
liwork=MAX(8*n,itmp(1)+1)
L=L-1
L=L+1
L=L-2
L=L+2
LM1=L-1
lnode=-1
lrwork=-1
lrwork=1+5*n+2*n*n
lrwork=INT(rtmp(1))+1
lwork=-1
lwork=1+6*n+2*n*n
lwork=2*n
lwork=8*n
lwork_d=2*64*64+65*n
lwork_d=2*64*64+66*n
lwork_d=2*64*64+66*SIZE(rhos,1)
lwork_h=1+6*SIZE(rhos,1)+2*SIZE(rhos,1)*SIZE(rhos,1)
lwork=INT(REAL(ztmp(1)))+1
lwork=MAX(131072,2*INT(rtmp(1))+1)
lwork=(nb+1)*n
lwork=(nb+3)*n
mb=m/bsiz
ME=MPIME+1
M(h,k)=CMPLX(rnd(j),rnd(j+1))
MM1=M-1
mykey=MOD(me,nproc_ia+1)
mykey=MOD(me-(nproc_ia+1)*r,nproc_ia)
nb=ILAENV(1,'DSYTRD','U',n,-1,-1,-1)
nb=ILAENV(1,'ZHETRD','U',n,-1,-1,-1)
nb=INT(gdim/np)
nb=INT(n/np)
nb=nb+1
nb=n/bsiz
nbuf=(nb/nproc+2)*nb
ncsnd(ipc_old)=icx_old-ic_new+1
ncsnd(ipc_old)=MIN(nc_old,icx_new-ic_old+1)
ncsnd(ipc_old)=ncsnd(ipc_old)*descb%nrcx
NM1=N-1
NMAXIT=N*MAXIT
nnodes=nnodes+1
noff=(ipc-1+npc*(ipr-1))*nx
npcol=nproc/nprow
np=desc%npr*desc%npc
np=idesc(LAX_DESC_NPC)*idesc(LAX_DESC_NPR)
npp=np(1)*np(2)
nproc=desc%npr*desc%npc
nproc_ia=nproc/nat
nproc=idesc(LAX_DESC_NPC)*idesc(LAX_DESC_NPR)
nproc_ortho=np_ortho(1)*np_ortho(2)
nrlx=n/npp+1
nrsnd(ipr_old)=irx_old-ir_new+1
nrsnd(ipr_old)=MIN(nr_old,irx_new-ir_old+1)
nrsnd(ipr_old)=nrsnd(ipr_old)*desca%nc
ONE_OVER_H=1.0_DP/D(I)
ONE_OVER_H=1.0_DP/H
ONE_OVER_SCALE=1.0_DP/SCALEF
ortho_cntx=-1
OW(I)=MOD((I-1),NPROC)
perf_count(proc2node(ii+1),proc2node(i+1))=perf_count(proc2node(ii+1),proc2node(i+1))+1
perf_matrix(i,ii)=perf_matrix(i,ii)/perf_count(i,ii)
p=s*r
P=S*R
pythag=absa*sqrt(1.0_DP+(absb/absa)**2)
pythag=absb*sqrt(1.0_DP+(absa/absb)**2)
QI=(I-1)/NPROC
Q(IL(I+1),I+1)=ONE
Q(IL(I+1),I+1)=ONE-TAU(I)
Q(IL(L+1),I+1)=ZERO
q=INT(gdim/np)
Q=INT(m/NPROC)
q=INT(n/np)
Q(KL,J)=AP(KL,J-1)
Q(KL,J+I+1)=Q(KL,J+I+1)+CTMP*Q(KL,I+1)
rank_ip(i+1,j+1)=rank*leg_ortho
rank=MOD(col+npcol,npcol)+MOD(row+nprow,nprow)*npcol
rank=MOD(row+nprow,nprow)+MOD(col+npcol,npcol)*nprow
R=(D(I+1)-G)*S+TWO*C*B
r=(d(i)-g)*s+2.0_DP*c*b
R=(D(I)-G)*S+TWO*C*B
rnd=1.d0*rnd-5.d-1
row=rank/npcol
RSAFMN=RONE/SAFMIN
SAFMAX=RONE/SAFMIN
SAFMIN=DLAMCH('S')/DLAMCH('E')
SCALEF=SCALEF+DABS(A(K,I))
s=cv(2,i-l+1)
s=f/r
SIGMA=SIGMA+A(k,I)**2
sigma=u(l+1)
sndbuf(il,j)=a((ii-1)/nproc+1,jj)
sqrtnp=INT(SQRT(REAL(nproc)+0.1))
SSFMAX=SQRT(SAFMAX)/THREE
SSFMIN=SQRT(SAFMIN)/EPS2
STEMP=WORK(N-1+L)
STEMP=WORK(N-1+L+J-1)
STEMP=WORK(N-1+M)
STEMP=WORK(N-1+M+J-1)
tag=i+ii*npes
TAUI=CMPLX((BETA-ALPHR)/BETA,-ALPHI/BETA,KIND=DP)
TAU(J-1)=TAU(J-1)+TAUI*AP(JL,K)*APKI(K)
TAU(J-1)=TAU(J-1)+TAUI*CONJG(AP(KL,J))*APKI(K)
TAU(J-1)=ZERO
tempo_avg=tempo_avg/npes
tempo_mio(i)=tempo(i)-tempo(i-1)
tempo_tutti(mype+1)=tempo(2)-tempo(1)
test%tolerance32=1.d-5
test%tolerance64=1.d-10
test%tolerance64=1.d-14
test%tolerance64=1.d-8
this%n_errors=this%n_errors+1
this%n_tests=this%n_tests+1
this%tolerance32=2._real32*epsilon(1._real32)
this%tolerance64=2._real64*epsilon(1._real64)
tst1(i+desc%ir-1,j+desc%ic-1)=a(i,j)
TST=DABS(E(M-1))**2
TST=DABS(E(M))**2
t=t+3
U(L)=F-G
UL(is(l))=F-G
vtmp(J)=vtmp(J)+A(IS(J),K)*U(K)
vtmp(J)=vtmp(J)+A(KL,J)*UL(KL)
vtmp(J)=vtmp(J)*ONE_OVER_H
vtmp(l+1)=kappa
vtmp(l+1)=sigma
vtmp(l+2)=f
work(1:N-1-I)=0.0_DP
WORK(N-1+I)=S
WORK(N-1+I)=-S
WORK(N-1+L)=S
WORK(N-1+M)=S
XNORM=XNORM**2
y(j+joff,i+ioff)=buf(i,j)
y(j+joff,i+ioff)=buf(j,i)
z(k,i+1)=s*fv1(k)+c*fv2(k)
z(k,i)=c*fv1(k)-s*fv2(k)
Z(KL,1+L)=CTEMP*ZTEMP-STEMP*Z(KL,L)
Z(KL,J+1+L-1)=CTEMP*ZTEMP-STEMP*Z(KL,J+L-1)
Z(KL,J+L-1)=STEMP*ZTEMP+CTEMP*Z(KL,J+L-1)
Z(KL,J+M-1)=STEMP*ZTEMP+CTEMP*Z(KL,J+M-1)
Z(KL,J+M)=CTEMP*ZTEMP-STEMP*Z(KL,J+M-1)
Z(KL,L-1)=STEMP*ZTEMP+CTEMP*Z(KL,L-1)
Z(KL,L)=CTEMP*ZTEMP-STEMP*Z(KL,L-1)
Z(KL,L)=STEMP*ZTEMP+CTEMP*Z(KL,L)
ZTEMP=Z(KL,1+L)
ZTEMP=Z(KL,J+1+L-1)
ZTEMP=Z(KL,J+M)
