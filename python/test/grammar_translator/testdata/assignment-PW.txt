a0(1)=(par(1)/fac)**(1d0/3d0)
a0(2)=(par(1)/fac)**(1d0/3d0)*bohr_radius_angs
a11=a11+(tauold(ipol,na,1)-tauold(ipol,na,2))**2
a1(1)=-smat(2,3)+smat(3,2)
a1(2)=-smat(3,1)+smat(1,3)
a1(3)=-smat(1,2)+smat(2,1)
a1=-a1
a1=cb_at(:,1)*alat
a1=-gk(jpol,ig)
a1(ipol)=0.5d0*smat(ipol,jpol)/a1(jpol)
a1(ipol)=SQRT(ABS(smat(ipol,ipol)+1.d0)/2.d0)
a22=a22+(tauold(ipol,na,2)-tauold(ipol,na,3))**2
a2=a2i/bohr_radius_angs
a2=cb_at(:,2)*alat
a2=-gk(ipol,ig)*gk(jpol,ig)*qm1(ig)
a3=(2.d0*f1-2.d0*f2+(f3+f4)*(z_l-z_r))/(z_l-z_r)**3
a3=cb_at(:,3)*alat
aa=aa+1._dp/SQRT(alpha*0.25d0*fpi)
aa=aa*8.d0/fpi
aa=aa-EXP(-alpha*qq)*EXP(-qq/4.d0/erfc_scrlen**2)*dq
aa=aa-EXP(-alpha*qq)*yukawa/(qq+yukawa)*dq
absg=tpiba*SQRT(gg(ig))
absmag=absmag+ABS(mag)
absmag=absmag*omega/(dfftp%nr1*dfftp%nr2*dfftp%nr3)
accep=accep*0.5d0
acc(:,:)=force(:,:)/alat/amu_ry
acc=force/fcp_mass/alat
acc_versor(:,:)=acc(:,:)/norm_acc
ack=ack+ekint
acp=acp+p
acpv=acpv+pv
acu=acu+ut
add=3*scf_type_size
add=add+complex_size*nexx_g*npol*2
add=add+complex_size*nexx_l*npol*2
add=add+int_size*ngms*2
add=add+real_size*roughestimate*(nh(nt)*(nh(nt)+1)/2)
add=complex_size/g_fact*nexx_l*npol*nbnd_l*nkqs
add=complex_size*natomwfc*npol*npwx_l
add=mix_type_size*2*nmix
add=real_size*ngm*4+int_size*ngm*7
add=real_size*nqxq*nbetam*(nbetam+1)/2*lmaxq*ntyp
address=srvaddress(1:field_sep_pos-1)
agg0=(12.D0/pi)**(2.D0/3.D0)/tpiba2/avg_rsm1
agg0=(12.D0/pi)**(2.D0/3.D0)/tpiba2/rs
a(i+1)=a(i)
a(ibnd,jbnd)=proj(ind(ibnd),start_band(igroup)+jbnd-1)
a(ii,i)=(ef-e(i))/(e(ii)-e(i))
AIMAG(f(m1,m2))**2),m2=1,2*ldim)
AIMAG(vet(m1,m2))**2,m2=1,2*ldim)
AIMAG(vet(m1,m2))**2,m2=1,ldim)
ak=ak+ap(i,moffset+m1,moffset+m3)*ap(i,moffset+m2,moffset+m4)
ak=ak*fpi/(2.d0*k+1.d0)
alat=chi**(1.D0/3.D0)*alat
alat=sqrt(sum(a1(1:3)*a1(1:3))),A1=a1,A2=a2,A3=a3,IBRAV=0)
alldata(4,i)=etot(i)-efit(i)
alldata(6,i)=etot(i)+p(i)*v0(i)/ry_kbar
alp=ACOS(gtensor(2,3)/bb/cc)*180._dp/pi
alpha0=(b1*a22-b2*a12)/det
alpha=10._dp/gcutw
alpha=aaa+gp+SQRT(aaa**2+gp**2)
alpha=alpha-0.1d0
alpha=alpha-0.1_dp
alpha=alpha/tpiba2
alpha(iat)=MIN(avol(iat)/afree(it),1._DP)*alpha_free(atomic_number(atm(it)))
alpha(ir)=(3.D0/fpi/alpha(ir))**one_third
alpha(ir)=3.D0*(tpi/3.D0)**(5.D0/3.D0)*alpha(ir)
alpha=sqrt(temp/tnew)
amag=m_loc(1,na)**2+m_loc(2,na)**2+m_loc(3,na)**2
amag=SQRT(rho(ir,2)**2+rho(ir,3)**2+rho(ir,4)**2)
amag=SQRT(rho(k,2)**2+rho(k,3)**2+rho(k,4)**2)
amag=SQRT(rho_loc(k,2)**2+rho_loc(k,3)**2+rho_loc(k,4)**2)
amag=SQRT(SUM(rho%of_r(ir,2:4)**2))
amass_(1:ntyp)=amass(1:ntyp)*amu_ry
angle=0.5d0*angle*pi/180.d0
angle1(i)=angle1(i)/DBLE(nt)
angle1(i)=angle1(i)+theta
angle1(nt)=pi*angle1(nt)/180.D0
angle2(i)=angle2(i)/DBLE(nt)
angle2(i)=angle2(i)+phi
angle2(nt)=pi*angle2(nt)/180.D0
angle=angle+sum_j*xk(i,ik)
angle_rot1=360.d0+angle_rot1
angle_rot1=-angle_rot1+180.d0
angle_rot1=ASIN(sint)*180.d0/pi
angle_rot_s=MOD(angle_rot(aux_mat)+180.0_DP,360.0_DP)
angle=tpi*angle
angle_vectors=ACOS(cosangle)*180.d0/pi
angular(1)=sin(angle1(nt))*cos(angle2(nt))
angular(2)=sin(angle1(nt))*sin(angle2(nt))
ANY(Hubbard_J(:,nt)/=0.0_dp)
ANY(ip_Hubbard_J(:,nt)/=0.0_DP)
ap(l,li,lj)=ap(l,li,lj)+mly(l,ir)*ylm(ir,li)*ylm(ir,lj)
ar=cv*conjg(vkb_d(ig,jkb))
area=ABS((at(1,1)*at(2,2)-at(2,1)*at(1,2))*alat**2)
arg000=-xi*(z+zp-2.d0*z1)
arg001=-gp*(z-zp)
arg001=gp*(z-zp)
arg001=-tmp**2*(z_l-zp)**2
arg001=-tmp**2*(z-zp)**2
arg002=-gp*(z-zp)
arg002=gp*(z-zp)
arg002=-tmp**2*(z1-zp)**2
arg003=-gp*(z+zp+2.d0*z1)
arg003=gp*(z+zp-2.d0*z1)
arg004=-2.d0*aaa*(zp-z1)
arg004=gp*(z-z1)+xi*(z1-zp)
arg004=gp*(z+zp-2.d0*z1)
arg005=-2.d0*aaa*(z_r-z1)
arg005=-2.d0*aaa*(z-z1)
arg005=-gp*(z1-zp)-xi*(z-z1)
arg005=gp*(z+zp-2.d0*z1)
arg005=-gp*(z-zp+4.d0*z1)
arg006=aaa/2.d0/tmp**2*xi+gp*(z-z1)+xi*(z1-zp)
arg006=aaa**2/tmp**2+2.d0*aaa*(z1-zp)
arg006=-gp*(z-zp+4.d0*z1)
arg006=gp*(z-zp-4.d0*z1)
arg007=-4.d0*gp*z1
arg007=aaa/2.d0/tmp**2*xi-gp*(z1-zp)-xi*(z-z1)
arg008=aaa/2.d0/tmp**2*xi+xi*(z1-zp)-chi*(z-z1)
arg008=gp*(z-zp-4.d0*z1)
arg009=-4.d0*gp*z1
arg009=aaa/2.d0/tmp**2*xi+xi*(z1-zp)-xi*(z-z1)
arg010=aaa/2.d0/tmp**2*xi+chi*(z1-zp)-xi*(z-z1)
arg011=aaa/2.d0/tmp**2*chi+chi*(z1-zp)-xi*(z-z1)
arg012=aaa/2.d0/tmp**2*chi+xi*(z1-zp)-chi*(z-z1)
arg101=gp/2.d0/tmp-tmp*(z-zp)
arg101=gp/2.d0/tmp+tmp*(z-zp)
arg101=tmp*(z_l-zp)
arg101=tmp*(z_r-zp)
arg101=tmp*(z-zp)
arg102=gp/2.d0/tmp-tmp*(z-zp)
arg102=gp/2.d0/tmp+tmp*(z-zp)
arg102=tmp*(z1-zp)
arg103=gp/2.d0/tmp+tmp*(z1-zp)
arg104=aaa/tmp+tmp*(z_r-zp)
arg104=aaa/tmp+tmp*(z-zp)
arg104=gp/2.d0/tmp-tmp*(z1-zp)
arg105=gp/2.d0/tmp+tmp*(z-z1)
arg106=aaa/tmp+tmp*(z1-zp)
arg106=gp/2.d0/tmp-tmp*(z-z1)
arg107=xi/2.d0/tmp+tmp*(z-zp)
arg108=xi/2.d0/tmp-tmp*(z-zp)
arg109=xi/2.d0/tmp+tmp*(z1-zp)
arg110=xi/2.d0/tmp-tmp*(z-z1)
arg111=chi/2.d0/tmp+tmp*(z-zp)
arg112=chi/2.d0/tmp-tmp*(z-zp)
arg113=chi/2.d0/tmp+tmp*(z1-zp)
arg114=chi/2.d0/tmp-tmp*(z-z1)
arg1=-2.d0*aaa*(z0-z1)
arg1=gp*(z1-z0)
arg1=gp*(z-z0)
arg1=gp*(z-z1)
arg1=gp*(z-z1)-xi*(z0-z1)
arg2=-2.d0*aaa*(z_r-z1)
arg2=-2.d0*aaa*(z-z1)
arg2=-gp*(z1-z0)
arg2=-gp*(z+z0)
arg2=-gp*(z+z1)
arg3=-gp*(z0+z1)+gp*(z-z1)
arg3=gp*(z-3.d0*z1)
arg3=gp*(z-z0-2.d0*z1)
arg4=-gp*(z+3.d0*z1)
arg4=gp*(z-z1)
arg5=-4.d0*gp*z1
arg=arg*tpi
arg=arg+xq(ipol)*rtau(ipol,irot,ia)
arg=arg+xq(ipol)*rtau(ipol,isymq,ia)
arg=((gk2-ecfixed)/q2sigma)**2
argr1=-gp*(z0+z1)-xi*(z-z1)
argr2=-xi*(z0-z1)-chi*(z-z1)
argr3=-xi*(z-z1)-xi*(z0-z1)
argr4=-xi*(z-z1)
argr5=-2.d0*aaa*(z-z1)
arg=tpi*n1*bgtau(1)
arg=tpi*n2*bgtau(2)
arg=tpi*n3*bgtau(3)
arg=tpi*randy()
arg=tpi*randy_d(rnd_idx+1)
arg=tpi*SUM(g(:,ig)*tau(:,na))
arg=tpi*SUM((xk(:)-xkq(:))*tau(:,na))
arg=(xk(1,ik)*tau(1,na)+xk(2,ik)*tau(2,na)+xk(3,ik)*tau(3,na))*tpi
arho(:,1)=rho_loc(:,1)+rho_core
arho(:,1)=rho_loc(:,1)+rho_loc(:,2)+rho_core(:)
arho(:,2)=rho_loc(:,1)-rho_loc(:,2)
arho(k,1)=rho_rad(k,1)*g(i%t)%rm2(k)+rho_core(k)
ar=vkb_d(ig,ikb)*conjg(vkb_d(ig,ikb))
ar=vkb(ig,ikb)*conjg(vkb(ig,ikb))
ar=vkb(ig,ikb)*conjg(vkb(ig,jkb))
asum=asum+func_d(i-1)*rab_d(i-1)+4.0d0*func_d(i)*rab_d(i)+func_d(i+1)*rab_d(i+1)
asum=asum*r12
at=at+1
at=at/alat
at(:,:)=at(:,:)/alat
at=at/celldm(1)
at(:,:)=at(:,:)/nsym
at=avec/alat
atb=at*alat
at,bg,gkcut,gcutms/gkcut,fft_fact=fft_fact,nyfft=nyfft,nmany=nmany_,use_pd=pencil_decomposition_)
at=h/alat
ath(ii)=ACOS(z/SQRT(r2(ii)))
at(i,1)=at(i,1)/celldm(1)
at(i,2)=at(i,2)/celldm(1)
at(i,3)=at(i,3)/celldm(1)
atom=atom+1
atws(:,1)=atws(:,1)*nq1
atws(:,2)=atws(:,2)*nq2
atws(:,3)=atws(:,3)*nq3
atws=alat*at
aux0_2(igk0(ig))=psi(ig+npwx,nb)
aux(:)=0.5_dp*aux(:)
aux0(igk0(ig)+ngm)=psi(ig+npwx,nb)
aux0vec(igk1(ig),nb)=evcel(ig+npwx,nb)
aux1(1,1:ngm)=aux1(1,1:ngm)+REAL(vaux(1:ngm))
aux1(1,ig)=rgtot_re*fac
aux1(2,1:ngm)=aux1(2,1:ngm)+AIMAG(vaux(1:ngm))
aux1(2,ig)=rgtot_im*fac
aux1=aux1*fac
aux1_d(ig,nb,1)=g_d(1,ngm_s+ig-1)*cfac
aux1_d(ig,nb,2)=g_d(2,ngm_s+ig-1)*cfac
aux1_d(ig,nb,3)=g_d(3,ngm_s+ig-1)*cfac
aux1_d(i)=r_d(i)*vloc_at_d(i)+zp*e2*qe_erf_d(r_d(i))
aux1(ig,1)=cfac*g(1,ngm_s+ig-1)
aux1(ig,2)=cfac*g(2,ngm_s+ig-1)
aux1(ig,3)=cfac*g(3,ngm_s+ig-1)
aux1(ig,nb,1)=g(1,ngm_s+ig-1)*cfac
aux1(ig,nb,2)=g(2,ngm_s+ig-1)*cfac
aux1(ig,nb,3)=g(3,ngm_s+ig-1)*cfac
aux(1:i%m)=aux(1:i%m)+F_rad(1:i%m,1,ix,ispin)*rad(i%t)%wwylm(ix,lm)
aux(1:i%m)=aux(1:i%m)+F_rad(1:i%m,2,ix,ispin)*rad(i%t)%wwylm(ix,lm)
aux(1:i%m)=aux(1:i%m)+F_rad(1:i%m,3,ix,ispin)*rad(i%t)%wwylm(ix,lm)
aux(1:i%m)=aux(1:i%m)*g(i%t)%rm2(1:i%m)
aux(1:i%m)=aux(1:i%m)+rad(i%t)%dylmp(ix,lm)*rho_lm(1:i%m,lm,is)
aux1(ir)=aux(ir)*upf(nt)%qfuncl(ir,ijv,l)
aux1(i)=r(i)*vloc_at(i)+zp*e2*qe_erf(r(i))
aux1(ir)=(qrad_r(ir,ijv,l+1)/rgrid(nt)%r(ir))**2
aux1(ir)=(qrad_rs(ir,ijv,l+1)/rgrid(nt)%r(ir))**2
aux1(ir)=r(ir)*vloc_at(ir)+zp*e2*qe_erf(r(ir))
aux1(ir)=(upf(nt)%qfuncl(ir,ijv,l)/rgrid(nt)%r(ir))**2
aux(1:kktest)=betas(1:kktest,nb)*betas(1:kktest,nb)
aux(1:kktest)=upf(nt)%beta(1:kktest,nb)*upf(nt)%beta(1:kktest,nb)
aux(1:msh(nt))=upf(nt)%aewfc(1:msh(nt),mb)*upf(nt)%aewfc(1:msh(nt),nb)
aux(1:msh(nt))=upf(nt)%pswfc(1:msh(nt),mb)*upf(nt)%pswfc(1:msh(nt),nb)
aux(1:msh(nt))=upf(nt)%pswfc(:,nb)*upf(nt)%chi(:,nchiH)
aux(1:msh(nt))=(upf(nt)%pswfc(:,nb)-wsgn*upf(nt)%chi(:,nchiH))**2
aux1vec(igk0(ig),nb)=evct(ig+npwx,nb)
aux2(1:i%m)=aux2(1:i%m)+rad(i%t)%dylmt(ix,lm)*rho_lm(1:i%m,lm,is)
aux2(ig,is)=aux2(ig,is)*CONJG(vg(ngm_s+ig-1,is))
aux_2(igk1(ig))=psi1(ig+npwx,mb)
aux(:)=aux(:)+rot_ylm(ind,n1)*ylm(:,ind1)
aux=aux+tabxx(ia)%qr(ir,ijtoh(ih,jh,nt))*vr(tabxx(ia)%box(ir))
aux(dfftp%nl(1:ngm))=wg_corr(1:ngm)/omega
aux(dfftp%nl(ig))=smooth_coulomb_g(tpiba2*gg(ig))/omega
aux(dfftp%nlm(1:ngm))=aux(dfftp%nlm(1:ngm))+CONJG(aux(dfftp%nl(1:ngm)))
aux(dfftp%nlm(1:ngm))=CMPLX(aux1(1,1:ngm),-aux1(2,1:ngm),KIND=dp)
aux(dfftp%nl(ng))=aux(dfftp%nl(ng))+lr_Vloc(ng,nt)*strf(ng,nt)
aux(dfftp%nl(ng))=aux(dfftp%nl(ng))+vg3(n3,ng_2d)
aux(dfftp%nl(ng))=aux(dfftp%nl(ng))+vloc3(n3,ng_2d)
aux_d(ih,ibnd_loc)=-et_d(ibnd,ik)*aux_d(ih,ibnd_loc)
aux_d(ir,igl)=r_d(ir)**2*rhoc_d(ir)*aux_d(ir,igl)
aux_d(ir,ig)=rhoat_d(ir)*sin(gx*r_d(ir))/(r_d(ir)*gx)
aux_d(ir)=r_d(ir)**2*rhoc_d(ir)
aux_d(ngm_s+ig-1,is)=aux_d(ngm_s+ig-1,is)+aux2_d(ig,ijh)*qgm_d(ig)
aux_d(:)=vltot(:)+v%of_r(:,is)
auxg_d(ibnd_loc,ih)=becp_d_r_d(ikb,ibnd_loc)*wg_d(ibnd,ik)
auxg_d(ibnd_loc,ih)=et_d(ibnd_loc,ik)*auxg_d(ibnd_loc,ih)
auxg(ibnd_loc,ih)=et(ibnd,ik)*auxg(ibnd_loc,ih)
auxg(ibnd_loc,ih)=wg(ibnd,ik)*becp%r(ikb,ibnd_loc)
aux_g_mpi(ind_g(mapg_owner(1,igg)),mapg_owner(1,igg))=psi1(ig+npwx*ipol,mb)
aux(ig)=aux(ig)+zv(nt)*CONJG(strf(ig,nt))
aux(igk1(ig)+ngm)=evc(ig+npwx,mb)
aux(ig+ngm)=aux_g(ig_l2g(ig)+ngm_g)
aux(ig)=sk(ig)*ylm(ig,lm)*chiaux(ig)
aux(ig)=sk(ig)*ylm(ig,lm)*chiq(ig,nb,nt)
aux(ih,ibnd_loc)=-et(ibnd,ik)*aux(ih,ibnd_loc)
aux(i)=jl(i)*aux(i)
aux(ir)=aux1(ir)*sin(gx*r(ir))/gx
aux(ir)=besr(ir)*upf(nt)%qfuncl(ir,ijv,l)
aux(ir)=rgrid(nt)%r(ir)*qtot(ir,nb,mb)
aux(ir)=r(ir)**2*rhoc(ir)
aux(ir)=r(ir)**2*rhoc(ir)*aux(ir)
aux(ir)=r(ir)*(r(ir)*vloc_at(ir)+zp*e2)
aux(ir)=smooth_coulomb_r(rws*alat)
aux(ir)=upf(nt)%beta(ir,nb)*besr(ir)*rgrid(nt)%r(ir)
auxk1_d(ibnd,ih+(is-1)*nhnt)=becp_d_nc_d(ikb,is,ibnd)
auxk1(ibnd,ih+(is-1)*nh(np))=becp%nc(ikb,is,kbnd)
auxk2_d(ibnd,ih)=et_d(ibnd,ik)*auxk2_d(ibnd,ih)
auxk2_d(ibnd,ih)=wg_d(ibnd,ik)*becp_d_k_d(ikb,ibnd)
auxk2(ibnd,ih)=et(ibnd,ik)*auxk2(ibnd,ih)
auxk2(ibnd,ih)=wg(ibnd,ik)*becp%k(ikb,kbnd)
aux_k(igk_k(1:npw_k,n)+ngm*(ipol-1))=evc_k(istart:iend,nb)
aux_kp(igk_kp(1:npw_kp)+ngm*(ipol-1))=evc_kp(istart:iend,mb)
aux_kp(map_g(1:npw_kp)+ngm*(ipol-1))=evc_kp(istart:iend,mb)
aux(k)=pref*SUM(rho_lm(k,lm,1:nspin_lsda))
aux(k)=v_lm(k,lm)*rho_lm_ou(k,lm)
aux(k)=v_lm(k,lm)*SUM(rho_lm(k,lm,1:nspin_lsda))
aux(map_g(ig)+ngm)=evc(ig+npwx,mb)
aux_mat=-smat
aux(ngm_s+ig-1,is)=aux(ngm_s+ig-1,is)+aux2(ig,ijh)*qgm(ig)
aux=SQRT(required_temp/system_temp)
auxvc(ig)=CMPLX(AIMAG(fp),-DBLE(fm),KIND=dp)
aux(:)=vltot(:)+v%of_r(:,is)
aux(:)=vltot(:)+vr(:,is)
avc1=real(psic(1+i1+ld_bg(1)*(i2+ld_bg(2)*i3)))
avc2=aimag(psic(1+i1+ld_bg(1)*(i2+ld_bg(2)*i3)))
avc_tmp(l1,l2,l3)=avc1(l1-1,l2-1,l3-1)
avc_tmp(l1,l2,l3)=avc2(l1-1,l2-1,l3-1)
Ave1=Ave1+ave
Ave1=Ave1/DBLE(nkqs)
avec2d(i,j)=avec2d(i,j)+avint(i,m)*fm1(m,j)
avec2d(i,j)=avec2d(i,j)/cmass
avec2d(i,j)=avec2d(i,j)+d2(i,k)*avec0(k,j)
avec2d(i,j)=avec2d(i,j)+pim(i,k)*sigma(k,j)
avec=alat*at
avec(l,k)=avec2d(l,k)*aveci(l,k)-avec2di(l,k)*avec(l,k)
avec(l,k)=avec(l,k)/(avec2d(l,k)-avec2di(l,k))
avg_iter=avg_iter+1.D0
avg_iter=avg_iter+cg_iter
avg_iter=avg_iter+dav_iter
avg_iter=avg_iter+nhpsi/float(nbnd)
avg_iter=avg_iter/nkstot
avg_iter=avg_iter+ppcg_iter
avg_rsm1=avg_rsm1+1.D0/alpha(ir)
avg_rsm1=(dffts%nr1*dffts%nr2*dffts%nr3)/avg_rsm1
avint(i,j)=avec2d(i,j)+fm(i,j)-sm(i,j)
avk=ack/DBLE(nzero)
avmod(k)=avmod(k)+avec(l,k)*avec(l,k)
avol=avol*omega/(dfftp%nr1*dfftp%nr2*dfftp%nr3)
avol(iat)=avol(iat)+weic*ri2
av_overlap(:,:)=sum_overlap(:,:)/dble(n_overlap_tests)
avp=acp/DBLE(nzero)
avpv=acpv/DBLE(nzero)
av_quote=-av_quote
avsq_overlap(:,:)=sumsq_overlap(:,:)/dble(n_overlap_tests)
avu=acu/DBLE(nzero)
ax=a1/(2.d0*sint)
ax=a1/norm
ax=-ax
axis1=MOD(ipol,3)+1
axis2=MOD(ipol+1,3)+1
axx=a*x*x
bb=dipole(1)**2+dipole(2)**2+dipole(3)**2
becphi_r=becxx(ikq)%r(:,ibnd+1),becpsi_r=becpsi%r(:,jbnd-calbec_start+1))
becphi_r=becxx(ikq)%r(:,ibnd),becpsi_r=becpsi%r(:,jbnd-calbec_start+1))
becphi_r=becxx(ikq)%r(:,jbnd+1),becpsi_r=becpsi%r(:,ibnd))
becphi_r=x1*becxx(ikq)%r(:,jbnd))
becphi_r=x2*becxx(ikq)%r(:,jbnd+1))
becp%k(ikb,ibnd)=fac*cmplx(bcr,bci,kind=DP)
becp_r(ikb,ibnd+1)=fac*bci
becp_r(ikb,ibnd)=fac*bcr
becsum(ijh,na,1)=upf(nt)%paw%oc(nb)/DBLE(2*nhtol(ih,nt)+1)
becsum(ijh,na,ispin)=becsum(ijh,na,ispin)+noise*2._DP*(.5_DP-randy())
beefxc(32)=beefxc(32)+beefxc(31)
beefxc(i)=beefxc(i)-ldaxc
beta0=(a11*b2-a21*b1)/det
beta=aaa+gp-SQRT(aaa**2+gp**2)
bet=ACOS(gtensor(1,3)/aa/cc)*180._dp/pi
beta=G2lzo2Gp*(1.0d0-cutoff_2D(ng))/cutoff_2D(ng)
beta=G2lzo2Gp*(1._DP-cutoff2D_d(ng))/cutoff2D_d(ng)
beta=G2lzo2Gp*(1._DP-cutoff_2D(ng))/cutoff_2D(ng)
beta(ir,nb)=beta(ir,nb)+qi*qi*dq*tab0(iq,nb)*besr(ir)*rgrid(nt)%r(ir)
betas(ir,nb)=betas(ir,nb)+qi*qi*dq*tab(iq,nb)*besr(ir)*rgrid(nt)%r(ir)
better=1.0d+10
better=ABS(sumkmid-nelec)
bexg_merge=CMPLX(0._dp,w(:,i+1),KIND=DP)
bexg_merge=CMPLX(w(:,i),w(:,i+1),KIND=DP)
bfgs_file=TRIM(tmp_dir)//TRIM(prefix)//'.bfgs'
bfield(1)=-fact*(m1(1)-mcons(1,1))
bfield(:)=2.D0*lambda*xx*fact1(:)
bfield(ipol)=-fact*(m1(ipol)-mcons(ipol,1))
bg_n(1:3,i)=(1.d0/sca)*at(1:3,i)
bg_vol=ld_bg(1)*ld_bg(2)*ld_bg(3)
big_result_d(ig,ibnd)=big_result_d(ig,ibnd)-exxalfa*result_d(dfftt__nl(igk_exx_d(ig,current_k)),ii)
big_result_d(ig,ibnd)=big_result_d(ig,ibnd)-exxalfa*result_nc_d(dfftt__nl(igk_exx_d(ig,current_k)),1,ii)
big_result_d(n+ig,ibnd)=big_result_d(n+ig,ibnd)-exxalfa*result_nc_d(dfftt__nl(igk_exx_d(ig,current_k)),2,ii)
big_result(ig,ibnd)=big_result(ig,ibnd)-exxalfa*result(dfftt%nl(igk_exx(ig,current_k)),ii)
b(i)=xroot*(EXP(-xroot)/(8._DP*pi*rhos))**(1._DP/3._DP)
blipgrid(d)=2*ceiling(dble(maxval(abs(g_int(d,:))))*multiplicity)+2
blipgrid(d)=blipgrid(d)+1
blocks=ceiling(real(ngl-igl0+1)/8)
blocks=CEILING(REAL(ngl-igl0+1)/8)
block_size=block_2-block_1
bmod=SQRT(bg(1,3)**2+bg(2,3)**2+bg(3,3)**2)
bmod=SQRT(bg(1,edir)**2+bg(2,edir)**2+bg(3,edir)**2)
boltzman_ji=EXP(-(etot-etot_smart)/kt)
box0(ia)=box_e(ia-1);box_s(ia)=box0(ia)+1;box_e(ia)=box0(ia)+maxbox_beta(ia)
boxdist(mbia)=sqrt(distsq)*alat
box_psic(box_ir)=SUM(betasave(box_ir,1:nh(nt))*cmplx(w1(1:nh(nt)),w2(1:nh(nt)),kind=DP))
box_psic(box_ir)=SUM(xkphase(box_ir)*betasave(box_ir,1:nh(nt))*w1(1:nh(nt)))
box_psic(box_ir)=xkphase(box_ir)*SUM(betasave(box_ir,1:nh(nt))*w1(1:nh(nt)))
boxrad_beta(:)=boxrad_beta(:)/alat
boxrad(:)=boxrad(:)/alat
boxradsq_ia=boxrad_ia**2
boxtot_avg=SUM(boxtot_beta(1:nproc_bgrp))/dble(nproc_bgrp)
boxtot_beta(:)=0;boxtot_beta(me_bgrp+1)=SUM(maxbox_beta(1:nat))
boxtot_unbalance=boxtot_max/boxtot_avg
boxtot_unbalance=-data(1)/(boxtot_avg*nn)
buffer(:)=abs(dble(locbuff(:,jbnd,IKK)))+(Zero,One)*Zero
buffer(:)=dble(psiR(:,jbnd))+(Zero,One)*Zero
bvec2(1:3,1)=bg(1:3,1)/REAL(nk1,dp)
bvec2(1:3,2)=bg(1:3,2)/REAL(nk2,dp)
bvec2(1:3,3)=bg(1:3,3)/REAL(nk3,dp)
bvec3(1:3,1)=-bvec2(1:3,1)+bvec2(1:3,2)+bvec2(1:3,3)
bvec3(1:3,2)=bvec2(1:3,1)-bvec2(1:3,2)+bvec2(1:3,3)
bvec3(1:3,3)=bvec2(1:3,1)+bvec2(1:3,2)-bvec2(1:3,3)
bvec3(1:3,4)=bvec2(1:3,1)+bvec2(1:3,2)+bvec2(1:3,3)
bytes=ndata*CURSOR%recl*size0
c0=(9.d0*k0*d2k0+9.d0*dk0**2-63.d0*dk0+143.d0)/48.d0
c1=0.25d0/ntetra*(ef-e1)**2/(e4-e1)/(e3-e1)
c1(1)=CMPLX(ss,-cc,KIND=DP)*(t1+t2)/4.d0/gp*k1
c1(1)=CMPLX(ss,-cc,KIND=DP)*(t1+t2)/4.d0/lambda*k1
c1(2)=CMPLX(ss,-cc,KIND=DP)*(t1+t2)/4.d0/gp*k2
c1(2)=CMPLX(ss,-cc,KIND=DP)*(t1+t2)/4.d0/lambda*k2
c1(3)=CMPLX(cc,ss,KIND=DP)*(t1-t2)/4.d0
c1(3)=CMPLX(cc,ss,KIND=DP)*(t1+t2)/4.d0
c1(3)=CMPLX(cc,ss,KIND=DP)*(t1+t2)/4.d0/lambda
c1=3.d0*(dk0-4.d0)/8.d0
C(1)=a(1,4)*a(2,4)*a(3,4)
C(1)=a(2,1)*a(3,1)*a(4,1)*0.25_dp
C(1)=a(4,1)*a(3,1)*0.25_dp
c1_for(1)=c1_for(1)+SIN(ff)*(t1+t2)/4.d0/gp*k1
c1_for(1)=c1_for(1)+SIN(ff)*((t1+t2)/4.d0/gp+t3/2.d0)*k1/2.d0
c1_for(1)=c1_for(1)+SIN(ff)*((t1+t2)/4.d0/lambda+t3/2.d0)*k1/2.d0
c1_for(2)=c1_for(2)+SIN(ff)*(t1+t2)/4.d0/gp*k2
c1_for(2)=c1_for(2)+SIN(ff)*((t1+t2)/4.d0/gp+t3/2.d0)*k2/2.d0
c1_for(2)=c1_for(2)+SIN(ff)*((t1+t2)/4.d0/lambda+t3/2.d0)*k2/2.d0
c1_for(3)=c1_for(3)+COS(ff)*(t1-t2)/4.d0
c1_for(3)=c1_for(3)+COS(ff)*((t1+t2)/4.d0/lambda+t3/2.d0)/2.d0
c1_for(3)=c1_for(3)+COS(ff)*((t1+t2)/4.d0+t3/2.d0)/2.d0
c1(i,j)=alat*c(i,j)
c2(1)=CMPLX(ss,-cc,KIND=DP)*(-EXP(arg003))/2.d0/gp*k1
c2(1)=CMPLX(ss,-cc,KIND=DP)*t3/2.d0*k1
c2(2)=CMPLX(ss,-cc,KIND=DP)*(-EXP(arg003))/2.d0/gp*k2
c2(2)=CMPLX(ss,-cc,KIND=DP)*t3/2.d0*k2
c2(3)=CMPLX(cc,ss,KIND=DP)*(-EXP(arg003))/2.d0
c2(3)=CMPLX(cc,ss,KIND=DP)*t3/2.d0
C(2)=a(4,1)*a(3,2)*a(1,3)*0.25_dp
c2_for(1)=c2_for(1)+SIN(ff)*(-EXP(arg003))/2.d0/gp*k1
c2_for(1)=c2_for(1)+SIN(ff)*((t1+t2)/4.d0/gp+t3/2.d0)*k1/2.d0
c2_for(1)=c2_for(1)+SIN(ff)*((t1+t2)/4.d0/lambda+t3/2.d0)*k1/2.d0
c2_for(2)=c2_for(2)+SIN(ff)*(-EXP(arg003))/2.d0/gp*k2
c2_for(2)=c2_for(2)+SIN(ff)*((t1+t2)/4.d0/gp+t3/2.d0)*k2/2.d0
c2_for(2)=c2_for(2)+SIN(ff)*((t1+t2)/4.d0/lambda+t3/2.d0)*k2/2.d0
c2_for(3)=c2_for(3)+COS(ff)*(-EXP(arg003))/2.d0
c2_for(3)=c2_for(3)+COS(ff)*((t1+t2)/4.d0/lambda+t3/2.d0)/2.d0
c2_for(3)=c2_for(3)+COS(ff)*((t1+t2)/4.d0+t3/2.d0)/2.d0
C(3)=a(4,2)*a(3,2)*a(1,4)*0.25_dp
calbec_end=ibands(nibands(my_egrp_id+1),my_egrp_id+1)
calbec_start=ibands(1,my_egrp_id+1)
calc_long="Parrinello-RahmanCellDynamics:"
calc_long="Parrinello-RahmanDampedCellDynamicsMinimization:"
carg=CMPLX(COS(arg),-SIN(arg),KIND=DP)
cavc=psic(1+i1+ld_bg(1)*(i2+ld_bg(2)*i3))
cavc_tmp(l1,l2,l3)=cavc(l1-1,l2-1,l3-1)
cave=cave+wstring(istring)*cphik(istring)
cbuff(1)=cbuff(1)+rbuff*EXP((Zero,One)*Two*pi*DBLE(i)/DBLE(dfftt%nr1))*vol
cbuff(2)=cbuff(2)+rbuff*EXP((Zero,One)*Two*pi*DBLE(j)/DBLE(dfftt%nr2))*vol
cbuff(3)=cbuff(3)+rbuff*EXP((Zero,One)*Two*pi*DBLE(k)/DBLE(dfftt%nr3))*vol
cc0=COS(kn*z0)
cc1=0.5d0*(qe_erf(arg101)-qe_erf(arg102))
cc1=0.5d0*qe_erf(tmp*(z-zp))
cc1=0.5d0*(-(z-zp)*qe_erf(arg101)-EXP(arg001)/tmp/SQRT(pi))
cc1=cc1*2d0
cc1=cc1+COS(ff)*(t1+t2)/4.d0/gp
cc1=cc1+COS(ff)*(t1+t2)/4.d0/lambda
cc1=COS(kn*z1)
cc1=cs*(t1+t2)/4.d0/gp
cc1=cs*(t1+t2)/4.d0/lambda
cc1=(t1+t2)/2.d0
cc1=(t1+t2)/4.d0
cc2=-0.5d0
cc2=0.5d0*(2.d0*z1-z-zp)
cc2=-0.5d0*exp_erfc(arg006,arg104)
cc2=-0.5d0*exp_erfc(arg006,arg106)
cc2=0.5d0*(z1-z*zp/z1)
cc2=-0.5d0*(z/z1)
cc2=cc2*2d0
cc2=cc2+COS(ff)*(-EXP(arg003))/2.d0/gp
cc2=cc2+COS(ff)*t3/2.d0
cc2=cs*(-EXP(arg003))/2.d0/gp
cc2=cs*t3/2.d0
cc2=t3/2.d0
c=c+(tauold(ipol,na,1)-tau(ipol,na))**2
celldm(2)=b/a
celldm(3)=c/a
cell_f=1d0/alat
cell_f=1d0/celldm(1)
cellh=RESHAPE(mtxbuffer,(/3,3/))
cellih=RESHAPE(mtxbuffer,(/3,3/))
CenterPBC(1)=alat/Two/pi*AIMAG(LOG(cbuff(1)))
CenterPBC(2)=alat/Two/pi*AIMAG(LOG(cbuff(2)))
CenterPBC(3)=alat/Two/pi*AIMAG(LOG(cbuff(3)))
charge=charge+den(ir)*omega/dble(nxtot)
charge=charge+dipole(ityp(na))
charge=charge+grad*omega/dble(nxtot)
charge=charge+zv(ityp(na))
charge=omega*REAL(rhog(1))
charge=omega*REAL(rho%of_g(1,1))
charge=SUM(rho(1,1:nspin_lsda))*omega
char_mat(10,10)=(-1.d0,0.d0)
char_mat(10,10)=CMPLX(-0.5d0,-sqr3d2,kind=DP)
char_mat(10,11)=CMPLX(0.5d0,-sqr3d2,kind=DP)
char_mat(10,11)=CMPLX(-sqr3d2,-0.5d0,kind=DP)
char_mat(10,12)=(-1.d0,0.d0)
char_mat(10,12)=CMPLX(-0.5d0,-sqr3d2,kind=DP)
char_mat(10,13)=(-1.0d0,0.d0)
char_mat(10,15)=CMPLX(sqr3d2,-0.5d0,kind=DP)
char_mat(10,16)=CMPLX(-sqr3d2,0.5d0,kind=DP)
char_mat(10,17)=CMPLX(-0.5d0,sqr3d2,kind=DP)
char_mat(10,18)=CMPLX(0.5d0,-sqr3d2,kind=DP)
char_mat(10,19)=(0.d0,-1.0d0)
char_mat(10,21)=CMPLX(-0.5d0,-sqr3d2,kind=DP)
char_mat(10,2)=(-1.d0,0.d0)
char_mat(10,24)=CMPLX(-sqr3d2,-0.5d0,kind=DP)
char_mat(10,2)=CMPLX(0.5d0,-sqr3d2,kind=DP)
char_mat(10,3)=(-1.d0,0.d0)
char_mat(10,3)=(-2.d0,0.d0)
char_mat(10,3)=CMPLX(-0.5d0,-sqr3d2,kind=DP)
char_mat(10,3)=CMPLX(-sqr3d2,0.5d0,kind=DP)
char_mat(10,4)=(-1.d0,0.d0)
char_mat(10,4)=CMPLX(sqr3d2,-0.5d0,kind=DP)
char_mat(10,5)=(-1.d0,0.d0)
char_mat(10,5)=CMPLX(-0.5d0,sqr3d2,kind=DP)
char_mat(10,5)=CMPLX(0.5d0,-sqr3d2,kind=DP)
char_mat(10,6)=(-2.d0,0.d0)
char_mat(10,6)=(-3.d0,0.d0)
char_mat(10,6)=CMPLX(-0.5d0,sqr3d2,kind=DP)
char_mat(10,7)=(-1.d0,0.d0)
char_mat(10,8)=(0.d0,-1.0d0)
char_mat(10,8)=CMPLX(-0.5d0,sqr3d2,kind=DP)
char_mat(10,9)=(-1.d0,0.d0)
char_mat(1,10)=(-1.d0,0.d0)
char_mat(1,10)=(-2.d0,0.d0)
char_mat(1,10)=CMPLX(-0.5d0,-sqr3d2,kind=DP)
char_mat(1,10)=CMPLX(-0.5d0,sqr3d2,kind=DP)
char_mat(1,10)=CMPLX(-sqr3d2,0.5d0,kind=DP)
char_mat(11,10)=(-1.d0,0.d0)
char_mat(11,11)=(0.d0,-1.0d0)
char_mat(11,11)=CMPLX(0.5d0,-sqr3d2,kind=DP)
char_mat(1,11)=(-2.d0,0.d0)
char_mat(11,13)=(-1.0d0,0.d0)
char_mat(11,15)=(0.d0,-1.0d0)
char_mat(11,18)=(-1.0d0,0.d0)
char_mat(1,11)=CMPLX(0.5d0,-sqr3d2,kind=DP)
char_mat(1,11)=CMPLX(sqr3d2,-0.5d0,kind=DP)
char_mat(1,11)=CMPLX(-sqrt2,0.d0,kind=DP)
char_mat(11,20)=(0.d0,-1.0d0)
char_mat(1,12)=(-1.d0,0.d0)
char_mat(11,22)=(-1.0d0,0.d0)
char_mat(11,24)=(0.d0,-1.0d0)
char_mat(1,12)=CMPLX(-0.5d0,sqr3d2,kind=DP)
char_mat(11,2)=CMPLX(-0.5d0,sqr3d2,kind=DP)
char_mat(1,12)=CMPLX(-dsq2,-dsq2,kind=DP)
char_mat(1,12)=CMPLX(-sqr3d2,-0.5d0,kind=DP)
char_mat(1,12)=CMPLX(-sqr3d2,0.5d0,kind=DP)
char_mat(11,3)=(-1.d0,0.d0)
char_mat(11,3)=CMPLX(-0.5d0,-sqr3d2,kind=DP)
char_mat(1,13)=CMPLX(-sqrt3,0.d0,kind=DP)
char_mat(11,4)=(0.d0,-1.0d0)
char_mat(1,14)=(0.d0,-1.d0)
char_mat(1,14)=(-1.0d0,0.d0)
char_mat(1,14)=(-1.d0,0.d0)
char_mat(11,4)=(-2.d0,0.d0)
char_mat(1,15)=(-1.d0,0.d0)
char_mat(11,5)=(-1.d0,0.d0)
char_mat(11,5)=CMPLX(-0.5d0,sqr3d2,kind=DP)
char_mat(1,15)=CMPLX(dsq2,-dsq2,kind=DP)
char_mat(1,15)=CMPLX(-sqrt2,0.d0,kind=DP)
char_mat(11,6)=CMPLX(-0.5d0,-sqr3d2,kind=DP)
char_mat(1,16)=CMPLX(-dsq2,dsq2,kind=DP)
char_mat(1,16)=CMPLX(-sqr3d2,-0.5d0,kind=DP)
char_mat(11,7)=(0.d0,-1.0d0)
char_mat(11,7)=(-1.d0,0.d0)
char_mat(11,7)=(-2.d0,0.d0)
char_mat(11,8)=(-1.d0,0.d0)
char_mat(1,18)=CMPLX(-0.5d0,-sqr3d2,kind=DP)
char_mat(11,8)=CMPLX(0.5d0,-sqr3d2,kind=DP)
char_mat(11,9)=(-1.d0,0.d0)
char_mat(1,20)=(0.d0,-1.0d0)
char_mat(12,10)=(-1.d0,0.d0)
char_mat(12,10)=(-2.d0,0.d0)
char_mat(12,12)=(0.d0,-1.0d0)
char_mat(12,12)=CMPLX(0.5d0,-sqr3d2,kind=DP)
char_mat(12,13)=(-1.0d0,0.d0)
char_mat(12,16)=(0.d0,-1.0d0)
char_mat(12,18)=(-1.0d0,0.d0)
char_mat(12,19)=(0.d0,-1.0d0)
char_mat(1,21)=CMPLX(0.5d0,-sqr3d2,kind=DP)
char_mat(1,2)=(-1.d0,0.d0)
char_mat(12,2)=(-1.d0,0.d0)
char_mat(12,22)=(-1.0d0,0.d0)
char_mat(12,23)=(0.d0,-1.0d0)
char_mat(1,22)=CMPLX(-0.5d0,sqr3d2,kind=DP)
char_mat(12,2)=CMPLX(-0.5d0,-sqr3d2,kind=DP)
char_mat(1,2)=(-2.d0,0.d0)
char_mat(12,3)=(0.d0,-1.0d0)
char_mat(12,3)=(-1.d0,0.d0)
char_mat(12,3)=CMPLX(-0.5d0,sqr3d2,kind=DP)
char_mat(1,23)=CMPLX(sqr3d2,-0.5d0,kind=DP)
char_mat(1,24)=CMPLX(-sqr3d2,0.5d0,kind=DP)
char_mat(12,5)=(-1.d0,0.d0)
char_mat(12,5)=CMPLX(-0.5d0,-sqr3d2,kind=DP)
char_mat(12,6)=CMPLX(-0.5d0,sqr3d2,kind=DP)
char_mat(12,7)=(-1.d0,0.d0)
char_mat(12,7)=(-2.d0,0.d0)
char_mat(12,8)=(0.d0,-1.0d0)
char_mat(12,9)=(-1.d0,0.d0)
char_mat(12,9)=CMPLX(0.5d0,-sqr3d2,kind=DP)
char_mat(1,4)=(0.d0,-1.d0)
char_mat(1,4)=(-1.d0,0.d0)
char_mat(1,4)=CMPLX(-0.5d0,-sqr3d2,kind=DP)
char_mat(1,4)=CMPLX(-dsq2,-dsq2,kind=DP)
char_mat(1,4)=CMPLX(-sqr3d2,-0.5d0,kind=DP)
char_mat(1,4)=CMPLX(-sqrt2,0.d0,kind=DP)
char_mat(1,4)=CMPLX(-sqrt3,0.d0,kind=DP)
char_mat(1,5)=(-1.d0,0.d0)
char_mat(1,5)=CMPLX(0.5d0,-sqr3d2,kind=DP)
char_mat(1,6)=(0.d0,-1.d0)
char_mat(1,6)=(-1.d0,0.d0)
char_mat(1,6)=CMPLX(-0.5d0,-sqr3d2,kind=DP)
char_mat(1,6)=CMPLX(-0.5d0,sqr3d2,kind=DP)
char_mat(1,7)=(-1.d0,0.d0)
char_mat(1,7)=(-2.d0,0.d0)
char_mat(1,7)=CMPLX(dsq2,-dsq2,kind=DP)
char_mat(1,7)=CMPLX(-sqrt2,0.d0,kind=DP)
char_mat(1,8)=(0.d0,-1.0d0)
char_mat(1,8)=(0.d0,-1.d0)
char_mat(1,8)=(-1.0d0,0.d0)
char_mat(1,8)=(-2.d0,0.d0)
char_mat(1,8)=CMPLX(-dsq2,dsq2,kind=DP)
char_mat(1,8)=CMPLX(-sqrt3,0.d0,kind=DP)
char_mat(1,9)=(-2.d0,0.d0)
char_mat(1,9)=CMPLX(0.5d0,-sqr3d2,kind=DP)
char_mat(1,9)=CMPLX(sqr3d2,-0.5d0,kind=DP)
char_mat(2,10)=(-1.d0,0.d0)
char_mat(2,10)=(-2.d0,0.d0)
char_mat(2,10)=CMPLX(-0.5d0,-sqr3d2,kind=DP)
char_mat(2,10)=CMPLX(-0.5d0,sqr3d2,kind=DP)
char_mat(2,10)=CMPLX(-sqr3d2,-0.5d0,kind=DP)
char_mat(2,10)=CMPLX(-sqrt2,0.d0,kind=DP)
char_mat(2,11)=(-1.d0,0.d0)
char_mat(2,11)=(-2.d0,0.d0)
char_mat(2,11)=CMPLX(-0.5d0,sqr3d2,kind=DP)
char_mat(2,11)=CMPLX(dsq2,-dsq2,kind=DP)
char_mat(2,11)=CMPLX(sqr3d2,-0.5d0,kind=DP)
char_mat(2,12)=(0.d0,-1.d0)
char_mat(2,12)=(-1.d0,0.d0)
char_mat(2,12)=CMPLX(-0.5d0,-sqr3d2,kind=DP)
char_mat(2,12)=CMPLX(0.5d0,-sqr3d2,kind=DP)
char_mat(2,12)=CMPLX(-dsq2,dsq2,kind=DP)
char_mat(2,12)=CMPLX(-sqr3d2,-0.5d0,kind=DP)
char_mat(2,12)=CMPLX(-sqr3d2,0.5d0,kind=DP)
char_mat(2,12)=CMPLX(-sqrt3,0.d0,kind=DP)
char_mat(2,13)=(0.d0,-1.d0)
char_mat(2,13)=CMPLX(-0.5d0,-sqr3d2,kind=DP)
char_mat(2,14)=(-1.0d0,0.d0)
char_mat(2,14)=CMPLX(-sqrt2,0.d0,kind=DP)
char_mat(2,15)=(-1.d0,0.d0)
char_mat(2,15)=CMPLX(sqr3d2,-0.5d0,kind=DP)
char_mat(2,16)=CMPLX(-dsq2,-dsq2,kind=DP)
char_mat(2,16)=CMPLX(-sqr3d2,0.5d0,kind=DP)
char_mat(2,17)=CMPLX(0.5d0,-sqr3d2,kind=DP)
char_mat(2,18)=CMPLX(-0.5d0,sqr3d2,kind=DP)
char_mat(2,19)=(0.d0,-1.0d0)
char_mat(:,2)=(-1.d0,0.d0)
char_mat(2,2)=(-1.d0,0.d0)
char_mat(2,22)=CMPLX(-0.5d0,-sqr3d2,kind=DP)
char_mat(2,2)=(-2.d0,0.d0)
char_mat(2,24)=CMPLX(-sqr3d2,-0.5d0,kind=DP)
char_mat(2,2)=CMPLX(-0.5d0,sqr3d2,kind=DP)
char_mat(2,3)=(0.d0,-1.d0)
char_mat(2,3)=(-1.d0,0.d0)
char_mat(2,3)=CMPLX(-0.5d0,-sqr3d2,kind=DP)
char_mat(2,3)=CMPLX(-0.5d0,sqr3d2,kind=DP)
char_mat(2,3)=CMPLX(0.5d0,-sqr3d2,kind=DP)
char_mat(2,3)=CMPLX(dsq2,-dsq2,kind=DP)
char_mat(2,3)=CMPLX(sqr3d2,-0.5d0,kind=DP)
char_mat(2,3)=CMPLX(-sqrt2,0.d0,kind=DP)
char_mat(2,3)=CMPLX(-sqrt3,0.d0,kind=DP)
char_mat(2,4)=(-1.d0,0.d0)
char_mat(2,4)=CMPLX(-0.5d0,-sqr3d2,kind=DP)
char_mat(2,4)=CMPLX(-0.5d0,sqr3d2,kind=DP)
char_mat(2,4)=CMPLX(-dsq2,dsq2,kind=DP)
char_mat(2,4)=CMPLX(-sqr3d2,0.5d0,kind=DP)
char_mat(2,5)=(0.d0,-1.d0)
char_mat(2,5)=(-1.d0,0.d0)
char_mat(2,5)=CMPLX(-0.5d0,sqr3d2,kind=DP)
char_mat(2,5)=CMPLX(0.5d0,-sqr3d2,kind=DP)
char_mat(2,6)=(0.d0,-1.d0)
char_mat(2,6)=(-1.d0,0.d0)
char_mat(2,6)=(-2.d0,0.d0)
char_mat(2,6)=CMPLX(-0.5d0,-sqr3d2,kind=DP)
char_mat(2,6)=CMPLX(-0.5d0,sqr3d2,kind=DP)
char_mat(2,6)=CMPLX(-sqrt2,0.d0,kind=DP)
char_mat(2,7)=(0.d0,-1.0d0)
char_mat(2,7)=(0.d0,-1.d0)
char_mat(2,7)=(-1.d0,0.d0)
char_mat(2,7)=CMPLX(-0.5d0,sqr3d2,kind=DP)
char_mat(2,7)=CMPLX(-sqrt3,0.d0,kind=DP)
char_mat(2,8)=(-1.0d0,0.d0)
char_mat(2,8)=(-1.d0,0.d0)
char_mat(2,8)=CMPLX(-0.5d0,-sqr3d2,kind=DP)
char_mat(2,8)=CMPLX(-dsq2,-dsq2,kind=DP)
char_mat(2,9)=(-1.d0,0.d0)
char_mat(2,9)=(-2.d0,0.d0)
char_mat(2,9)=CMPLX(0.5d0,-sqr3d2,kind=DP)
char_mat(3,10)=(-1.d0,0.d0)
char_mat(3,10)=(-4.d0,0.d0)
char_mat(3,10)=CMPLX(-0.5d0,sqr3d2,kind=DP)
char_mat(3,10)=CMPLX(sqr3d2,-0.5d0,kind=DP)
char_mat(3,10)=CMPLX(-sqrt2,0.d0,kind=DP)
char_mat(3,11)=(0.d0,-1.d0)
char_mat(3,11)=(-1.0d0,0.d0)
char_mat(3,11)=(-1.d0,0.d0)
char_mat(3,11)=(-2.d0,0.d0)
char_mat(3,11)=CMPLX(-0.5d0,-sqr3d2,kind=DP)
char_mat(3,11)=CMPLX(-dsq2,-dsq2,kind=DP)
char_mat(3,11)=CMPLX(-sqr3d2,-0.5d0,kind=DP)
char_mat(3,11)=CMPLX(-sqr3d2,0.5d0,kind=DP)
char_mat(3,12)=(-1.d0,0.d0)
char_mat(3,12)=CMPLX(0.5d0,-sqr3d2,kind=DP)
char_mat(3,12)=CMPLX(sqr3d2,-0.5d0,kind=DP)
char_mat(3,13)=CMPLX(-0.5d0,sqr3d2,kind=DP)
char_mat(3,14)=(0.d0,-1.d0)
char_mat(3,14)=(-1.0d0,0.d0)
char_mat(3,14)=(-2.d0,0.d0)
char_mat(3,14)=CMPLX(0.5d0,-sqr3d2,kind=DP)
char_mat(3,15)=CMPLX(-dsq2,dsq2,kind=DP)
char_mat(3,15)=CMPLX(-sqr3d2,-0.5d0,kind=DP)
char_mat(3,16)=CMPLX(dsq2,-dsq2,kind=DP)
char_mat(3,18)=CMPLX(-0.5d0,-sqr3d2,kind=DP)
char_mat(3,19)=(0.d0,-1.0d0)
char_mat(3,21)=CMPLX(0.5d0,-sqr3d2,kind=DP)
char_mat(3,2)=(-1.d0,0.d0)
char_mat(3,22)=CMPLX(-0.5d0,sqr3d2,kind=DP)
char_mat(3,2)=(-2.d0,0.d0)
char_mat(3,23)=CMPLX(-sqr3d2,0.5d0,kind=DP)
char_mat(3,24)=CMPLX(sqr3d2,-0.5d0,kind=DP)
char_mat(3,2)=(-4.d0,0.d0)
char_mat(3,2)=CMPLX(-0.5d0,-sqr3d2,kind=DP)
char_mat(3,3)=(-1.0d0,0.d0)
char_mat(3,3)=(-1.d0,0.d0)
char_mat(3,3)=(-2.d0,0.d0)
char_mat(3,3)=CMPLX(-0.5d0,-sqr3d2,kind=DP)
char_mat(3,3)=CMPLX(-0.5d0,sqr3d2,kind=DP)
char_mat(3,3)=CMPLX(-dsq2,-dsq2,kind=DP)
char_mat(3,3)=CMPLX(-sqr3d2,-0.5d0,kind=DP)
char_mat(3,4)=(0.d0,-1.d0)
char_mat(3,4)=(-1.d0,0.d0)
char_mat(3,4)=CMPLX(-0.5d0,-sqr3d2,kind=DP)
char_mat(3,4)=CMPLX(-0.5d0,sqr3d2,kind=DP)
char_mat(3,4)=CMPLX(-sqrt2,0.d0,kind=DP)
char_mat(3,5)=(0.d0,-1.d0)
char_mat(3,5)=(-1.0d0,0.d0)
char_mat(3,5)=(-1.d0,0.d0)
char_mat(3,5)=(-2.d0,0.d0)
char_mat(3,5)=CMPLX(-0.5d0,-sqr3d2,kind=DP)
char_mat(3,5)=CMPLX(0.5d0,-sqr3d2,kind=DP)
char_mat(3,6)=(0.d0,-1.d0)
char_mat(3,6)=(-1.d0,0.d0)
char_mat(3,6)=CMPLX(-0.5d0,-sqr3d2,kind=DP)
char_mat(3,6)=CMPLX(-0.5d0,sqr3d2,kind=DP)
char_mat(3,6)=CMPLX(0.5d0,-sqr3d2,kind=DP)
char_mat(3,7)=(0.d0,-1.0d0)
char_mat(3,7)=(0.d0,-1.d0)
char_mat(3,7)=(-1.d0,0.d0)
char_mat(3,7)=CMPLX(-0.5d0,-sqr3d2,kind=DP)
char_mat(3,7)=CMPLX(0.5d0,-sqr3d2,kind=DP)
char_mat(3,7)=CMPLX(-dsq2,dsq2,kind=DP)
char_mat(3,8)=(0.d0,-1.d0)
char_mat(3,8)=(-1.0d0,0.d0)
char_mat(3,8)=(-1.d0,0.d0)
char_mat(3,8)=(-2.d0,0.d0)
char_mat(3,8)=CMPLX(-0.5d0,sqr3d2,kind=DP)
char_mat(3,8)=CMPLX(dsq2,-dsq2,kind=DP)
char_mat(3,9)=(-1.0d0,0.d0)
char_mat(3,9)=(-1.d0,0.d0)
char_mat(3,9)=(-2.d0,0.d0)
char_mat(3,9)=CMPLX(-0.5d0,sqr3d2,kind=DP)
char_mat(3,9)=CMPLX(0.5d0,-sqr3d2,kind=DP)
char_mat(3,9)=CMPLX(-sqr3d2,0.5d0,kind=DP)
char_mat(4,10)=(-1.d0,0.d0)
char_mat(4,10)=(-2.d0,0.d0)
char_mat(4,10)=CMPLX(-0.5d0,-sqr3d2,kind=DP)
char_mat(4,11)=(-1.d0,0.d0)
char_mat(4,11)=CMPLX(-0.5d0,sqr3d2,kind=DP)
char_mat(4,11)=CMPLX(-dsq2,dsq2,kind=DP)
char_mat(4,11)=CMPLX(-sqr3d2,-0.5d0,kind=DP)
char_mat(4,11)=CMPLX(-sqr3d2,0.5d0,kind=DP)
char_mat(4,11)=CMPLX(-sqrt2,0.d0,kind=DP)
char_mat(4,12)=CMPLX(0.5d0,-sqr3d2,kind=DP)
char_mat(4,12)=CMPLX(dsq2,-dsq2,kind=DP)
char_mat(4,12)=CMPLX(sqr3d2,-0.5d0,kind=DP)
char_mat(4,12)=CMPLX(-sqrt3,0.d0,kind=DP)
char_mat(4,13)=(0.d0,-1.d0)
char_mat(4,13)=(-1.d0,0.d0)
char_mat(4,14)=(-1.0d0,0.d0)
char_mat(4,14)=(-1.d0,0.d0)
char_mat(4,14)=CMPLX(-sqrt2,0.d0,kind=DP)
char_mat(4,15)=CMPLX(-dsq2,-dsq2,kind=DP)
char_mat(4,15)=CMPLX(-sqr3d2,0.5d0,kind=DP)
char_mat(4,16)=CMPLX(sqr3d2,-0.5d0,kind=DP)
char_mat(4,17)=CMPLX(0.5d0,-sqr3d2,kind=DP)
char_mat(4,18)=CMPLX(-0.5d0,sqr3d2,kind=DP)
char_mat(4,20)=(0.d0,-1.0d0)
char_mat(4,2)=(0.d0,-1.d0)
char_mat(4,2)=(-1.0d0,0.d0)
char_mat(4,2)=(-1.d0,0.d0)
char_mat(4,22)=CMPLX(-0.5d0,-sqr3d2,kind=DP)
char_mat(4,2)=(-2.d0,0.d0)
char_mat(4,23)=CMPLX(-sqr3d2,-0.5d0,kind=DP)
char_mat(4,2)=CMPLX(0.5d0,-sqr3d2,kind=DP)
char_mat(4,3)=(0.d0,-1.d0)
char_mat(4,3)=(-1.d0,0.d0)
char_mat(4,3)=CMPLX(-0.5d0,-sqr3d2,kind=DP)
char_mat(4,3)=CMPLX(0.5d0,-sqr3d2,kind=DP)
char_mat(4,3)=CMPLX(-dsq2,dsq2,kind=DP)
char_mat(4,3)=CMPLX(-sqr3d2,0.5d0,kind=DP)
char_mat(4,3)=CMPLX(-sqrt2,0.d0,kind=DP)
char_mat(4,4)=(-1.d0,0.d0)
char_mat(4,4)=CMPLX(-0.5d0,-sqr3d2,kind=DP)
char_mat(4,4)=CMPLX(-0.5d0,sqr3d2,kind=DP)
char_mat(4,4)=CMPLX(dsq2,-dsq2,kind=DP)
char_mat(4,4)=CMPLX(sqr3d2,-0.5d0,kind=DP)
char_mat(4,4)=CMPLX(-sqrt3,0.d0,kind=DP)
char_mat(4,5)=(0.d0,-1.d0)
char_mat(4,5)=(-1.d0,0.d0)
char_mat(4,5)=CMPLX(-0.5d0,sqr3d2,kind=DP)
char_mat(4,5)=CMPLX(0.5d0,-sqr3d2,kind=DP)
char_mat(4,6)=(0.d0,-1.d0)
char_mat(4,6)=(-1.0d0,0.d0)
char_mat(4,6)=(-1.d0,0.d0)
char_mat(4,6)=CMPLX(-0.5d0,-sqr3d2,kind=DP)
char_mat(4,6)=CMPLX(-0.5d0,sqr3d2,kind=DP)
char_mat(4,7)=(-1.0d0,0.d0)
char_mat(4,7)=(-1.d0,0.d0)
char_mat(4,7)=(-2.d0,0.d0)
char_mat(4,7)=CMPLX(-dsq2,-dsq2,kind=DP)
char_mat(4,7)=CMPLX(-sqrt2,0.d0,kind=DP)
char_mat(4,8)=(0.d0,-1.0d0)
char_mat(4,8)=(0.d0,-1.d0)
char_mat(4,8)=(-1.d0,0.d0)
char_mat(4,8)=(-2.d0,0.d0)
char_mat(4,8)=CMPLX(0.5d0,-sqr3d2,kind=DP)
char_mat(4,9)=(-1.d0,0.d0)
char_mat(4,9)=(-2.d0,0.d0)
char_mat(4,9)=CMPLX(-0.5d0,-sqr3d2,kind=DP)
char_mat(4,9)=CMPLX(-sqr3d2,-0.5d0,kind=DP)
char_mat(5,10)=(-1.d0,0.d0)
char_mat(5,10)=(-2.d0,0.d0)
char_mat(5,10)=CMPLX(0.5d0,-sqr3d2,kind=DP)
char_mat(5,11)=(0.d0,-1.0d0)
char_mat(5,11)=(0.d0,-1.d0)
char_mat(5,11)=(-1.d0,0.d0)
char_mat(5,11)=CMPLX(-0.5d0,-sqr3d2,kind=DP)
char_mat(5,11)=CMPLX(-0.5d0,sqr3d2,kind=DP)
char_mat(5,11)=CMPLX(0.5d0,-sqr3d2,kind=DP)
char_mat(5,11)=CMPLX(-dsq2,-dsq2,kind=DP)
char_mat(5,12)=(0.d0,-1.d0)
char_mat(5,12)=CMPLX(-0.5d0,-sqr3d2,kind=DP)
char_mat(5,12)=CMPLX(-0.5d0,sqr3d2,kind=DP)
char_mat(5,13)=(0.d0,-1.d0)
char_mat(5,13)=CMPLX(-sqrt3,0.d0,kind=DP)
char_mat(5,14)=(-1.0d0,0.d0)
char_mat(5,14)=(-1.d0,0.d0)
char_mat(5,14)=CMPLX(-0.5d0,-sqr3d2,kind=DP)
char_mat(5,15)=CMPLX(-dsq2,dsq2,kind=DP)
char_mat(5,15)=CMPLX(-sqrt2,0.d0,kind=DP)
char_mat(5,16)=(0.d0,-1.0d0)
char_mat(5,16)=CMPLX(dsq2,-dsq2,kind=DP)
char_mat(5,17)=(-1.0d0,0.d0)
char_mat(5,19)=(0.d0,-1.0d0)
char_mat(5,21)=(-1.0d0,0.d0)
char_mat(5,2)=(-1.d0,0.d0)
char_mat(5,2)=(-2.d0,0.d0)
char_mat(5,23)=(0.d0,-1.0d0)
char_mat(5,2)=CMPLX(-0.5d0,sqr3d2,kind=DP)
char_mat(5,3)=(-1.d0,0.d0)
char_mat(5,3)=(-2.d0,0.d0)
char_mat(5,3)=CMPLX(-0.5d0,-sqr3d2,kind=DP)
char_mat(5,3)=CMPLX(0.5d0,-sqr3d2,kind=DP)
char_mat(5,3)=CMPLX(-sqrt3,0.d0,kind=DP)
char_mat(5,4)=(0.d0,-1.0d0)
char_mat(5,4)=(0.d0,-1.d0)
char_mat(5,4)=(-1.d0,0.d0)
char_mat(5,4)=(-2.d0,0.d0)
char_mat(5,4)=CMPLX(-0.5d0,sqr3d2,kind=DP)
char_mat(5,4)=CMPLX(-dsq2,-dsq2,kind=DP)
char_mat(5,5)=(-1.0d0,0.d0)
char_mat(5,5)=(-1.d0,0.d0)
char_mat(5,5)=CMPLX(-0.5d0,sqr3d2,kind=DP)
char_mat(5,5)=CMPLX(0.5d0,-sqr3d2,kind=DP)
char_mat(5,6)=(0.d0,-1.d0)
char_mat(5,6)=(-1.0d0,0.d0)
char_mat(5,6)=(-1.d0,0.d0)
char_mat(5,6)=CMPLX(-0.5d0,-sqr3d2,kind=DP)
char_mat(5,6)=CMPLX(-sqrt2,0.d0,kind=DP)
char_mat(5,7)=(0.d0,-1.0d0)
char_mat(5,7)=(0.d0,-1.d0)
char_mat(5,7)=(-1.0d0,0.d0)
char_mat(5,7)=(-1.d0,0.d0)
char_mat(5,7)=CMPLX(dsq2,-dsq2,kind=DP)
char_mat(5,8)=(-1.0d0,0.d0)
char_mat(5,8)=(-1.d0,0.d0)
char_mat(5,8)=(-2.d0,0.d0)
char_mat(5,8)=CMPLX(-0.5d0,sqr3d2,kind=DP)
char_mat(5,8)=CMPLX(-dsq2,dsq2,kind=DP)
char_mat(5,9)=(0.d0,-1.d0)
char_mat(5,9)=(-1.d0,0.d0)
char_mat(5,9)=(-2.d0,0.d0)
char_mat(5,9)=CMPLX(-0.5d0,-sqr3d2,kind=DP)
char_mat(5,9)=CMPLX(-0.5d0,sqr3d2,kind=DP)
char_mat(6,10)=(0.d0,-1.d0)
char_mat(6,10)=(-1.0d0,0.d0)
char_mat(6,10)=(-1.d0,0.d0)
char_mat(6,10)=(-2.d0,0.d0)
char_mat(6,11)=(0.d0,-1.d0)
char_mat(6,11)=CMPLX(-0.5d0,-sqr3d2,kind=DP)
char_mat(6,11)=CMPLX(-dsq2,dsq2,kind=DP)
char_mat(6,12)=(0.d0,-1.0d0)
char_mat(6,12)=(0.d0,-1.d0)
char_mat(6,12)=(-1.0d0,0.d0)
char_mat(6,12)=(-1.d0,0.d0)
char_mat(6,12)=CMPLX(-0.5d0,-sqr3d2,kind=DP)
char_mat(6,12)=CMPLX(-0.5d0,sqr3d2,kind=DP)
char_mat(6,12)=CMPLX(dsq2,-dsq2,kind=DP)
char_mat(6,13)=CMPLX(0.5d0,-sqr3d2,kind=DP)
char_mat(6,14)=(0.d0,-1.d0)
char_mat(6,14)=(-1.0d0,0.d0)
char_mat(6,14)=CMPLX(-0.5d0,sqr3d2,kind=DP)
char_mat(6,15)=(0.d0,-1.0d0)
char_mat(6,15)=(-2.d0,0.d0)
char_mat(6,15)=CMPLX(-dsq2,-dsq2,kind=DP)
char_mat(6,17)=(-1.0d0,0.d0)
char_mat(6,20)=(0.d0,-1.0d0)
char_mat(6,21)=(-1.0d0,0.d0)
char_mat(6,2)=(-1.d0,0.d0)
char_mat(6,2)=(-2.d0,0.d0)
char_mat(6,24)=(0.d0,-1.0d0)
char_mat(6,2)=(-4.d0,0.d0)
char_mat(6,2)=CMPLX(-0.5d0,-sqr3d2,kind=DP)
char_mat(6,3)=(0.d0,-1.0d0)
char_mat(6,3)=(0.d0,-1.d0)
char_mat(6,3)=(-1.0d0,0.d0)
char_mat(6,3)=(-1.d0,0.d0)
char_mat(6,3)=CMPLX(-0.5d0,sqr3d2,kind=DP)
char_mat(6,3)=CMPLX(dsq2,-dsq2,kind=DP)
char_mat(6,4)=(-1.d0,0.d0)
char_mat(6,4)=(-2.d0,0.d0)
char_mat(6,4)=CMPLX(-0.5d0,-sqr3d2,kind=DP)
char_mat(6,4)=CMPLX(-dsq2,dsq2,kind=DP)
char_mat(6,5)=(0.d0,-1.d0)
char_mat(6,5)=(-1.0d0,0.d0)
char_mat(6,5)=(-1.d0,0.d0)
char_mat(6,5)=(-2.d0,0.d0)
char_mat(6,5)=CMPLX(-0.5d0,-sqr3d2,kind=DP)
char_mat(6,6)=(-1.0d0,0.d0)
char_mat(6,6)=(-1.d0,0.d0)
char_mat(6,6)=CMPLX(-0.5d0,sqr3d2,kind=DP)
char_mat(6,6)=CMPLX(0.5d0,-sqr3d2,kind=DP)
char_mat(6,7)=(-1.0d0,0.d0)
char_mat(6,7)=(-1.d0,0.d0)
char_mat(6,7)=CMPLX(0.5d0,-sqr3d2,kind=DP)
char_mat(6,8)=(0.d0,-1.0d0)
char_mat(6,8)=(0.d0,-1.d0)
char_mat(6,8)=(-1.d0,0.d0)
char_mat(6,8)=(-2.d0,0.d0)
char_mat(6,8)=CMPLX(-0.5d0,-sqr3d2,kind=DP)
char_mat(6,8)=CMPLX(-dsq2,-dsq2,kind=DP)
char_mat(6,9)=(-1.d0,0.d0)
char_mat(6,9)=(-4.d0,0.d0)
char_mat(6,9)=CMPLX(-0.5d0,sqr3d2,kind=DP)
char_mat(7,10)=(-1.d0,0.d0)
char_mat(7,10)=CMPLX(-0.5d0,sqr3d2,kind=DP)
char_mat(7,11)=(-1.d0,0.d0)
char_mat(7,11)=CMPLX(sqr3d2,-0.5d0,kind=DP)
char_mat(7,12)=(-1.d0,0.d0)
char_mat(7,12)=CMPLX(-dsq2,-dsq2,kind=DP)
char_mat(7,12)=CMPLX(-sqr3d2,0.5d0,kind=DP)
char_mat(7,13)=(0.d0,-1.d0)
char_mat(7,13)=(-1.0d0,0.d0)
char_mat(7,15)=CMPLX(dsq2,-dsq2,kind=DP)
char_mat(7,15)=CMPLX(-sqr3d2,-0.5d0,kind=DP)
char_mat(7,16)=CMPLX(-dsq2,dsq2,kind=DP)
char_mat(7,17)=CMPLX(-0.5d0,-sqr3d2,kind=DP)
char_mat(7,19)=(0.d0,-1.0d0)
char_mat(7,21)=CMPLX(-0.5d0,sqr3d2,kind=DP)
char_mat(7,2)=(-1.d0,0.d0)
char_mat(7,22)=CMPLX(0.5d0,-sqr3d2,kind=DP)
char_mat(7,23)=CMPLX(-sqr3d2,0.5d0,kind=DP)
char_mat(7,24)=CMPLX(sqr3d2,-0.5d0,kind=DP)
char_mat(7,3)=(-1.d0,0.d0)
char_mat(7,3)=CMPLX(-0.5d0,-sqr3d2,kind=DP)
char_mat(7,3)=CMPLX(-dsq2,-dsq2,kind=DP)
char_mat(7,4)=(0.d0,-1.d0)
char_mat(7,4)=(-1.d0,0.d0)
char_mat(7,4)=CMPLX(-0.5d0,sqr3d2,kind=DP)
char_mat(7,4)=CMPLX(-sqr3d2,-0.5d0,kind=DP)
char_mat(7,5)=(-1.0d0,0.d0)
char_mat(7,5)=(-1.d0,0.d0)
char_mat(7,6)=(0.d0,-1.d0)
char_mat(7,6)=(-1.0d0,0.d0)
char_mat(7,6)=(-1.d0,0.d0)
char_mat(7,6)=CMPLX(-0.5d0,-sqr3d2,kind=DP)
char_mat(7,7)=(-1.d0,0.d0)
char_mat(7,7)=CMPLX(-dsq2,dsq2,kind=DP)
char_mat(7,8)=(0.d0,-1.0d0)
char_mat(7,8)=(-1.d0,0.d0)
char_mat(7,8)=CMPLX(0.5d0,-sqr3d2,kind=DP)
char_mat(7,8)=CMPLX(dsq2,-dsq2,kind=DP)
char_mat(7,9)=(-1.d0,0.d0)
char_mat(7,9)=CMPLX(0.5d0,-sqr3d2,kind=DP)
char_mat(8,10)=(-1.d0,0.d0)
char_mat(8,10)=CMPLX(-0.5d0,-sqr3d2,kind=DP)
char_mat(8,11)=(-1.d0,0.d0)
char_mat(8,11)=CMPLX(dsq2,-dsq2,kind=DP)
char_mat(8,12)=CMPLX(-dsq2,dsq2,kind=DP)
char_mat(8,12)=CMPLX(-sqr3d2,-0.5d0,kind=DP)
char_mat(8,13)=(-1.0d0,0.d0)
char_mat(8,14)=(0.d0,-1.d0)
char_mat(8,15)=CMPLX(-sqr3d2,0.5d0,kind=DP)
char_mat(8,16)=CMPLX(-dsq2,-dsq2,kind=DP)
char_mat(8,16)=CMPLX(sqr3d2,-0.5d0,kind=DP)
char_mat(8,17)=CMPLX(-0.5d0,sqr3d2,kind=DP)
char_mat(8,18)=CMPLX(0.5d0,-sqr3d2,kind=DP)
char_mat(8,20)=(0.d0,-1.0d0)
char_mat(8,2)=(0.d0,-1.d0)
char_mat(8,2)=(-1.0d0,0.d0)
char_mat(8,21)=CMPLX(-0.5d0,-sqr3d2,kind=DP)
char_mat(8,2)=(-1.d0,0.d0)
char_mat(8,23)=CMPLX(-sqr3d2,-0.5d0,kind=DP)
char_mat(8,3)=(-1.d0,0.d0)
char_mat(8,3)=CMPLX(-dsq2,dsq2,kind=DP)
char_mat(8,3)=CMPLX(sqr3d2,-0.5d0,kind=DP)
char_mat(8,4)=(-1.d0,0.d0)
char_mat(8,4)=CMPLX(dsq2,-dsq2,kind=DP)
char_mat(8,4)=CMPLX(-sqr3d2,0.5d0,kind=DP)
char_mat(8,5)=(0.d0,-1.d0)
char_mat(8,5)=(-1.d0,0.d0)
char_mat(8,5)=(-3.0d0,0.d0)
char_mat(8,5)=CMPLX(0.5d0,-sqr3d2,kind=DP)
char_mat(8,6)=(-1.d0,0.d0)
char_mat(8,6)=(-2.d0,0.d0)
char_mat(8,6)=CMPLX(-0.5d0,sqr3d2,kind=DP)
char_mat(8,7)=(0.d0,-1.0d0)
char_mat(8,7)=(-1.d0,0.d0)
char_mat(8,7)=CMPLX(-dsq2,-dsq2,kind=DP)
char_mat(8,8)=(0.d0,-1.d0)
char_mat(8,8)=(-1.d0,0.d0)
char_mat(8,8)=(-2.d0,0.d0)
char_mat(8,9)=(-1.d0,0.d0)
char_mat(9,10)=(-1.d0,0.d0)
char_mat(9,10)=CMPLX(-0.5d0,sqr3d2,kind=DP)
char_mat(9,11)=(-1.d0,0.d0)
char_mat(9,11)=CMPLX(-sqr3d2,0.5d0,kind=DP)
char_mat(9,12)=CMPLX(-0.5d0,sqr3d2,kind=DP)
char_mat(9,12)=CMPLX(sqr3d2,-0.5d0,kind=DP)
char_mat(9,13)=(-1.0d0,0.d0)
char_mat(9,16)=CMPLX(-sqr3d2,-0.5d0,kind=DP)
char_mat(9,17)=CMPLX(-0.5d0,-sqr3d2,kind=DP)
char_mat(9,20)=(0.d0,-1.0d0)
char_mat(9,21)=CMPLX(-0.5d0,sqr3d2,kind=DP)
char_mat(9,2)=(-1.d0,0.d0)
char_mat(9,22)=CMPLX(0.5d0,-sqr3d2,kind=DP)
char_mat(9,23)=CMPLX(sqr3d2,-0.5d0,kind=DP)
char_mat(9,24)=CMPLX(-sqr3d2,0.5d0,kind=DP)
char_mat(9,3)=(-1.d0,0.d0)
char_mat(9,3)=CMPLX(-0.5d0,sqr3d2,kind=DP)
char_mat(9,3)=CMPLX(-sqr3d2,-0.5d0,kind=DP)
char_mat(9,4)=(-1.d0,0.d0)
char_mat(9,5)=(-1.d0,0.d0)
char_mat(9,5)=CMPLX(-0.5d0,-sqr3d2,kind=DP)
char_mat(9,6)=(-1.d0,0.d0)
char_mat(9,6)=(-3.d0,0.d0)
char_mat(9,6)=CMPLX(-0.5d0,-sqr3d2,kind=DP)
char_mat(9,6)=CMPLX(0.5d0,-sqr3d2,kind=DP)
char_mat(9,7)=(0.d0,-1.0d0)
char_mat(9,7)=(-1.d0,0.d0)
char_mat(9,8)=(-1.d0,0.d0)
char_mat(9,8)=CMPLX(-0.5d0,-sqr3d2,kind=DP)
char_mat(9,9)=(-1.d0,0.d0)
char_mat(9,9)=CMPLX(0.5d0,-sqr3d2,kind=DP)
check_gpu_support=(gpu_env/="no")
chi=1.D0-dt/RELAXTIME*(TARGPRESS-press_new)
chi=aaa-SQRT(aaa**2+gp**2)
chiaux(:)=(chiq(:,nb,nt)*(l+1.0_DP)+chiq(:,nc,nt)*l)/(2.0_DP*l+1.0_DP)
chisq=chisq+(etot(i)-efit(i))**2
chisq=chisq/npt
c(i)=ho*den
ck=rrt-rws(0,ir)
c_l=COS(kn*z_l)
cmass=wmass*amu_ry
cmexx=(One,Zero)*rmexx
cmplx(aimag(fp),-dble(fm),kind=DP)
CMPLX(REAL(gaux(dfftp%nl(:))),-AIMAG(gaux(dfftp%nl(:))),kind=DP)
CMPLX(rr*COS(arg),rr*SIN(arg),kind=DP)
CMPLX(sin(arg),cos(arg),kind=DP))*fact
CMPLX(SIN(arg),COS(arg),KIND=DP)*g(1:3,ig)*fact
co2=rho_core(k)/2
color(ind(in*np+1-ip))=ind(ip)
comm_recv(iproc+1,ik)%indices(count)=ig
comm_recv(iproc+1,ik)%size=count
comm_recv_reverse(iproc+1,ik)%indices(count)=ig
comm_recv_reverse(iproc+1,ik)%size=count
comm_send(iproc+1,ik)%indices(count)=l2e_map(ig+prev,ik)
comm_send(iproc+1,ik)%size=count
comm_send_reverse(iproc+1,iegrp,ik)%size=count
corners(1,ic)=dx*at(1,1)+dy*at(1,2)+dz*at(1,3)
corners(2,ic)=dx*at(2,1)+dy*at(2,2)+dz*at(2,3)
corners(3,ic)=dx*at(3,1)+dy*at(3,2)+dz*at(3,3)
corr1=-madelung(ibrav)/alat*qq**2/2.0D0*e2
corr2=(2.D0/3.D0*pi)*(qq*aa-bb)/alat**3*e2
cosangle=(ax(1)*bx(1)+ax(2)*bx(2)+ax(3)*bx(3))/moda/modb
cosgpr=COS(g(1)*(rb(1)-ra(1))+g(2)*(rb(2)-ra(2)))
costheta=2.0_DP*randy()-1.0_DP
cost=One/dble(nxxs)
cost=(smat(1,1)-ax(1)**2)/(1.d0-ax(1)**2)
cost=(smat(2,2)-ax(2)**2)/(1.d0-ax(2)**2)
cost=(smat(3,3)-ax(3)**2)/(1.d0-ax(3)**2)
count=count+1
counter=counter+2
counter=counter+2*(2*l+1)
counter=counter+2*l
counter=counter+2*l+1
counter=counter+2*l+2
count=lda_max_local*npol
cp_dest=TRIM(restart_dir())//psfile(nt)
cp_dest=TRIM(tmp_dir)//TRIM(prefix)//'.xml'
cphik(istring)=cphik(istring)/cave
c_r=COS(kn*z_r)
cross=(a(2)*b(3)-a(3)*b(2))**2+(a(3)*b(1)-a(1)*b(3))**2+(a(1)*b(2)-a(2)*b(1))**2
csum=csum+ABS(a_spin(i,j)-b_spin(i,j))
current_band=jbnd+1
current_band=natomwfc+1
current_spin=-1
CURSOR%nrec=-1
CURSOR%recl=-1
CURSOR%unit=-1
cutoff_2D(ng)=1.0d0-EXP(-Gplz)*COS(Gzlz)
cv1=evc1i*gk1
cv1=evc1i*gk1*gk1*qm1i
cv1=evc1i*gk2
cv1=evc1i*gk2*gk1*qm1i
cv1=evc1i*gk2*gk2*qm1i
cv1=evc1i*gk3
cv1=evc1i*gk3*gk1*qm1i
cv1=evc1i*gk3*gk2*qm1i
cv1=evc1i*gk3*gk3*qm1i
cv2=evc2i*gk1
cv2=evc2i*gk1*gk1*qm1i
cv2=evc2i*gk2
cv2=evc2i*gk2*gk1*qm1i
cv2=evc2i*gk2*gk2*qm1i
cv2=evc2i*gk3
cv2=evc2i*gk3*gk1*qm1i
cv2=evc2i*gk3*gk2*qm1i
cv2=evc2i*gk3*gk3*qm1i
cv=evci*CMPLX(gk1)
cv=evci*CMPLX(gk1*gk1*qm1i)
cv=evci*CMPLX(gk2)
cv=evci*CMPLX(gk2*gk1*qm1i)
cv=evci*CMPLX(gk2*gk2*qm1i)
cv=evci*CMPLX(gk3)
cv=evci*CMPLX(gk3*gk1*qm1i)
cv=evci*CMPLX(gk3*gk2*qm1i)
cv=evci*CMPLX(gk3*gk3*qm1i)
cv=evci*gk1
cv=evci*gk1*gk1*qm1i
cv=evci*gk2
cv=evci*gk2*gk1*qm1i
cv=evci*gk2*gk2*qm1i
cv=evci*gk3
cv=evci*gk3*gk1*qm1i
cv=evci*gk3*gk2*qm1i
cv=evci*gk3*gk3*qm1i
cx(i,j,2)=alpha(i)*alpha(j)*ml(1,i)*ml(1,j)/(ml(1,i)*alpha(j)+ml(1,j)*alpha(i))
d=1.d0/d
d1=(tab(2,nb,nt)-tab(1,nb,nt))/dq
d1y=rfree(1:nn,i)*rgrid(i)%r(1:nn)**5*fpi
d2(i,j)=d2(i,j)+avec2d(i,k)*sig0(j,k)
d2(i,j)=d2(i,j)/v0
da(1:3)=2.d0*pi/dble(blipgrid(:))
data(:)=-boxtot_beta(:);ind(1)=0
data(i,im)=data(i,im)+recvbuf(i+n*(j-1),ibuf)
data(ip)=-boxtot_beta(ind(ip))
data(ip)=data(ip)+data(in*np+1-ip)
db2=db2*db
dbecp0_ord(1:nkb,ipol,1:3,nb)=dbecp0(1:nkb,(nb-1)*npol+ipol,1:3)
dbecp_bp_ord(1:nkb,ipol,1:3,nb)=dbecp_bp(1:nkb,(nb-1)*npol+ipol,1:3)
dbeta(ig,ih)=(0.d0,-1.d0)*dbeta(ig,ih)*gvec
dbeta(ig,ih)=dbeta(ig,ih)-vkb(ig,ijkb0+ih)*0.5d0
dbeta(ig,ih)=vkb(ig,ijkb0+ih)
db=MAX(ri-b(n),0._DP)
dd=dd+boxtot_beta(in)
ddk=dk0+k0*d2k0/dk0
dec_part=nint((av_quote-dble(int_part))*10.d0**dble(-lowest_digit_to_quote))
dE_deps(1:2,1:2)=-delta(1:2,1:2)*Vr*Qb
dE_deps(:,:)=dE_deps(:,:)*2.0d0
deeq(:,:,:,:)=deeq(:,:,:,:)*omega/(dfftp%nr1*dfftp%nr2*dfftp%nr3)
deeq_d(ih,jh,na,is)=deeq_d(ih,jh,na,is)+dvan_d(ih,jh,nt)
deeq_d(jh,ih,na,is)=deeq_d(jh,ih,na,is)+deeq_aux_d(jh,ih,is)
deeq(ih,jh,na,is)=deeq(ih,jh,na,is)+dvan(ih,jh,nt)
deeq(ih,jh,na,is)=omega*deeaux(ijh,nb)
deexx(ikb)=deexx(ikb)-omega*CONJG(aux2(1))*aux1(1)
deff_d(i,j,na)=CMPLX(deeq_d(i,j,na,current_spin)-et*qq_at_d(i,j,na))
deff_d(i,j,na,:)=deeq_nc_d(i,j,na,:)-et*qq_so_d(i,j,:,nt)
deff(:,:,na)=deff(:,:,na)-et*qq_at(:,:,na)
deff(:,:,na,:)=deff(:,:,na,:)-et*qq_so(:,:,:,nt)
degauss=degauss*e2
degauss_tgt=degauss/e2
del=(b-a)/tnm
delta(:)=delta(:)+chi(:,na)
delta(:)=delta(:)/DBLE(nat)
delta(:)=delta(:)+mass(na)*(tau_new(:,na)-tau(:,na))
delta(:)=delta(:)+mass(na)*(tau_old(:,na)-tau(:,na))
delta(:)=delta(:)+(tau_new(:,na)-tau(:,na))
delta(:)=delta(:)/total_mass
delta_e=0.5_DP*delta_e
delta_e=delta_e+delta_e_hub
delta_e=delta_e-SUM(rho%kin_r(:,:)*v%kin_r(:,:))
delta_e_hub=-SUM(rho%ns_nc(:,:,:,:)*v%ns_nc(:,:,:,:))
delta_e_hub=-SUM(rho%ns(:,:,:,:)*v%ns(:,:,:,:))
delta_e=omega*delta_e/(dfftp%nr1*dfftp%nr2*dfftp%nr3)
delta_escf=0.5_dp*delta_escf
delta_escf=delta_escf+delta_escf_hub
delta_escf_hub=-SUM((rhoin%ns_nc(:,:,:,:)-rho%ns_nc(:,:,:,:))*v%ns_nc(:,:,:,:))
delta_escf_hub=-SUM((rhoin%ns(:,:,:,:)-rho%ns(:,:,:,:))*v%ns(:,:,:,:))
delta_escf=omega*delta_escf/(dfftp%nr1*dfftp%nr2*dfftp%nr3)
delta_escf=-SUM((rhoin%of_r(:,:)-rho%of_r(:,:))*v%of_r(:,:))
delta_e=-SUM(rho%of_r(:,:)*v%of_r(:,:))
deltam(1:3)=xkr(1:3)+xkg(1:3,ik)-NINT(xkr(1:3)+xkg(1:3,ik))
deltam(i)=xkr(i)+xkg(i,nk)-NINT(xkr(i)+xkg(i,nk))
deltansg(:,:,:,:,:)=deltansg(:,:,:,:,:)-gamma0*df_nsg(:,:,:,:,:,i)
deltansg(:,:,:,:,:)=nsgnew(:,:,:,:,:)-nsg(:,:,:,:,:)
deltap(1:3)=xkr(1:3)-xkg(1:3,ik)-NINT(xkr(1:3)-xkg(1:3,ik))
deltap(i)=xkr(i)-xkg(i,nk)-NINT(xkr(i)-xkg(i,nk))
delta=RESHAPE((/1._dp,0._dp,0._dp,0._dp,1._dp,0._dp,0._dp,0._dp,1._dp/),(/3,3/))
demet=demet_up+demet_dw
demet_tgt=demet/e2
den=1/(rvdw(i,jj)**nn+dijx)
den2=den*den
DenAve=DenAve/dble(nxtot)
DenAve=DenAve+den(ir)
den=ho-hp
denm=0.5_dp*(1.d0+x+sqrt(1.d0+(x-1)*(x-1.d0)))/scala
denm=0.5_dp*(1.d0+x+SQRT(1.d0+(x-1)*(x-1.d0)))/scala
denm=h_diag_d(i,ipol)-e_d(k)*s_diag_d(i,ipol)
denm=h_diag(i,ipol)-e(k)*s_diag(i,ipol)
denom=1.d0/(2.d0*l+1.d0)
deno=(((s(4)*ym2+s(3))*ym2+s(2))*ym2+s(1))*ym2+s(0)
den=w/den
det=a11*a22-a12*a21
det=det*mat(nb,nb)
dev_association(idev+1)=1
dexx=0.5D0*((fock1-fock0)+(fock3-fock2))
dexx=fock1-0.5D0*(fock0+fock2)
df_nsg(:,:,:,:,:,ipos)=df_nsg(:,:,:,:,:,ipos)*obn
dgp2_deps(la,mu)=-g(la)*g(mu)*2.0d0
dgp_deps(la,mu)=-g(la)*g(mu)/gp
d(i)=hp*den
dij2=xij(1)*xij(1)+xij(2)*xij(2)+xij(3)*xij(3)
dijx=dij2**(i3+1)
dijxm2=dijx/dij2
dim=3*nat
dimn=nat*(2*sc_size+1)**3
dimn=num_uc*nat
dinvgp_deps(la,mu)=+g(la)*g(mu)/gp**3
dipole(:)=-dipole_el(1:3)+dipole_ion(:)
dispersion_energy_term=2._DP*EtsvdW/e2
dispersion_energy_term=edftd3/e2
dispersion_energy_term=exdm/e2
displs(iegrp)=(iegrp-1)*(count*m)
displs(j)=(j-1)*(count*m)+count*(ibands(im,iegrp)-1)
displs(j)=(j-1)*(count*m)+count*(im+all_start(iegrp)-2)
dist=DBLE(idx)/DBLE(hist_len)*dmax
dist=dx*dx+dy*dy+dz*dz
dist_min=dx_c*dx_c+dy_c*dy_c+dz_c*dz_c;
distm(l+1)=MIN(distm(l+1),dist_s(1,nb))
dist_s(na,nb)=dist_s(na,nb)+(tau_sc(k,na)-tau_sc(k,nb))**2
dist_s(na,nb)=DSQRT(dist_s(na,nb))*alat
distsq=posi(1)**2+posi(2)**2+posi(3)**2
div=2.d0*div
div=div-alpha
div=div*e2*fpi/tpiba2/nqs
div=div-e2*omega*aa
div=div+tpiba2/4.d0/erfc_scrlen**2
div=div+tpiba2/yukawa
div_F_lm(1:i%m,lm,is)=div_F_lm(1:i%m,lm,is)+aux(1:i%m)
div_F_lm(1:i%m,lm,is)=div_F_lm(1:i%m,lm,is)*g(i%t)%rm3(1:i%m)
div_F_rad(1:i%m,ix,is)=div_F_rad(1:i%m,ix,is)+aux(1:i%m)
divid=nat/nproc_image
divvec(1:4,1)=(/1,0,0,0/)
divvec(1:4,2)=(/0,1,0,0/)
divvec(1:4,3)=(/0,0,1,0/)
divvec(1:4,4)=(/0,0,0,1/)
divvec(ii,ii)=-1
dk(1)=bg(1,gdir)/REAL(nppstr-1,DP)
dk(1)=xk(1,2)-xk(1,1)
dk(1)=xk(1,nx_el(2,pdir))-xk(1,nx_el(1,pdir))
dk(2)=bg(2,gdir)/REAL(nppstr-1,DP)
dk(2)=xk(2,2)-xk(2,1)
dk(2)=xk(2,nx_el(2,pdir))-xk(2,nx_el(1,pdir))
dk(3)=bg(3,gdir)/REAL(nppstr-1,DP)
dk(3)=xk(3,2)-xk(3,1)
dk(3)=xk(3,nx_el(2,pdir))-xk(3,nx_el(1,pdir))
dkfact=tpiba/dkfact/DBLE(nppstr_3d(pdir))
dk=gpar/nppstr_3d(pdir)
dkm=-dk
dkmod=dk(1)**2+dk(2)**2+dk(3)**2
dkmod=dkm(1)**2+dkm(2)**2+dkm(3)**2
dkmod=SQRT(dk(1)**2+dk(2)**2+dk(3)**2)*tpiba
dkmod=tpiba/SQRT(at(pdir,1)**2.d0+at(pdir,2)**2.d0+at(pdir,3)**2.d0)
dk(pdir)=1.d0/at(pdir,pdir)
dmax=norm(matmul(at(:,:),max_dist(:)))*alat
dmbx=2*anint(mbx*dfft%nr1x)+2
dmbx=2*anint(mbx*dfftp%nr1x)+2
dmbx=2*anint(mbx*dffts%nr1x)+2
dmby=2*anint(mby*dfft%nr2x)+2
dmby=2*anint(mby*dffts%nr2x)+2
dmbz=2*anint(mbz*dfft%nr3x)+2
dmbz=2*anint(mbz*dffts%nr3x)+2
d(nmb,i%a,is)=d(nmb,i%a,is)+sgn*integral
dpqq(ih,jh,ipol,nt)=fact*ap(lp,ivl,jvl)*qrad2(mb,nb,nt)
dproj(offsetU(alpha)+1:offsetU(alpha)+ldim,:)=dproj0(:,nb_s:nb_e)
dq1=1._dp/DBLE(nq1)
dq2=1._dp/DBLE(nq2)
dq3=1._dp/DBLE(nq3)
dq=5.0d0/SQRT(alpha)/nqq
dqb(:)=dqb(:)+dqr(ir,ijh,:)*becsum(ijh,na,is)
dqeb(:)=dqeb(:)+dqr(ir,ijh,:)*ebecsum(ijh,na,is)
dqg(ig)=dqg(ig)+sig*dylmk0(ig,lp)*work/tpiba
dqi=1.0_DP/dq
dqi=1/dq
dqrforce(:)=dqrforce(:)+dqb(:)*v_eff-dqeb(:)
drcut=ABS(LOG(eps8))/SQRT(ecutrho)
drhocg_d(igl)=fpi/omega*drhocg_d(igl)
drhocg(igl)=fpi*mysum/(3._dp*omega)
drhocg(igl)=fpi/omega*rhocg1
drhog=rho%of_g-drhog
drho%of_g(:ngm0,1)=drho%of_g(:ngm0,1)*gg(:ngm0)/(gg(:ngm0)+agg0)
drhoout_rad(k,ix,1)=0.5d0*drho_rad(k,1)
drhoout_rad(k,ix,1)=drhoout_rad(k,ix,1)+segni_rad(k,ix)*prod
drhoout_rad(k,ix,2)=0.5d0*drho_rad(k,1)
drhoout_rad(k,ix,2)=drhoout_rad(k,ix,2)-segni_rad(k,ix)*prod
drho_rad(k,1:nspin)=drho_rad(k,1:nspin)*g(i%t)%rm2(k)
dr(i)=NINT(r2(i)-atom_pos(rat2,i))
dr=rmax/DBLE(npts)
ds(:)=ds(:)-ANINT(ds(:))
d_spine(:,:,irot+nrot)=-d_spin(:,:,irot)
d_spin_ldau(2,1,isym)=-a
d_spin_ldau(2,2,isym)=-b
dsq2=sqrt2*0.5d0
ds=taus-0.25_DP*grho**2/rhos
dsvxc_rr=dsvxc_rr/e2
dsvxc_s(1,1)=v2x(k,1)+v2c(k,1)
dsvxc_s(2,2)=v2x(k,2)+v2c(k,1)
dsvxc_sr=dsvxc_sr/e2
dsvxc_ss=dsvxc_ss/e2
dsvxc_s=v2x(k,1)+v2c(k,1)
dtau(1:2)=tau(1:2,na)-tau(1:2,nb)
dtau(3)=(z-zp)/alat
dtau(ipol)=tau(ipol,na)-tau(ipol,nb)
dtau(:)=pbc((tau(:,i)-tau(:,j))*alat)
dtau(:)=tau(:,ib)-tau(:,ia)
dtau(:)=tau(:,na)-tau(:,nb)
dt(:)=ft(:,ksym)-st(:)-NINT(ft(:,ksym)-st(:))
dual=ecutrho/ecutwfc
dVg_deps(:,:,:)=dVg_deps(:,:,:)*2.0d0
dVg_deps(igz,:,:)=-delta(:,:)*Vg(igz)
dv(ig)=psic(dffts%nl(ig))*gg(ig)*tpiba2
dvl11=gp*(t1-(t2+t3)/4.d0)
dvl11j0=gp*(t1-(t2+t3)/4.d0)*dbesj0(gp*rxy)
dvl12j0=gp*(2.d0*t1-(t2+t3)/4.d0)*dbesj0(gp*rxy)
dvl21j0=gp*(2.d0*t1-(t2+t3)/4.d0)*dbesj0(gp*rxy)
dvl22=gp*(t1-(t2+t3)/4.d0)
dvl22j0=gp*(t1-(t2+t3)/4.d0)*dbesj0(gp*rxy)
dvloc_d(j)=fpi*zp*e2/omega/(tpiba2*gl_d(j))**2
dvloc(igl0:ngl)=fpi*zp*e2/omega/(tpiba2*gl(igl0:ngl))**2
dv_nsg(:,:,:,:,:,ipos)=dv_nsg(:,:,:,:,:,ipos)-nsg
dv_nsg(:,:,:,:,:,ipos)=dv_nsg(:,:,:,:,:,ipos)*obn
dvs=0.5_DP*(vout_rad(k,1)-vout_rad(k,2))
dwfcat(ig,iatw)=djl(ig,nb,nt)*sk(ig)*ylm(ig,lm)*pref
dwfc(ig,iwf)=aux(ig,iwf)*a1+dwfc(ig,iwf)*a2
dwfc(ig,m1)=(0.d0,-1.d0)*gvec*wfcU(ig,offpm)
dx_c=dx*at(1,1)+dy*at(1,2)+dz*at(1,3)
dx=DBLE(-ix)
dx=dx_c+corners(1,ic)
dx=dx-FLOOR(dx)
dx(i)=r1(i)-atom_pos(at,i)
dx(i)=r2(i)-atom_pos(at,i)
dxk(:)=dxk(:)-NINT(dxk(:))
dxk(:)=sxk(:)-temp_xkq(:,ikq)-NINT(sxk(:)-temp_xkq(:,ikq))
dx=RSoA(iat,1)-pos(1)
dx=tau(1,inat,iim)-tau(1,inat,iim-1)
dx=(tau(1,i)-tau_ref(1,i))*alat
dy_c=dx*at(2,1)+dy*at(2,2)+dz*at(2,3)
dy=c(ns+1)
dy=DBLE(-iy)
dy=dy_c+corners(2,ic)
dy=dy-FLOOR(dy)
dy=RSoA(iat,2)-pos(2)
dy=tau(2,inat,iim)-tau(2,inat,iim-1)
dy=(tau(2,i)-tau_ref(2,i))*alat
dz_c=dx*at(3,1)+dy*at(3,2)+dz*at(3,3)
dz=DBLE(-iz)
dz=dz_c+corners(3,ic)
dz=dz-FLOOR(dz)
dz=RSoA(iat,3)-pos(3)
dz=tau(3,inat,iim)-tau(3,inat,iim-1)
dz=(tau(3,i)-tau_ref(3,i))*alat
e0=Emin+DeltaE*REAL(ie,dp)
e(1:4)=e(1:4)+wlsm(1:4,ii)*et(ibnd,ik)
e2l_map(ig+prev_lda_egrp(ik),ik,my_egrp_id+1)=j
eat=eat+ee
eband=eband+et(ibnd,ik)*wg(ibnd,ik)
eband=eband+et(i,ik)*wg(i,ik)
ectuvcut_=ecutvcut/e2
ecutfock=ecutfock*e2
ecut_fock_=ip_ecutvcut/e2
ecutfock=MIN(4.0_dp*ecutwfc,ecutrho)
ecutfock_=MIN(ecutrho,4.0_DP*ecutwfc)
ecutrho=4.0_dp*ecutwfc_in
ecutrho=4.0_dp*ecutwfc_pp
ecutrho=dual*ecutwfc
ecutrho=ecutrho*e2
ecutvcut=ecutvcut*e2
ecutvcut_=ip_ecutvcut/e2
ecutwfc=ecutwfc*e2
edftd3=energy_dftd3*2.d0
ee=cn0*den
ee=ee+wg_d(i,ik)*DBLE(mat(i,i))
ee=ee+wg(i,current_k)*mat(i,i)
ee=ee+wg(i,ik)*DBLE(mat(i,i))
eext=alat*compute_eextfor()
eexx=eexx+ee
ef=-1.0d10
Ef=-1.0d+20
ef_dw=ef_dw*e2
ef=ef*e2
ef=(ef_up+ef_dw)/2.0_dp
ef=(eup+elw)*0.5_dp
ef=(eup+elw)/2.d0
Ef=(Eup+Elw)/2.d0
effU=Hubbard_U(nt)-Hubbard_J0(nt)
efield_corr_tgt=etotefield/e2
efit(i)=efit(i)+emin
ef_targ=ef/e2
ef_updw(1)=MAXVAL(et(INT(nelup),1:nkstot/2))/e2
ef_updw(2)=MAXVAL(et(INT(neldw),nkstot/2+1:nkstot))/e2
ef_updw=[ef_up/e2,ef_dw/e2]
ef_up=ef_up*e2
egcxc_of_tid(mytid)=egcxc_of_tid(mytid)+e*rad(i%t)%ww(ix)
egrp_base=my_egrp_id*nproc_egrp
ehadd=-0.5_DP*ehadd
ehadd=ehadd*2
ehadd(nn)=ehadd(nn)+ee
ehart=ehart*0.5D0*omega
ehart=ehart*2d0
ehart=ehart+eh
ehart=ehart+eh_corr
ehart=ehart*fac
ehart=ehart*omega
ehart=ehart*omega*0.5d0
ehart=ehart+(rgtot_re**2+rgtot_im**2)*fac
ehart=ehart-SUM(vg3(:,ng_2d)*CONJG(rhog3(:,ng_2d)))
eh_corr=0.5_dp*e2*eh_corr*omega
eh_corr=eh_corr+ABS(rho(ig))**2*wg_corr(ig)
eh=eh+SUM(vg3(:,ng_2d)*CONJG(rhog3(:,ng_2d)))
ehomo=-1D+6
e(i)=1.d0/DSQRT(e(i))
e(i)=1.d0/SQRT(e(i))
eigqts(na)=CMPLX(COS(arg),-SIN(arg),kind=DP)
eigr2=eigr2*0.5d0
eigr=eigr*0.5d0
eigts1(n1,na)=CMPLX(cos(arg),-sin(arg),kind=DP)
eigts2(n2,na)=CMPLX(cos(arg),-sin(arg),kind=DP)
eigts3(n3,na)=CMPLX(cos(arg),-sin(arg),kind=DP)
e(i,j)=e(i,j)+avecd(m,i)*avecd(m,j)
ek=0.5D0*fcp_mass*vel**2
ekin=0.5_DP*fcp_mass*vel**2
ekin=ekin*alat**2
ekin(nt)=atmass(nt)*ekin(nt)
ekint=eka+ekla
ekint=ekint+ekin(nt)
ekint=ekint*tfac*tfac
ekk=ekk+ratd(i,na)*g(i,j)*ratd(j,na)
ekla=ekla+tr
elapsed_time=elapsed_time+dt*2.0_DP*au_ps
elapsed_time=elapsed_time+dt*2.D0*au_ps
elem(nelem(nclass),nclass)=krot-nrot
eloc=eloc+elocg
eloc=eloc*omega
el_pol_acc_cart(i)=el_pol_acc_cart(i)+transform_el(j,i)*el_pol_acc(j)
el_pol_acc(gdir)=el_pol_acc(gdir)-2.d0*pi*fc_pol(gdir)
el_pol_acc(gdir)=el_pol_acc(gdir)+2.d0*pi*fc_pol(gdir)
el_pol_acc(i)=el_pol_acc(i)-2.d0*pi*fc_pol(i)
el_pol_acc(i)=el_pol_acc(i)+2.d0*pi*fc_pol(i)
elumo=+1D+6
elumo=MIN(elumo,et(kbnd+1,ik))
Elw=1.0E+8
Elw=Ef-Degauss;Eup=Ef+Degauss;Ngauss_=Ngauss
Elw=Elw-2*Degauss
emin=emin+etot(i)-efit(i)
emin=emin/npt
ending_im=iexx_iend(my_egrp_id+1)-iexx_istart(my_egrp_id+1)+1
en_el=-efield*(el_pol(gdir)+ion_pol(gdir))
en_el=-efield*(el_pol(gdir)+ion_pol(gdir)+el_pol_acc(gdir))
en_el=en_el-efield_cart(i)*(el_pol_cart(i)+ion_pol(i))
en_el=en_el-efield_cart(i)*(el_pol_cart(i)+ion_pol(i)+el_pol_acc_cart(i))
energy=energy/2._dp
energy=energy+e
energy=energy+e_gcxc
energy=energy-exxalfa*vc*wg(jbnd,ikk)
enew=etot-e_start
ENTRY%recl=-1
ENTRY%unit=-1
e_of_tid(mytid)=e_of_tid(mytid)+e*rad(i%t)%ww(ix)
eold=etot+2.D0*epse
eps=1.0d-6
eps=1.0E-6_dp
eps=1.0E-6_DP
eps=1.d-12
eps=eps-um
epsp1=epsp/ry_kbar
epv(i)=etot(i)+p(i)*v0(i)/ry_kbar
e_rad=e_rad*(rho_rad(:,1)+rho_core*g(i%t)%r2)
e_rad=e_rad*(rho_rad(:,1)+rho_rad(:,2)+rho_core*g(i%t)%r2)
e_rad(k)=e2*(ex(k)+ec(k))*(rho_rad(k,1)+rho_core(k)*g(i%t)%r2(k))
e_rad(k)=e2*(sx(k)+sc(k))*g(i%t)%r2(k)
err=1.d0/rmax+ss*2.d0
err=-2.d0*tmp/SQRT(pi)-ss*2.d0
err=ABS(ss-ss0);ss0=ss
err_quote=err_quote/10
err_quote=nint(std_err_in_mean*10.d0**dble(-lowest_digit_to_quote))
err(:)=sqrt(max(avsq(:)-av(:)**2,0.d0)/dble(n_overlap_tests-1))
esin=(COS(angle2(nt))+(0.d0,1.d0)*SIN(angle2(nt)))*SIN(angle1(nt))
esm1_file=TRIM(tmp_dir)//TRIM(prefix)//".esm1"
esm_ewald=0.5d0*e2*(ewaldg+ewaldr)
eta=eka+uta
eta=eta-0.1d0
etcon=etcon+lambda*m2(ipol,na)*m2(ipol,na)
etcon=etcon+lambda*(m_loc(3,na)/ma-mcons(3,nt))**2
etcon=lambda*xx**2
et(:,:)=et(:,:)*e2
etetra(1:4)=etetra(1:4)+wlsm(1:4,i)*et(ibnd,tetra(i,nt)+nk)
etetra(1:4)=etetra(1:4)+wlsm(1:4,ii)*et(ibnd,tetra(ii,nt)+nk)
etetra(i)=et(ibnd,tetra(i,nt)+nk)
eth=eth-0.5D0*effU*ns(m2,m1,is,na)*ns(m1,m2,is,na)
eth=eth-0.5d0*Hubbard_J0(nt1)*nsg(m1,m1,na,na1,is)
eth=eth+0.5D0*Hubbard_J0(nt)*ns(m2,m1,is,na)*ns(m1,m2,isop,na)
eth=eth+eth1
eth=eth+(Hubbard_alpha(nt)+0.5D0*effU)*ns(m1,m1,is,na)
eth=eth-Hubbard_beta(nt1)*nsg(m1,m1,na,na1,is)
eth=eth+Hubbard_beta(nt1)*nsg(m1,m1,na,na1,is)
eth=eth_noflip+eth_flip-eth_dc
eth=eth+nsg(m1,m1,na,na1,is)*Hubbard_alpha_back(nt1)
eth=eth+nsg(m1,m1,na,na1,is)*Hubbard_alpha(nt1)
eth=eth+sgn(is)*Hubbard_beta(nt)*ns(m1,m1,is,na)
eth=eth_u-eth_dc
ethr=0.1D0*dr2/MAX(1.D0,nelec)
ethr=1.0D-2
ethr=1.0D-6
ethr=1.0D-8
ethr=1.D-5
ethr=MAX(ethr,1.D-13)
ethr=MIN(ethr,0.1D0*dr2/MAX(1.D0,nelec))
etl=utl+ekla
etot=eband+(etxc-etxcc)+ewld+ehart+deband+demet+descf
etotefield=-e2*eamp*ion_dipole*omega/fpi
etotefield=-e2*(eamp-tot_dipole/2.d0)*tot_dipole*omega/fpi
etot_=(ek+(etxc-etxcc)+ehart+eloc+enl+ewld)+demet+fock2
etot=ekint+ut
etot=etot+2.0d0*EtsvdW
etot=etot+edftd3
etot=etot+eext
etot=etot+ef*tot_charge
etot=etot+etotefield
etot=etot+etotgatefield
etot=etot-etxc
etot=etot+etxc+exxen
etot=etot+exdm
etot=etot-exxen
etot=etot+exxen+0.5D0*fock2-fock1
etot=etot+plugin_etot
etot=etot+press*omega
etotgatefield=-e2*gateamp*ion_dipole*omega/fpi
etotgatefield=etotgatefield-e2*(nelec-ionic_charge)*gateamp*(alat/bmod)/6.0
etot(i)-efit(i),p(i)/gpa_kbar,epv(i),i=1,npt)
etxc=etxc+e2*(ex(ir)+ec(ir))*arho
etxc=etxc+e2*((ex(ir)+ec(ir))*rho%of_r(ir,1))
etxc=etxc+e2*(ex(ir)+ec(ir))*rho%of_r(ir,1)
etxc=etxc+(ex(k)+ec(k))*e2
etxc=etxc+omega*etxcgc/(dfftp%nr1*dfftp%nr2*dfftp%nr3)
etxcgc=etxcgc+e2*(sx(k)+sc(k))
etxc=omega*etxc/(dfftp%nr1*dfftp%nr2*dfftp%nr3)
Eup=-1.0E+8
Eup=Eup+2*Degauss
evc=(1.0_dp+alpha0)*evc+(beta0-alpha0)*aux
evc=2.0_dp*evc-aux
evc2i=evc_d(i+npwx,ibnd)
evc_d(1:npwx*npol,1:nbnd)=evc_h(1:npwx*npol,1:nbnd)
evc=evc-beta0*aux
evc_h(1:npwx*npol,1:nbnd)=evc_d(1:npwx*npol,1:nbnd)
evcm(ig,m,pdir)=evcm(ig,m,pdir)+mat(nb,m)*aux_g(ig_l2g(igk1(ig)))
evcm(ig,m,pdir)=evcm(ig,m,pdir)+mat(nb,m)*evct(ig,nb)
evcm(ig+npwx,m,pdir)=evcm(ig+npwx,m,pdir)+mat(nb,m)*evct(ig+npwx,nb)
evcm(ng,m,pdir)=evcm(ng,m,pdir)+mat(nb,m)*evct(ig,nb)
evc_offset=-1
evcp(ig,m,pdir)=evcp(ig,m,pdir)+mat(nb,m)*aux_g(ig_l2g(igk1(ig)))
evcp(ig,m,pdir)=evcp(ig,m,pdir)+mat(nb,m)*evct(ig,nb)
evcp(ig+npwx,m,pdir)=evcp(ig+npwx,m,pdir)+mat(nb,m)*evct(ig+npwx,nb)
evcp(ng,m,pdir)=evcp(ng,m,pdir)+mat(nb,m)*evct(ig,nb)
evcp(npw1+1:npwx,1:nbnd,pdir)=(0.d0,0.d0)
evcq(j,ibnd+1)=CMPLX(AIMAG(fp),-DBLE(fm),KIND=DP)
evc(:,start_band(igroup):start_band(igroup)+nsize-1)=aux(:,:)
evct(npw1+1:npwx,1:nbnd)=(0.d0,0.d0)
evdw=-0.5_DP*evdw
evdw=evdw*2
evdw=evdw+eat
evloc=evloc+evloc_d*fact
evps=evps+fac*deff(ih,ih,na)*ABS(becp%k(ikb,ibnd))**2
ewald=0.5d0*e2*(ewaldg+ewaldr)
ewaldg=2.d0*tpi/omega*ewaldg
ewaldg=-charge**2/alpha/4.0d0
ewaldr=e2*ewaldr
ew=ew+fac*(1.d0/rxyz+ss*2.d0)
ew=ew+fac*(EXP(-aaa*(rxyz+z+zp-2.d0*z1))/rxyz+ss*2.d0)
ew=ew+fac*qe_erfc(tmp*rr)/rr
ew=ew+fac*ss*2.d0
ew=ew+tt*(cc1+cc2)
ew=ew-zv(ityp(it1))*(z1-z)*esm_efield/e2*2.0
ewg=2.d0*tpi/omega*ewg
ewg=-charge**2/alpha_g/4.0d0
ewg=ewg+ew
ewr=ewr+ew
expcoeff=EXP(-gg(ng)*tpiba2*0.25d0/eta)
exp_erfc=EXP(x)*qe_erfc(y)
exp_erfc=EXP(-y**2+x)*ym*(rtpim+ym2*nume/deno)
experfcm=exp_erfc(-gp*(zb-za),gp/2.d0/salp-salp*(zb-za))
experfcm=exp_erfc(-gp*(z-za),gp/2.d0/salp-salp*(z-za))
experfcp=exp_erfc(+gp*(zb-za),gp/2.d0/salp+salp*(zb-za))
experfcp=exp_erfc(+gp*(z-za),gp/2.d0/salp+salp*(z-za))
exph1=(COSH(gp*(zb-za))*EXP(-2*gp*z1)-COSH(gp*(zb+za)))/SINH(2*gp*z1)
exph1=(COSH(gp*(z-za))*EXP(-2*gp*z1)-COSH(gp*(z+za)))/SINH(2*gp*z1)
expimgpr=qe_exp(-ci*(g(1)*ra(1)+g(2)*ra(2)))
expimgpr=qe_EXP(-ci*(g(1)*ra(1)+g(2)*ra(2)))
expm=EXP(-gp*(-z+2*z1-za))
expm=EXP(-gp*(-zb+2*z1-za))
expx=EXP(-2._DP*xroot/3._DP)
exst=check_file_exist(TRIM(filename)//'.dat')
exst=check_file_exist(TRIM(filename)//'.hdf5')
exst=(ierr==-1)
exxbuff(1:nrxxs,(ibnd+1)/2,current_ik)=psic_exx(1:nrxxs)
exxbuff_index=(ibnd+1)/2-(all_start(wegrp)+1)/2+(iexx_start+1)/2
exxbuff_index=(jbnd+1)/2-(all_start(wegrp)+1)/2+(iexx_start+1)/2
exxbuff(ir+nrxxs,ibnd,ikq)=-CONJG(psic_nc(ir,1))
exxbuff(ir+nrxxs,ibnd,ikq)=psic_nc(ir,2)
exx_divergence=div*nqs
exxen=0.50d0*fock2
exxen=0.5D0*fock2
exxenergyace=exxenergyace+ex
exx_stress_=exx_stress_+exxalfa*vc*wg(jbnd,ikk)
f12=(e0-e2)/(e1-e2)
f13=(e0-e3)/(e1-e3)
f14=(e0-e4)/(e1-e4)
f1=f1*e2;f2=f2*e2;f3=f3*e2;f4=f4*e2
f1=f1+fpi*rg3*(c_r+ci*s_r)/(kn**2+ci*2.d0*aaa*kn)
f1=f1+tpi*Qa/S*(-z_r+2*z1-za)
f1=f1+tpi*Qa/S*(-z_r*za+z1*z1)/z1
f1=f1+tpi*(z0+0.5d0/aaa)/aaa*rg3
f1=f1+tt*0.5d0*(2.d0*z1-z_r-zp)
f1=f1+tt*0.5d0*(z1-z_r*zp/z1)
f1=f1+tt*((t1+t2)/2.d0+t3)/2.d0
f21=1.0_dp-f12
F(2)=225.d0/54.d0*J(1)+32175.d0/42.d0*J(2)+2475.d0/42.d0*J(3)
f23=(e0-e3)/(e2-e3)
f24=(e0-e4)/(e2-e4)
F(2)=5.d0*J(1)
F(2)=5.d0*J(1)+31.5d0*J(2)
f2=f2+fpi*rg3*(c_l+ci*s_l)/kn**2
f2=f2+tpi*Qa/S*(-z_l+2*z1-za)
f2=f2+tpi*Qa/S*(-z_l*za+z1*z1)/z1
f2=f2+tt*0.5d0*(2.d0*z1-z_l-zp)
f2=f2+tt*0.5d0*(z1-z_l*zp/z1)
f2=f2+tt*(t1+t2+t3)/2.d0
f31=1.0_dp-f13
f32=1.0_dp-f23
f34=(e0-e4)/(e3-e4)
f3=f3+fpi*ci*rg3*(c_r+ci*s_r)/kn
f3=f3+tpi*Qa/S*(-1.0d0)
f3=f3+tpi*Qa/S*(-za)/z1
f3=f3-tt*0.5d0
f3=f3-tt*0.5d0*EXP(arg005)*(1.d0+qe_erf(arg101))
f3=f3-tt*0.5d0*qe_erf(tmp*(z_r-zp))
f3=f3+tt*(-0.5d0*(zp/z1))
f41=1.0_dp-f14
F(4)=11.d0*J(1)-141570.d0/77.d0*J(2)+4356.d0/77.d0*J(3)
f42=1.0_dp-f24
F(4)=9.d0*J(1)-31.5d0*J(2)
f4=f4+fpi*ci*rg3*(c_l+ci*s_l)/kn
f4=f4-fpi*ci*tmp2-fpi*(z_l+z0)*rg3
f4=f4+tpi*Qa/S*(-1.0d0)
f4=f4+tpi*Qa/S*(-za)/z1
f4=f4-tt*0.5d0
f4=f4-tt*0.5d0*(1.d0+qe_erf(arg101))
f4=f4-tt*0.5d0*qe_erf(tmp*(z_l-zp))
f4=f4+tt*(-0.5d0*(zp/z1))
F(6)=7361.64d0/594.d0*J(1)+36808.2d0/66.d0*J(2)-11154.d-2*J(3)
fac=1.0_DP/DBLE(nspin0)
fac=1.D0/DBLE(nspin)
fac=1.D0/gg(ig)
fac=1.D0/gg(ig)*cutoff_2D(ig)
fac=(dk(1)*tau(1,na)+dk(2)*tau(2,na)+dk(3)*tau(3,na))*tpi
fac=e2*fpi/tpiba
fac=e2*fpi/tpiba2
fac=e2*fpi/(tpiba2*gg(ig))
fac=fac-0.05_DP
fac=g(ipol,ig)/gg(ig)
fac=g(ipol,ig)*tpiba
fac(gstart_t:)=2*coulomb_fac(gstart_t:,iq,current_ik)
fac(ig)=e2*fpi/(4.d0*erfc_scrlen**2)
fac(ig)=e2*fpi/qq*(1._dp-EXP(-qq/4.d0/erfc_scrlen**2))*grid_factor
fac(ig)=e2*fpi/qq*(1._DP-EXP(-qq/4._DP/erfc_scrlen**2))*grid_factor_track(ig)
fac(ig)=e2*fpi/qq*(EXP(-qq/4._DP/erf_scrlen**2))*grid_factor_track(ig)
fac(ig)=e2*fpi/(qq+yukawa)*grid_factor
fac(ig)=e2*((pi/gau_scrlen)**(1.5_DP))*EXP(-qq/4._DP/gau_scrlen)*grid_factor_track(ig)
fac(ig)=fac(ig)+e2*fpi/(qq+yukawa)
fac=rmod/omega
fac=(rmod/omega)*(1.60097E-19_dp/5.29177E-11_dp**2)
fac=sqrt(omega)/(dffts%nr1*dffts%nr2*dffts%nr3)
fac_stress(ig)=2.d0*e2*fpi/(qq+yukawa)**2
fac_stress(ig)=2.d0*e2*fpi/(qq+yukawa)**2*grid_factor
fac_stress(ig)=e2*fpi/(8.d0*erfc_scrlen**4)
fact=1.0d0-beta
fact=(1.0d0+g2a-beta)
fact=1.0_DP/DBLE(nspin_gga)
fact1(1:2)=m1(1:2)/mperp*m1(3)/ma/ma
fact1(3)=-SQRT(1.D0-(m1(3)/ma)**2)/ma
fact=1.d0/dble(nks)
fact=1.d0*omega
fact=1._DP-beta
fact=2.0_dp*omega
fact=2.D0*lambda
fact=2.D0*lambda*factlist(ir)*omega/(dfftp%nr1*dfftp%nr2*dfftp%nr3)
fact=2.d0*omega
fact=(3.d0/5.d0)*(3.d0*pi*pi)**(2.0/3.0)
fact=ACOS(m1(3)/ma)
fact=CMPLX(COS(arg),-SIN(arg),KIND=dp)
fact=DSQRT(2.d0)*e_field*dkfact
fact=DSQRT(a(1,dir)**2.d0+a(2,dir)**2.d0+a(3,dir)**2.d0)
fac_tens(1:3,beta,ig)=q(1:3)*q(beta)
fact=-fact
fact=fact+wk(nks)
fact=(g2a+1.0d0)
factlist(ir)=1.d0-(distances(iat)-r_m(nt))/(0.2d0*r_m(nt))
fact=omega/(dfftp%nr1*dfftp%nr2*dfftp%nr3)
factor=exp(-1.0/nraise)
fact_pola=DSQRT(2.d0)/tpiba*dkfact
fact=-SQRT(fpi/3.d0)
fact=v(1)*a(1,dir)+v(2)*a(2,dir)+v(3)*a(3,dir)
fac=upf(nt)%zp*e2/tpiba2
fac=wg(ibnd,ik)*tpiba
fac=zp*e2/tpiba2
fac=zv(ityp(na))*zv(ityp(nb))*e2
fac=zv(ityp(nb))*zv(ityp(na))
fcp_force_tgt=(fcp_mu-ef)/e2
fcp_temperature=fcp_temperature*delta_t
fcp_temperature=fcp_temperature+delta_t
fd(i,j)=fd(i,j)+sigmad(l,i)*sigma(l,j)+sigma(l,i)*sigmad(l,j)
ff=(1.d0+axx/REAL(k)*ff)
ff=(1._DP+axx/DBLE(k)*ff)
ffrr(:)=8.D0/fpi*ffrr(:)
ffrr(ir)=ffrr(ir)+qi*qi*dq*filter(qi/qmax,af,nf)*besr(ir)
ffx=gx*(1._DP/xroot-2._DP/3._DP-1._DP/(xroot-2._DP))
filename=TRIM(dirname)//'wfc'//TRIM(int_to_char(ik_g))
filename=TRIM(filout)//'.xml'
filename=TRIM(restart_dir())//'charge-density'
filename=TRIM(restart_dir())//input_drho
FILE=TRIM(tmp_dir)//TRIM(prefix)//".msd.dat")
filin='pw'//TRIM(image_label)//'.in'
filin=TRIM(input_file_)//TRIM(image_label)//'.in'
filout='pw'//TRIM(image_label)//'.out'
filout=TRIM(input_file_)//TRIM(image_label)//'.out'
filter=ff*EXP(-axx)
find_viz=-1
fine=nks1+kunit
first=(divid+1)*me_image+1
first=((divid+1)*resto)+(divid)*(me_image-resto)+1
f(ldim+m1,ldim+m2)=rho%ns_nc(m1,m2,4,na)
f(ldim+m1,m2)=rho%ns_nc(m1,m2,3,na)
f(ldm1+m1,ldim2+m2)=nsgnew(m2,m1,viz,na1,is)
f(ldm1+m1,ldm2+m2)=(0.d0,0.d0)
F_lm(j,lm,ispin)=F_lm(j,lm,ispin)+F_rad(j,ix,ispin)*rad(i%t)%wwylm(ix,lm)
fm1(i,j)=fm1(i,j)+avec(l,i)*avec(l,j)
fm1(i,j)=fm1(i,j)/vcell/vcell
f(m1,ldim+m2)=rho%ns_nc(m1,m2,2,na)
fm(i,j)=fm(i,j)+e(l,k)*fp(i,j,k,l)
fm=(phi(dfftt%nl(j))-phi(dfftt%nlm(j)))*0.5d0
fm=(psic_d(dffts_nl_d(j))-psic_d(dffts_nlm_d(j)))*0.5d0
fm=(psic(dffts%nl(igk_k(j,1)))-psic(dffts%nlm(igk_k(j,1))))*0.5d0
fm=(psic(dffts%nl(j))-psic(dffts%nlm(j)))*0.5d0
fm=(psic_d(ioff+dffts_nl_d(j))-psic_d(ioff+dffts_nlm_d(j)))*0.5d0
FMT='(5x,"BoundaryConditions:Metal-Slab-Metal")')
FMT='(5x,"BoundaryConditions:Vacuum-Slab-Metal")')
FMT='(5x,"BoundaryConditions:Vacuum-Slab-smoothESM)")')
FMT='(5x,"BoundaryConditions:Vacuum-Slab-Vacuum")')
FMT='(/,5X,"Canonicalsamplingvelocityrescaling")')
FMT='(/,5X,"DampedDynamicsCalculation")')
FMT='(/,5X,"Endofdampeddynamicscalculation")')
FMT='(/,5X,"Endofmoleculardynamicscalculation")')
FMT='(/,5X,"FCPSoft(Berendsen)velocityrescaling")')
FMT='(/,5X,"fcptemperatureissetonceatstart"/)')
FMT='(/,5X,"Finalenergy=",F18.10,"Ry"/)')etot
FMT='(/5X,"Initialpotentialfromsuperpositionoffreeatoms")')
FMT='(/,5X,"MolecularDynamicsCalculation")')
FMT='(/,5X,"Over-dampedLangevinDynamicsCalculation")')
FMT='(/,5X,"Soft(Berendsen)velocityrescaling")')
FMT='(/,5X,"temperatureissetonceatstart"/)')
FMT='(/,5X,"Themaximumnumberofstepshasbeenreached.")')
FMT='(/,5X,"uphillstep:resettingbfgshistory",/)')
FMT='("finalunit-cellvolume=",F12.4,"(a.u.)^3")')omega
fm=(vc(dfftt%nl(ig))-vc(dfftt%nlm(ig)))/2.0_dp
for(3,it2)=for(3,it2)+t2_for*(kk1_for+kk2_for)
FORALL(i=1:m)vec(i)=SUM(invaa(i,:)*bb(:))
FORALL(na=1:nat)acc(:,na)=force(:,na)/mass(na)/alat
FORALL(na=1:nat)chi(:,na)=chi(:,na)-delta(:)/DBLE(nat)
FORALL(na=1:nat)tau_new(:,na)=tau_new(:,na)-delta(:)
FORALL(na=1:nat)tau_old(:,na)=tau_old(:,na)-delta(:)
force(1:2,nb)=force(1:2,nb)-fac*ss/rxy*r(1:2,nr)*alat
force(3,na)=force(3,na)-zv(ityp(na))**2*e2*ss
force(3,nb)=force(3,nb)-fac*ss
force(3,nb)=force(3,nb)-fac*((z-zp)/rxyz**3+ss)
forcecc(1,na)=forcecc(1,na)+forcelc_x
forcecc(2,na)=forcecc(2,na)+forcelc_y
forcecc(3,na)=forcecc(3,na)+forcelc_z
force_d3=-2.d0*force_d3
force=fcp_mu-ef
force=force/alat
force=force*alat
forcegate(ipol,na)=-zv(ityp(na))*gateamp*e2*(SIGN(1._dp,sgn1)-2.0*sgn1)*bg(ipol,3)/bmod
forceion(1,it1)=-SUM(for_g(1:2,it1)*bg(1,1:2))*SQRT(tpiba2)
forceion(1,na)=forceion(1,na)+g(1,ig)*sumnb
forceion(2,it1)=-SUM(for_g(1:2,it1)*bg(2,1:2))*SQRT(tpiba2)
forceion(2,na)=forceion(2,na)+g(2,ig)*sumnb
forceion(3,it1)=forceion(3,it1)-zv(ityp(it1))*esm_efield
forceion(3,it1)=-for_g(3,it1)
forceion(3,na)=forceion(3,na)+g(3,ig)*sumnb
forceion(:,:)=forceion(:,:)+force(:,:)
forceion(ipol,na)=forceion(ipol,na)-fact*r(ipol,n)
force(ipol,na)=force(ipol,na)-sumfor/DBLE(nat)
forcelc(1:3,na)=fact*forcelc(1:3,na)*omega*tpi/alat
forcelc(3,it)=forcelc(3,it)+for_g(3,it)*omega*e2
forcelc(ipol,na)=fact*forcelc(ipol,na)*omega*tpi/alat
forcelc_x=forcelc_x+g_d(1,ig)*arg
forcelc_x=forcelc_x+g_d(1,ig)*prod
forcelc_y=forcelc_y+g_d(2,ig)*arg
forcelc_y=forcelc_y+g_d(2,ig)*prod
forcelc_z=forcelc_z+g_d(3,ig)*arg
forcelc_z=forcelc_z+g_d(3,ig)*prod
force(:,na)=force(:,na)+g(:,ig)*CMPLX(SIN(arg),-COS(ARG),KIND=dp)*v(ig)
force(:,na)=-force(:,na)*zv(ityp(na))*tpiba
forcenl(:,:)=forcenl(:,:)+forceq(:,:)
forcenl(ipol,na)=forcenl(ipol,na)+forcenl_ipol
forceq(1,na)=forceq(1,na)+forceqx
forceq(2,na)=forceq(2,na)+forceqy
forceq(3,na)=forceq(3,na)+forceqz
forceq(:,na)=-dqrforce(:)*omega/(dfftp%nr1*dfftp%nr2*dfftp%nr3)
forceqx=forceqx+ddeeq_d(ijh,nb,1,is)*becsum_d(ijh,na,is)
forceqy=forceqy+ddeeq_d(ijh,nb,2,is)*becsum_d(ijh,na,is)
forceqz=forceqz+ddeeq_d(ijh,nb,3,is)*becsum_d(ijh,na,is)
force(:,:)=-RESHAPE(precond_grad(:),(/3,nat/))
forces_bp(:,:)=forces_bp(:,:)+fact*AIMAG(forces_tmp(:,:))*wstring(istring)
forces_bp(pdir,i)=forces_bp(pdir,i)+e*e_field*zv(ityp(i))
for=for*2
for_g(3,it)=for_g(3,it)-r1*f1(3)-r2*f2(3)
for_g(:,:)=for_g(:,:)+for(:,:)
for(:,i)=for(:,i)+fxx*xij
for(:,it2)=for(:,it2)+t1_for*(c1_for(:)+c2_for(:))
for(:,it)=for(:,it)-r1*f1(:)-r2*f2(:)
f_out(:,1:nks)=f_in(:,(nbase+1):(nbase+nks))
f_out(:,nbase+1:nbase+nks)=f_in(:,1:nks)
fp=(phi(dfftt%nl(j))+phi(dfftt%nlm(j)))*0.5d0
fp=(psic_d(dffts_nl_d(j))+psic_d(dffts_nlm_d(j)))*0.5d0
fp=(psic(dffts%nl(igk_k(j,1)))+psic(dffts%nlm(igk_k(j,1))))*0.5d0
fp=(psic(dffts%nl(j))+psic(dffts%nlm(j)))*0.5d0
fp=(psic_d(ioff+dffts_nl_d(j))+psic_d(ioff+dffts_nlm_d(j)))*0.5d0
fp=(vc(dfftt%nl(ig))+vc(dfftt%nlm(ig)))/2.0_dp
ft_(1)=ft(1,isym)*nr1
ft_(2)=ft(2,isym)*nr2
ft_(3)=ft(3,isym)*nr3
ft(3,ns)/=0.0_dp)
ftaux(1)=ft(1,isym)*nr1
ftaux(2)=ft(2,isym)*nr2
ftaux(3)=ft(3,isym)*nr3
ftaux(i)=2*eps2
ftaux(i)=ABS(1.0_dp/ft_(i)-NINT(1.0_dp/ft_(i)))
ft_(:)=rau(:,na)-xau(:,nb)-NINT(rau(:,na)-xau(:,nb))
ft_(:)=xau(:,na)-xau(:,nb)-NINT(xau(:,na)-xau(:,nb))
fup=cos(0.5d0*alpha)*aux(ig)
fup=cos(0.5d0*(alpha+pi))*aux(ig)
fx=gx-rhs
fxx=nn*cn0*dijxm2*den2
g(1:2)=(iga*bg(1:2,1)+igb*bg(1:2,2))*tpiba
g2a=g2/4.d0/alpha
g2a=g2/4._DP/alpha
g2a=gl(igl)*tpiba2/4.d0
g2=gg_d(ng)*tpiba2
g2=gg(ig)*tpiba2
g2=gg(ng)*tpiba2
G2lzo2Gp=gg_d(ng)*tpiba2*lz/2._DP/Gp
G2lzo2Gp=gg(ng)*tpiba2*lz/2.0d0/Gp
G2lzo2Gp=gg(ng)*tpiba2*lz/2._DP/Gp
g2sort_g(:)=g_(1,:)*g_(1,:)+g_(2,:)*g_(2,:)+g_(3,:)*g_(3,:)
g2(:)=sum(g_g(:,:)**2,dim=1)
G=3.0_dp*f14*f24*f34/(e4-e0)
G=3.0_dp*f21*f31*f41/(e0-e1)
G=3.0_dp*(f23*f31+f32*f24)
gam=ACOS(gtensor(1,2)/aa/bb)*180._dp/pi
gamma(ig)=gamma(ig)*2.d0/3.d0
gamma(ig)=gamma(ig)*k4/(6.d0*((cosk-2.d0)*cosk+1.d0))
gamman=-angle2(nt)+0.5d0*pi
gateamp=(-(nelec-ionic_charge)/area*tpi)
gatearg=DBLE(k)/DBLE(dfftp%nr3)
gatefield_en_tgt=etotgatefield/e2
gauss=2.0d0*sqrtpm1*EXP(-x*x)
gaux(dfftp%nl(ig))=CMPLX(-AIMAG(rhoaux(dfftp%nl(ig))),REAL(rhoaux(dfftp%nl(ig))),KIND=dp)*fac
gaux(dfftp%nl(ig))=gaux(dfftp%nl(ig))+CMPLX(-AIMAG(vaux(ig)),REAL(vaux(ig)),kind=dp)*fac
gaux=gaux*fac
gc_rad(k,ix,is)=gc_rad(k,ix,is)+a(is,js,ks)*ps(js,ks)
gcutm=dual*ecutwfc/tpiba2
gcutms=4.D0*ecutwfc/tpiba2
gcutmt=ecutfock/tpiba2
gcutmt=MAX(ecutfock/tpiba2,gkcut)
gcut_(np)=gcutm*np**twothirds/nproc_bgrp**twothirds
gcutw=ecutwfc/tpiba2
gd(i,j)=gd(i,j)+avec(m,i)*avecd(m,j)+avecd(m,i)*avec(m,j)
G=G/(e4-e1)
gg(ig)=g(1,ig)*g(1,ig)+g(2,ig)*g(2,ig)+g(3,ig)*g(3,ig)
ggt(ig)=gx*gx+gy*gy+gz*gz
g_idx(:)=modulo(-g_int(:,ig),blipgrid(:))
g(i,j)=g(i,j)+avec(m,i)*avec(m,j)
g_int(1,ig)=nint(sum(g_vec(:,ig)*at(:,1)))
g_int(2,ig)=nint(sum(g_vec(:,ig)*at(:,2)))
g_int(3,ig)=nint(sum(g_vec(:,ig)*at(:,3)))
gk(1,ig)=q_(1)+g(1,igk_(ig))
gk(1,ig)=q_(1)+g(1,igk_(ig_orig))
gk(1,ig)=(xk(1,ik)+g(1,igk_k(ig,ik)))*tpiba
gk(1,ig)=xk(1,ik)+g(1,iig)
gk2=gk_d(i,1)**2+gk_d(i,2)**2+gk_d(i,3)**2
gk2=gk(i,1)**2+gk(i,2)**2+gk(i,3)**2
gk(2,ig)=q_(2)+g(2,igk_(ig))
gk(2,ig)=q_(2)+g(2,igk_(ig_orig))
gk(2,ig)=(xk(2,ik)+g(2,igk_k(ig,ik)))*tpiba
gk(2,ig)=xk(2,ik)+g(2,iig)
gk(3,ig)=q_(3)+g(3,igk_(ig))
gk(3,ig)=q_(3)+g(3,igk_(ig_orig))
gk(3,ig)=(xk(3,ik)+g(3,igk_k(ig,ik)))*tpiba
gk(3,ig)=xk(3,ik)+g(3,iig)
gkcut=ecutwfc/tpiba2
gkcut=MAX(gkcut,SQRT(SUM(xk(1:3,ik)**2)))
gkcut=MAX(gkcut,SQRT(SUM(xk(:,ik)**2)))
gkcut=(SQRT(ecutwfc/tpiba2)+gkcut)**2
gkcut=(SQRT(gcutw)+gkcut)**2
gk_d(1,ig)=q1+g_d(1,iv_d)
gk_d(1,ig)=xk1+g_d(1,iig)
gk_d(2,ig)=q2+g_d(2,iv_d)
gk_d(2,ig)=xk2+g_d(2,iig)
gk_d(3,ig)=q3+g_d(3,iv_d)
gk_d(3,ig)=xk3+g_d(3,iig)
gk_d(i,1)=(xk1+g_d(1,igk_k_d(i,ik)))*tpiba
gk_d(i,2)=(xk2+g_d(2,igk_k_d(i,ik)))*tpiba
gk_d(i,3)=(xk3+g_d(3,igk_k_d(i,ik)))*tpiba
gk(i,1)=(xk(1,ik)+g(1,igk_k(i,ik)))*tpiba
gk(i,2)=(xk(2,ik)+g(2,igk_k(i,ik)))*tpiba
gk(i,3)=(xk(3,ik)+g(3,igk_k(i,ik)))*tpiba
gk(nk)=SUM((k(:)+g(:,igk(nk)))**2)
g_lm=g_lm+gsave_lm
gm1(i,j)=gm1(i,j)+sigma(m,i)*sigma(m,j)
gm1(i,j)=gm1(i,j)/vcell/vcell
gmgd(i,j)=gmgd(i,j)+gm1(i,m)*gd(m,j)
gmod=sqrt(gaux(1,:)**2+gaux(2,:)**2+gaux(3,:)**2)
gp2=SUM(t(:)*t(:))*tpiba2
gpar(1)=xk(1,nppstr)-xk(1,1)
gpar(2)=xk(2,nppstr)-xk(2,1)
gpar(3)=xk(3,nppstr)-xk(3,1)
gpar(pdir)=1.d0/at(pdir,pdir)
Gplz=SQRT(g(1,ng)**2+g(2,ng)**2)*tpi*lz/alat
gpmax=gpmax+1.d0
gp=SQRT(g(1)*g(1)+g(2)*g(2))
Gp=SQRT(g(1,ng)**2+g(2,ng)**2)*tpiba
Gp=SQRT(g_d(1,ng)**2+g_d(2,ng)**2)*tpiba
grad(1:3)=matmul(bg/alat,grad(1:3))
grad(1)=grad(1)+C*dtx(1,jx)*tx(2,jy)*tx(3,jz)
grad(2)=grad(2)+C*tx(1,jx)*dtx(2,jy)*tx(3,jz)
grad(3)=grad(3)+C*tx(1,jx)*tx(2,jy)*dtx(3,jz)
grad(:)=grad(:)*2.d0
grad(:)=grad(:)-aimag(eigr)*dble(g_int(:,ig))
grad(:)=grad(:)+cmplx(-aimag(eigr),-aimag(eigr2),KIND=dp)*dble(g_int(:,ig))
grad(:)=grad(:)+(eigr*iunity)*dble(g_int(:,ig))
grad(:)=matmul(bg(:,:),grad(:))*(tpi/alat)
grad=-RESHAPE(force,(/3*nat/))*alat
grad(:)=-RESHAPE(force,(/dim/))
grad=sqrt(grad_den(1,ir)**2+grad_den(2,ir)**2+grad_den(3,ir)**2)
grad=SQRT(grad_den(1,ir)**2+grad_den(2,ir)**2+grad_den(3,ir)**2)
GrdAve=GrdAve/dble(nxtot)
GrdAve=GrdAve+grad
grho2(:,1)=grho(1,:,1)**2+grho(2,:,1)**2+grho(3,:,1)**2
grho2(:,:)=grho(1,:,:)**2+grho(2,:,:)**2+grho(3,:,:)**2
grho=grho/2._DP
grho_rad2(:,is)=aux2(:)**2
grid=dim3(ceiling(real(ngy)/tBlock%x),1,1)
group_size=MIN(2*many_fft,m-(ibnd-1))
group_size=MIN(many_fft,ibnd_end-(ibnd-1))
group_size=MIN(many_fft,m-(ibnd-1))
group_size(ngroups)=group_size(ngroups)+1
gtr(1)=g(1,igk0(ig))-gpar(1)
gtr(1)=g(1,igk0(ig))+gpar(1)
gtr(1)=g(1,igk1(ig))-gpar(1)
gtr(1)=g(1,igk_kp(ig))-DBLE(signum)*gpar(1,(np+1)/2)
gtr(2)=g(2,igk0(ig))-gpar(2)
gtr(2)=g(2,igk0(ig))+gpar(2)
gtr(2)=g(2,igk1(ig))-gpar(2)
gtr(2)=g(2,igk_kp(ig))-DBLE(signum)*gpar(2,(np+1)/2)
gtr(3)=g(3,igk0(ig))-gpar(3)
gtr(3)=g(3,igk0(ig))+gpar(3)
gtr(3)=g(3,igk1(ig))-gpar(3)
gtr(3)=g(3,igk_kp(ig))-DBLE(signum)*gpar(3,(np+1)/2)
gvec=dsqrt(gpar(1)**2+gpar(2)**2+gpar(3)**2)*tpiba
gvec=DSQRT(gpar(1)**2+gpar(2)**2+gpar(3)**2)*tpiba
gvec=g(ipol,igk_k(ig,ik))*tpiba
gvec=(g(ipol,igk_k(ig,ik))+xk(ipol,ik))*tpiba
gvec=tpiba/SQRT(at(pdir,1)**2.d0+at(pdir,2)**2.d0+at(pdir,3)**2.d0)
gx=SQRT(gl_d(igl)*tpiba2)
gx=sqrt(gl_d(ig))*tpiba
gx=sqrt(gl(igl))*tpiba
gx=sqrt(gl(igl)*tpiba2)
gx=SQRT(gl(igl)*tpiba2)
gx=sqrt(gl(ig))*tpiba
gx=(xroot*expx)/(xroot-2._DP)
gz=DBLE(igz-1-dfftp%nr3)*tpi/L
gz=DBLE(igz-1)*tpi/L
Gzlz=g(3,ng)*tpi*lz/alat
has_e(nelem(nclass),nclass)=-1
h=at*alat
hatr(1)=rad(i%t)%sin_th(ix)*rad(i%t)%cos_phi(ix)
hatr(2)=rad(i%t)%sin_th(ix)*rad(i%t)%sin_phi(ix)
h_diag(1:npw,ipol)=g2kin(1:npw)+v_of_0
h_diag_d(ig,1)=h_diag_d(ig,1)+sum_h
h_diag_d(ig,1)=h_diag_d(ig,1)+sum_h1
h_diag_d(ig,2)=h_diag_d(ig,2)+sum_h4
h_diag_d(j,1)=g2kin_d(j)+v_of_0
h_diag_d(j,ipol)=g2kin_d(j)+v_of_0
h_diag(ig,1)=1.D0+g2kin(ig)+SQRT(1.D0+(g2kin(ig)-1.D0)**2)
h_diag(ig,:)=1.D0+g2kin(ig)+SQRT(1.D0+(g2kin(ig)-1.D0)**2)
h_diag(ig,1)=g2kin(ig)+v_of_0
h_diag(ig,:)=g2kin(ig)+v_of_0
h_diag(ig,ipol)=h_diag(ig,ipol)+ps1(ipol)*ar
h_diag(j,1)=g2kin(j)+v_of_0
h_energy=h_energy/e2
h_ibnd=h_ibnd-1
h_ibnd=h_ibnd+1
h_ibnd=ibnd_start/2
h(ipol,k,1)=e2*((v2x(k,1)+v2c(k,1))*grup+v2c_ud(k)*grdw)
h(ipol,k,2)=e2*((v2x(k,2)+v2c(k,2))*grdw+v2c_ud(k)*grup)
histogram(k)=histogram(k)+1
history=MIN(3,(history+1))
h(j+1)=0.25*h(j)
h(:,k,1)=e2*(v2x(k,1)+v2c(k,1))*grho(:,k,1)
h(:,k,1)=(v2x(k,1)*grho(:,k,1)+v2c(:,k,1))*e2
h(:,k,1)=(v2x(k,1)+v2c(1,k,1))*grho(:,k,1)*e2
h(:,k,2)=(v2x(k,2)*grho(:,k,2)+v2c(:,k,2))*e2
howmany=pack_size+remainder
ho=xa(i)-x
hpsi(1:n,ibnd)=g2kin(1:n)*psi(1:n,ibnd)
hpsi_d(ig,im)=hpsi_d(ig,im)+big_result_d(ig,im+iexx_istart_d(my_egrp_id+1)-1)
hpsi_d(i,ibnd)=g2kin_d(i)*psi_d(i,ibnd)
hpsi_d(j,ibnd+group_size-1)=hpsi_d(j,ibnd+group_size-1)+psic_d(pack_size*v_siz+dffts_nl_d(j))
hpsi_d(j,ibnd)=hpsi_d(j,ibnd)+psic_d(dffts_nl_d(igk_k_d(j,current_k)))
hpsi_d(j,ibnd)=hpsi_d(j,ibnd)+psic_d(dffts_nl_d(j))
hpsi_d(j,ibnd+idx)=hpsi_d(j,ibnd+idx)+psic_d(dffts_nl_d(igk_k_d(j,current_k))+idx*v_siz)
hpsi_d(lda+ig,im)=hpsi_d(lda+ig,im)+big_result_d(n+ig,im+iexx_istart_d(my_egrp_id+1)-1)
hpsi_d(lda+i,ibnd)=(0.0_dp,0.0_dp)
hpsi_d(lda+i,ibnd)=g2kin_d(i)*psi_d(lda+i,ibnd)
hpsi(ig)=hpsi(ig)-exxalfa*DBLE(deexx(ikb))*vkbp(ig,ikb)
hpsi(ig)=hpsi(ig)-exxalfa*deexx(ikb)*vkbp(ig,ikb)
hpsi(ig,im)=hpsi(ig,im)+big_result(ig,im+iexx_istart(my_egrp_id+1)-1)
hpsi(ig,jbnd)=hpsi(ig,jbnd)-exxalfa*RESULT(dfftt%nl(ig),jbnd)
hpsi(ig,jbnd)=hpsi(ig,jbnd)-exxalfa*RESULT(dfftt%nl(igk_exx(ig,current_k)))
hpsi(j,ibnd)=hpsi(j,ibnd)+psic(dffts%nl(igk_k(j,current_k)))
hpsi(j,ibnd)=hpsi(j,ibnd)+psic(dffts%nl(j))
hpsi(lda+1:lda+n,ibnd)=g2kin(1:n)*psi(lda+1:lda+n,ibnd)
hpsi(lda+ig,im)=hpsi(lda+ig,im)+big_result(n+ig,im+iexx_istart(my_egrp_id+1)-1)
hp=xa(i+m)-x
h_rad(k,:,ix,1)=(v2x(k,1)+v2c(k,1))*grad(k,:,1)*g(i%t)%r2(k)
h_rad(k,:,ix,:)=h_rad(k,:,ix,:)*g(i%t)%r2(k)
Hubbard_alpha_(1:ntyp)=hubbard_alpha(1:ntyp)/rytoev
Hubbard_alpha_back_(1:ntyp)=hubbard_alpha_back(1:ntyp)/rytoev
Hubbard_alpha_back(nt)/=0.0_dp
Hubbard_beta_(1:ntyp)=hubbard_beta(1:ntyp)/rytoev
Hubbard_beta(nt)/=0.0_DP
Hubbard_J0_(1:ntyp)=hubbard_j0(1:ntyp)/rytoev
Hubbard_J0(nt)/=0.0_dp
Hubbard_J_(1:3,1:ntyp)=hubbard_j(1:3,1:ntyp)/rytoev
Hubbard_J(2,nt)=0.002268d0*Hubbard_J(1,nt)
Hubbard_J(2,nt)=0.114774114774d0*Hubbard_J(1,nt)
Hubbard_J(3,nt)=0.0438d0*Hubbard_J(1,nt)
Hubbard_l(:)=-1
Hubbard_l1_back(:)=-1
Hubbard_l_back(:)=-1
Hubbard_lmax=-1
Hubbard_lmax_back=-1
Hubbard_U_(1:ntyp)=hubbard_u(1:ntyp)/rytoev
Hubbard_U_back_(:)=hubbard_U_back(:)/rytoev
Hubbard_V_(:,:,:)=hubbard_V(:,:,:)/rytoev
hwf_energy=eband+deband_hwf+(etxc-etxcc)+ewld+ehart+demet
hwf_energy=hwf_energy+2.0d0*EtsvdW
hwf_energy=hwf_energy+edftd3
hwf_energy=hwf_energy+eext
hwf_energy=hwf_energy+ef*tot_charge
hwf_energy=hwf_energy+etotefield
hwf_energy=hwf_energy+etotgatefield
hwf_energy=hwf_energy+exdm
i0=INT(q_d(ig)/dq)+1
i0=INT(qg(ig)/dq)+1
i0=INT(qm)+1
i0=INT(qt/dq)+1
i0=INT(rv_d/dq)+1
i0=q(ig)/dq+1
i0=qm+1
i0=qt/dq+1
i1=i0+1
i1=qm+2
i2=i0+2
i2=qm+3
i2s(j:j)='-'
i2s(j:j)=achar(ichar('0')+mod(m,10))
i3=i0+3
i3=qm+4
ialloc=nibands(my_egrp_id+1)
iatw=iatw+1
ibnd_buff_end=(ibnd_end_new+1)/2
ibnd_buff_start=(ibnd_start_new+1)/2
ibnd=ibands(ii,my_egrp_id+1)
ibnd=ibnd_loc+becp_d_ibnd_begin-1
ibnd=ibnd_loc+becp%ibnd_begin-1
ibnd=ibnd_loc+ibnd_begin-1
ibnd=(ibnd_start-1)+ibnd_loc+becp%ibnd_begin-1
ibnd=ibnd_start+kbnd-1
ibnd_inner_count=jend-jstart+1
ibnd_loop_start=ibnd_start-1
ibnd_loop_start=iexx_start-1
ibnd_loop_start=istart-1
ibnd_loop_start=jstart-1
ibuf=ibuf+1
ibuf=im-iexx_istart(my_egrp_id+1)+1
ic=ic+1
icur_blk=icur_blk+1
id=id+ngtot_d(ip)
idx(:,1)=modulo(i(:)-1,nr(:))
idx=2*idx-1
idx(:,3)=modulo(i(:)+1,nr(:))
idx(:,4)=modulo(i(:)+2,nr(:))
idx=ANINT(norm(dtau(:))*inv_dmax*DBLE(hist_len))
idx=fftx_tgpe(dffts)+1
iend=egrp_pairs(2,ipair,my_egrp_id+1)
iend=ibands(nibands(my_egrp_id+1),my_egrp_id+1)
iend=istart+npw_k-1
iend=istart+npw_kp-1
ierr=-1
ig=comm_recv(iproc+1,current_ik)%indices(i)
ig=comm_recv_reverse(iproc+1,current_ik)%indices(i)
ig=comm_send(iproc+1,current_ik)%indices(i)
ig=comm_send_reverse(iproc+1,iegrp,current_ik)%indices(i)
ig=ig-prev
ig=ig-prev_lda_exx
igk0(:)=igk_k(:,kpoint-1)
igl=(blockIdx%x-1)*blockDim%y+ty
ig_orig=(iblock-1)*blocksize+ig
igz=1-mill(3,ig)
igz=igz+dfftp%nr3
igz=mill(3,ig)+1
ih_d(ikb_t+ih)=ih
ih=ih+1
i=i+1
i=i+2*(k+1)+1
ii=ii+1
iim=iim+1
ii=mod(21*i,55)
i=is**2
iix=ix/REAL(dfftp%nr1,DP)
iiy=iy/REAL(dfftp%nr2,DP)
iiz=iz/REAL(dfftp%nr3,DP)
i,j,dist_s(i,j),'V=',(Hubbard_V(i,j,k)*rytoev,k=1,4)
ijh=ijh+1
ijh=jh+((ih-1)*(2*nhnt-ih))/2
ijkb01=ijkb01+nh(iu)
ijkb0=ijkb0+nh(np)
ijkb0=ijkb0+nh(nt)
ijs=ijs+1
ijs=(is-1)*npol
ijs=(is-1)*npol+is
ijtoh(:,:,nt)=-1
ijv=ijv+1
ijv=jv*(jv-1)/2+iv
ijv=mb*(mb-1)/2+nb
ijv=nb*(nb-1)/2+mb
ikb=ijkb0+ih
ikb=ijkb_start+ih
ikb=ikb+1
ikb=indv_ijkb0_d(na)+ih
ikb=indv_ijkb0(ia)+ih
ikb=indv_ijkb0(ma)+ih
ikb=indv_ijkb0(na)+ih
ikb_t=ikb_t+nht
ike=iks+nks-1
ik_g0=nks*my_pool_id
ik_g=ik+iks-1
ik_g=MOD(ik_g-1,nkstot/2)+1
ik_g=nks*my_pool_id+ik
ik=ik_g-ik_g0
ik=ikv(3)+nk3*(ikv(2)+nk2*ikv(1))+1
ikk=ik+nk*(ispin-1)
ikk=nx_el(ik-1,pdir)
ikk=nx_el(ik+1,pdir)
ikk=nx_el(ik-nppstr_3d(pdir)+1,pdir)
ikk=nx_el(ik+nppstr_3d(pdir)-1,pdir)
ik=nx_el(kpoint-1,pdir)
iks=iks+1
ik_stringa=MOD(ik-1,nppstr_3d(pdir))+1
ik=tetra(ii,nt)+nk
ikv(1:3)=(/i1,i2,i3/)-1
ikv(1:3)=ikv(1:3)+ivvec(1:3,ii,itet)
ikv(1:3)=MODULO(ikv(1:3),(/nk1,nk2,nk3/))
ilmax=upf(np)%lll(iv)+upf(np)%lll(jv)
ilmin=ABS(upf(np)%lll(iv)-upf(np)%lll(jv))
i%l=upf(i%t)%lmax_rho+1
image_label="0"//image_label
image_label="_"//image_label
image_label=int_to_char(my_image_id+first_image)
imax=NINT((posi(1)+boxrad_ia*sqrt(bg(1,1)*bg(1,1)+bg(2,1)*bg(2,1)+bg(3,1)*bg(3,1)))*dfft%nr1)
imax=NINT((posi(1)+boxrad_ia*sqrt(bg(1,1)*bg(1,1)+bg(2,1)*bg(2,1)+bg(3,1)*bg(3,1)))*dffts%nr1)
imax=NINT(rcut/aa)+nadd
imin=NINT((posi(1)-boxrad_ia*sqrt(bg(1,1)*bg(1,1)+bg(2,1)*bg(2,1)+bg(3,1)*bg(3,1)))*dfft%nr1)
imin=NINT((posi(1)-boxrad_ia*sqrt(bg(1,1)*bg(1,1)+bg(2,1)*bg(2,1)+bg(3,1)*bg(3,1)))*dffts%nr1)
imk(idir)=imk(idir)+1
imk(idir)=imk(idir)-2
i=mod(nint(-xkr(1)*nk1-0.5d0*k1+2*nk1),nk1)+1
i=mod(nint(xkr(1)*nk1-0.5d0*k1+2*nk1),nk1)+1
ina=ina+1
incr=2*fftx_ntgrp(dffts)
incr=2*many_fft
ind1=1+(istring-1)*nppstr
ind1=l**2+n1
ind1=nbe+1
index_sym(ikq+nkqs)=index_sym(ikq)
index_xk(ikq+nkqs)=index_xk(ikq)+nkstot/2
index_xkq(nkstot/2+ik,iq)=index_xkq(ik,iq)+nkqs
ind_g(mapg_owner(1,igg))=ind_g(mapg_owner(1,igg))+1
ind=lmaxx+1+sph_ind(l,j,m,is)
ind=nbe+1
inext=inext+1
inext=mixrho_iter-((mixrho_iter-1)/n_iter)*n_iter
inextp=inextp+1
INFO=-1
initialisation_level=initialisation_level+5
initialisation_level=initialisation_level+7
i=npol*(is1-1)+is2
inv(1,1)=(v(2,2)*v(3,3)-v(2,3)*v(3,2))*d
inv(1,2)=(v(3,2)*v(1,3)-v(1,2)*v(3,3))*d
inv(1,3)=(v(1,2)*v(2,3)-v(1,3)*v(2,2))*d
inv(2,1)=(v(3,1)*v(2,3)-v(2,1)*v(3,3))*d
inv(2,2)=(v(1,1)*v(3,3)-v(3,1)*v(1,3))*d
inv(2,3)=(v(2,1)*v(1,3)-v(1,1)*v(2,3))*d
inv(3,1)=(v(2,1)*v(3,2)-v(2,2)*v(3,1))*d
inv(3,2)=(v(3,1)*v(1,2)-v(1,1)*v(3,2))*d
inv(3,3)=(v(1,1)*v(2,2)-v(1,2)*v(2,1))*d
inv_dmax=1.D0/(norm(MATMUL(at(:,:),max_dist(:)))*alat)
inv_nr1=1.D0/dble(dfft%nr1)
inv_nr1=1._DP/DBLE(dfftp%nr1)
inv_nr1s=1.D0/dble(dffts%nr1)
inv_nr2=1.D0/dble(dfft%nr2)
inv_nr2=1._DP/DBLE(dfftp%nr2)
inv_nr2s=1.D0/dble(dffts%nr2)
inv_nr3=1.D0/dble(dfft%nr3)
inv_nr3=1._DP/DBLE(dfftp%nr3)
inv_nr3s=1.D0/dble(dffts%nr3)
invsym=ALL(s(:,:,nsym/2+1)==-s(:,:,1))
iocc=iocc+f_inp(ibnd,is)
iocc=iocc+SUM(f_inp(1:nbnd,is))
ioff=idx*v_siz
ioff=ioff+right_inc
ioff=ioff+right_nnr
io_level=-1
io_level=-2
ionic_charge=ionic_charge+zv(ityp(na))
iorb=iorb+1
ip1=MOD(i,nk1)+1
ip_Hubbard_alpha_back(nt)/=0.0_DP
ipos=mixrho_iter-1-((mixrho_iter-2)/n_iter)*n_iter
iq=iq+1
ir=1+ii+jj*dfft%nr1x+kk*dfft%nr1x*dfft%my_nr2p
ir=1+ii+jj*dffts%nr1x+kk*dffts%nr1x*dffts%my_nr2p
ir_end=dfftt%nr1x*dfftt%my_nr2p*dfftt%my_nr3p
ir_end=MIN(ir_start+nblock-1,nrxxs)
ir=i+(j-1)*nr1x+(k-1)*nr1x*nr2x
ir=j-1
irot=(ic-1)*nsym+1
irot=irot+1
ir_ram(1)="I+R"
ir_ram(2)="I+R"
ir_ram(3)="I+R"
ir_ram(4)="I+R"
ir_ram(5)="I+R"
ir_start=(irt-1)*nblock+1
iscdm=iscdm+1
iseed=-119
iseed=iseed+382
i_sign=-1._DP
i_sign=+1._DP
isk(1:nks)=isk(nbase+1:nbase+nks)
isk(ik+nkstot)=2
istack(jstack-1)=i
istack(jstack-1)=l
istack(jstack)=j-1
istart=egrp_pairs(2,ipair,my_egrp_id+1)
istart=ibands(1,my_egrp_id+1)
istart=(ipol-1)*npwx+1
istep=istep+1
istring=kort+(is-1)*nkort
it=2**(n-2)
itemp=itemp+1
iter=iter+1
iter_used=MIN((mixrho_iter-1),n_iter)
itet=itet+1
itettot=itettot+1
itot=itot+nh_np1
ivvec0(1:4)=(/0,0,0,0/)
ivvec(1:3,10,1:6)=2*ivvec(1:3,2,1:6)-ivvec(1:3,4,1:6)
ivvec(1:3,11,1:6)=2*ivvec(1:3,3,1:6)-ivvec(1:3,1,1:6)
ivvec(1:3,12,1:6)=2*ivvec(1:3,4,1:6)-ivvec(1:3,2,1:6)
ivvec(1:3,13,1:6)=2*ivvec(1:3,1,1:6)-ivvec(1:3,4,1:6)
ivvec(1:3,14,1:6)=2*ivvec(1:3,2,1:6)-ivvec(1:3,1,1:6)
ivvec(1:3,15,1:6)=2*ivvec(1:3,3,1:6)-ivvec(1:3,2,1:6)
ivvec(1:3,16,1:6)=2*ivvec(1:3,4,1:6)-ivvec(1:3,3,1:6)
ivvec(1:3,17,1:6)=ivvec(1:3,4,1:6)-ivvec(1:3,1,1:6)+ivvec(1:3,2,1:6)
ivvec(1:3,18,1:6)=ivvec(1:3,1,1:6)-ivvec(1:3,2,1:6)+ivvec(1:3,3,1:6)
ivvec(1:3,19,1:6)=ivvec(1:3,2,1:6)-ivvec(1:3,3,1:6)+ivvec(1:3,4,1:6)
ivvec(1:3,20,1:6)=ivvec(1:3,3,1:6)-ivvec(1:3,4,1:6)+ivvec(1:3,1,1:6)
ivvec(1:3,2,itet)=ivvec(1:3,1,itet)+divvec(1:3,i1)
ivvec(1:3,3,itet)=ivvec(1:3,2,itet)+divvec(1:3,i2)
ivvec(1:3,4,itet)=ivvec(1:3,3,itet)+divvec(1:3,i3)
ivvec(1:3,5,1:6)=2*ivvec(1:3,1,1:6)-ivvec(1:3,2,1:6)
ivvec(1:3,6,1:6)=2*ivvec(1:3,2,1:6)-ivvec(1:3,3,1:6)
ivvec(1:3,7,1:6)=2*ivvec(1:3,3,1:6)-ivvec(1:3,4,1:6)
ivvec(1:3,8,1:6)=2*ivvec(1:3,4,1:6)-ivvec(1:3,1,1:6)
ivvec(1:3,9,1:6)=2*ivvec(1:3,1,1:6)-ivvec(1:3,3,1:6)
ix_e=ix_s+nx_loc-1
jblock_end=min(jblock_start+jblock-1,all_end(wegrp))
jblock_end=MIN(jblock_start+jblock-1,all_end(wegrp))
jblock_start=(ijt-1)*jblock+all_start(wegrp)
jbnd2(iorb_node+1)=ibnd
jbnd=ibands(ii,my_egrp_id+1)
jbnd(iorb_node+1)=ibnd
jcount=jend-jstart+1
jcurr=min(many_fft,jend-jbnd+1)
jend=egrp_pairs(2,ipair,my_egrp_id+1)
j=i+(ipol-1)*npwx
j=is1+npol*(is2-1)
j=j-1
j=j+1
j=j/10
j=j+lda_exx(i,ik)
j=j+lda_local(i,ik)
jj=modulo(j,dfft%nr2)-dfft%my_i0r2p
jj=modulo(j,dffts%nr2)-dffts%my_i0r2p
jk2(iorb_node+1)=ik
jkb1=jkb-nhjkb
jkb_bp=jkb_bp+1
jkb=ijkb0+jh
jkb=ijkb_start+jh
jkb=indv_ijkb0(ia)+jh
jkb=indv_ijkb0(na)+jh
jkb=jkb+1
jk(iorb_node+1)=ik
jmax=NINT((posi(2)+boxrad_ia*sqrt(bg(1,2)*bg(1,2)+bg(2,2)*bg(2,2)+bg(3,2)*bg(3,2)))*dfft%nr2)
jmax=NINT((posi(2)+boxrad_ia*sqrt(bg(1,2)*bg(1,2)+bg(2,2)*bg(2,2)+bg(3,2)*bg(3,2)))*dffts%nr2)
jmax=NINT(rcut/bb)+nadd
jmin=NINT((posi(2)-boxrad_ia*sqrt(bg(1,2)*bg(1,2)+bg(2,2)*bg(2,2)+bg(3,2)*bg(3,2)))*dfft%nr2)
jmin=NINT((posi(2)-boxrad_ia*sqrt(bg(1,2)*bg(1,2)+bg(2,2)*bg(2,2)+bg(3,2)*bg(3,2)))*dffts%nr2)
j=mod(nint(-xkr(2)*nk2-0.5d0*k2+2*nk2),nk2)+1
j=mod(nint(xkr(2)*nk2-0.5d0*k2+2*nk2),nk2)+1
jp1=MOD(j,nk2)+1
jrot=(jc-1)*nsym+isym
jrot=jrot+1
jspin2(iorb_node+1)=ispin
jspin(iorb_node+1)=ispin
jstack=jstack-2
jstack=jstack+2
jstart=egrp_pairs(2,ipair,my_egrp_id+1)
jwfc=jwfc+1
k3=iz-1
kappa=aaa-gp+SQRT(aaa**2+gp**2)
kbnd=ibnd-1
k=da(d)*dble(g_int(d,ig));cosk=cos(k);k2=k*k;k4=k2*k2
keane=k0*dk0/ddk**2*(x**(-ddk)-1d0)+(dk0-ddk)/ddk*log(x)
kedtau(:,1)=kedtau(:,1)/e2
kedtau(:,1)=kedtau(:,1)*e2
kedtau(:,1:nspin0)=kedtau(:,1:nspin0)/e2
kedtau(:,1:nspin0)=kedtau(:,1:nspin0)*e2
kedtaur(k,1)=(v3x(k,1)+v3c(k,1))*0.5d0*e2
kedtaur(k,2)=(v3x(k,2)+v3c(k,2))*0.5d0*e2
ke(ns)%k=k_ae-k_ps
kexx=kexx+e
kfac_d(i)=1._DP+qcutz/q2sigma*twobysqrtpi*EXP(-arg)
kfac(i)=1.d0+qcutz/q2sigma*twobysqrtpi*EXP(-arg)
kindex=j+(i-1)*nppstr
kindex=kindex+1
k=k+1
kk1=0.5d0*(-(z-zp)*qe_erf(arg101)-EXP(arg001)/tmp/SQRT(pi))
kk1_for=-0.5d0*exp_erfc(arg006,arg104)/2.d0
kk1_for=0.5d0*qe_erf(tmp*(z-zp))
kk1=(t1+t2)/2.d0
kk1=(t1+t2)/4.d0
kk2=0.5d0*(2.d0*z1-z-zp)
kk2=0.5d0*(z1-z*zp/z1)
kk2_for=-0.5d0
kk2_for=-0.5d0*exp_erfc(arg004,arg101)/2.d0
kk2_for=-0.5d0*qe_erfc(arg101)/2.d0
kk2_for=-0.5d0*(z/z1)
kk2=t3/2.d0
k=k-8
kk=modulo(k,dfft%nr3)-dfft%my_i0r3p
kk=modulo(k,dffts%nr3)-dffts%my_i0r3p
k=(l+ir)/2
kmax=NINT((posi(3)+boxrad_ia*sqrt(bg(1,3)*bg(1,3)+bg(2,3)*bg(2,3)+bg(3,3)*bg(3,3)))*dfft%nr3)
kmax=NINT((posi(3)+boxrad_ia*sqrt(bg(1,3)*bg(1,3)+bg(2,3)*bg(2,3)+bg(3,3)*bg(3,3)))*dffts%nr3)
kmax=NINT(rcut/cc)+nadd
kmin=NINT((posi(3)-boxrad_ia*sqrt(bg(1,3)*bg(1,3)+bg(2,3)*bg(2,3)+bg(3,3)*bg(3,3)))*dfft%nr3)
kmin=NINT((posi(3)-boxrad_ia*sqrt(bg(1,3)*bg(1,3)+bg(2,3)*bg(2,3)+bg(3,3)*bg(3,3)))*dffts%nr3)
k=mod(nint(-xkr(3)*nk3-0.5d0*k3+2*nk3),nk3)+1
k=mod(nint(xkr(3)*nk3-0.5d0*k3+2*nk3),nk3)+1
kp1=MOD(k,nk3)+1
kp1=tetra(itetra(1),nt)+nk
kp2=tetra(itetra(2),nt)+nk
kp3=tetra(itetra(3),nt)+nk
kp4=tetra(itetra(4),nt)+nk
kphase=CMPLX(COS(arg),-SIN(arg),KIND=DP)
kplusg(1:npw)=(xk(ipol,ik)+g(ipol,igk_k(1:npw,ik)))*tpiba
kplusg(1:npw)=(xk(j,ik)+g(j,1:npw))*tpiba
kplusg(1:npw)=(xk(j,ik)+g(j,igk_k(1:npw,ik)))*tpiba
kplusg(1:np)=(xk(j,current_k)+g(j,1:np))*tpiba
kplusg(1:np)=(xk(j,current_k)+g(j,igk_k(1:np,current_k)))*tpiba
kplusg=(xk_d(ipol)+g_d(ipol,igk_k_d(j)))*tpiba
kpoint=kpoint-1
kpoint=kpoint+1
kprod(1,:)=kvec(1,:)*kvec(1,:)
kprod(2,:)=kvec(2,:)*kvec(2,:)
kprod(3,:)=kvec(3,:)*kvec(3,:)
kprod(4,:)=kvec(1,:)*kvec(2,:)
kprod(5,:)=kvec(1,:)*kvec(3,:)
kprod(6,:)=kvec(2,:)*kvec(3,:)
kr(j)=kr(j)-nmax(j)
kr(j)=kr(j)+nmax(j)
ksq(:)=kprod(1,:)+kprod(2,:)+kprod(3,:)
kstart=kpoint-nppstr+1
kstart=kpoint-(nppstr_3d(pdir)+1)+1
kstress(i,j)=kstress(i,j)+mass(na)*vel(i,na)*vel(j,na)
kstress=kstress*alat**2/omega
kt=fcp_temperature/ry_to_kelvin
kt=temperature/ry_to_kelvin
kvec(:,:)=tpi/alat*xk(1:3,1:nk)
kw(naux)=kw(naux)+1
l0=2*Hubbard_l(nt)+1
l0b=l0+2*Hubbard_l_back(nt)+1
l2e_map(ig+prev_lda_exx(ik),ik)=j
l2=i%l**2
lambda=SQRT(aaa**2+gp**2)
lamx2=lmaxq*lmaxq
lap=lap*2.d0
lap=lap/2._DP
lap=lap-cmplx(dble(eigr),dble(eigr2),KIND=dp)*g2(ig)
lap=lap-dble(eigr)*g2(ig)
lap=lap-eigr*g2(ig)
lap=lap*(tpi/alat)**2
lapr=ggaux(1,1,:)+ggaux(2,2,:)+ggaux(3,3,:)
lap=sum(sderiv(:)*lvp(:))/alat**2
last=(divid+1)*(me_image+1)
last=(divid+1)*resto+(divid)*(me_image-resto+1)
L=at(3,3)*alat
latvecs(:,:)=at(:,:)*alat
l_cal(nb)=(f_inp(nb,is)/=0.0_dp)
l_cal(nb)=(f_inp(nb,is)/=0.0_DP)
lda_exx(me_egrp+1,ik)=n
lda_local(me_pool+1,ik)=n
lda_offset=lda_max_local*(ipol-1)
ldim0=2*Hubbard_l_back(nt)+1
ldim=2*Hubbard_l1_back(nt)+1
ldim=2*Hubbard_l_back(nt)+1
ldim=2*Hubbard_lmax+1
ldim=2*Hubbard_l(nt)+1
ldimax=2*Hubbard_lmax+1
ldim_back(:)=-1
ldim_back(nt)=2*Hubbard_l_back(nt)+1
ldim_back(nt)=2*Hubbard_l_back(nt)+2*Hubbard_l1_back(nt)+2
ldim_back(nt)=2*(Hubbard_l_back(nt)+Hubbard_l1_back(nt)+1)
ldim_std1=2*Hubbard_l(nt1)+1
ldim_std2=2*Hubbard_l(nt2)+1
ldim_std=2*Hubbard_l(nt)+1
ldim_u(:)=-1
ldim_u(nt)=2*Hubbard_l(nt)+1
ldm1=ldm1+ldim1
ldm1=ldm1+ldim_u(nt1)
ldm2=ldm2+ldim_u(nt2)
ldmx_b=MAX(ldmx_b,2*Hubbard_l_back(nt)+1)
ldmx_b=MAX(ldmx_b,2*Hubbard_l_back(nt)+2*Hubbard_l1_back(nt)+2)
ldmx=ldmx+ldim_u(nt)
ldmx=MAX(ldmx,2*Hubbard_l(nt)+1)
ldmx_tot=-1
length=(1._dp-eopreg)*(alat*SQRT(at(1,edir)**2+at(2,edir)**2+at(3,edir)**2))
lensemb=MOD(INT(lflags/(2**0)),2)==1
lflags=-1
lforce=MOD(INT(lflags/(2**3)),2)==1
l=istack(jstack-1)
l=l+1
ll(:,:)=-1
ll(1:2*Hubbard_l(nt)+1,nt)=Hubbard_l(nt)
ll(l0+1:l0+2*Hubbard_l_back(nt)+1,nt)=Hubbard_l_back(nt)
lmaxkb=-1
lmaxq=2*lmaxkb+1
lmax_safe=lm_fact*upf(nt)%lmax_rho
lmax_safe=lm_fact_x*upf(nt)%lmax_rho
lm=l**2+m
lm=l*l+m
lmovecell=MOD(INT(lflags/(2**1)),2)==1
lmx2=(lmaxkb+1)**2
locbuff(1:nrxxs,ibnd-ibnd_loop_start+evc_offset+1,ik)=DBLE(psic_exx(1:nrxxs))
locbuff(1:nrxxs,ibnd-ibnd_loop_start+evc_offset+2,ik)=AIMAG(psic_exx(1:nrxxs))
loc_diag=loc_diag+DBLE(Mat(ibnd,ibnd))
loc_diag=loc_diag+Mat(jbnd,jbnd)
loc_k(istring)=-(nppstr_3d(pdir)-1)/gvec**2/nbnd*LOG(zeta_mod)
loc_off=loc_off+DBLE(Mat(ibnd,jbnd))+DBLE(Mat(jbnd,ibnd))
loc_off=loc_off+Mat(jbnd,kbnd)
lowest_digit_to_quote=floor(log(std_err_in_mean)/log(10.d0))+1-err_prec
lowest_digit_to_quote=lowest_digit_to_quote+1
lp1=l+1
lphase=(0.d0,1.d0)**l
lscf=MOD(INT(lflags/(2**4)),2)==1
lstres=MOD(INT(lflags/(2**2)),2)==1
lumo_tmp=lumo_tmp/e2
lvec(:,nvec)=(/ii,jj,kk/)
lvp(1)=bg(1,1)**2+bg(2,1)**2+bg(3,1)**2
lvp(2)=bg(1,2)**2+bg(2,2)**2+bg(3,2)**2
lvp(3)=bg(1,3)**2+bg(2,3)**2+bg(3,3)**2
lvp(4)=2.d0*(bg(1,1)*bg(1,2)+bg(2,1)*bg(2,2)+bg(3,1)*bg(3,2))
lvp(5)=2.d0*(bg(1,2)*bg(1,3)+bg(2,2)*bg(2,3)+bg(3,2)*bg(3,3))
lvp(6)=2.d0*(bg(1,3)*bg(1,1)+bg(2,3)*bg(2,1)+bg(3,3)*bg(3,1))
lwork=-1
lwork=2*n
lwork=3*n
LWORK=3*n
lwork=4*nptot
lwork=5*m
lwork=5*nbnd
lwork=INT(work(1))+1
lwork=(nb+1)*n
lwork=(nb+2)*n
lz=0.5d0*at(3,3)*alat
m0=sph_ind(li,ji,m,is1)+lmaxx+1
m11=m1-2*Hubbard_l_back(nt)-1
m1=2*Hubbard_l(nt)+1
m1(ipol)=m1(ipol)*omega/(dfftp%nr1*dfftp%nr2*dfftp%nr3)
m1(ipol)=m1(ipol)+rho(ir,ipol+1)
m1=sph_ind(lk,jk,m,is2)+lmaxx+1
m2(1,na)=-xx*m_loc(1,na)*m_loc(3,na)/(ma*ma*ma)
m2(1:npol,na)=m_loc(1:npol,na)-mcons(1:npol,nt)
m2=2*Hubbard_l1_back(nt)+1
m2=2*Hubbard_l_back(nt)+1
m2=2*hubbard_l(nt)+1
m2=2*Hubbard_l(nt)+1
m22=m2-2*Hubbard_l_back(nt)-1
m2(2,na)=-xx*m_loc(2,na)*m_loc(3,na)/(ma*ma*ma)
m2(3,na)=xx*(-m_loc(3,na)*m_loc(3,na)/(ma*ma*ma)+1.d0/ma)
ma=DSQRT(m_loc(1,na)**2+m_loc(2,na)**2+m_loc(3,na)**2)
mag2=mag2**2
mag2=mag2+ns(m1,m1,1,na)-ns(m1,m1,2,na)
mag2=mx**2+my**2+mz**2
magloc(ipol,1:nat)=auxrholoc(1:nat,ipol+1)*fact
mag=sqrt(rho_rad(k,2)**2+rho_rad(k,3)**2+rho_rad(k,4)**2)
mag=SQRT(rho_rad(k,2)**2+rho_rad(k,3)**2+rho_rad(k,4)**2)
magsum(:)=magsum(:)+magrot(:)
magsum(:)=magsum(:)+magrot(:)*fact
magtot=magtot+mag
magtot=magtot*omega/(dfftp%nr1*dfftp%nr2*dfftp%nr3)
magtot_nc(i)=magtot_nc(i)*omega/(dfftp%nr1*dfftp%nr2*dfftp%nr3)
magtot_nc(i)=magtot_nc(i)+rho%of_r(ir,i+1)
ma(i)=ma(i)-ma(1+mod(i+30,55))
mapg_owner(1,ig_l2g(ig))=me_image+1
map_igk_to_fft(ig)=1+g_idx(1)+ld_bg(1)*(g_idx(2)+ld_bg(2)*g_idx(3))
map_minus_igk_to_fft(ig)=1+g_idx(1)+ld_bg(1)*(g_idx(2)+ld_bg(2)*g_idx(3))
ma=SQRT(m1(1)**2+m1(2)**2+m1(3)**2)
mass(na)=amass(ityp(na))*amu_ry
mat3=work/DBLE(nsym)
matbig(nx_el(ik+1,pdir),:,:)=TRANSPOSE(CONJG(mat))
matbig(nx_el(ik-nppstr_3d(pdir)+1,pdir),:,:)=TRANSPOSE(CONJG(mat))
MatC=(One,Zero)*MatQ
Mat(jbnd,jbnd)=Mat(jbnd,jbnd)+cost*sum(abs(locbuff(:,jbnd,IKK))*abs(locbuff(:,jbnd,IKK)))
Mat(jbnd,kbnd)=Mat(jbnd,kbnd)+tmp
Mat(kbnd,jbnd)=Mat(kbnd,jbnd)+tmp
mat(nb,mb)=mat(nb,mb)+pref
mat(nb,mb)=mat(nb,mb)+sca
matr(:,:)=work(:,:)/DBLE(nsym)
MatT(j,i)=(Mat(i,j)+Mat(j,i))/Two
mat=TRANSPOSE(CONJG(matbig(nx_el(ik+1,pdir),:,:)))
mat=TRANSPOSE(CONJG(matbig(nx_el(ik-nppstr_3d(pdir)+1,pdir),:,:)))
max_aux_proc=max_aux_proc+1
max_buff_bands_per_egrp=MAXVAL((all_end(:)+1)/2-(all_start(:)+1)/2)+1
max_buff_bands_per_egrp=MAXVAL(all_end(:)-all_start(:))+1
maxc6=-1._DP
maxlm=(maxl+1)*(maxl+1)
max_nk=nkstot*MIN(48,2*nsym)
maxram=ram+ram_
max_tot_charge=ABS(capacitance*force/e2)
max_xml_steps_=max_xml_steps+2
mbia=maxbox_beta(ia)+1
mbia=mbia+1
mb(ipol)=becsum(ijh,ia,ipol+1)
mb(ipol)=becsym(ijh,ia,ipol+1)
mb(ipol)=ddd(ijh,ia,ipol+1)
mb(ipol)=dddsym(ijh,ia,ipol+1)
mb(jpol)=becsym(ijh,ia,jpol+1,ipol)
mb(jpol)=dbecsum(ijh,ia,jpol+1,ipol)
mbr=mbr/alat
mbx=mbr*sqrt(bg(1,1)**2+bg(1,2)**2+bg(1,3)**2)
mby=mbr*sqrt(bg(2,1)**2+bg(2,2)**2+bg(2,3)**2)
mbz=mbr*sqrt(bg(3,1)**2+bg(3,2)**2+bg(3,3)**2)
mcm=-1
mcm=k*n2
mcons(1,nt)=starting_magnetization(nt)*sin(theta)*cos(phi)
mcons(2,nt)=starting_magnetization(nt)*sin(theta)*sin(phi)
mcons(3,nt)=starting_magnetization(nt)*cos(theta)
m_exx=iexx_iend(my_egrp_id+1)-iexx_istart(my_egrp_id+1)+1
mexx=-mexx
m=(i-1)+(k-1)*nk1+(j-1)*nk3*nk1+1
mic=mic+DBLE(signum)*pref*gpar(:,l)/kpt_arr(l)*AIMAG(store1*store2)
m_i=lm_i-l_i**2
mi=nhtolm(ih,nt)-li*li
m(ipol)=rho_rad(k,1+ipol)/mag
missing_norm=MAXVAL(1.d0-power_q(1:upf(nt)%nbeta)/power_r(1:upf(nt)%nbeta))
mix_type_size=complex_size*ngm*nspin
m=(j-1)+(i-1)*nk2+(k-1)*nk1*nk2+1
m_j=lm_j-l_j**2
mj=ma(inext)-ma(inextp)
mj=mseed-iabs(idum)
mk1=NINT(g(1,ig)*at(1,1)+g(2,ig)*at(2,1)+g(3,ig)*at(3,1))
mk1=NINT(g(1,igk1(ig))*at(1,1)+g(2,igk1(ig))*at(2,1)+g(3,igk1(ig))*at(3,1))
mk1=nint(g(1,ng)*at(1,1)+g(2,ng)*at(2,1)+g(3,ng)*at(3,1))
mk1=NINT(g(1,ng)*at(1,1)+g(2,ng)*at(2,1)+g(3,ng)*at(3,1))
mk2=NINT(g(1,ig)*at(1,2)+g(2,ig)*at(2,2)+g(3,ig)*at(3,2))
mk2=NINT(g(1,igk1(ig))*at(1,2)+g(2,igk1(ig))*at(2,2)+g(3,igk1(ig))*at(3,2))
mk2=nint(g(1,ng)*at(1,2)+g(2,ng)*at(2,2)+g(3,ng)*at(3,2))
mk2=NINT(g(1,ng)*at(1,2)+g(2,ng)*at(2,2)+g(3,ng)*at(3,2))
mk3=NINT(g(1,ig)*at(1,3)+g(2,ig)*at(2,3)+g(3,ig)*at(3,3))
mk3=NINT(g(1,igk1(ig))*at(1,3)+g(2,igk1(ig))*at(2,3)+g(3,igk1(ig))*at(3,3))
mk3=nint(g(1,ng)*at(1,3)+g(2,ng)*at(2,3)+g(3,ng)*at(3,3))
mk3=NINT(g(1,ng)*at(1,3)+g(2,ng)*at(2,3)+g(3,ng)*at(3,3))
mk=mj-mk
mk=nhtolm(kh,nt)-lk*lk
ml(i,iat)=ml(i,iat)+wei*(ri2-db2)**2
ml=MAX(upf(it)%lmax_rho+1,ml)
ml(:)=ml(:)+mass(na)*vel(:,na)
ml=ml*omega/(dfftp%nr1*dfftp%nr2*dfftp%nr3)
ml(:)=ml(:)/total_mass
ml(:)=ml(:)+vel(:,na)*mass(na)
m=m+1
m=m/10
m=(n+1)/2
m=n1/2
m=nhtolm(ih,nt)-lH*lH
m=ns(1)-ns(2)
moda=SQRT(ax(1)**2+ax(2)**2+ax(3)**2)
modb=SQRT(bx(1)**2+bx(2)**2+bx(3)**2)
mod(l+lllnbnt+lllmbnt,2)==0))CYCLE
moffset=L**2
mopoplaout=(-1.0_DP*z)
mopoplaout=(1.0_DP*z)
mopoplaout=(z**2)
mperp=SQRT(m1(1)**2+m1(2)**2)
msd(i)=dx*dx+dy*dy+dz*dz
msin3=-0.866025403784438597d0,mcos3=-0.5d0
msmall_lm(j,lm,is)=msmall_lm(j,lm,is)*g_lm(j,lm,is)
mx=mx+DBLE(ns(m1,m1,2,na)+ns(m1,m1,3,na))
mx=mx+DBLE(rho%ns_nc(m1,m1,2,na)+rho%ns_nc(m1,m1,3,na))
my_bands=iexx_iend(my_egrp_id+1)-iexx_istart(my_egrp_id+1)+1
my_lda=lda_local(me_pool+1,current_ik)
my=my+2.d0*AIMAG(ns(m1,m1,2,na))
my=my+2.d0*AIMAG(rho%ns_nc(m1,m1,2,na))
mysum=mysum+2.d0*val
mysum=mysum+2._dp*val
mysum=mysum+4.d0*val
mysum=mysum+4._dp*val
mysum=mysum*fpi/omega/2.0d0/gx/3.d0
mysum=mysum+val
mz=mz+DBLE(ns(m1,m1,1,na)-ns(m1,m1,4,na))
mz=mz+DBLE(rho%ns_nc(m1,m1,1,na)-rho%ns_nc(m1,m1,4,na))
n1=(k-1)+(j-1)*nk3+(i-1)*nk2*nk3+1
n1=NINT(g(1,ng)*at(1,1)+g(2,ng)*at(2,1)+g(3,ng)*at(3,1))
n1=NINT(gtr(1)*at(1,1)+gtr(2)*at(2,1)+gtr(3)*at(3,1))
n1xh=dfftp%nr1x/2
n2=(k-1)+(j-1)*nk3+(ip1-1)*nk2*nk3+1
n=(2*L+1)**2
n2=NINT(g(1,ng)*at(1,2)+g(2,ng)*at(2,2)+g(3,ng)*at(3,2))
n2=NINT(gtr(1)*at(1,2)+gtr(2)*at(2,2)+gtr(3)*at(3,2))
n2xh=dfftp%nr2x/2
n3=(k-1)+(jp1-1)*nk3+(i-1)*nk2*nk3+1
n3=-mill(3,ng)+1
n3=mill(3,ng)+1
n3=NINT(g(1,ng)*at(1,3)+g(2,ng)*at(2,3)+g(3,ng)*at(3,3))
n3=NINT(gtr(1)*at(1,3)+gtr(2)*at(2,3)+gtr(3)*at(3,3))
n4=(k-1)+(jp1-1)*nk3+(ip1-1)*nk2*nk3+1
n5=(kp1-1)+(j-1)*nk3+(i-1)*nk2*nk3+1
n=6*((k-1)+(j-1)*nk3+(i-1)*nk3*nk2)
n6=(kp1-1)+(j-1)*nk3+(ip1-1)*nk2*nk3+1
n7=(kp1-1)+(jp1-1)*nk3+(i-1)*nk2*nk3+1
n8=(kp1-1)+(jp1-1)*nk3+(ip1-1)*nk2*nk3+1
na_d(ikb_t+ih)=na
name_class(10)="-2S6"
name_class(10)="-C3^2"
name_class(10)="-i"
name_class(10)="-S3"
name_class(10)="-S6^5"
name_class1(10)="-3s_h"
name_class1(10)="-s_v''"
name_class(11)="-2S4"
name_class1(12)="-s_h"
name_class1(13)="-2s_v"
name_class1(13)="-3s_h"
name_class1(14)="-2s_d"
name_class1(16)="-6s_d"
name_class1(16)="-s_h"
name_class1(17)="-3s_v"
name_class1(18)="-3s_d"
name_class(11)="-i"
name_class(12)="-3s_v"
name_class(12)="-4S6'"
name_class(12)="-8S6"
name_class(12)="-C6^5"
name_class(12)="-S3^5"
name_class(12)="-S4^3"
name_class(12)="-S6"
name_class(13)="-2S3"
name_class1(3)="-3C2"
name_class1(3)="-C2"
name_class(14)="-4S6"
name_class1(4)="-C2'"
name_class(14)="-i"
name_class(14)="-s_h"
name_class1(4)="-s_v"
name_class(15)="-2S6"
name_class1(5)="-3C2'"
name_class1(5)="-3C2"
name_class(15)="-6S4"
name_class1(5)="-C2''"
name_class1(5)="-C2"
name_class1(5)="-s_v'"
name_class1(6)="-2C2'"
name_class1(6)="-2s_v"
name_class(16)="-S3^5"
name_class(16)="-S4"
name_class1(6)="-s_h'"
name_class1(7)="-2C2''"
name_class1(7)="-2s_d"
name_class1(7)="-C2"
name_class1(8)="-3C2'"
name_class1(8)="-3s_v"
name_class1(8)="-6C2'"
name_class1(8)="-6s_d"
name_class(18)="-S6^5"
name_class1(8)="-s_v"
name_class1(9)="-3C2''"
name_class1(9)="-3s_d"
name_class1(9)="-3s_v"
name_class1(9)="-s_v'"
name_class(20)="-s_h"
name_class(22)="-S6"
name_class(24)="-S3"
name_class(2)="-E"
name_class(4)="-2C3"
name_class(4)="-2C4"
name_class(4)="-2C6"
name_class(4)="-2S4"
name_class(4)="-8C3"
name_class(4)="-C2"
name_class(4)="-C3"
name_class(4)="-C4"
name_class(4)="-C6"
name_class(4)="-i"
name_class(4)="-s"
name_class(4)="-S4^3"
name_class(5)="-4C3"
name_class(6)="-2C3"
name_class(6)="-3C2'"
name_class(6)="-3s_v"
name_class(6)="-C2"
name_class(6)="-C3"
name_class(6)="-C3^2"
name_class(6)="-i"
name_class(7)="-4C3'"
name_class(7)="-6C4"
name_class(7)="-6S4"
name_class(7)="-i"
name_class(8)="-2S3"
name_class(8)="-C2"
name_class(8)="-C4^3"
name_class(8)="-i"
name_class(8)="-S4"
name_class(8)="-s_h"
name_class(9)="-i"
name_rap(10)="E1u*"
name_rap(10)="G_10-"
name_rap(10)="T_2uG_25G_5-"
name_rap(11)="G_11-"
name_rap(12)="E2u*"
name_rap(12)="G_12-"
name_rap(1)="A_1gG_1G_1+"
name_rap(1)="G_2+"
name_rap(1)="G_3+"
name_rap(1)="G_4+"
name_rap(1)="G_4+L_6+"
name_rap(1)="G_5+"
name_rap(1)="G_6+"
name_rap(1)="G_6+M_6+"
name_rap(1)="G_7+"
name_rap(2)="A_2gG_2G_2+"
name_rap(2)="G_2-"
name_rap(2)="G_4+"
name_rap(2)="G_5-"
name_rap(2)="G_5+"
name_rap(2)="G_5+L_4+"
name_rap(2)="G_6+"
name_rap(2)="G_7+"
name_rap(2)="G_7+M_7+"
name_rap(2)="G_8+"
name_rap(3)="E'*"
name_rap(3)="E*"
name_rap(3)="E_g*"
name_rap(3)="E_gG_12G_3+"
name_rap(3)="G_3-"
name_rap(3)="G_6+"
name_rap(3)="G_6+L_5+"
name_rap(3)="G_6-M_6-"
name_rap(3)="G_7+"
name_rap(3)="G_8+"
name_rap(3)="G_9+"
name_rap(4)="E*"
name_rap(4)="E_1*"
name_rap(4)="E1g*"
name_rap(4)="E_g*"
name_rap(4)="E*W_2"
name_rap(4)="G_10+"
name_rap(4)="G_4-"
name_rap(4)="G_4-L_6-"
name_rap(4)="G_5-"
name_rap(4)="G_6-"
name_rap(4)="G_7-"
name_rap(4)="G_7-M_7-"
name_rap(4)="G_8+"
name_rap(4)="T_1gG_15'G_4+"
name_rap(5)="G_11+"
name_rap(5)="G_5-"
name_rap(5)="G_5-L_4-"
name_rap(5)="G_6-"
name_rap(5)="G_7-"
name_rap(5)="G_8-"
name_rap(5)="T_2gG_25'G_5+"
name_rap(6)="A_1uG_1'G_1-"
name_rap(6)="E''*"
name_rap(6)="E_2*"
name_rap(6)="E2g*"
name_rap(6)="E_u*"
name_rap(6)="G_12+"
name_rap(6)="G_6-"
name_rap(6)="G_6-L_5-"
name_rap(6)="G_7-"
name_rap(6)="G_8-"
name_rap(6)="G_9-"
name_rap(7)="A_2uG_2'G_2-"
name_rap(7)="E_u*"
name_rap(7)="G_7-"
name_rap(8)="E_u*"
name_rap(8)="E_uG_12'G_3-"
name_rap(8)="G_8-"
name_rap(9)="G_9-"
name_rap(9)="T_1uG_15G_4-"
narg=narg+1
nat_moved=nat_moved+1
natom=natom+1
na_to_nab_h(na)=-1
n_aux=n_aux+ns(m1,m1,is1,na)
nb2=nb2+1
nbase=(nks1+kunit)*(i-1)
nbase=nks*my_pool_id
nbase=rest*(nks1+kunit)+(i-1-rest)*nks1
nbe=nbe-1
nbe=nbe+1
nbH=-1
nb=ILAENV(1,'DSYTRD','U',n,-1,-1,-1)
nb=ILAENV(1,'ZHETRD','U',n,-1,-1,-1)
NBin=NBin+1
nb=irt((nsym/2+1),na)
nb=nb+1
nbnd_l=nbndx/np_ortho(1)
nbnd_l=NINT(DBLE(nbnd)/nbgrp)
nbnd=MAX(NINT(nelec/degspin),NINT(nelup),NINT(neldw))
nbr(1)=n+(nk1-1)*nk2*nk3
nbr(1)=n-nk2*nk3
nbr(2)=n-(nk1-1)*nk2*nk3
nbr(2)=n+nk2*nk3
nbr(3)=n+(nk2-1)*nk3
nbr(3)=n-nk3
nbr(4)=n-(nk2-1)*nk3
nbr(4)=n+nk3
nbr(5)=n-1
nbr(5)=n+(nk3-1)
nbr(6)=n+1
nbr(6)=n-(nk3-1)
NBtot=NBtot+1
ncheck=ncheck+1
nclass=nclass+1
ncontributing(im)=ncontributing(im)+1
ncos=nrot/nsym
ncpu_start=sum(cpu_npt(0:me_bgrp-1))
ncpu_start=SUM(cpu_npt(0:me_bgrp-1))
neighood(i)%num_neigh=neighood(i)%num_neigh+1
nelec=ionic_charge-tot_charge
nelec=nelec+fcp_relax_step*force
nelec=(nelec*force0-nelec0*force)/(force0-force)
nelem(nclass)=nelem(nclass)+1
nelm=nelm+1
nenv=(2*imax+1)*(2*jmax+1)*(2*kmax+1)*nat
nenv=nenv+1
new_dist=old_total_dist/dble(num_of_images-1)
new_total_dist=new_total_dist+new_dist
nexx_g=2*ngxx_g
nexx_l=nexx_g/nproc_bgrp
nf=20;af=1.125D0*(2*nf+1);error_estimate=missing_norm*filter(1.d0,af,nf)**2
nf=min(nf+1,20);af=1.125D0*(2*nf+1);error_estimate=missing_norm*filter(1.d0,af,nf)**2
nf=min(nrot-6*n6,6)
nf=nf-1;af=1.125D0*(2*nf+1);error_estimate=missing_norm*filter(1.d0,af,nf)**2
nfrac=NINT(1.0_dp/ABS(ft_(i)))
nfuncs=nh(nt)*(nh(nt)+1)/2
ng_2d=ng_2d+1
ngauss=-1
ngauss=-99
ngg=ngg+1
ngk=ngk+1
ngloc=ngloc+1
ngm_=dfftp_exx%ngl(dfftp_exx%mype+1)
ngm_=dfftp%ngl(dfftp%mype+1)
ngm_l=ngm_e-ngm_s+1
ngm_l=ngm/npool
ngm_=(ngm_+1)/2
ngm_s=ngm_s+ngm_s_tmp-1;ngm_e=ngm_e+ngm_s_tmp-1
ng=ng+1
ngpos=ngpos+ngloc
NGrid=dfftt%nnr*npol
ngroups=ngroups+1
ngs_=dffts_exx%ngl(dffts_exx%mype+1)
ngs_=dffts%ngl(dffts%mype+1)
ngs=ngs+1
ngs_=(ngs_+1)/2
ngtot_l=ngtot_l+1
ngxx_g=NINT(fpi/3.0_dp*SQRT(ecutfock)**3/(tpi**3/omega))
nh(nt)=nh(nt)+2*upf(nt)%lll(nb)+1
nhtolm(ih,nt)=l*l+m
n(:,ig)=nint(at(1,:)*g_(1,ig)+at(2,:)*g_(2,ig)+at(3,:)*g_(3,ig))
nij=nhm*(nhm+1)/2
nij=nh(nt)*(nh(nt)+1)/2
njt=(all_end(wegrp)-all_start(wegrp)+jblock)/jblock
n=(k-1)+(j-1)*nk3+(i-1)*nk2*nk3+1
nkbl=nkstot/kunit
nkb=nkb+nh(nt)
nkdum=kunit*(nkstot/kunit/npool)
nk=nk+1
nk=nks/2
nk=nkstot/2
nk_=nkstot/2
nkort=nstring/(nspin_eff)
nkort=nstring/nspin_lsda
nkqs=2*nkqs
nkqs=nkqs+1
nkr=nk1*nk2*nk3
nks1=kunit*(nkstot/kunit/npool)
nks=2*nks
nks=kunit*(nkbl/npool)
nks=kunit*(nkstot/kunit/npool)
nks=nk1*nk2*nk3
nks=nks+1
nks=nks*nppstr
nkstot=2*nkstot
n=l+1-m
n=l+1+m
nl=(L+1)**2
nlw=MAX(1,NINT(nelec/2.0d0-5.0d0))
nm1=INT(dnrm2(3,bg(1,1),1)*rmax)+2
nm2=INT(dnrm2(3,bg(1,2),1)*rmax)+2
nmb=nmb+1
n=n+1
nn=2*(i3+1)
nnk=nnk+1
nn=nn+1
n=ns(1)+ns(2)
noperation(ts)=noperation(ts)+1
norb=nk*nspin*nbnd
norm1=DSQRT(m1_loc(1,iat)**2+m1_loc(2,iat)**2)
norm_acc=dnrm2(3*nat,acc(:,:),1)
norm=DSQRT(m1_loc(1,iat)**2+m1_loc(2,iat)**2+m1_loc(3,iat)**2)
norm=norm+DBLE(vet(ldm1+m2,m1))**2+AIMAG(vet(ldm1+m2,m1))**2
norm=SQRT(a1(1)**2+a1(2)**2+a1(3)**2)
norm=SQRT(ax(1)**2+ax(2)**2+ax(3)**2)
norm_step=dnrm2(3*nat,step,1)
norm_tot=SQRT(m_loc(1,iat)**2+m_loc(2,iat)**2+m_loc(3,iat)**2)
norm_xy=SQRT(m_loc(1,iat)**2+m_loc(2,iat)**2)
npairs=npairs+1
nphi=rad%lmax+1+MOD(rad%lmax,2)
np=np+1
npol=nspin-1
nppstr_max=nk1*nk2*nk3
npt=ncpu_start+n
npt=nmaxpt+1
npt=npt+1
nptot=nmax(1)*nmax(2)*nmax(3)
npw0=ngk(kpoint-1)
npw=npw+1
npwt=n_plane_waves(ecutwfc/tpiba2,nks,xk,gt,ngmt)
npwx_g=NINT(fpi/3.0_dp*SQRT(ecutwfc)**3/(tpi**3/omega)/g_fact)
npwx_l=npwx_g/nproc_bgrp
nq1=nqx(1)+idx*sign_
nq2=nqx(2)+idx*sign_
nq3=nqx(3)+idx*sign_
nqhalf_dble(1:3)=(/DBLE(nq1)*0.5_DP,DBLE(nq2)*0.5_DP,DBLE(nq3)*0.5_DP/)
NQR=nrxxs*npol
nqs_inv=1.0/nqs
nqs=nq1*nq2*nq3
nqx=INT((SQRT(ecutwfc)/dq+4)*cell_factor)
nqx=(/nq1,nq2,nq3/)
nqxq=INT(SQRT(ecutrho)/dq+4)
nqxq=int(((sqrt(ecutrho)+qnorm)/dq+4)*cell_factor)
nqxq=INT(((SQRT(ecutrho)+qnorm)/dq+4)*cell_factor)
n=(rad%lmax+2)/2
nrec_new=NINT(MAX(fact0*DBLE(CURSOR%nrec),fact1*DBLE(nrec)))
nrm=nrm+1
nr=nr+1
nrot=2*nrot
nrot=nrot-1
nrot=nrot+1
nrt=(nrxxs+nblock-1)/nblock
nrws=ii-1
nrxxs=dfftt%nnr*npol
ns(1)=(n+m*cosin)/2.d0
ns(2)=m*esin/2.d0
ns(3)=m*CONJG(esin)/2.d0
ns(4)=(n-m*cosin)/2.d0
nsending(im)=nsending(im)+1
nsg(m1,m1,viz,na,is)=totoc/2.d0/ldim
nsg(m1,m1,viz,na,majs)=totoc/ldim
nsg(m1,m1,viz,na,mins)=(totoc-ldim)/ldim
nsgnew(:,:,:,:,:)=deltansg(:,:,:,:,:)+nsg(:,:,:,:,:)
nsg=nsg+alphamix*deltansg
nsg(:,:,:,:,:)=nsg(:,:,:,:,:)-gamma0*dv_nsg(:,:,:,:,:,i)
ns(majs)=totoc/ldim
ns(mins)=(totoc-ldim)/ldim
ns=ns-1
n_spin=n_spin+ns(m1,m1,is,na)
n_starting_wfc=n_starting_wfc+1
n_starting_wfc=n_starting_wfc+2*l+1
NStart=sum(CPUPts(0:me_bgrp-1))
NStart=SUM(CPUPts(0:me_bgrp-1))
nst=istep-1
nstring=nks/nppstr
nstring=nks/nppstr_3d(pdir)
nsuma(is)=nsuma(is)+rho%nsb(m1,m1,is,na)
nsuma(is)=nsuma(is)+rho%ns(m1,m1,is,na)
nsuma(is)=nsuma(is)+rho%ns_nc(m1,m1,i,na)
nsum=nsum+lambda(m1)
nsum=nsum+nsuma(1)+nsuma(2)
nsum=nsum+nsuma(is)
nsym_is=nsym_is+1
nsym_na=nsym_na+1
nsym_ns=nsym_ns-1
nsym_ns=nsym_ns+1
nsym=nsym+1
ntcheck=nstep+1
ntetra=6*nk1*nk2*nk3
nt=nt+1
ntot=NBands*(NBands-1)/2+NBands*(nbnd-NBands)
n_tot=n_tot+ns(m1,m1,1,na)+ns(m1,m1,4,na)
n_tot=n_tot+ns(m1,m1,is,na)
ntry=ntry+1
num_accept=num_accept+1
numblock=(n+blocksize-1)/blocksize
numblock=(ngms+blocksize-1)/blocksize
numblock=(npw_+blocksize-1)/blocksize
numblock=(npw+blocksize-1)/blocksize
nume=(((r(4)*ym2+r(3))*ym2+r(2))*ym2+r(1))*ym2+r(0)
num_uc=(2*sc_size+1)**3.0d0
nunits=nunits-1
nunits=nunits+1
nused=nused+1
nvec=(2*imax+1)*(2*jmax+1)*(2*kmax+1)
nvec=nvec+1
nwfc=2*Hubbard_l(nt)+1
nwfc=nwfc+1
nwordatwfc=npwx*natomwfc*npol
nwordwfc=nbnd*npwx*npol
nwordwfcU=npwx*nwfcU*npol
nwordwf=nwan*npwx*npol
nwordwpp=nwan*nbnd*npol
nx_el(i+nks,:)=nx_el(i,:)+nks
nxtot=dfftt%nr1x*dfftt%nr2x*dfftt%nr3x
nxxs=dfftt%nr1x*dfftt%nr2x*dfftt%nr3x
nxxs=nr1x*nr2x*nr3x
nzero=nzero+1
nz_l=dfftp%nr3/2+1+esm_nfit
nz_r=dfftp%nr3/2+1-esm_nfit
obn=1.d0/sqrt(norm2)
occ(1:nbnd,ik)=wg(1:nbnd,ik)/wk(ik)
off1=ldim_std2+1
off1=ldim_std2+2*Hubbard_l_back(nt2)+2
off1=offsetU_back1(na)+m1-2*Hubbard_l_back(nt)-1
off1=offsetU_back(na1)-2*Hubbard_l(nt1)-1
off1=offsetU_back(na1)+m1-2*Hubbard_l(nt1)-1
off1=offsetU_back(na)+m1
off1=offsetU(na1)+m1
off2=2*Hubbard_l(nt1)+1
off2=ldim_std1+2*Hubbard_l_back(nt1)+1
off2=offsetU_back1(na)+m2-2*Hubbard_l_back(nt)-1
off2=offsetU_back(eq_na2)+m2-2*Hubbard_l(nt2)-1
off2=offsetU_back(equiv_na2)-2*Hubbard_l(nt2)-1
off2=offsetU_back(na)+m2
off2=offsetU(eq_na2)+m2
off3=2*Hubbard_l(nt2)+1
off3=ldim_std2+2*Hubbard_l_back(nt2)+1
off=ldim_std1+1
off=ldim_std1+2*Hubbard_l_back(nt1)+2
offpm=offsetU(alpha)+m1
offpm=offsetU_back(alpha)+m1-ldim_std
offset(:)=-99
offset=(iblock-1)*blocksize
oh=ih-m_i+m_o
okb=ijkb0+oh
okb=indv_ijkb0(ia)+oh
old_dist(iim)=old_dist(iim)+dx*dx+dy*dy+dz*dz
old_total_dist=old_total_dist+old_dist(iim)
omega=chi*omega
omega_inv=1.0/omega
only_init=(TRIM(what)=='config-init')
opt_boxtot_unbalance=boxtot_unbalance;opt_nn=nn;my_color=color(me_bgrp+1)
orbital(:,ibnd+idx-1)=orbital(:,ibnd+idx-1)+tg_psic(dffts%nl(igk_k(:,ik_))+ioff)
orbital(:,ibnd+idx-1)=tg_psic(dffts%nl(igk_k(:,ik_))+ioff)
orbital(ig,ibnd)=orbital(ig,ibnd)+psic(dffts%nl(igk_k(ig,ik_)))
orbital(j,ibnd+1)=cmplx(aimag(fp),-dble(fm),kind=DP)
orbital(j,ibnd+1)=orbital(j,ibnd+1)+cmplx(aimag(fp),-dble(fm),kind=DP)
orbital(j,ibnd+idx-1)=cmplx(dble(fp),aimag(fm),kind=DP)
orbital(j,ibnd+idx-1)=orbital(j,ibnd+idx-1)+cmplx(dble(fp),aimag(fm),kind=DP)
orbital(j,ibnd+idx-1)=orbital(j,ibnd+idx-1)+tg_psic(dffts%nl(igk_k(j,1))+ioff)
orbital(j,ibnd+idx-1)=tg_psic(dffts%nl(igk_k(j,1))+ioff)
orbital(j,ibnd+idx)=cmplx(aimag(fp),-dble(fm),kind=DP)
orbital(j,ibnd+idx)=orbital(j,ibnd+idx)+cmplx(aimag(fp),-dble(fm),kind=DP)
orbital(j,ibnd)=orbital(j,ibnd)+cmplx(dble(fp),aimag(fm),kind=DP)
orbital(j,ibnd)=orbital(j,ibnd)+psic(dffts%nl(igk_k(j,1)))
outdir=outdir(1:i)//TRIM(image_label)//'/'
outdir='tmp'//TRIM(image_label)//'/'
output_obj%FCP_force=fcp_mu-ef
overlap(i,j)=overlap(i,j)+e(k)*work(i,k)*DCONJG(work(j,k))
overlap(k,1)=(dble(xbp(k,1))**2+aimag(xbp(k,1))**2)/(xbb(k,1)*xpp(k,1))
overlap(k,2)=(dble(xbp(k,2))**2+aimag(xbp(k,2))**2)/(xbb(k,2)*xpp(k,2))
Overlap=Overlap+ABS(rbuff)*vol
Overlap=Overlap+rbuff*vol
ow1=offsetU(na)+m1
ow2=offsetU(na)+m2
p1=((2._DP*j-1._DP)*z*p2-(j-1._DP)*p3)/j
p1(i,j)=alat*p(i,j)
p(1)=p(1)/DBLE(natom)
p(1)=p(1)+v(1,na)
p(2)=p(2)/DBLE(natom)
p(2)=p(2)+v(2,na)
p(3)=p(3)/DBLE(natom)
p(3)=p(3)+v(3,na)
par(1)=v0(npt/2)
par(4)=-0.01d0
parameter(eps=1.0d-6)
parameter(eps=1.0d-6,nx=2)
parameter(mbig=1000000000,mseed=161803398,mz=0,fac=1.d-9)
pbm=pref_bm/pref
pdl_elec_dw=pdl_elec_dw-nint(pdl_elec_dw)
pdl_elec_dw=phidw/tpi
pdl_elec(istring)=phik(istring)/tpi
pdl_elec=pdl_elec*2._DP
pdl_elec_tot=pdl_elec_tot-nint(pdl_elec_tot)
pdl_elec_tot=pdl_elec_up+pdl_elec_dw
pdl_elec_up=pdl_elec_up-nint(pdl_elec_up)
pdl_elec_up=phiup/tpi
pdl_ion(na)=pdl_ion(na)-1.0_dp*nint(pdl_ion(na)/1.0_dp)
pdl_ion(na)=pdl_ion(na)-2.0_dp*nint(pdl_ion(na)/2.0_dp)
pdl_ion(na)=pdl_ion(na)+zv(ityp(na))*tau(i,na)*gpar(i)
pdl_ion_tot=pdl_ion_tot-1.0d0*nint(pdl_ion_tot/1.0d0)
pdl_ion_tot=pdl_ion_tot-2.d0*nint(pdl_ion_tot/2.d0)
pdl_tot=pdl_elec_tot+pdl_ion_tot
phase=CMPLX(cos(arg),-sin(arg),kind=DP)
phase=CMPLX(COS(arg),-SIN(arg),KIND=DP)
phase_d(na)=CMPLX(COS(arg),-SIN(arg),KIND=DP)
phases(:)=el_pol(:)/fc_pol(:)
phase=tpi*(g(1,ig)*x0(1)+g(2,ig)*x0(2)+g(3,ig)*x0(3))
phi=2.d0*pi
phi=ACOS(m1_loc(1,iat)/norm1)
phi=ACOS(m_loc(1,iat)/norm_xy)
phi=dphi*DBLE(m-1)
phik_ave=phik_ave+wstring(istring)*phik(istring)
phik(istring)=phik(istring)-tpi*nint(phik(istring)/tpi)
phik(istring)=theta0+dtheta
phi=phi*180.d0/pi
phi=tpi*randy()
pi=4.d0*ATAN(1.d0)
p(i)=birch(v0(i)/par(1),par(2),par(3),par(4))
p(i)=keane(v0(i)/par(1),par(2),par(3),par(4))
pim(1,1)=pim(1,1)-press
pim(2,2)=pim(2,2)-press
pim(3,3)=pim(3,3)-press
pim(i,j)=pim(i,j)+avec(i,l)*piml(l,m)*avec(j,m)
pim(i,j)=(pim(i,j)+frr(i,j))/vcell
piml(i,j)=piml(i,j)+atmass(nt)*ratd(i,na)*ratd(j,na)
p%k(iw,ib)=p%k(iw,ib)+q(iw,ih,na)*becp%k(ikb,ib)
pola_ion=pola_ion+zv(ityp(na))*tau(pdir,na)*alat*DSQRT(2.d0)
pola=pola*DSQRT(2.d0)/tpiba*dkfact
pola=pola+wstring(istring)*AIMAG(LOG(zeta_loc))
posi(1)=DBLE(i0)/DBLE(dfftp%nr1)
posi(2)=DBLE(j0)/DBLE(dfftp%nr2)
posi(3)=DBLE(k0)/DBLE(dfftp%nr3)
posi(:)=i*inv_nr1*at(:,1)+j*inv_nr2*at(:,2)+k*inv_nr3*at(:,3)-tau(:,ia)
posi(:)=i*inv_nr1s*at(:,1)+j*inv_nr2s*at(:,2)+k*inv_nr3s*at(:,3)-tau_ia(:)
posi(:)=posi(:)*alat
posi(:)=posi(:)-ANINT(posi(:))
posi(:)=posi(:)-tau(:,ia)
pos=RESHAPE(tau,(/3*nat/))
pos(:)=RESHAPE(tau,(/dim/))*alat
pot_order=-1
potstat_contr_tgt=ef*tot_charge/e2
power_0(ijv,0)=power_0(ijv,0)+power_0(ijv,l+1)
power_q(ijv,0)=power_q(ijv,0)+power_q(ijv,l+1)
power_q(ijv,l+1)=power_q(ijv,l+1)+q*q*dq*qrad_q(iq,ijv,l+1)**2
power_q(nb)=power_q(nb)+qi*qi*dq*tab0(iq,nb)*tab0(iq,nb)
power_q(nb)=power_q(nb)+qi*qi*dq*tab(iq,nb)*tab(iq,nb)
power_qs(ijv,0)=power_qs(ijv,0)+power_qs(ijv,l+1)
power_qs(:,:)=power_qs(:,:)*8.0_DP/fpi
power_r(ijv,0)=power_r(ijv,0)+power_r(ijv,l+1)
power_rs(ijv,0)=power_rs(ijv,0)+power_rs(ijv,l+1)
pp=n*(z*p1-p2)/(z*z-1._DP)
precond_grad(:)=precond_grad(:)*MIN(pg_norm,max_pg_norm)
precond_grad(:)=precond_grad(:)/pg_norm
pref=(0.d0,-1.d0)**l
pref=(0.d0,1.d0)**l
pref=(0.d0,-1.d0)**nhtol(ih,nt)*phase
pref=(0._DP,-1._DP)**l
pref=2._dp*usym
pref=becsum(ijh,i%a,ispin)*ap(lm,nhtolm(ih,i%t),nhtolm(jh,i%t))
pref_bm=omega/4.0_dp/(tpi**3)*tpiba
pref=CONJG(bec_evcel%k(jkb,mb))*pref0(1)
pref=e2*fpi/DBLE(2*l+1)
pref=fpi/sqrt(omega)
pref=fpi/SQRT(omega)
pref=pref+CONJG(bec_evcel%nc(jkb,1,mb))*pref0(1)
pref=pref+CONJG(bec_evcel%nc(jkb,1,mb))*pref0(2)
pref=pref+CONJG(bec_evcel%nc(jkb,2,mb))*pref0(3)
pref=pref+CONJG(bec_evcel%nc(jkb,2,mb))*pref0(4)
prefr=fpi/omega
pref=ry_si*el_si/hbar_si/4.0_dp/(tpi**3)*tpiba/bohr_si
press_new=ry_kbar*(nat*temp_new/ry_to_kelvin+virial)/omega
press_=press/ry_kbar
prev=prev+lda_exx(iproc+1,ik)
prev=prev+lda_local((iegrp-1)*nproc_egrp+iproc+1,ik)
prev=prev+lda_local(j,current_ik)
p%r(iw,ib)=p%r(iw,ib)+q(iw,ih,na)*becp%r(ikb,ib)
prod=0.5_DP*prod
prod=prod+m(ipol)*drho_rad(k,ipol+1)
projauxc(m1,:)=proj%k(off1+m1,:)
projauxc(m2,:)=proj%k(off2+m2,:)
projauxr(m1,:)=DBLE(proj%r(off1+m1,:))
projauxr(m2,:)=DBLE(proj%r(off2+m2,:))
proj(:,start_band(igroup):start_band(igroup)+nsize-1)=aux_proj(:,:)
ps1d1=ps1*dvkb_d(i,ikb,1)
ps1d2=ps1*dvkb_d(i,ikb,2)
ps1d3=ps1*dvkb_d(i,ikb,3)
ps1(:,is,js)=drho_rad(k,is)*g(i%t)%rm2(k)*grad(k,:,js)
ps2d1=ps2*dvkb_d(i,ikb,1)
ps2d2=ps2*dvkb_d(i,ikb,2)
ps2d3=ps2*dvkb_d(i,ikb,3)
ps2(:,is,js,ks)=ps(is,js)*grad(k,:,ks)
ps=becp%k(ikb,ibnd)*deeq(ih,ih,na,current_spin)
ps=becp%r(ikb,ibnd_loc)*deff(ih,ih,na)
psd1=ps*dvkb_d(i,ikb,1)
psd2=ps*dvkb_d(i,ikb,2)
psd3=ps*dvkb_d(i,ikb,3)
ps_d(ikb)=deff_d(ih,ih,na)*CMPLX(becpr_d(ikb,ibnd_loc))
psi(1:npwx*npol,1:nbnd)=evc(1:npwx*npol,1:nbnd)
psic(1:nrxxs)=kedtau(1:nrxxs,current_spin)*psic(1:nrxxs)
psic(box_beta(box_ir))=psic(box_beta(box_ir))+box_psic(box_ir)
psic_d(1:dffts%nnr*group_size)=(0.d0,0.d0)
psic_d(1:dffts%nnr*howmany)=(0.d0,0.d0)
psic_d(1:nnr*group_size)=(0.d0,0.d0)
psic_d(dffts_nl_d(igk_k_d(j,current_k))+idx*v_siz)=psi_d(j,ibnd+idx)
psic_d(dffts_nl_d(igk_k_d(j,ik))+i*nnr)=evc_d(j,ibnd+i)
psic_d(dffts_nl_d(j)+idx*v_siz)=psi_d(j,ibnd+2*idx)+(0.0d0,1.d0)*psi_d(j,ibnd+2*idx+1)
psic_d(dffts_nl_d(j)+pack_size*v_siz)=psi_d(j,ibnd+group_size-1)
psic_d(dffts_nl_d(j))=psi_d(j,ibnd)+(0.0d0,1.d0)*psi_d(j,ibnd+1)
psic_d(dffts_nlm_d(j))=conjg(psi_d(j,ibnd)-(0.0d0,1.d0)*psi_d(j,ibnd+1))
psic_d(dffts_nlm_d(j)+idx*v_siz)=conjg(psi_d(j,ibnd+2*idx)-(0.0d0,1.d0)*psi_d(j,ibnd+2*idx+1))
psic_d(dffts_nlm_d(j)+pack_size*v_siz)=conjg(psi_d(j,ibnd+group_size-1))
psic(dffts%nl(1:np))=ci*kplusg(1:np)*psip(1:np,im)
psic(dffts%nl(igk_k(j,1)))=orbital(j,ibnd)+(0.0d0,1.d0)*orbital(j,ibnd+1)
psic(dffts%nl(j))=psi(j,ibnd)+(0.0d0,1.d0)*psi(j,ibnd+1)
psic(dffts%nlm(1:np))=-ci*kplusg(1:np)*CONJG(psip(1:np,im))
psic(dffts%nlm(igk_k(j,1)))=conjg(orbital(j,ibnd)-(0.0d0,1.d0)*orbital(j,ibnd+1))
psic(dffts%nlm(j))=conjg(psi(j,ibnd)-(0.0d0,1.d0)*psi(j,ibnd+1))
psic(dffts%nnr+1:)=0.0_dp
psic_d(j+idx*v_siz)=psic_d(j+idx*v_siz)*v_tmp
psic_d(j)=psic_d(j)*v_d(j)
psic_d(nl_d(j))=CMPLX(0._DP,kplusg,kind=DP)*evc_d(j,ibnd)
psic_d(:)=(vnew%of_r(:,isup)+vnew%of_r(:,isdw))*0.5d0
psic_exx(dfftt%nl(ig))=(0._DP,1._DP)*evc_exx(ig,1)
psic_exx(dfftt%nl(ig))=evc_exx(ig,ibnd-ibnd_loop_start+evc_offset+1)
psic_exx(dfftt%nlm(ig))=(0._DP,1._DP)*CONJG(evc_exx(ig,1))
psic_exx(dfftt%nlm(ig))=CONJG(evc_exx(ig,ibnd-ibnd_loop_start+evc_offset+1))
psic(ig)=vltot(ig)+vr(ig,is)
psic(ir)=0.5d0*(vxc(ir,1)+vxc(ir,2))
psic(ir)=CMPLX(0.5_DP*(vxc(ir,1)+vxc(ir,2)))
psic(ir)=psic(ir)*alpha(ir)
psic(j)=psic(j)+psic_temp(j)*vrs(j,current_spin)
psic(j)=psic(j)*v(j)
psic(j)=vrs(j,current_spin)*psic(j)
psic(map_igk_to_fft(1:ngtot))=(psi1(1:ngtot)+(0.d0,1.d0)*psi2(1:ngtot))*gamma(1:ngtot)
psic(map_igk_to_fft(1:ngtot))=psi(1:ngtot)*gamma(1:ngtot)
psic(map_minus_igk_to_fft(1:ngtot))=conjg((psi1(1:ngtot)-(0.d0,1.d0)*psi2(1:ngtot)))*gamma(1:ngtot)
psic(map_minus_igk_to_fft(1:ngtot))=conjg(psi(1:ngtot))*gamma(1:ngtot)
psic_nc_d(dffts_nl_d(igk_k_d(j,current_k)),ipol)=psi_d(j+(ipol-1)*lda,ibnd)
psic_nc(dffts%nl(igk_k(ig,ik)),2)=evc(ig+npwx,ibnd)
psic_nc(dffts%nl(igk_k(j,current_k)),ipol)=psi(j+(ipol-1)*lda,ibnd)
psic_nc_d(j,:)=psic_nc_d(j,:)*v_d(j,1)
psic_nc(j,:)=psic_nc(j,:)*v(j,1)
psic(:)=(vnew%of_r(:,isup)+vnew%of_r(:,isdw))*0.5d0
psi_d(1:npwx*npol,1:nstart)=psi_h(1:npwx*npol,1:nstart)
psi_d(i,ipol,k)=psi_d(i,ipol,k)/denm
psi_gather(lda_offset+ig,im)=psi(npwx_local*(ipol-1)+ig,im)
psi_h(1:lda*npol,1)=psi_d(1:lda*npol,1)
psi_h(1:npwx*npol,1:nstart)=psi_d(1:npwx*npol,1:nstart)
psi_h(1:npwx*npol,1)=psi_d(1:npwx*npol,1)
psi(i,ipol,k)=psi(i,ipol,k)/denm
ps(indv_ijkb0(na)+1:indv_ijkb0(na)+nh(nt),1:m)=(0.0_DP,0.0_DP)
psi_out(ig+npwx_exx*(ipol-1),im)=comm_recv(iproc+1,current_ik)%msg(i,ipol,im)
psi_rhoc_work_d(dfftt__nl(ig))=psi_d(ig,ii)+(0._DP,1._DP)*psi_d(ig,ii+1)
psi_rhoc_work_d(dfftt__nlm(ig))=conjg(psi_d(ig,ii)-(0._DP,1._DP)*psi_d(ig,ii+1))
psi_rhoc_work(dfftt%nl(ig))=psi(ig,ii)+(0._DP,1._DP)*psi(ig,ii+1)
psi_rhoc_work(dfftt%nlm(ig))=CONJG(psi(ig,ii)-(0._DP,1._DP)*psi(ig,ii+1))
psi_rhoc_work_d(ir)=exxbuff_d(ir,exxbuff_index,ikq)*temppsic_aimag_d(ir)/omega
psi_rhoc_work_d(ir)=exxbuff_d(ir,exxbuff_index,ikq)*temppsic_dble_d(ir)/omega
psi_rhoc_work(ir)=exxbuff(ir,exxbuff_index,ikq)*temppsic_aimag(ir)/omega
psi_rhoc_work(ir)=exxbuff(ir,exxbuff_index,ikq)*temppsic_DBLE(ir)/omega
ps(is,js)=ps(is,js)+grad(k,ipol,is)*dgrad(k,ipol,js)
psi_source_exx(ig+prev_lda_egrp(ik),my_egrp_id+1)=i-1
psi_source(ig+prev_lda_exx(ik))=i-1
p_smc=T_ji*boltzman_ji/T_ij
ps='Norm-conserving'
ps="Projectoraugmented-wave"
ps=ps+becp%k(jkb,ibnd)*deff(ih,jh,na)
ps=ps+becp%r(jkb,ibnd_loc)*deff(ih,jh,na)
psum=ABS(ns(m1,m2,i,na)-CONJG(ns(m2,m1,j,na)))
psum=ABS(ns(m1,m2,is,na)-ns(m2,m1,is,na))
pv(i,j)=cell_f*pv(i,j)
pv(i,j)=pv(i,j)/celldm(1)
pv=p*omega
pv=p*vcell
pwx=px*wx*0.5d0
pwx=px*wx*0.5_DP
px=q_d(ig)/dq-DBLE(INT(q_d(ig)/dq))
px=qg(ig)/dq-INT(qg(ig)/dq)
px=q(ig)/dq-INT(q(ig)/dq)
px=qm-int(qm)
px=qm-INT(qm)
px=qt/dq-DBLE(INT(qt/dq))
px=qt/dq-INT(qt/dq)
px=rv_d/dq-int(rv_d/dq)
q(1)=xk(1,current_k)-xkq(1)+g(1,ig)
q(1)=xk(1,current_k)-xkq(1)+g_exx(1,ig)
q(1)=xq(1)+g(1,ig)
q(2)=xk(2,current_k)-xkq(2)+g(2,ig)
q(2)=xk(2,current_k)-xkq(2)+g_exx(2,ig)
q(2)=xq(2)+g(2,ig)
q2x=(SQRT(SUM(k(:)**2))+SQRT(ecut))**2
q(3)=xk(3,current_k)-xkq(3)+g(3,ig)
q(3)=xk(3,current_k)-xkq(3)+g_exx(3,ig)
q(3)=xq(3)+g(3,ig)
Qa=(-1.0d0)*zv(ityp(ia))
q_ae(iwfc+m,jh,na)=qq_ae(jb,ib,nt)
Qb=(-1.0d0)*zv(ityp(ib))
qb=qb+tabp(na)%qr(ir,ijh)*becsum(ijh,na,is)
q_d(ig)=gk_d(1,ig)**2+gk_d(2,ig)**2+gk_d(3,ig)**2
q_d(ig)=SQRT(q_d(ig))*tpiba
q_dk(iv,jv,np)=omega*pref
q_dk(jv,iv,np)=omega*pref
q_dkp(iv,jv,np)=omega*pref
q_dkp(jv,iv,np)=omega*pref
q_=dq*(iq+0.5d0)
q=dq*(iq-1)
qeb=qeb+tabp(na)%qr(ir,ijh)*ebecsum(ijh,na,is)
qe_cosh=0.5d0*(EXP(r)*CMPLX(c,s,KIND=DP)+EXP(-r)*CMPLX(c,-s,KIND=DP))
qe_erfc_d=1.0_DP-qe_erf_d(ax)
qe_erf_d=1.0_DP-qe_erfc_d(x)
qe_exp=EXP(r)*CMPLX(c,s,KIND=DP)
qe_sinh=0.5d0*(EXP(r)*CMPLX(c,s,KIND=DP)-EXP(-r)*CMPLX(c,-s,KIND=DP))
qg_d(ig)=sqrt(qg_d(ig))*tpiba
qg_d(ind,ig)=qg_d(ind,ig)+sig*ylmk0_d(ig,lp)*work
qg(ig)=gk(1,ig)**2+gk(2,ig)**2+gk(3,ig)**2
qgig=qgig*CMPLX(COS(phase),SIN(phase),kind=DP)
qg(ig)=SQRT(qg(ig))*tpiba
qg(ind,ig)=qg(ind,ig)+sig*ylmk0(ig,lp)*work
qg=qg+sig*ylm_k(lp)*qr(ivs,jvs,l,is)
q(ig)=gk(1,ig)**2+gk(2,ig)**2+gk(3,ig)**2
q(ig)=SQRT(q(ig))*tpiba
q(:,ig)=xk(:)-xkq(:)+g(:,ig)
qi=(iq-1)*dq
q=(iq-1)*dq
qm1_d(iu)=1._DP/q
qm1(i)=1.D0/q
qm1(ig)=1.d0/q
qmod_d(ig)=SQRT(gg_d(ngm_s+ig-1))*tpiba
qmod(ig)=SQRT(gg(ngm_s+ig-1))*tpiba
qmod(ig)=SQRT(qq(ig))*tpiba
qm=qmod_d(ig)*dqi
qm=qmod(ig)*dqi
qnorm=MAX(qnorm,SQRT(SUM((xk(:,ik)-xkq_collect(:,iq))**2)))
qnorm=qnorm*tpiba
q_ps(iwfc+m,jh,na)=qq_ps(jb,ib,nt)
qq_at(:,:,ia)=qq_at(:,:,ia)*omega/(dfftp%nr1*dfftp%nr2*dfftp%nr3)
qq=-dipole_el(0)+zvtot
qq(ig)=SUM(q(:,ig)**2)
qq_nt(ih,jh,nt)=omega*DBLE(qgm(1))
qq_nt(jh,ih,nt)=omega*DBLE(qgm(1))
qq=(q(1)**2+q(2)**2+q(3)**2)
qq=(q(1)*q(1)+q(2)*q(2)+q(3)*q(3))
qq=q_*q_
qqr=qqr+REAL(qgig)*vol
qq_so(ih,jh,1,nt)=omega*DBLE(qgm(1))
q=q*tpiba
qq_track(ig)=SUM(q(:)**2)*tpiba2
qq=(zion-qqr)
qrad(:,:,:,nt)=qrad(:,:,:,nt)*prefr
qrad(:,:,:,:)=qrad(:,:,:,:)*omega_old/omega
qr_k(iv,jv,l+1,np)=qrk*fpi/omega
qr_k(jv,iv,l+1,np)=qr_k(iv,jv,l+1,np)
qs=1._DP/6._DP*(lap-2._DP*ds)
qsph=qsph+2.D0*REAL(qgig)*sinxx
q=SQRT(gk(1,ig)**2+gk(2,ig)**2+gk(3,ig)**2)
q=SQRT(gk_d(iu,1)**2+gk_d(iu,2)**2+gk_d(iu,3)**2)
q=SQRT(gk(i,1)**2+gk(i,2)**2+gk(i,3)**2)
q(:)=SQRT(q(:))*tpiba
q=SUM((k(:)+g(:,ng))**2)
qt=q(ig)*tpiba
qt=SQRT(q_d(ig))*tpiba
qt=SQRT(q(ig))*tpiba
quadrupole=-quadrupole_el+quadrupole_ion
q(:)=xk(:)-xkq(:)+g(:,ig)
q(:)=(xk(:)-xkq(:)+g(:,ig))*tpiba
R(:,1)=(/1._dp,0._dp,0._dp/)
r12=1.0d0/3.0d0
R(:,1)=(/cos(theta),0._dp,sin(theta)/)
R(:,1)=(/cos(theta),-sin(theta),0._dp/)
r(1,ii)=rho*COS(phi)
r1(i)=r1(i)+atom_pos(at1,j)*ss(j,i)
r1(i)=r1(i)-ft(i,p_sym)
r(1,ir)=sintheta*COS(phi)
r(:,1)=rho_rad(:,1)*g(i%t)%rm2(:)+rho_core(:)/DBLE(nspin_gga)
R(:,2)=(/0._dp,1._dp,0._dp/)
R(:,2)=(/0._dp,cos(theta),-sin(theta)/)
r2(ii)=r(1,ii)**2+r(2,ii)**2+r(3,ii)**2
r(2,ii)=rho*SIN(phi)
r2(i)=r2(i)-dx(i)
r2(i)=r2(i)-ft(i,p_sym)
r2(i)=r2(i)+x2(j)*ss(j,i)
r(2,ir)=sintheta*SIN(phi)
r(:,2)=rho_rad(:,2)*g(i%t)%rm2(:)+rho_core(:)/DBLE(nspin_gga)
R(:,2)=(/sin(theta),cos(theta),0._dp/)
r2=xx(1)*xx(1)+xx(2)*xx(2)+xx(3)*xx(3)
R(:,3)=(/0._dp,0._dp,1._dp/)
R(:,3)=(/0._dp,sin(theta),cos(theta)/)
R(:,3)=(/-sin(theta),0._dp,cos(theta)/)
ra(1:2)=tau(1:2,ia)*alat
rad%cotg_th(i)=COS(ath(i))/SIN(ath(i))
rad%dylmt(i,lm)=rad%dylmt(i,lm)+aux(i,lm)*vth(ipol)
radial_distr(idx,i)=radial_distr(idx,i)+1.D0
radial_distr(idx,:)=radial_distr(idx,:)/dist**2
radial_distr(:,:)=radial_distr(:,:)/DBLE(nstep)
radial_distr(:,:)=radial_distr(:,:)/(dmax/DBLE(hist_len))
radial_distr(:,:)=radial_distr(:,:)*omega/DBLE(nat)/fpi
rad%lmax=l+ls
rad%lm_max=(rad%lmax+1)**2
rad%wwylm(i,lm)=rad%ww(i)*rad%ylm(i,lm)
ram1=ram1+add
ram1=ram1+complex_size*ngm_l*(maxnij+3+nspin)
ram1=ram1+complex_size*ngm_l*(maxnij+nat*3)
ram1=ram1+complex_size*(ngm*nspin_mag+ngm_l*(maxnab+maxnij+1))
ram1=ram1+real_size*(maxnij*nat*3*nspin_mag)
ram1=real_size*ngm_l*(lmaxq*lmaxq+1)
ram1=real_size*(ngm*nspin_mag+ngm_l*(2*lmaxq*lmaxq+1))
ram1=real_size*(ngm*nspin_mag+ngm_l*(lmaxq*lmaxq+1))
ram1=real_size*roughestimate*(nh(nt)*(nh(nt)+1)/2)*3
ram=complex_size*nbnd*npol*npwx_l*nk
ram_=MAX(ram_,complex_size*ngm*27+real_size*dffts%nnr)
ram=ram+add
ram=ram+scf_type_size
ran3=mj*fac
ran_array_idx=ran_array_idx+1
ran_array(j)=mod(ran_array(j-KK)+ran_array(j-LL),1.d0)
ranstate(1+KK-LL:KK)=x(1:LL)
ranstate(1:KK-LL)=x(LL+1:KK)
ranstate(j)=mod(ran_array(N+j-KK)+ran_array(N+j-LL),1.d0)
ranstate(j)=mod(ran_array(N+j-KK)+ranstate(j-LL),1.d0)
rat1=at-1
r(:)=(at(:,1)/dfftp%nr1*i+at(:,2)/dfftp%nr2*j+at(:,3)/dfftp%nr3*k)
rat2=at-1
rat2d(k,na)=rat2d(k,na)-gmgd(k,m)*ratd(m,na)
ratd(k,na)=alpha*ratd(k,na)
ratd(k,na)=ratd(k,na)+dt*rat2di(k,na)
ratd(l,na)=rat2di(k,na)*sigma(k,l)/vcell+ratd(l,na)
ratd(:,na)=rat2d(:,na)*xx
ratd(:,na)=ratd(:,na)/xx
rat(k,na)=rat2d(k,na)*rati(k,na)-rat2di(k,na)*rat(k,na)
rat(k,na)=rat(k,na)/(rat2d(k,na)-rat2di(k,na))
rb(1:2)=tau(1:2,ib)*alat
rbuff=ABS(PsiI(ir)*CONJG(PsiJ(ir))/omega)
rbuff=DBLE(cbuff(1))**2+AIMAG(cbuff(1))**2
rbuff=DBLE(cbuff(2))**2+AIMAG(cbuff(2))**2
rbuff=DBLE(cbuff(3))**2+AIMAG(cbuff(3))**2
rbuff=PsiI(ir)*PsiJ(ir)/omega
rc=(SQRT(cx(i,j,3)/cx(i,j,2))+SQRT(cx(i,j,4)/cx(i,j,3))+(cx(i,j,4)/cx(i,j,2))**(0.25_DP))/3
rdispls(:)=3*rdispls(:)
rdispls(np)=rdispls(np-1)+recvcnt(np-1)
rdispls(:)=rdispls(:)/3
RDist(1)=(CenterPBC(1,jbnd)-CenterPBC(1,kbnd))/alat
RDist(2)=(CenterPBC(2,jbnd)-CenterPBC(2,kbnd))/alat
RDist(3)=(CenterPBC(3,jbnd)-CenterPBC(3,kbnd))/alat
RDist(:)=RDist(:)-ANINT(RDist(:))
r=dr*ir
realblocksize=MIN(ngms-offset,blocksize)
realblocksize=MIN(npw_-(iblock-1)*blocksize,blocksize)
recarg_dgg=recarg/gg(ng)
recarg=rhon*expcoeff*carg
recl=-1
record_length=start_dipole+rlen_dip-1
recv_bands=iexx_iend(iegrp)-iexx_istart(iegrp)+1
recvcnt(:)=3*recvcnt(:)
recvcnt(:)=recvcnt(:)/3
recvcount=lda_max_local*npol
remainder=group_size-2*pack_size
report_=-1
rest=nkstot/kunit-(nkstot/kunit/npool)*npool
rest=(nkstot-nks1*npool)/kunit
rest=(nkstot-nks*npool)/kunit
RESULT(ir,ibnd)=RESULT(ir,ibnd)+locbuff(ir,ibnd,ikq)*vc(ir)
RESULT(ir,ibnd)=RESULT(ir,ibnd)+x_occupation(kbnd,ikq)*locbuff(ir,kbnd,ikq)*vc(ir)
RESULT(ir,kbnd)=RESULT(ir,kbnd)+x_occupation(ibnd,ikq)*locbuff(ir,ibnd,ikq)*vc(ir)
RESULT(ir)=RESULT(ir)+vc(ir)*exxbuff(ir,ibnd,ikq)
rfree(1:nn,i)=upf(i)%rho_at(1:nn)/(fpi*rgrid(i)%r(1:nn)**2)
rfree(1:nn,i)=upf(i)%rho_at(1:nn)/(fpi*rgrid(i)%r(1:nn)**2)+upf(i)%paw%ae_rho_atc(1:nn)
rg=r*absg
rho(:,2)=rho(:,2)*cos(angle2(1))
rho(:,2)=rho(:,4)*sin(angle1(1))
rho(:,3)=rho(:,2)*sin(angle2(1))
rho(:,4)=rho(:,4)*cos(angle1(1))
rhoae=(rhoae+rhocor)/REAL(nspin,DP)
rhoaf=rhoae(n)/rhoat(n)
rhoaux(:,1)=(rho(:,1)+rho(:,2)+rho_core(:))/2.0_DP
rhoaux(:,1)=rho(:,1)+rho_core(:)
rhoaux(:,1)=rhoaux(:,1)+rho_core(:)/2.0_DP
rhoaux(:,2)=(rho(:,1)-rho(:,2)+rho_core(:))/2.0_DP
rhoaux(:,2)=rhoaux(:,2)+rho_core(:)/2.0_DP
rhoaux(:,is)=fac*rho_core(:)+rhoaux(:,is)
rhoaux(:,is)=(rho(:,1)+sgn(is)*rho(:,nspin0))*0.5_DP
rhoaux(:,is)=rhoaux(:,is)-fac*rho_core(:)
rhoc(:)=DBLE(locbuff(:,jbnd,ikq))+(0.0d0,1.0d0)*0.0d0
rhocg(1)=fpi*rhocg1/omega
rhocg1=fpi*rhocg1/omega
rhocg_d(igl)=fpi*rhocg_d(igl)/omega
rhocg(igl)=fpi*mysum/(3.d0*omega)
rhocg(igl)=fpi*rhocg1/omega
rhoc(ir)=CONJG(exxbuff(ir,ibnd,ikq))*exxbuff(ir,jbnd,current_jk)/omega
rhoc(ir)=CONJG(tempphic(ir))*temppsic(ir)/omega
rhoc(ir)=exxbuff(ir,exxbuff_index,ikq)*temppsic_aimag(ir)/omega
rhoc(ir)=exxbuff(ir,exxbuff_index,ikq)*temppsic_DBLE(ir)/omega
rhoc(ir)=locbuff(ir,ibnd,ikq)*locbuff(ir,ibnd,ikq)/omega
rhoc(ir)=locbuff(ir,ibnd,ikq)*locbuff(ir,kbnd,ikq)/omega
rhoc(n)=rhoc(n)+rrho
rhodw2=rho%of_r(ir,1)-rho%of_r(ir,2)
rhogaux(:,1)=(rhog(:,1)+rhog(:,2)+rhog_core(:))/2.0_DP
rhogaux(:,1)=rhog(:,1)+rhog_core(:)
rhogaux(:,2)=(rhog(:,1)-rhog(:,2)+rhog_core(:))/2.0_DP
rhogaux(:,is)=fac*rhog_core(:)+rhogaux(:,is)
rhogaux(:,is)=(rhog(:,1)+sgn(is)*rhog(:,nspin0))*0.5_DP
rhog_core(ng)=rhog_core(ng)+strf(ng,nt)*rhocg(igtongl(ng))
rhog_(isg,is)=mag(is-1)
rhog_(isg,is)=mag(is-1)*fact
rhog_(isg,is)=rhosum(is)*fact
rhogsum(:)=fac*rhog_core(:)+(rho%of_g(:,1)+sgn(is)*rho%of_g(:,nspin))*0.5D0
rhoin%kin_g=rhoin%kin_g+alphamix*(input_rhout%kin_g-rhoin%kin_g)
rhoin%of_g=rhoin%of_g+alphamix*(input_rhout%of_g-rhoin%of_g)
rhoion=SUM(zv(1:ntyp)*strf(ig,1:ntyp))/omega
rho(:,is)=rho(:,is)+psic(dfftp%nl(:))
rho(:,is)=rho(:,is)/(rho(:,1)+rho_core(:))
rho(:,is)=rho(:,is)*(rho(:,1)+rho_core(:))
rho%kin_r(:,is)=fact*abs(rho%of_r(:,is)*nspin)**(5.0/3.0)/nspin
rho_lm(1:i%m,lm)=rho_lm(1:i%m,lm)+pref*aug(1:i%m,nmb,l)
rho_lm(1:i%m,lm)=rho_lm(1:i%m,lm)+pref*pfunc(1:i%m,nb,mb)
rho_lm(ir,lm,ia)=rho_lm(ir,lm,ia)+(rho_lm_ae(ir,lm,is)-rho_lm_ps(ir,lm,is))*g(i%t)%rm2(ir)/iatom(ia)
rho_lm(j,lm,is)=rho_lm(j,lm,is)*savedv_lm(j,lm,is)
rholoc(1:nat)=auxrholoc(1:nat,1)*fact
rho_loc(k,1:nspin)=rho_rad(k,1:nspin)*g(i%t)%rm2(k)
rho_loc(k,1)=rho_loc(k,1)+rho_core(k)
rho_loc(k,1)=rho_rad(k,1)*g(i%t)%rm2(k)
rho_loc(k,2)=rho_rad(k,2)*g(i%t)%rm2(k)
rhoneg=0.5d0*rhoneg
rhoneg=omega*rhoneg/(dfftp%nr1*dfftp%nr2*dfftp%nr3)
rhoneg=rhoneg/(dfftp%nr1*dfftp%nr2*dfftp%nr3)
rhoneg=rhoneg+MIN(0.0_dp,DBLE(rhoa(ir,is)))
rhoneg=rhoneg+min(0.d0,rho_core(ir))
rhoneg(:)=rhoneg(:)*omega/(dfftp%nr1*dfftp%nr2*dfftp%nr3)
rhon=rhon+dipole(nt)*CONJG(strf(ng,nt))
rhon=rhon+zv(nt)*CONJG(strf(ng,nt))
rho%nsb(m1,m1,is,na)=totoc_b*0.1d0/2.d0/ldim
rho%nsb(m1,m1,is,na)=totoc_b*0.9d0/2.d0/ldim
rho%nsb(m1,m1,is,na)=totoc_b/2.d0/ldim
rho%ns(m1,m1,is,na)=totoc/2.d0/ldim
rho%ns(m1,m1,majs,na)=totoc/ldim
rho%ns(m1,m1,mins,na)=(totoc-ldim)/ldim
rho%ns_nc(m1,m1,1,na)=totoc/2.d0/ldim
rho%ns_nc(m1,m1,4,na)=totoc/2.d0/ldim
rho%ns_nc(m1,m2,2,na)=f(m1,ldim+m2)
rho%ns_nc(m1,m2,3,na)=f(ldim+m1,m2)
rho%ns_nc(m1,m2,4,na)=f(ldim+m1,ldim+m2)
rhon=SUM(zv(1:nsp)*CONJG(strf(ng,1:nsp)))
rho%of_g(:,1)=2.D0*rho%of_g(:,1)-work(:,1)
rho%of_g(:,1)=rho%of_g(:,1)-work(:,1)
rho%of_g(:,1)=rho%of_g(:,1)+work(:,1)
rho%of_g(dffts%ngm+1:,is)=(0.0_dp,0.0_dp)
rho%of_g(ir,1)=(rho%of_g(ir,1)+rho%of_g(ir,nspin))*vi
rho%of_g(ir,nspin)=rho%of_g(ir,1)-rho%of_g(ir,nspin)*vi*2._dp
rho%of_g=rho%of_g/charge*nelec
rho%of_g=rho%of_g+v%of_g
rho%of_r(:,1)=rho%of_r(:,1)+rho_core(:)
rho%of_r(ir,1)=rho%of_r(ir,1)-rho_core(ir)
rho%of_r(ir,1)=(rho%of_r(ir,1)+rho%of_r(ir,nspin))*vi
rho%of_r(ir,nspin)=rho%of_r(ir,1)-rho%of_r(ir,nspin)*vi*2._dp
rho%of_r=rho%of_r/charge*nelec
rhoout(ir,1)=0.5d0*(rho(ir,1)+amag)
rhoout(ir,1)=0.5d0*(rho(ir,1)+segni(ir)*amag)
rhoout(ir,2)=0.5d0*(rho(ir,1)-amag)
rhoout(ir,2)=0.5d0*(rho(ir,1)-segni(ir)*amag)
rhoout(ir)=rhoout(ir)+rho%of_r(ir,is)
rhoout(ir)=rhoout(ir)+ylm_posi(1,lm)*splint(g(i%t)%r(:),rho_lm(:,lm,ia),wsp_lm(:,lm),rqq)
rhoout_rad(k,ix,1)=0.5d0*(rho_rad(k,1)+segni_rad(k,ix)*mag)
rhoout_rad(k,ix,2)=0.5d0*(rho_rad(k,1)-segni_rad(k,ix)*mag)
rhoout(:)=(rho%of_r(:,1)+sgn(is)*rho%of_r(:,nspin))*0.5D0
rho_rad(:,1)=rho_rad(:,1)+0.5_DP*rho_core(:)
rho_rad(:,1)=rho_rad(:,1)+rho_core(:)
rho_rad(:,2)=rho_rad(:,2)+0.5_DP*rho_core(:)
rho_rad(k,1:nspin_mag)=rho_rad(k,1:nspin_mag)*g(i%t)%rm2(k)
rho_rad(k,1:nspin)=rho_rad(k,1:nspin)*g(i%t)%rm2(k)
rho(:,:)=rho(:,:)+aux(:,:)
rho(:,:)=rho(:,:)+aux_h(:,:)
rhor(irb,is)=rhor(irb,is)+tabp(ia)%qr(ir,ijh)*becsum(ijh,ia,is)
rhoscale=MAX(0.0_dp,upf(nt)%zp-starting_charge(nt))/upf(nt)%zp
rhosf=rho%of_r(n,ispin)/rhoat(n)
rho=SQRT(1._DP-z**2)
rhos=rhot/2._DP
rhostar=rhostar/CMPLX(omega)
rhostar=rhostar+CMPLX(zv_d(ityp_d(na)))*CMPLX(COS(arg),SIN(arg),KIND=DP)
rhostar=rhostar/omega
rhostar=rhostar+zv(ityp(na))*CMPLX(COS(arg),SIN(arg),KIND=DP)
rhosum(is)=rhosum(is)/nsym
rhosum(is)=rhosum(is)+rhog_(isg,is)
rhosum(is)=rhosum(is)+rhog_(isg,is)*fact
rhot=MAX(rho%of_r(i,1)+rho%of_r(i,2),1e-14_DP)
rhot=MAX(rho%of_r(i,ispin),1e-14_DP)
rhot(n)=MAX(rhot(n),1e-14_DP)
rhot(n)=rhot(n)+rrho
rhoup2=rho%of_r(ir,1)+rho%of_r(ir,2)
rhs=2._DP/3._DP*pi**(2._DP/3._DP)*(rhos)**(5._DP/3._DP)/qs
ri2=ri2*ri
ri=mod(ri,nr1)+1
rir(ir,isym)=ri+(rj-1)*nr1x+(rk-1)*nr1x*nr2x
ri=s(1,1)*i+s(1,2)*j+s(1,3)*k
ri=x(1)*x(1)+x(2)*x(2)+x(3)*x(3)
rj=mod(rj,nr2)+1
rj=s(2,1)*i+s(2,2)*j+s(2,3)*k
r(k,1)=rho_rad(k,1)*g(i%t)%rm2(k)+rho_core(k)
rk=mod(rk,nr3)+1
rk=s(3,1)*i+s(3,2)*j+s(3,3)*k
rl(1,m)=randy()-0.5d0
rl2(ir)=rl(1,ir)**2+rl(2,ir)**2+rl(3,ir)**2
rl(2,m)=randy()-0.5d0
rl(3,m)=randy()-0.5d0
rlen_rho=2*ngms*nspin
rl(:,ir)=xyz_beta(:,box0(ia)+ir)
rmat=at*alat
rmax0=4.d0/tmp/alat
rmax0=5.d0/tmp/alat
rmax2=rmax*rmax
rmax=4.0d0/salp/alat
rmax=4.0d0/SQRT(alpha)/alat
rmax=4.d0/SQRT(alpha)/alat
rmax=4.d0/SQRT(eta)/alat
rmax=5.d0/(SQRT(alpha)*alat)
rmaxcore2(i)=rgrid(i)%r(j)**2
rmaxg2(i)=rgrid(i)%r(nn)**2
rmax=(maxc6/ecut)**(1._DP/6._DP)
rmax=rmax+1.d0
rmax=rmax/alat
rmax=rmax*alat
rmexx=-rmexx
r_m(nt)=0.5d0*distmin(nt)/1.2d0*0.99d0
rmod=alat*rmod
rnd_idx=2*((ig-1)+((ipol-1)+(ibnd-1)*npol)*ngk_ik)+1
rnd_idx=2*((ig-1)+((ipol-1)+(ibnd-n_starting_atomic_wfc-1)*npol)*ngk_ik)+1
rnr2(:)=rnr(:)*rnr(:)
r(:,nr)=r(:,nr)*alat
rot_ylm(l+1,1)=(1.d0,0.d0)
rot_ylm(n,n1+1)=CMPLX(0.d0,1.0_dp/sqrt2,kind=DP)
rot_ylm(n,n1+1)=CMPLX(0.d0,-(-1.d0)**m/sqrt2,kind=DP)
rot_ylm(n,n1)=CMPLX(1.0_dp/sqrt2,0.d0,kind=DP)
rot_ylm(n,n1)=CMPLX((-1.d0)**m/sqrt2,0.0_dp,kind=DP)
roughestimate=anint(dble(dmbx*dmby*dmbz)*pi/6.D0)
rpsi=rpsi+C*tx(1,jx)*tx(2,jy)*tx(3,jz)
r=r*alat
rrl(m)=rl(1,m)**2+rl(2,m)**2+rl(3,m)**2
R=rot(angle(1)*grad_to_rad,angle(2)*grad_to_rad,angle(3)*grad_to_rad)
rr=SQRT(r2(n))*alat
rr=SQRT(r2(nr))*alat
rrt=r(1)*rws(1,ir)+r(2)*rws(2,ir)+r(3)*rws(3,ir)
rs=(3.D0*omega/fpi/nelec)**(1.D0/3.D0)
rvaux(m2,m1)=DBLE((v_nsg(m2,m1,viz,na1,current_spin)))*0.5d0
rvaux(m2,m1)=DBLE(v_nsg(m2,m1,viz,na1,current_spin))*0.5d0
rvdw(i,j)=a1*rc+a2
r_vec(k,1)=rho_rad(k,1)*g(i%t)%rm2(k)+co2
r_vec(k,2)=rho_rad(k,2)*g(i%t)%rm2(k)+co2
rws(0,ii)=0.5d0*rws(0,ii)
rws(i,ii)=atw(i,1)*ir+atw(i,2)*jr+atw(i,3)*kr
rxy=SQRT(r2(nr))*alat
rxyz=SQRT(r2(nr)+dtau(3)**2)*alat
s=0.5*(b-a)*(func(a,aaa,tmp,z1,z,zp,rxy)+func(b,aaa,tmp,z1,z,zp,rxy))
s=0.5*(s+(b-a)*sum/tnm)
s11=s11+tmpf*gk_d(i,1)*gk_d(i,1)
s21=s21+tmpf*gk_d(i,2)*gk_d(i,1)
s22=s22+tmpf*gk_d(i,2)*gk_d(i,2)
s31=s31+tmpf*gk_d(i,3)*gk_d(i,1)
s32=s32+tmpf*gk_d(i,3)*gk_d(i,2)
s33=s33+tmpf*gk_d(i,3)*gk_d(i,3)
safe_test=test;kktest=kktest-1
sa=omega/L
sat(m1,m1)=sat(m1,m1)+fxx*xij(m1)*xij(m1)
sat(m1,m2)=sat(m1,m2)+fxx*xij(m1)*xij(m2)
saux=-s
savedvi_lm(:,:,:,ipert)=savedvi_lm(:,:,:,ipert)+dv_lm(:,:,:)
savedv_lm(:,:,:)=savedv_lm(:,:,:)+v_lm(:,:,:)
savedvr_lm(:,:,:,ipert)=savedvr_lm(:,:,:,ipert)+dv_lm(:,:,:)
sawout=(0.5_DP-y/eopreg)*(1._DP-eopreg)
sawout=(-0.5_DP+(y-eopreg)/(1._DP-eopreg))*(1._DP-eopreg)
sca=at(1,i)**2.d0+at(2,i)**2.d0+at(3,i)**2.d0
sca=(el_pol(gdir)-el_pol_old(gdir))/fc_pol(gdir)
sca=(el_pol(i)-el_pol_old(i))/fc_pol(i)
scalar(:)=work(:)/DBLE(nsym)
sca_mat(1:nbnd,1:nbande)=sca_mat(1:nbnd,1:nbande)-sca_mat1(1:nbnd,1:nbande)
sca_mat(mb,nb)=sca_mat(mb,nb)+pref
sca=sca+CONJG(aux0_2(aux_g_mpi_ind(ig,mpime+1)))*aux_g_mpi(ig,mpime+1)
sca=sca+CONJG(aux0_2(aux_rcv_ind(ig,iproc)))*aux_rcv(ig,iproc)
sca=sca+CONJG(aux0(aux_g_mpi_ind(ig,mpime+1)))*aux_g_mpi(ig,mpime+1)
sca=sca+CONJG(aux0(aux_rcv_ind(ig,iproc)))*aux_rcv(ig,iproc)
sca=sca+CONJG(evcel(ig,nb))*aux_g(ig_l2g(igk1(ig)))
sca=SQRT(v(1)**2.d0+v(2)**2.d0+v(3)**2.d0)
sderiv(1)=sderiv(1)+C*d2tx(1,jx)*tx(2,jy)*tx(3,jz)
sderiv(2)=sderiv(2)+C*tx(1,jx)*d2tx(2,jy)*tx(3,jz)
sderiv(3)=sderiv(3)+C*tx(1,jx)*tx(2,jy)*d2tx(3,jz)
sderiv(4)=sderiv(4)+C*dtx(1,jx)*dtx(2,jy)*tx(3,jz)
sderiv(5)=sderiv(5)+C*tx(1,jx)*dtx(2,jy)*dtx(3,jz)
sderiv(6)=sderiv(6)+C*dtx(1,jx)*tx(2,jy)*dtx(3,jz)
sdewald=sdewald-sewald
sdewald=tpi*e2/4.d0/alpha*(charge/omega)**2
sdewald=tpi*e2/4._DP/alpha*(charge/omega)**2
s_diag_d(ig,1)=s_diag_d(ig,1)+sum_s
s_diag_d(ig,1)=s_diag_d(ig,1)+sum_s1
s_diag_d(ig,2)=s_diag_d(ig,2)+sum_s
s_diag_d(ig,2)=s_diag_d(ig,2)+sum_s4
s_diag(ig,ipol)=s_diag(ig,ipol)+ps2(ipol)*ar
sdispls(:)=3*sdispls(:)
sdispls(:)=sdispls(:)/3
segni(ir)=SIGN(1.0_DP,rho(ir,2)*ux(1)+rho(ir,3)*ux(2)+rho(ir,4)*ux(3))
segni_rad(k,ix)=SIGN(1.0_DP,m(1)*ux(1)+m(2)*ux(2)+m(3)*ux(3))
sendcnt(:)=3*sendcnt(:)
sendcnt(:)=sendcnt(:)/3
set_e=ind+1
sewald=fact*tpi*e2*EXP(-g2a)/g2*ABS(rhostar)**2
sewald=tpi*e2*EXP(-g2a)/g2*cutoff2D_d(ng)*ABS(rhostar)**2
sewald=tpi*e2*EXP(-g2a)/g2*cutoff_2D(ng)*ABS(rhostar)**2
sgn='-'
sgn(1)=1._dp;sgn(2)=-1._dp
sgn(1)=1._DP;sgn(2)=-1._DP
sgn=-1._DP
sgn=+1._DP
sgn1=sgn1-zgate
sgn(2)=-1.d0
shart=DBLE(psic_d(nl_d(ig))*CONJG(psic_d(nl_d(ig))))/g2
shart=psic(dfftp%nl(ig))*CONJG(psic(dfftp%nl(ig)))/g2
shart=psic_G(dfftp%nl(ng))*CONJG(psic_G(dfftp%nl(ng)))/g2*cutoff_2D(ng)
sig=(0.0_DP,-1.0_DP)**(l-1)
sig=(0.d0,-1.d0)**(l-1)
sig=-1.0d0
sig=-1.0_DP
sigav(i,j)=sigav(i,j)+sigma(l,i)*avecd(l,j)
sigma=-0.5_DP*sigma/omega
sigma(1,1)=avec(2,2)*avec(3,3)-avec(3,2)*avec(2,3)
sigma11=sigma11+spart*g_d(1,ng)*g_d(1,ng)
sigma(1,2)=avec(2,3)*avec(3,1)-avec(3,3)*avec(2,1)
sigma(1,3)=avec(2,1)*avec(3,2)-avec(3,1)*avec(2,2)
sigma1=sigma1+sigma_rid*g_d(1,ng)*g_d(1,ng)
sigma(2,1)=avec(3,2)*avec(1,3)-avec(1,2)*avec(3,3)
sigma21=sigma21+spart*g_d(2,ng)*g_d(1,ng)
sigma(2,2)=avec(3,3)*avec(1,1)-avec(1,3)*avec(3,1)
sigma2=2.D0*dt*kt
sigma22=sigma22+spart*g_d(2,ng)*g_d(2,ng)
sigma(2,3)=avec(3,1)*avec(1,2)-avec(1,1)*avec(3,2)
sigma2_d=sigma2_d+vkin_d(ir)*DBLE(crosstaus_d(ir,2,iss))
sigma2=sigma2+sigma_rid*g_d(1,ng)*g_d(2,ng)
sigma(3,1)=avec(1,2)*avec(2,3)-avec(2,2)*avec(1,3)
sigma31=sigma31+spart*g_d(3,ng)*g_d(1,ng)
sigma(3,2)=avec(1,3)*avec(2,1)-avec(2,3)*avec(1,1)
sigma32=sigma32+spart*g_d(3,ng)*g_d(2,ng)
sigma(3,3)=avec(1,1)*avec(2,2)-avec(2,1)*avec(1,2)
sigma33=sigma33+spart*g_d(3,ng)*g_d(3,ng)
sigma3_d=sigma3_d+vkin_d(ir)*DBLE(crosstaus_d(ir,3,iss))
sigma3=sigma3+sigma_rid*g_d(1,ng)*g_d(3,ng)
sigma4=sigma4+sigma_rid*g_d(2,ng)*g_d(2,ng)
sigma5_d=sigma5_d+vkin_d(ir)*DBLE(crosstaus_d(ir,5,iss))
sigma5=sigma5+sigma_rid*g_d(3,ng)*g_d(2,ng)
sigma6=sigma6+sigma_rid*g_d(3,ng)*g_d(3,ng)
sigmabare(l,m)=sigmaloc(l,m)+sigmanlc(l,m)
sigmad23=2.d0*sigmad23
sigmad(m,n)=sigmad(m,n)+sigmap(i,j,m,n)*avecd(i,j)
sigmael(i,j)=sigmael(i,j)-efield_cart(i)*at(j,ipol)*phases(ipol)
sigmael(:,:)=sigmael(:,:)*alat*DSQRT(2.d0)/(2.d0*pi)/omega
sigmaewa(1,1)=sigmaewa(1,1)+sigma11
sigmaewa(1:2,1:2)=sigmaewa(1:2,1:2)-dE_deps(1:2,1:2)/omega
sigmaewa(2,1)=sigmaewa(2,1)+sigma21
sigmaewa(2,2)=sigmaewa(2,2)+sigma22
sigmaewa(3,1)=sigmaewa(3,1)+sigma31
sigmaewa(3,2)=sigmaewa(3,2)+sigma32
sigmaewa(3,3)=sigmaewa(3,3)+sigma33
sigmaewa(la,mu)=sigmaewa(la,mu)+fac*r(la,nr)*r(mu,nr)
sigmaewa(l,l)=sigmaewa(l,l)+sdewald
sigmaewa(l,m)=-sigmaewa(l,m)
sigmaewa(l,m)=sigmaewa(l,m)+fac*r(l,nr)*r(m,nr)
sigmaewa(:,:)=sigmaewa(:,:)*(0.5d0*e2)
sigmaewa(:,:)=sigmaewa(:,:)*(e2/2.0d0/omega)
sigmaewa(:,:)=sigmaewg(:,:)+sigmaewr(:,:)
sigmahar(1,1)=sigmahar(1,1)+sigmahar11
sigmahar(1,1)=sigmahar(1,1)+sigmahar11/tpiba2
sigmahar(2,1)=sigmahar(2,1)+sigmahar21
sigmahar(2,1)=sigmahar(2,1)+sigmahar21/tpiba2
sigmahar(2,2)=sigmahar(2,2)+sigmahar22
sigmahar(2,2)=sigmahar(2,2)+sigmahar22/tpiba2
sigmahar(3,1)=sigmahar(3,1)+sigmahar31
sigmahar(3,1)=sigmahar(3,1)+sigmahar31/tpiba2
sigmahar(3,2)=sigmahar(3,2)+sigmahar32
sigmahar(3,2)=sigmahar(3,2)+sigmahar32/tpiba2
sigmahar(3,3)=sigmahar(3,3)+sigmahar33
sigmahar(3,3)=sigmahar(3,3)+sigmahar33/tpiba2
sigmahar(:,:)=fpi*e2*sigmahar(:,:)
sigmahar(:,:)=fpi*e2*sigmahar(:,:)*0.5_DP
sigmahar(l,l)=sigmahar(l,l)-ehart/omega
sigmahar(:,:)=-sigmahar(:,:)
sigmahar(:,:)=sigmahar(:,:)*(-0.5d0*e2)
sigmah(ipol,jpol)=0.5d0*(sigmah(ipol,jpol)+sigmah(jpol,ipol))
sigmah(:,:)=sigmah(:,:)/omega
sigma(i,j)=-sigma(i,j)
sigmaion(i,j)=sigmaion(i,j)-efield_cart(i)*at(j,ipol)*pol_cry(ipol)
sigmaion(:,:)=sigmaion(:,:)/omega
sigmakin(:,:)=2.d0*e2/omega*sigmakin(:,:)
sigmakin(:,:)=2._DP*e2/omega*sigmakin(:,:)
sigmakin(:,:)=e2/omega*sigmakin(:,:)
sigma(l,3)*ry_kbar,l=1,3)
sigmaloc11=sigmaloc11+no_lm_dep*dlr_Vloc1*g_d(1,ng)*g_d(1,ng)
sigmaloc(1,1)=sigmaloc(1,1)+sigma11*fact*tpiba2
sigmaloc(1,1)=sigmaloc(1,1)+sigmaloc11
sigmaloc21=sigmaloc21+no_lm_dep*dlr_Vloc2*g_d(2,ng)*g_d(1,ng)
sigmaloc(2,1)=sigmaloc(2,1)+sigma21*fact*tpiba2
sigmaloc(2,1)=sigmaloc(2,1)+sigmaloc21
sigmaloc22=sigmaloc22+no_lm_dep*dlr_Vloc2*g_d(2,ng)*g_d(2,ng)
sigmaloc(2,2)=sigmaloc(2,2)+sigma22*fact*tpiba2
sigmaloc(2,2)=sigmaloc(2,2)+sigmaloc22
sigmaloc31=sigmaloc31+no_lm_dep*dlr_Vloc3*g_d(3,ng)*g_d(1,ng)
sigmaloc(3,1)=sigmaloc(3,1)+sigma31*fact*tpiba2
sigmaloc(3,1)=sigmaloc(3,1)+sigmaloc31
sigmaloc32=sigmaloc32+no_lm_dep*dlr_Vloc3*g_d(3,ng)*g_d(2,ng)
sigmaloc(3,2)=sigmaloc(3,2)+sigma32*fact*tpiba2
sigmaloc(3,2)=sigmaloc(3,2)+sigmaloc32
sigmaloc33=sigmaloc33+no_lm_dep*dlr_Vloc3*g_d(3,ng)*g_d(3,ng)
sigmaloc(3,3)=sigmaloc(3,3)+sigma33*fact*tpiba2
sigmaloc(3,3)=sigmaloc(3,3)+sigmaloc33
sigmaloc(l,l)=sigmaloc(l,l)+evloc
sigmaloclong(:,:)=sigmaloclong(:,:)*(e2)
sigmaloc(:,:)=sigmaloc(:,:)+sigmaloclong(:,:)
sigmanlc(:,:)=-1.d0/omega*sigmanlc(:,:)
sigmanlc(:,:)=-1._DP/omega*sigmanlc(:,:)
sigmanlc(l,l)=sigmanlc(l,l)-evps
sigmanlc(:,:)=sigmanlc(:,:)+2.0_dp*sus(:,:)
sigmanlc=sigmanlc+sigma_g
sigmanlc=sigmanlc+sigma_r
sigmanlc(:,:)=sigmanlc(:,:)+sus(:,:)
sigmanl(:,:)=sigmanl(:,:)+sus(:,:)
sigma=sigma*2
sigma=sigma*omega
sigma=sigma+sat
sigma(:,:)=sigma(:,:)+sigmaexx(:,:)
sigma=SQRT(2.D0*dt*kt)
sigma=SQRT(kt/fcp_mass)
sigma=SQRT(kt/mass(na))
sigmaxcc(l,l)=sigmaxcc(l,l)+sigmadiag
sigmaxc(l,l)=-(etxc-vtxc)/omega
sigmaxc(:,:)=sigmaxc(:,:)+sigma_gradcorr(:,:)/(nr1*nr2*nr3)
sign_=-1
sign_=-1*sign_
signum=-1
signum=-signum
sig=sig*ap_d(lp,ivl,jvl)
sig=sig*ap(lp,ivl,jvl)
sint=0.5d0*SQRT(a1(1)**2+a1(2)**2+a1(3)**2)
sintheta=SQRT(1.0_DP-costheta*costheta)
sint=SIGN(sint,a1(1)/ax(1))
sint=SIGN(sint,a1(2)/ax(2))
sint=SIGN(sint,a1(3)/ax(3))
sinxx=SIN(rg)/rg
sixth=1.d0/6.d0
s(j+1)=s(j)
s(kpol,jpol,irot+nrot)=-s(kpol,jpol,irot)
s_l=SIN(kn*z_l)
smate(:,:,irot+nrot)=smat(:,:,irot)
smearing='Fermi-Dirac'
smearing='Marzari-Vanderbilt'
smearing='Methfessel-Paxton'
sm(i,j)=sm(i,j)+avecd(i,l)*fd(l,j)
smooth_coulomb_g=-1._dp*fpi*(1._dp/4._dp/alpha+2._dp*beta/4._dp)
smooth_coulomb_r=2._dp/SQRT(pi)*SQRT(alpha)
smooth_coulomb_r=qe_erf(SQRT(alpha)*r)/r
sname(irot+nrot)=s0name(imat(irot)+32)
sn(:)=s(:,1,is)*n(1,ig)+s(:,2,is)*n(2,ig)+s(:,3,is)*n(3,ig)
S=omega/L
s(:)=pos(:)-pos_p(:)
spsi_d(1:npwx*npol,1)=spsi_h(1:npwx*npol,1)
spsi_h(1:npwx*npol,1)=spsi_d(1:npwx*npol,1)
sqr3d2=sqrt3*0.5d0
sqr3d2=SQRT(3.d0)*0.5d0
s_r=SIN(kn*z_r)
ss0=SIN(kn*z0)
ss(1,2)=s(1,2)*nr2/nr1
ss(1,3)=s(1,3)*nr3/nr1
ss1=SIN(kn*z1)
s=s/2
ss(2,1)=s(2,1)*nr1/nr2
ss(2,3)=s(2,3)*nr3/nr2
ss(3,1)=s(3,1)*nr1/nr3
ss(3,2)=s(3,2)*nr2/nr3
sseed=MM-1-mod(-1-seed,MM)
ss=ss+ss
ss=-tmp/SQRT(pi)
ss=ULP2*dble(sseed+2)
start_band(ngroups)=iatwfc+1
start_bec=start_ldaUb+(rlen_ldaUb+1)/2
start_bec=start_ldaU+(rlen_ldaU+1)/2
start_dipole=start_bec+(rlen_bec+1)/2
starting_magnetization(i)=starting_magnetization(i)/DBLE(nt)
starting_magnetization(nt)=-1.0_dp
starting_ns=-1.0_dp
start_kin=start_rho+rlen_rho/2
start_ldaUb=start_ldaU+(rlen_ldaU+1)/2
start_ldaU=start_kin+rlen_kin/2
step(:,:)=step(:,:)/norm_step
step(:,:)=vel(:,:)+dt**2*acc(:,:)
stride=nstep/max_xml_steps
string='E-'
string='M-'
struc(na)=CMPLX(cos(fac),-sin(fac),kind=DP)
struc(na)=CMPLX(COS(fac),-SIN(fac),kind=DP)
struc(na)=CMPLX(COS(fac),-SIN(fac),KIND=DP)
struc_r(ipol,na)=struc(na)*CMPLX(0.d0,-1.d0,KIND=DP)*dk(ipol)
sum1ch=sum1ch+rg3*qe_cosh(gp*z0+ci*gz*z0)/(gp+ci*gz)*z0
sum1cm=sum1cm+rg3*qe_cosh(gp*z0-ci*gz*z0)/(gp-ci*gz)*z0
sum1cp=sum1cp+rg3*qe_cosh(gp*z0+ci*gz*z0)/(gp+ci*gz)*z0
sum1c=sum1c+rg3*ci*COS(gz*z0)/gz
sum1m=sum1m+rg3*qe_EXP(-ci*gz*z0)/(gp+ci*gz)
sum1p=sum1p+rg3*qe_EXP(+ci*gz*z0)/(gp-ci*gz)
sum1sh=sum1sh+rg3*qe_sinh(gp*z0+ci*gz*z0)/(gp+ci*gz)
sum1sm=sum1sm+rg3*qe_sinh(gp*z0-ci*gz*z0)/(gp-ci*gz)
sum1sp=sum1sp+rg3*qe_sinh(gp*z0+ci*gz*z0)/(gp+ci*gz)
sum1=sum1+wgauss((e-et(ibnd,ik))/degauss,ngauss)
sum2c=sum2c+rg3*COS(gz*z0)/gz**2
sum2m=sum2m+rg3*qe_EXP(-ci*gz*z0)/(gp+ci*gz)**2
sum2p=sum2p+rg3*qe_EXP(+ci*gz*z0)/(gp-ci*gz)**2
sum2sh=sum2sh+rg3*qe_sinh(gp*z0+ci*gz*z0)/(gp+ci*gz)**2
sum2sm=sum2sm+rg3*qe_sinh(gp*z0-ci*gz*z0)/(gp-ci*gz)**2
sum2sp=sum2sp+rg3*qe_sinh(gp*z0+ci*gz*z0)/(gp+ci*gz)**2
SumDiag=SumDiag+abs(tmp)
sumfor=sumfor+force(1,na)**2+force(2,na)**2+force(3,na)**2
sumfor=sumfor+force(ipol,na)
sum_h1=sum_h1+dble(deeq_nc_d(ih,ih,na,1)*ar)
sum_h1=sum_h1+dble(deeq_nc_d(ih,jh,na,1)*ar)
sum_h4=sum_h4+dble(deeq_nc_d(ih,ih,na,4)*ar)
sum_h4=sum_h4+dble(deeq_nc_d(ih,jh,na,4)*ar)
sum_h=sum_h+dble(deeq_d(ih,ih,na,current_spin)*ar)
sum_h=sum_h+dble(deeq_d(ih,jh,na,current_spin)*ar)
sum_j=sum_j+DBLE(at_sc(na2)%n(j))*at(i,j)
sumkg=sumkg+wk(ik)*sum1
sumkmid=SUM(wg(1:nbnd,1:nks/2))
sumkmid=SUM(wg(1:nbnd,nks/2+1:nks))
sumkt=sumkt+1.0_DP/ntetra
sumnb=COS(arg)*AIMAG(aux(ig))-SIN(arg)*DBLE(aux(ig))
SumOff=SumOff+abs(tmp)
sum_overlap(:,:)=sum_overlap(:,:)+overlap(:,:)
sumr_b=sumr_b+totsum
sumr=sumr+totsum
sum_s1=sum_s1+dble(qq_so_d(ih,ih,1,nt)*ar)
sum_s1=sum_s1+dble(qq_so_d(ih,jh,1,nt)*ar)
sum_s4=sum_s4+dble(qq_so_d(ih,ih,4,nt)*ar)
sum_s4=sum_s4+dble(qq_so_d(ih,jh,4,nt)*ar)
sumscf=sumscf+forcescc(1,na)**2+forcescc(2,na)**2+forcescc(3,na)**2
sumsq_overlap(:,:)=sumsq_overlap(:,:)+overlap(:,:)**2
sum_s=sum_s+dble(qq_at_d(ih,ih,na)*ar)
sum_s=sum_s+dble(qq_at_d(ih,jh,na)*ar)
sum=sum+func(x,aaa,tmp,z1,z,zp,rxy)
sus_at(ipol,ipol)=sus_at(ipol,ipol)+(qb*v_eff+qeb)
sus_at(:,ipol)=sus_at(:,ipol)-tabp(na)%xyz(:,ir)*(dqb(ipol)*v_eff+dqeb(ipol))
sus(ipol,jpol)=sus(ipol,jpol)-omega*fac(jpol,is)
sus(:,:)=sus(:,:)*omega/(dfftp%nr1*dfftp%nr2*dfftp%nr3)
sus(:,:)=sus(:,:)+sus_at(:,:)
sw=wk(jk)/SUM(w(1:ncos))
sxk(1)=xk_cryst(1)+(iq1-1)*dq1
sxk(2)=xk_cryst(2)+(iq2-1)*dq2
sxk(3)=xk_cryst(3)+(iq3-1)*dq3
sxk(:)=-sxk(:)
sy(i,i)=sy(i,i)-1.0_dp
sym(jrot+1:nrot_)=.FALSE.
sym(nsym+1:)=.FALSE.
system_temp=2.D0*ek*alat**2*ry_to_kelvin
t(1:2)=k1*bg(1:2,1)+k2*bg(1:2,2)
t1=chi*(exp_erfc(arg011,arg111)-exp_erfc(arg011,arg113))
t1=-EXP(arg000)*beta/alpha
t1=EXP(arg000)*beta*xi/alpha/lambda
t1=-EXP(arg003)*kappa/alpha
t1=EXP(arg004)/alpha
t1=-EXP(arg004)*xi/alpha
t1=EXP(arg005)/alpha
t1=EXP(arg005)*gp/alpha
t1=exp_erfc(arg001,arg101)-exp_erfc(arg001,arg103)
t1=exp_erfc(arg001,arg103)-exp_erfc(arg001,arg101)
t1=exp_erfc(arg002,arg102)-exp_erfc(arg002,arg106)
t1=-exp_erfc(arg005,arg101)/aaa
t1=exp_erfc(arg011,arg113)-exp_erfc(arg011,arg111)
t1=exp_erfc(arg012,arg114)-exp_erfc(arg012,arg112)
t1_for=zv(ityp(it1))*zv(ityp(it2))*fpi/sa
t1_for=zv(ityp(it1))*zv(ityp(it2))*fpi/sa*2.d0
t1=phik(1)/tpi
t1=xi*(exp_erfc(arg012,arg112)-exp_erfc(arg012,arg114))
t1=-(z_l-zp)*qe_erf(arg101)+(0.5d0/aaa+z1-zp)*qe_erf(arg102)
t1=-(z-zp)*qe_erf(arg101)+(0.5d0/aaa+z1-zp)*qe_erf(arg102)
t2=0.5d0/aaa*exp_erfc(arg006,arg106)
t2=exp_erfc(arg006,arg104)/aaa
t2_for=zv(ityp(it1))*zv(ityp(it2))*fpi/sa
t3=EXP(arg005)/aaa
t3=exp_erfc(arg004,arg105)/alpha
t3=exp_erfc(arg005,arg104)/alpha
t3=exp_erfc(arg006,arg109)/alpha
t3=exp_erfc(arg007,arg110)/alpha
t3=gp/alpha*exp_erfc(arg005,arg104)
t3=gp/alpha*exp_erfc(arg007,arg110)
t3=-xi/alpha*exp_erfc(arg004,arg105)
t3=-xi/alpha*exp_erfc(arg006,arg109)
tab_at(iq,nb,nt)=vqint*pref
tab_at(:,:,:)=tab_at(:,:,:)*SQRT(omega_old/omega)
tab(iq,nb,nt)=vqint*pref
tab(iq,nb)=tab0(iq,nb)*filter(qi/qmax,af,nf)
tab(:,:,:)=tab(:,:,:)*SQRT(omega_old/omega)
tau(1:3,1:ip_nat)=iob_tau(1:3,1:ip_nat)*alat
tau(1,inat,iim)=alat*tau(1,inat,iim)
tau(1,inat,iim)=bohr*tau(1,inat,iim)
tau_(:,1:nat)=tau_(:,1:nat)/alat
tau(:,1:nat)=tau(:,1:nat)/alat
tau(2,inat,iim)=alat*tau(2,inat,iim)
tau(2,inat,iim)=bohr*tau(2,inat,iim)
tau(3,inat,iim)=alat*tau(3,inat,iim)
tau(3,inat,iim)=bohr*tau(3,inat,iim)
taub=tau(:,i)*alat
taub=tau(:,iat)*alat
tau(:,ia)=pbc(tau(:,ia)*alat)/alat
tau_new=2.0_DP*tau-tau_old+acc*dt**2
tau_new(:,:)=2.D0*tau(:,:)-tau_old(:,:)+acc(:,:)*dt**2
tau_new(:,:)=tau(:,:)+(dt*force(:,:)+chi(:,:))/alat
tau_new(:,:)=tau(:,:)+step(:,:)*MIN(norm_step,step_max/alat)
tau_new=tau+vel*dt+0.5_DP*acc*dt**2
tau_new(:,:)=tau(:,:)+vel(:,:)*dt+0.5_DP*acc(:,:)*dt**2
tau_old=tau-vel*dt
tau_old(:,:)=tau(:,:)-vel(:,:)*dt
tau_old=tau-vel*dt+0.5_DP*acc*dt**2
tau_old(:,:)=tau(:,:)-vel(:,:)*dt+0.5_DP*acc(:,:)*dt**2
tau_out(:,:)=tau_out(:,:)*alat
tau_out(:,:)=tau_out(:,:)*alat*bohr_radius_angs
tau_phase=-tpi*(sgn_sym*SUM(tau(:,ia)*xk0)-SUM(tau(:,ma)*xk))
tau=RESHAPE(pos,(/3,nat/))
taus=taus/2._DP
tau=tau/alat
tau(:,:)=tau(:,:)/alat
tau(:,:)=tau(:,:)*alat
tau=tau/bohr_radius_angs/alat
tau(:,:)=tau(:,:)/nsym
temp_av=temp_av/DBLE(nraise)
temp_av=temp_av+temp_new
temperature=temperature*delta_t
temperature=temperature+delta_t
temp_index_sym(temp_nkqs)=-isym
temp(itemp)=degauss/e2
temp(itemp)=demet/e2
temp(itemp)=ef*tot_charge/e2
temp(itemp)=etotefield/e2
temp(itemp)=etotgatefield/e2
temp_new=2.0_DP*ekin*ry_to_kelvin
temp_nkqs=temp_nkqs+1
tempo=(istep-1)*dt*e2*au_ps
tempphic(ir)=exxbuff(ir,ibnd-all_start(wegrp)+iexx_start,ikq)
temppsic(dfftt%nl(igk_exx(ig,ik)))=evc_exx(ig,ibnd-iexx_start+1)
temppsic_nc_d(dfftt__nl(igk_exx_d(ig,current_k)),2,ii)=psi_d(npwx+ig,ii)
temppsic_nc(dfftt%nl(igk_exx(ig,current_k)),2,ii)=psi(npwx+ig,ii)
temppsic_nc(dfftt%nl(igk_exx(ig,ik)),1)=evc_exx(ig,ibnd-iexx_start+1)
temppsic_nc(dfftt%nl(igk_exx(ig,ik)),2)=evc_exx(ig+npwx,ibnd-iexx_start+1)
temppsic_nc(dfftt%nl(igk_exx(ig,ikk)),2,ii)=evc_exx(npwx+ig,ii)
temp=temp+CONJG(vet(m1,i))*lambda(i)*vet(m2,i)
temp=temp+e(k)*work(j,k)*CONJG(work(i,k))
temp=temp+vet(m1,i)*lambda(i)*CONJG(vet(m2,i))
tens3(:,:,:,:)=work(:,:,:,:)/DBLE(nsym)
tens=ewaldg+ewaldr
tens(:,:,:)=work(:,:,:)/DBLE(nsym)
term1=term*rho_rad(k,ipol)/mag**2
term=term+rho_rad(k,ipol)*drho_rad(k,ipol)
test=MAXVAL(1.d0-power_r(1:upf(nt)%nbeta)/power_q(1:upf(nt)%nbeta))
tetra(1,n+1)=equiv(n1)
tetra(1,n+2)=equiv(n2)
tetra(1,n+3)=equiv(n1)
tetra(1,n+4)=equiv(n3)
tetra(1,n+5)=equiv(n3)
tetra(1,n+6)=equiv(n3)
tetra(2,n+1)=equiv(n2)
tetra(2,n+2)=equiv(n3)
tetra(2,n+3)=equiv(n3)
tetra(2,n+4)=equiv(n4)
tetra(2,n+5)=equiv(n6)
tetra(2,n+6)=equiv(n5)
tetra(3,n+1)=equiv(n3)
tetra(3,n+2)=equiv(n4)
tetra(3,n+3)=equiv(n5)
tetra(3,n+4)=equiv(n6)
tetra(3,n+5)=equiv(n7)
tetra(3,n+6)=equiv(n6)
tetra(4,n+1)=equiv(n6)
tetra(4,n+2)=equiv(n6)
tetra(4,n+3)=equiv(n6)
tetra(4,n+4)=equiv(n8)
tetra(4,n+5)=equiv(n8)
tetra(4,n+6)=equiv(n7)
tfac=dsqrt(t/atemp)
tg_psic_d(dffts_nl_d(igk_k_d(j,current_k))+ioff)=psi_d(j,idx+ibnd-1)
tg_psic_d(dffts_nl_d(j)+ioff)=psi_d(j,idx+ibnd-1)
tg_psic_d(dffts_nlm_d(j)+ioff)=conjg(psi_d(j,idx+ibnd-1))
tg_psic(dffts%nl(igk_k(:,ik_))+ioff)=orbital(:,idx+ibnd-1)
tg_psic(dffts%nl(igk_k(j,1))+ioff)=orbital(j,idx+ibnd-1)
tg_psic(dffts%nl(j)+ioff)=psi(j,idx+ibnd-1)
tg_psic(dffts%nlm(igk_k(j,1))+ioff)=conjg(orbital(j,idx+ibnd-1))
tg_psic(dffts%nlm(j)+ioff)=conjg(psi(j,idx+ibnd-1))
tg_psic_d(j)=tg_psic_d(j)*tg_v_d(j)
tg_psic_d(j,:)=tg_psic_d(j,:)*tg_v_d(j,1)
tg_psic(j)=tg_psic(j)+tg_psic_temp(j)*tg_v(j)
tg_psic(j)=tg_psic(j)*tg_v(j)
tg_psic(j,:)=tg_psic(j,:)*tg_v(j,1)
tg_psic(j)=tg_v(j)*tg_psic(j)
tg_psi_d(dffts_nl_d(igk_k_d(j,ik))+ioff)=evc_d(j,idx+ibnd-1)
tg_psi_d(dffts_nl_d(j)+ioff)=evc_d(j,idx+ibnd-1)
tg_psi_d(dffts_nlm_d(j)+ioff)=CONJG(evc_d(j,idx+ibnd-1))
tg_psi(dffts%nl(j)+ioff)=evc(j,idx+ibnd-1)
tg_psi(dffts%nlm(j)+ioff)=CONJG(evc(j,idx+ibnd-1))
theta=2.d0*pi
theta=ACOS(m1_loc(3,iat)/norm)
theta=ACOS(m_loc(3,iat)/norm_tot)
theta(l,k)=dacos(x)*180.d0/pi
theta(l,k)=theta(l,k)+avec(m,l)*avec(m,k)
theta=theta*180.d0/pi
theta=theta*t+d(i,k)
theta=theta*v-pi4
this_bgrp_nbnd=ibnd_end-ibnd_start+1
ThrDen=scdm_den*DenAve
ThrGrd=scdm_grd*GrdAve
T_ij=EXP(-T_ij/(2*sigma2))
T_ij=T_ij+((tau(ip,ia)-tau_smart(ip,ia))*alat-dt*force_smart(ip,ia))**2
time_reversal=(nspin_mag/=4)
t(ipol)=i*at(ipol,1)+j*at(ipol,2)-dtau0(ipol)
T_ji=EXP(-T_ji/(2*sigma2))
T_ji=T_ji+((tau_smart(ip,ia)-tau(ip,ia))*alat-dt*force(ip,ia))**2
tmp1=tmp1+rg3*(cc0+ci*ss0)/(gp**2+kn**2)*tmp
tmp1=tmp1+rg3*(cc0+ci*ss0)/(gp-ci*kn)
tmp1=tmp1+rg3*(cc0+ci*ss0)/kn**2
tmp1=tmp1+rg3*(cc0+ci*ss0)/(xi-ci*kn)/alpha
tmp1=tmp1+rg3*(cc1+ci*ss1)/(2.d0*aaa-ci*kn)/kn**2
tmp1=tmp1+rg3*ci*(cc0+ci*ss0)/kn
tmp2=tmp2+rg3*(cc0-ci*ss0)/(gp**2+kn**2)*tmp
tmp2=tmp2+rg3*(cc0-ci*ss0)/(gp+ci*kn)
tmp2=tmp2+rg3*(cc0-ci*ss0)/(gp+ci*kn)/gp
tmp2=tmp2+rg3*(cc0-ci*ss0)/kn
tmp2=tmp2+rg3*(cc0-ci*ss0)/kn**2
tmp2=tmp2+rg3*ci*(cc0-ci*ss0)/kn
tmp3=tmp3+rg3*(cc0+ci*ss0)/(2.d0*aaa-ci*kn)
tmp3=tmp3+rg3*(cc0+ci*ss0)/kn
tmp3=tmp3+rg3*cc0/kn**2
tmp3=tmp3+rg3*ci*cc0/kn
tmp3=tmp3+rg3*kappa/alpha*(cc0-ci*ss0)/(gp+ci*kn)/gp
tmp4=tmp4+(0.d0,0.d0)
tmp4=tmp4+rg3*kappa*(cc1+ci*ss1)/(xi-ci*kn)/(gp**2+kn**2)
tmp4=tmp4+rg3*ss0/kn
tmp=alat*bohr_radius_angs*sqrt(RDist(1)**2+RDist(2)**2+RDist(3)**2)
tmp_boxdist_beta(mbia,ia)=sqrt(distsq)*alat
tmp=cost*sum(abs(locbuff(:,jbnd,IKK))*abs(locbuff(:,kbnd,IKK)))
tmp=((gp-ci*kn)*EXP(arg1)+(gp+ci*kn)*EXP(arg2))/(2.d0*gp)
tmp=((gp+ci*kn)*EXP(arg1)+(gp-ci*kn)*EXP(arg2))/(2.d0*gp)
tmp=(gp-ci*kn)/gp
tmpr1=tmpr1+rg3*(cc0-ci*ss0)/(gp+ci*kn)/alpha
tmpr2=tmpr2+rg3*(cc0+ci*ss0)/(xi-ci*kn)/lambda
tmpr3=tmpr3+rg3*beta/alpha*(cc0+ci*ss0)/(xi-ci*kn)/lambda
tmp_xyz_beta(:,mbia,ia)=posi(:)*alat
Tot1=Tot1+tot
Tot2=Tot2+tot
total_mass=total_mass+mass(na)
tot_charge=ionic_charge-nelec
tot_charge=SUM(zv(ityp(1:nat)))-nelec
tot_dipole=-el_dipole+ion_dipole
totoc_b=totoc_b-2.d0*ldim
totram=maxram*nproc_image
totsum=totsum+DBLE(nsgnew(m1,m1,viz,na1,1)-nsgnew(m1,m1,viz,na1,2))
totsum=totsum+DBLE(nsgnew(m1,m1,viz,na1,is))
t=phik(istring)/tpi
tpiba=2.D0*pi/alat
tpiba2=(fpi/2.d0/alat)**2
tpiba2=(tpi/alat)**2
tpiba2=tpiba**2
tr2=MAX((starting_scf_threshold/upscale),tr2)
tr2=MAX(tr2_multi*dexx,tr2_final)
t(:)=r(:)*rnr(:)
tr=tr+avecd(m,k)*avecd(m,k)
tr=tr+sigav(m,k)*sigav(m,k)
t=t-1
tt=-fpi*zv(ityp(it))/sa
tt=-fpi*zv(ityp(it))/sa*2.d0
t=t-(k+0.5d0)
t=TT-1
tt=tt+t(ipol)*t(ipol)
tt=zv(ityp(it1))*zv(ityp(it2))*fpi/sa
tvectb=tau(1,na)*bg(1,3)+tau(2,na)*bg(2,3)+tau(3,na)*bg(3,3)
tvectb=tau(1,na)*bg(1,edir)+tau(2,na)*bg(2,edir)+tau(3,na)*bg(3,edir)
t=v*v
t=w-(k+0.5d0)
twobysqrtpi=2.d0/SQRT(pi)
twobysqrtpi=2._DP/SQRT(pi)
two_fermi_energies=(ef_up/=0.0_dp).AND.(ef_dw/=0.0_dp)
two_fermi_energies=(tot_magnetization/=-1._DP)
t=w*w
t=w*w*0.0625d0
u(1,1)=CMPLX(cosa,-ax(3)*sina,kind=DP)
u(1,2)=CMPLX(-ax(2)*sina,-ax(1)*sina,kind=DP)
u(2,1)=-CONJG(u(1,2))
uh=jh-m_j+m_u
u(i)=u(i)+wrk(k)*at(i,k)
ukb=ijkb0+uh
u_matrix(m1,m2,m3,m4)=u_matrix(m1,m2,m3,m4)+ak*f(k)
upf(nt)%qfuncl(1:upf(nt)%kkbeta,ijv,l)=qrad_rs(1:upf(nt)%kkbeta,ijv,l+1)
upol(:)=at(:,gdir)/rmod
usym=1._dp/DBLE(nsym)
usym=1._dp/DBLE(nsymq)
utl=+press*vcell
ut=uta+utl
uvx=ux*vx*sixth
ux=1.0_DP-px
ux=1.d0-px
ux=1._DP-px
uxmod=ux(1)**2+ux(2)**2+ux(3)**2
ux=ux/SQRT(uxmod)
v0(npt)=fac*a**3
v(1)=a(2,d1)*a(3,d2)-a(3,d1)*a(2,d2)
v(1,na)=v(1,na)-p(1)
v(1,na)=v(1,na)*tfac
v(:,1)=v(:,1)+DBLE(aux(:))
v(:,1)=v(:,1)/SQRT(norm)
v=24.0d0/w
v(2)=-a(1,d1)*a(3,d2)+a(3,d1)*a(1,d2)
v(2,na)=v(2,na)-p(2)
v(2,na)=v(2,na)*tfac
v(3)=a(1,d1)*a(2,d2)-a(2,d1)*a(1,d2)
v(3,na)=v(3,na)-p(3)
v(3,na)=v(3,na)*tfac
val=aux1(ir)*(r(ir)*COS(gx*r(ir))/gx-SIN(gx*r(ir))/gx**2)
val=r(ir)*r(ir)*rhoc(ir)*rab(ir)
val=SIN(x)/(x)*r(ir)*r(ir)*rhoc(ir)
value=e2*(eamp-tot_dipole)*saw(emaxpos,eopreg,sawarg)*(alat/bmod)
value=gateamp*e2*mopopla(zgate,gatearg,.false.)*(alat/bmod)
value=gateamp*e2*(mopopla(zgate,gatearg,.true.)+1.0/6.0)*(alat/bmod)
value=gateamp*e2*(mopopla(zgate,gatearg,.true.)+1.0/6.0)*(alat/bmod)+block_height
val=val*2.d0
val=val+cmplx(dble(eigr),dble(eigr2),KIND=dp)
val=val+dble(eigr)
val=val+eigr
val=val*rab(ir)
vamp=e2*(eamp-tot_dipole)*length
vanishing_mag=1.D-20
vaux_d(ig,is)=psic_d(dfftp_nl_d(ngm_s+ig-1))
vaux(ig,is)=psic(dfftp%nl(ngm_s+ig-1))
vaux(m2,m1)=CONJG((v_nsg(m2,m1,viz,na1,current_spin)))*0.5d0
vaux(m2,m1)=v_nsg(m2,m1,viz,na1,current_spin)*0.5d0
vbest(ig)=vbest(ig)+vec(i)*v(ig,i)
vc_d(dfftt__nl(ig),ii)=fac(ig)*psi_rhoc_work_d(dfftt__nl(ig))
vc_d(dfftt__nlm(ig),ii)=fac(ig)*psi_rhoc_work_d(dfftt__nlm(ig))
vc(dfftt%nl(ig))=fac(ig)*rhoc(dfftt%nl(ig))
vc(dfftt%nl(ig),ii)=coulomb_fac(ig,iq,current_k)*psi_rhoc_work(dfftt%nl(ig))
vc(dfftt%nlm(ig))=fac(ig)*rhoc(dfftt%nlm(ig))
vc(dfftt%nlm(ig),ii)=coulomb_fac(ig,iq,current_k)*psi_rhoc_work(dfftt%nlm(ig))
vcell=-vcell
vchi(ir)=upf(nt)%chi(ir,nb)*aux(ir)*rgrid(nt)%r(ir)
vc=vc/nqs/4.d0
vc=vc*omega*0.25_DP/nqs
vc=vc*omega*x_occupation(ibnd,ik)/nqs
vc=vc*x_occupation(ibnd,ik)/nqs/4.d0
vdw_corr='grimme-d2'
vect(:)=work(1)*bg(:,1)+work(2)*bg(:,2)+work(3)*bg(:,3)
vel(:,:)=acc_versor(:,:)*MAX(0.D0,projection)
vel=gauss_dist(0.D0,sigma)/alat
vel(:,na)=gauss_dist(0.D0,sigma,3)/alat
vel(:,na)=vel(:,na)-ml(:)
vel=(tau_new-tau_old)/(2.0_DP*dt)
vel(:,:)=tau(:,:)-tau_old(:,:)
vel=(tau-tau_old)/dt
vel(:,:)=(tau(:,:)-tau_old(:,:))/dt
vel(:,:)=vel(:,:)/alat
vel=vel*aux
vel(:,:)=vel(:,:)*aux
vfac=dsqrt(k_boltzmann_ry*t/atmass(nt))
vg(1)=tpi*(2.d0*z1-z0)*z0*rg3
vg(1)=tpi*(4.d0*z1-z0)*z0*rg3
vg(1)=-tpi*z0**2*rg3
Vg(1)=Vg(1)+a0*1.0d0+a2*z0**2/3.0d0
vg3=vg3+vloc(igtongl(ig),ia)*strf(ig,ia)/e2
vg_d(ir,is)=aux_d(nl_d(ir))*tpiba*(0.d0,-1.d0)
vg_f_r(iz,1)=tt*(cc1+cc2)
vg_f_r(iz,:)=tt*(c1(:)+c2(:))
vgig=vgig*CMPLX(COS(phase),SIN(phase),kind=DP)
vg(ig)=vg(ig)+CMPLX(rgtot_re,rgtot_im,kind=DP)*fac
vg(ig)=vg(ig)+vloc(igtongl(ig),i)*strf(ig,i)
Vg(igz)=Vg(igz)+fpi*rg3/gz**2
vg(:,is)=aux(dfftp%nl(:))*tpiba*(0.d0,-1.d0)
vg(iz)=fpi*rg3/(gp**2+kn**2)
vg(iz)=fpi*rg3/(kn**2)
vg_r(iz)=(a0+a1*z+a2*z**2+a3*z**3)
vg_r(iz)=a0+a1*z+a2*z**2+a3*z**3
vg_r(iz)=-fpi*EXP(arg1)*tmp1+tpi*(EXP(arg3)-EXP(arg2))*tmp2
vg_r(iz)=-tpi/gp*(EXP(arg1)*tmp1+EXP(arg2)*tmp2)
Vhar0g(igz)=fpi*rg3/gz**2
v_hub(m1,m1,is,na)=v_hub(m1,m1,is,na)+Hubbard_J(1,nt)*n_aux
v_hub(m1,m1,is,na)=v_hub(m1,m1,is,na)+sgn(is)*Hubbard_beta(nt)
v_hub(m1,m1,na,na1,is)=v_hub(m1,m1,na,na1,is)+Hubbard_alpha_back(nt1)
v_hub(m1,m1,na,na1,is)=v_hub(m1,m1,na,na1,is)+Hubbard_alpha(nt1)
v(ig,1)=psic(dffts%nl(ig))*gg(ig)/(gg(ig)+agg0)
v(ig)=e2*wg_corr(ig)*rho(ig)
v(ig)=e2*wg_corr(ig)*rho_tot
v(ig)=-e2*wg_corr(ig)*SUM(zv(1:ntyp)*strf(ig,1:ntyp))/omega
v(ig,m)=wbest(ig)/(gg(ig)+agg0)
v(ir,1)=e2*(0.5D0*(vx(ir,1)+vc(ir,1)+vx(ir,2)+vc(ir,2)))
v(ir,1)=e2*(vx(ir,1)+vc(ir,1))
v(ir,1)=v(ir,1)-bfield(1)
v(ir,1)=v(ir,1)-bfield(ipol)
v(ir,1)=v(ir,1)+fact*m2(1,pointlist(ir))
v(ir,2:4)=e2*vs*rho%of_r(ir,2:4)/amag
v(ir,2)=v(ir,2)+bfield(1)
v(ir,2)=v(ir,2)+bfield(ipol)
v(ir,2)=v(ir,2)-fact*m2(1,pointlist(ir))
v(ir,:)=e2*(vx(ir,:)+vc(ir,:))
v(ir,ipol+1)=v(ir,ipol+1)-bfield(ipol)
v(ir,ipol+1)=v(ir,ipol+1)+bfield(ipol)
v(ir,ipol+1)=v(ir,ipol+1)+fact*m2(ipol,pointlist(ir))
v(:,is)=v(:,is)+DBLE(aux(:))
v(:,is)=v(:,is)-dh(:)
v(:,i)=v(:,i)-sca*v(:,k)
v(:,i)=v(:,i)/SQRT(norm)
viz=viz+1
v(k,1:nspin0)=v(k,1:nspin0)+e2*(v1x(k,1:nspin0)+v1c(k,1:nspin0))
v(k,1)=(v1x(k,1)+v1c(k,1))*e2
v(k,1)=v(k,1)+0.5d0*(vgg(k,1)+vgg(k,2))
v(k,2)=(v1x(k,2)+v1c(k,2))*e2
v(k,2)=v(k,2)+segni(k)*0.5d0*(vgg(k,1)-vgg(k,2))*rho(k,2)/amag
v(k,3)=v(k,3)+segni(k)*0.5d0*(vgg(k,1)-vgg(k,2))*rho(k,3)/amag
v(k,4)=v(k,4)+segni(k)*0.5d0*(vgg(k,1)-vgg(k,2))*rho(k,4)/amag
vkb1_d(ig,ih)=ylm_d(ig,lm)*vq_d(ig)
vkb1_d(ig,jkb)=vkb_d(ig,jkb)*(0.D0,-1.D0)*g_d(ipol,igk_k_d(ig,ik))
vkb1(ig,ih)=ylm(ig,lm)*vq(ig)
vkb1(ig,jkb)=vkb(ig,jkb)*(0.D0,-1.D0)*g(ipol,igk0(ig))
vkb1(ig,jkb)=vkb(ig,jkb)*(0.D0,-1.D0)*g(ipol,igk1(ig))
vkb1(ig,jkb)=vkb(ig,jkb)*(0.D0,-1.D0)*g(ipol,igk_k(ig,ik))
vkb__d(ig,jkb)=vkb1_d(ig,ih)*sk_d(ig)*pref
vkb_((iblock-1)*blocksize+ig,jkb)=vkb1(ig,ih)*sk(ig)*pref
vkb_(ig,1)=vkb1(ig,ih)*sk(ig)*pref
vl11j0=(t1/2.d0-(t2/4.d0+gp*t3/2.d0))*dbesj0(gp*rxy)
vl11j1=gp*(t1-(t2+t3)/4.d0)*dbesj1(gp*rxy)
vl11=t1/2.d0-(t2/4.d0+gp*t3/2.d0)
vl12j0=(gp*t1-(t2/4.d0+gp*t3/2.d0))*dbesj0(gp*rxy)
vl12j1=(2.d0*t1*gp**2-(gp*t2+gp**2*t3/lambda)/4.d0)*dbesj1(gp*rxy)
vl21j0=gp*(t1-(t2/4.d0/lambda+t3/2.d0))*dbesj0(gp*rxy)
vl21j1=(2.d0*t1*gp**2-(gp**2*t2/lambda+gp*t3)/4.d0)*dbesj1(gp*rxy)
vl22=gp*t1/2.d0/lambda-gp*(t2/4.d0/lambda+t3/2.d0)
vl22j0=gp*(t1/2.d0/lambda-(t2/4.d0/lambda+t3/2.d0))*dbesj0(gp*rxy)
vl22j1=gp**2*(t1-(t2+t3)/4.d0)*dbesj1(gp*rxy)/lambda
vlcp=fpi/omega/2.0d0/gx*vlcp
vlcp=vlcp-fac*exp(-gl(igl)*tpiba2*0.25d0)/gl(igl)
v_lm(:,:,1:nspin_mag)=v_lm(:,:,1:nspin_mag)+vout_lm(:,:,1:nspin_mag)
v_lm(k,lm)=v_lm(k,lm)*SUM(rho_lm(k,lm,1:nspin_lsda))
v_lm=v_lm+vsave_lm
Vloc0r(iz)=Vloc0r(iz)+(z1-z)*esm_efield/e2
vloc(igl0:ngl)=-fpi*zp*e2/omega/tpiba2/gl(igl0:ngl)
vloc(:)=vloc(:)*fpi/omega
vmean(nt)=vmean(nt)/DBLE(natom)
vmean(nt)=vmean(nt)+dsqrt(v(1,na)**2+v(2,na)**2+v(3,na)**2)
vnew%of_r(:,:)=v%of_r(:,:)-vnew%of_r(:,:)
v%of_r(ir,is)=v%of_r(ir,is)+2.0d0*UtsvdW(ir)
vol=(4.D0/3.D0)*pi*(r*r*r)
vol=omega/DBLE(dfftt%nr1*dfftt%nr2*dfftt%nr3)
volume(2)=par(1)*bohr_radius_angs**3
vout_lm(1:i%m,lm,is)=vout_lm(1:i%m,lm,is)+e2*(gc_lm(1:i%m,lm,is)-div_h(1:i%m,lm,is))
vph=(/-SIN(aph(i)),COS(aph(i)),0._DP/)
vpoten(ir)=vpoten(ir)+value
vr(1)=tpi*(z0+0.5d0/aaa)/aaa*rg3
v_rad(:,ix,1)=e2*(vx(:,1)+vc(:,1))
v_rad(:,ix,1)=v_rad(:,ix,1)*rho_rad(:,1)*g(i%t)%rm2(:)
v_rad(:,ix,:)=e2*(vx(:,:)+vc(:,:))
v_rad(k,ix,1)=0.5_DP*(vout_rad(k,1)+vout_rad(k,2))
v_rad(k,ix,1)=e2*(0.5D0*(vx(k,1)+vc(k,1)+vx(k,2)+vc(k,2)))
v_rad(k,ix,2:4)=vs*rho_loc(k,2:4)/amag
vr(iz)=fpi*rg3/(gp**2+kn**2+ci*aaa*kn)
vr(iz)=fpi*rg3/(kn**2+ci*2.d0*aaa*kn)
Vr(iz)=Vr(iz)-(a0+a1*z+a2*z**2+a3*z**3)
Vr(iz)=Vr(iz)+tpi*Qa/S*(-z+2*z1-za)
Vr(iz)=Vr(iz)+tpi*Qa/S*(-z*za+z1*z1)/z1
Vr(iz)=Vr(iz)-tpi*(z-2*z1)*2*z0*rg3+fpi*z0*sum1c
vrs(:,is)=vltot(:)+vr(:,is)
Vr=Vr+tpi*Qa/S*(-zb+2*z1-za)
Vr=Vr+tpi*Qa/S*(-zb*za+z1*z1)/z1
vr=vr*vfac
vs=0.5D0*(vx(ir,1)+vc(ir,1)-vx(ir,2)-vc(ir,2))
vs=e2*0.5D0*(vx(k,1)+vc(k,1)-vx(k,2)-vc(k,2))
vsph=vsph+2.D0*REAL(vgig)*sinxx
vs_rad(k,ix,i%a)=0.5_DP*(vout_rad(k,1)-vout_rad(k,2))
vtxc=0.5d0*vtxc
vtxcgc=vtxcgc-SUM(dh(:)*rhoaux(:,is))
vtxc=omega*vtxc/(dfftp%nr1*dfftp%nr2*dfftp%nr3)
vtxc=vtxc+omega*vtxcgc/(dfftp%nr1*dfftp%nr2*dfftp%nr3)
vtxc=vtxc-SUM(dh(:)*rhoout(:))
vtxc=vtxc+SUM(v(ir,2:4)*rho%of_r(ir,2:4))
vtxc=vtxc+(v1x(k,1)+v1c(k,1))*ABS(rho%of_r(k,1))*e2
vtxc=vtxc+(v1x(k,1)+v1c(k,1))*e2*ABS(rho%of_r(k,1))
vtxc=vtxc+(v1x(k,2)+v1c(k,2))*ABS(rho%of_r(k,2))*e2
vtxc=vtxc+v(ir,1)*rho%of_r(ir,1)
v(:)=v(:)/sca
v(:)=v(:)+vaux(:,1)
vx=2.0_DP-px
vx=2.d0-px
vx=2._DP-px
vx2(nt)=dsqrt(vx2(nt)/DBLE(natom))
vx2(nt)=vx2(nt)+v(1,na)**2
vy2(nt)=dsqrt(vy2(nt)/DBLE(natom))
vy2(nt)=vy2(nt)+v(2,na)**2
vz2(nt)=dsqrt(vz2(nt)/DBLE(natom))
vz2(nt)=vz2(nt)+v(3,na)**2
w1(ih)=fac*SUM(deeq(ih,1:nh(nt),ia,current_spin)*becp%k(ijkb0+1:ijkb0+nh(nt),ibnd))
w1(ih)=fac*SUM(deeq(ih,1:nh(nt),ia,current_spin)*becp%r(ijkb0+1:ijkb0+nh(nt),ibnd))
w1(ih)=fac*SUM(qq_at(ih,1:nh(nt),ia)*becp%k(ijkb0+1:ijkb0+nh(nt),ibnd))
w1(ih)=fac*SUM(qq_at(ih,1:nh(nt),ia)*becp%r(ijkb0+1:ijkb0+nh(nt),ibnd))
w1=wg(ibnd+i,ik)/omega
w1=wg(ibnd,ik)/omega
w1=wg(idx+ibnd-1,ik)/omega
w2=1.0d0-w1
w2(ih)=fac*SUM(deeq(ih,1:nh(nt),ia,current_spin)*becp%r(ijkb0+1:ijkb0+nh(nt),ibnd+1))
w2(ih)=fac*SUM(qq_at(ih,1:nh(nt),ia)*becp%r(ijkb0+1:ijkb0+nh(nt),ibnd+1))
w2=wg(ibnd+1,ik)/omega
w2=wg(idx+ibnd,ik)/omega
wan_in(i,:)%bands_from=(1.d0/rytoev)*wan_in(i,:)%bands_from
wan_in(i,:)%bands_to=(1.d0/rytoev)*wan_in(i,:)%bands_to
wband(iatwfc)=wband(iatwfc)+ABS(proj(iatwfc,ibnd))
wband(ibnd)=wband(ibnd)+ABS(proj(iatwfc,ibnd))
wband=-wband
wbest(ig)=wbest(ig)-vec(i)*w(ig,i)
w=c(i+1)-d(i)
wegrp=MOD(iegrp+my_egrp_id-1,negrp)+1
weic=rhofree*rhoaf
weight=weight+wstring(istring)
wei=rhofree*rhosf
wfcatom(ig,1,n_starting_wfc+2*l+1)=0.d0
wfcatom(ig,2,n_starting_wfc+2*l+1)=aux(ig)
wfcUaux(ig,m1)=wfcU(ig,off1+m1)
wfcUaux(ig,m2)=wfcU(ig,off2+m2)
wfcU(:,offsetU(na)+m1:offsetU(na)+m2)=swfcatom(:,oatwfc(na)+m1:oatwfc(na)+m2)
wg0(1)=1.0_dp-C(1)*a(1,4)
wg0(1:4)=wg0(1:4)*0.25_dp
wg0(1:4)=wg0(1:4)/REAL(ntetra,dp)
wg0(1)=C(1)*(1.0_dp+a(1,2)+a(1,3)+a(1,4))
wg0(1)=C(1)+(C(1)+C(2))*a(1,3)+(C(1)+C(2)+C(3))*a(1,4)
wg0(2)=1.0_dp-C(1)*a(2,4)
wg0(2)=C(1)*a(2,1)
wg0(2)=C(1)+C(2)+C(3)+(C(2)+C(3))*a(2,3)+C(3)*a(2,4)
wg0(3)=1.0_dp-C(1)*a(3,4)
wg0(3)=C(1)*a(3,1)
wg0(3)=(C(1)+C(2))*a(3,1)+(C(2)+C(3))*a(3,2)
wg0(4)=1.0_dp-C(1)*(1.0_dp+a(4,1)+a(4,2)+a(4,3))
wg0(4)=C(1)*a(4,1)
wg0(4)=(C(1)+C(2)+C(3))*a(4,1)+C(3)*a(4,2)
wg1=wg1+wg(jbnd,ik)
wg_corr_ewald=0.5_dp*e2*wg_corr_ewald*omega
wg_corr_ewald=wg_corr_ewald+ABS(rhoion)**2*wg_corr(ig)
wg_corr(ig)=omega*REAL(aux(dfftp%nl(ig)))-smooth_coulomb_g(tpiba2*gg(ig))
wg_corr(:)=wg_corr(:)*EXP(-tpiba2*gg(:)*beta/4._dp)**2
wg(ibnd,kp1)=wg(ibnd,kp1)+0.25d0/ntetra
wg(ibnd,kp2)=wg(ibnd,kp2)+0.25d0/ntetra
wg(ibnd,kp3)=wg(ibnd,kp3)+0.25d0/ntetra
wg(ibnd,kp4)=wg(ibnd,kp4)+0.25d0/ntetra
wg(:,ik)=f_inp(:,isk(ik))*wk(ik)
wg(kbnd,ik)=wg1/REAL(jbnd-ibnd,dp)
wgt(1)=(f12+f13+f14)/3.0_dp
wgt(1)=f14/3.0_dp
wgt(1)=f14/3.0_dp+f13*f31*f23/G
wgt(2)=f21/3.0_dp
wgt(2)=f23/3.0_dp+f24*f24*f32/G
wgt(2)=f24/3.0_dp
wgt(3)=f31/3.0_dp
wgt(3)=f32/3.0_dp+f31*f31*f23/G
wgt(3)=f34/3.0_dp
wgt(4)=(3.0_dp-f14-f24-f34)/3.0_dp
wgt(4)=f41/3.0_dp
wgt(4)=f41/3.0_dp+f42*f24*f32/G
which_irr(2)=ind2(1)+1
which_irr(3)=ind2(2)+1
which_irr(4)=ind2(3)+1
which_irr(aclass)=ind2(1)+1
which_irr(aclass)=ind2(1)+2
which_irr(bclass)=ind2(2)+1
which_irr(bclass)=ind2(2)+2
which_irr(cclass)=ind2(3)+1
which_irr(cclass)=ind2(3)+2
which_irr(iaxis(1))=ind2(1)+2
which_irr(iaxis(2))=ind2(2)+2
which_irr(iaxis(3))=ind2(3)+2
w(i)=2._DP/((1._DP-z*z)*pp*pp)
w(ig,m)=fpi*e2*v(ig,m)
w(ig,m)=w(ig,m)+gg(ig)*tpiba2*psic(dffts%nl(ig))
wi(ir)=aimag(box_psic(box0(ia)+ir)*CONJG(xkphase(box0(ia)+ir)))
wi(ir)=aimag(psic(box_beta(box0(ia)+ir)))
w(jc)=w(jc)+1.d0
wk(1:nkstot)=wk(1:nkstot)*degspin
wk(1:nks)=wk(nbase+1:nbase+nks)
wk(2*ik)=0.d0
wk(2*ik-1)=wk(ik)
wk(ik+nkstot)=wk(ik)
wk(jk)=sw*w(1)
wk(kindex)=wk0(iort)/REAL(nppstr,DP)
wkk(nk)=wkk(nk)+1.0d0
wk_new(ik)=wk_new(ik)+wk(jk)
wk(nks)=sw*w(ic)
wk(nk)=wk(nk)/fact
wlsm(1,13:16)=REAL((/-38,-28,17,7/),dp)
wlsm(1,1:4)=REAL((/1440,0,30,0/),dp)
wlsm(1,17:20)=REAL((/-18,-18,12,-18/),dp)
wlsm(1:4,1:20)=wlsm(1:4,1:20)/1260.0_dp
wlsm(1,5:8)=REAL((/-38,7,17,-28/),dp)
wlsm(1,9:12)=REAL((/-56,9,-46,9/),dp)
wlsm(2,13:16)=REAL((/7,-38,-28,17/),dp)
wlsm(2,1:4)=REAL((/0,1440,0,30/),dp)
wlsm(2,17:20)=REAL((/-18,-18,-18,12/),dp)
wlsm(2,5:8)=REAL((/-28,-38,7,17/),dp)
wlsm(2,9:12)=REAL((/9,-56,9,-46/),dp)
wlsm(3,13:16)=REAL((/17,7,-38,-28/),dp)
wlsm(3,1:4)=REAL((/30,0,1440,0/),dp)
wlsm(3,17:20)=REAL((/12,-18,-18,-18/),dp)
wlsm(3,5:8)=REAL((/17,-28,-38,7/),dp)
wlsm(3,9:12)=REAL((/-46,9,-56,9/),dp)
wlsm(4,13:16)=REAL((/-28,17,7,-38/),dp)
wlsm(4,1:4)=REAL((/0,30,0,1440/),dp)
wlsm(4,17:20)=REAL((/-18,12,-18,-18/),dp)
wlsm(4,5:8)=REAL((/7,17,-28,-38/),dp)
wlsm(4,9:12)=REAL((/9,-46,9,-56/),dp)
wmass=0.75D0*wmass/pi/pi
wmass=0.75D0*wmass/pi/pi/omega**(2.D0/3.D0)
wmass=wmass+amass(ityp(ia))
w(n+1-i)=w(i)
work1(i)=evc(i,ibnd)*gk(i,ipol)*gk(i,jpol)*qm1(i)
work1(i)=evc(i,ibnd)*gk(i,jpol)
work1=work1*dqi
work2(i)=evc(i+npwx,ibnd)*gk(i,jpol)
work2(ipw)=ps*dvkb(ipw,ikb)+work2(ipw)
work2_nc(ipw,is)=ps_nc(is)*dvkb(ipw,ikb)+work2_nc(ipw,is)
work(i,j)=work(i,j)+matr(k,l)*at(k,i)*at(l,j)
worksum1=ps_nc_d(ikb,1)*dvkb_d(i,ikb,4)
worksum2=ps_nc_d(ikb,2)*dvkb_d(i,ikb,4)
worksum=ps_d(ikb)*dvkb_d(i,ikb,4)
worksum=worksum+ps_d(ikb)*dvkb_d(i,ikb,4)
work(:)=vect(1)*at(1,:)+vect(2)*at(2,:)+vect(3)*at(3,:)
work(:,:)=vect(:,:)/DBLE(nsym)
work=work/nsym
work(:)=work(:)+scalar(irt(isym,:))
wr(ir)=dble(box_psic(box0(ia)+ir))
wr(ir)=dble(box_psic(box0(ia)+ir)*CONJG(xkphase(box0(ia)+ir)))
wrk(i)=wrk(i)+u(k)*bg(k,i)
wstring(istring)=wk(nppstr_3d(pdir)*istring)
wstring(istring)=wk(nppstr*istring)
wstring(istring)=wstring(istring)/weight
wsum1=ps_d(ikb)*dvkb_d(i,ikb,1)
wsum2=ps_d(ikb)*dvkb_d(i,ikb,2)
wsum3=ps_d(ikb)*dvkb_d(i,ikb,3)
wsweight=1.d0/DBLE(nreq)
ww=frr(1,1)+frr(2,2)+frr(3,3)
wx=3.0_DP-px
wx=3.d0-px
wx=3._DP-px
x=0.5d0*(q(1)*at(1,1)+q(2)*at(2,1)+q(3)*at(3,1))*nq1
x=0.5d0*(q(1)*at(1,2)+q(2)*at(2,2)+q(3)*at(3,2))*nq2
x=0.5d0*(q(1)*at(1,3)+q(2)*at(2,3)+q(3)*at(3,3))*nq3
x=0.5d0/tpiba*(q(1)*at(1,1)+q(2)*at(2,1)+q(3)*at(3,1))*nq1
x=0.5d0/tpiba*(q(1)*at(1,2)+q(2)*at(2,2)+q(3)*at(3,2))*nq2
x=0.5d0/tpiba*(q(1)*at(1,3)+q(2)*at(2,3)+q(3)*at(3,3))*nq3
x0(:)=x0(:)+tau(:,ia)*zv(ityp(ia))
x0(:)=x0(:)/zvtot
x(1)=x(KK+1)
x2(i)=atom_pos(at_sc(at2)%at,i)+DBLE(at_sc(at2)%n(i))
x2=x**2
x(2)=x(2)+ULP
x2=x_occupation(ibnd+1,ik)
x2=x_occupation(jbnd+1,ik)
x=a+0.5*del
xau(ipol,na)=bg(1,ipol)*tau(1,na)+bg(2,ipol)*tau(2,na)+bg(3,ipol)*tau(3,na)
xau(:,na)=bg(1,:)*tau(1,na)+bg(2,:)*tau(2,na)+bg(3,:)*tau(3,na)
xbb(:,1)=xbb(:,1)+dble(xb(:))**2
xbb(:,1)=xbb(:,1)+dble(xb(:))**2+aimag(xb(:))**2
xbb(:,2)=xbb(:,2)+aimag(xb(:))**2
xbp(:,1)=xbp(:,1)+dble(xb(:))*dble(xp(:))
xbp(:,1)=xbp(:,1)+xb(:)*conjg(xp(:))
xbp(:,2)=xbp(:,2)+aimag(xb(:))*aimag(xp(:))
xdata(iq)=(iq-1)*dq
x=dmax1(-1.d0,x)
xenv(:,nenv)=xx*alat
x=gx*r(ir)
x=(h_diag_d(i,ipol)-e_d(k)*s_diag_d(i,ipol))*scala
x=(h_diag(i,ipol)-e(k)*s_diag(i,ipol))*scala
XHist(k)=xstart+float(k-1)*xstep
XHist(k)=xstart+FLOAT(k-1)*xstep
xi=aaa+SQRT(aaa**2+gp**2)
xij=xenv(:,j)-taub
x_index(i+1)=x_index(i)
x_index(i+1)=x_indexj
x(i)=-z
x(j+1)=x(j)
x(j+j-1)=x(j)
x(j+j-2)=0.d0
x(j-(KK-LL))=mod(x(j-(KK-LL))+x(j),1.d0)
x(j-KK)=mod(x(j-KK)+x(j),1.d0)
xk(1,kindex)=xk0(1,iort)+REAL(ipar-1,DP)*dk(1)
xk(1,n)=dble(i-1)/nk1+dble(k1)/2/nk1
xk(:,1:nks)=xk(:,nbase+1:nbase+nks)
xk(2,kindex)=xk0(2,iort)+REAL(ipar-1,DP)*dk(2)
xk(2,n)=dble(j-1)/nk2+dble(k2)/2/nk2
xk(3,kindex)=xk0(3,iort)+REAL(ipar-1,DP)*dk(3)
xk(3,n)=dble(k-1)/nk3+dble(k3)/2/nk3
xk_cryst(:)=at(1,:)*xk(1,ik)+at(2,:)*xk(2,ik)+at(3,:)*xk(3,ik)
xkg(1,n)=dble(i-1)/nk1+dble(k1)/2/nk1
xkg(1,n)=DBLE(i-1)/nk1+DBLE(k1)/2/nk1
xkg(2,n)=dble(j-1)/nk2+dble(k2)/2/nk2
xkg(2,n)=DBLE(j-1)/nk2+DBLE(k2)/2/nk2
xkg(3,n)=dble(k-1)/nk3+dble(k3)/2/nk3
xkg(3,n)=DBLE(k-1)/nk3+DBLE(k3)/2/nk3
xk(:,ik+nkstot)=xk(:,ik)
xk(i,nks)=xkg(i,nk)-nint(xkg(i,nk))
xk(j,2*ik-1)=xk(j,ik)
xk(j,2*ik)=xk(j,ik)+xq(j)
xk(l,nk)=xk(l,nk)+k(i,j)*bg(l,i)/nmax(i)
xkphase(box_ir)=CMPLX(COS(arg),-SIN(arg),KIND=dp)
xkq(:)=bg(:,1)*sxk(1)+bg(:,2)*sxk(2)+bg(:,3)*sxk(3)
xkq_collect(:,ikq+nkqs)=xkq_collect(:,ikq)
xkr(i)=xkr(i)-nint(xkr(i))
x(LL+1)=mod(x(LL+1)+x(KK+1),1.d0)
x=(lvec(1,ll)+iix)*atb(:,1)+(lvec(2,ll)+iiy)*atb(:,2)+(lvec(3,ll)+iiz)*atb(:,3)-taub
xm2=(1.0_DP/ax)**2
x(n+1-i)=z
X%of_g(:,:)=A*X%of_g(:,:)
xpp(:,1)=xpp(:,1)+dble(xp(:))**2
xpp(:,1)=xpp(:,1)+dble(xp(:))**2+aimag(xp(:))**2
xpp(:,2)=xpp(:,2)+aimag(xp(:))**2
x=(q(1)*at(1,1)+q(2)*at(2,1)+q(3)*at(3,1))*nqhalf_dble(1)
x=(q(1)*at(1,2)+q(2)*at(2,2)+q(3)*at(3,2))*nqhalf_dble(2)
x=(q(1)*at(1,3)+q(2)*at(2,3)+q(3)*at(3,3))*nqhalf_dble(3)
xroot=xroot-fx/ffx
xstart=One/float(NHist)/Two
xstart=One/FLOAT(NHist)/Two
xstep=One/float(NHist)
xstep=One/FLOAT(NHist)
x(:)=t(:)-dble(idx(:,2))
x(:)=t(:)-dble(idx(:,2)-1)
x(:)=t(:)-dble(idx(:,2)+1)
x(:)=t(:)-dble(idx(:,2)+2)
x=theta(l,k)/avmod(l)/avmod(k)
x=vol0/v0(i)
x=w1*tau(1,inat,iim_old)+w2*tau(1,inat,iim_old+1)
x=x*alat
xx=avec2d(l,k)*avec2di(l,k)
x=x+del
xx=fact-mcons(3,1)/180.D0*pi
xx=(m_loc(3,na)/ma-mcons(3,nt))
xx=rat2di(k,na)*rat2d(k,na)
xx=tau(:,m)+ii*at(:,1)+jj*at(:,2)+kk*at(:,3)
xx=-xkr(1)*nk1-0.5d0*k1
xx=xkr(1)*nk1-0.5d0*k1
xx=x-xenv(:,i)
xyz(:,mbia)=posi(:)*alat
y2(i)=sum(y(:,i)**2)
y(:)=grad(:)-grad_p(:)
yl1(m,n)=ylm(n,1+m)
yl1(m,n)=ylms(n,1+m)
yl2(m,n)=ylm(n,4+m)
yl2(m,n)=ylms(n,4+m)
yl3(m,n)=ylm(n,9+m)
yl3(m,n)=ylms(n,9+m)
ym=1d0/y
ym2=ym**2
Y%of_g=Y%of_g+A*X%of_g
ysp(2:)=upf(nt)%beta(2:upf(nt)%kkbeta,nb)/rgrid(nt)%r(2:upf(nt)%kkbeta)
ysp(:)=upf(nt)%beta(1:upf(nt)%kkbeta,nb)/rgrid(nt)%r(1:upf(nt)%kkbeta)
y=w1*tau(2,inat,iim_old)+w2*tau(2,inat,iim_old+1)
y=y*COS(w+theta)
y=y+dy
y=y*SIN(w+theta)
y=y*SQRT(v)
y=y*t+a(i)
y=y*t+b(i,k)
y=y*t+c(i,k)
y=y*t+d(i,k)
y=y*w
yy=-xkr(2)*nk2-0.5d0*k2
yy=xkr(2)*nk2-0.5d0*k2
y=z-FLOOR(z)
z0=L/2.d0
z1=z0+esm_w
z(3)=(/0.0D0,0.0D0,0.5D0/)
za=tau(3,ia)*alat
za=za-L
zb=tau(3,ib)*alat
zb=zb-L
z=COS(pi*(i-0.25_DP)/(n+0.5_DP))
z=DBLE(iz-1)/DBLE(dfftp%nr3)*L
z=DBLE(iz-1-dfftp%nr3)/DBLE(dfftp%nr3)*L
z=DBLE(k3)/DBLE(dfftp%nr3)*L
zero(:)=vaux(:,nv1)-vaux(:,nv2)
zeta_loc=zeta_loc*det
zeta_loc=zeta_loc*zetas(kort,is)
zetam=1.d0/DSQRT(zetam)
zetam=DBLE(CONJG(zetas(kort,is))*zetas(kort,is))
zeta_mod=DBLE(CONJG(zeta)*zeta)
zetas(kort,is)=CONJG(zetam*zetas(kort,is))
zeta_tot=zeta_tot*(zeta_loc**wstring(istring))
zeta=zeta*det
z_l=DBLE(nz_l-1)*L/DBLE(dfftp%nr3)-L
z_l=-z0
z_l=z_l+L
znrm=znrm-0.01d0
zp=zp*alat
z_r=DBLE(nz_r-1)*L/DBLE(dfftp%nr3)
z_r=+z0
zvtot=zvtot+zvia
zvtot=zvtot+zv(ityp(ia))
z=w1*tau(3,inat,iim_old)+w2*tau(3,inat,iim_old+1)
z=x-emaxpos
z=(x-zgate)
z=z1-p1/pp
z=z*alat
z=z+eigts1(mill(1,ng),na)*eigts2(mill(2,ng),na)*eigts3(mill(3,ng),na)
zz=-xkr(3)*nk3-0.5d0*k3
zz=xkr(3)*nk3-0.5d0*k3