alat=SQRT(at(1,1)**2+at(2,1)**2+at(3,1)**2)
at(1,:)=(/0.5d0,1.0d0,0.0d0/)
at(2,:)=(/0.5d0,0.0d0,0.5d0/)
at(3,:)=(/0.0d0,0.5d0,1.5d0/)
at=at/alat
at(:,:)=at(:,:)/alat
at=at*alat_in
at=RESHAPE((/10.d0,0.d0,0.d0,0.d0,10.d0,0.d0,0.d0,0.d0,10.d0/),shape(at))
at=RESHAPE((/1.d0,0.d0,0.d0,0.d0,1.d0,0.d0,0.d0,0.d0,1.d0/),shape(at))
aux(1:dfft%nnr)=data_in_d(start+1:start+dfft%nnr)
aux(nc)=-ng(mc)
aux=ncp_(desc%mype+1)
aux(start+1:start+dfft%nnr)=data_in_d(start+1:start+dfft%nnr)
b1(ipol)=(a2(j)*a3(k)-a2(k)*a3(j))/den
b2(ipol)=(a3(j)*a1(k)-a3(k)*a1(j))/den
b3(ipol)=(a1(j)*a2(k)-a1(k)*a2(j))/den
batch_1=i-1
batch_2=nx-i+1
batch_count=batch_end-batch_start+1
batch_end=i-1
BATCH_X=ny*nzl
BATCH_Y1=nzl*BATCH_1
BATCH_Y2=nzl*BATCH_2
bg(1,1)=2.0*pi*(at(2,2)*at(3,3)-at(3,2)*at(2,3))/ucvol
bg(1,2)=2.0*pi*(at(2,3)*at(3,1)-at(3,3)*at(2,1))/ucvol
bg(1,3)=2.0*pi*(at(2,1)*at(3,2)-at(3,1)*at(2,2))/ucvol
bg(2,1)=2.0*pi*(at(3,2)*at(1,3)-at(1,2)*at(3,3))/ucvol
bg(2,2)=2.0*pi*(at(3,3)*at(1,1)-at(1,3)*at(3,1))/ucvol
bg(2,3)=2.0*pi*(at(3,1)*at(1,2)-at(1,1)*at(3,2))/ucvol
bg=2.d0*pi
bg(3,1)=2.0*pi*(at(1,2)*at(2,3)-at(2,2)*at(1,3))/ucvol
bg(3,2)=2.0*pi*(at(1,3)*at(2,1)-at(2,3)*at(1,1))/ucvol
bg(3,3)=2.0*pi*(at(1,1)*at(2,2)-at(2,1)*at(1,2))/ucvol
bg=RESHAPE((/1.d0,0.d0,0.d0,0.d0,1.d0,0.d0,0.d0,0.d0,1.d0/),shape(bg))
c=CMPLX(rnd_aux(1:n),rnd_aux(n:2*n))
c_d(i)=c_d(i)*tscale
cmplx(aimag(fp),-dble(fm),kind=DP)
color=MOD(mype,nyfft);key=mype/nyfft
color=mype/nzfft;key=MOD(mype,nzfft)
compare_len=dfft%my_nr3p*my_nr1p_*dfft%nr2x
compare_len=dfft%nr1x*dfft%my_nr2p*dfft%my_nr3p
compare_len=dfft%nr1x*dfft%nr2x*dfft%my_nr3p
compare_len=dfft%nr2x*dfft%nr1w(me2)*dfft%my_nr3p
compare_len=dfft%nsw(mp%me+1)*dfft%nr3x
cout(1:ldz*nsl)=c(1:ldz*nsl)
cout(1:ldz*nsl)=c(1:ldz*nsl)*tscale
cout(1:ldz*nsl)=cout(1:ldz*nsl)*tscale
cout_d(i)=c_d(i)*tscale
current_size=desc%nnr*howmany_
currsize=min(dfft%subbatchsize,batchsize-j)
den=den+s*a1(i)*a2(j)*a3(k)
desc%i0r2p(i)=desc%i0r2p(i-1)+desc%nr2p(i-1)
desc%i0r3p(i)=desc%i0r3p(i-1)+desc%nr3p(i-1)
desc%iplp(m1)=desc%iproc2(st(-i1,-i2))
desc%iplw(m1)=desc%iproc2(st(-i1,-i2))
desc%isind(m1+(m2-1)*nr1x)=-st(-i1,-i2)
desc%isind(m1+(m2-1)*nr1x)=-st(i1,i2)
desc%isind(m1+(m2-1)*nr1x)=st(-i1,-i2)
desc%isind(m1+(m2-1)*nr1x)=st(i1,i2)
desc%ismap(nsp(-ip)+desc%iss(-ip))=iss
desc%ismap(nsp(ip)+desc%iss(ip))=iss
desc%iss(i)=desc%iss(i-1)+ncp(i-1)
desc%my_i0r2p=desc%i0r2p(desc%mype2+1)
desc%my_i0r3p=desc%i0r3p(desc%mype3+1)
desc%my_nr2p=desc%nr2p(desc%mype2+1)
desc%my_nr3p=desc%nr3p(desc%mype3+1)
desc%nnp=nr1x*nr2x
desc%nnr=desc%nr1x*desc%nr2x*desc%nr3x
desc%nnr=nr1x*nr2x*nr3x
desc%nnr_tg=desc%nnr*desc%nproc2
desc%np2(isa)=imax2-imin2+1
desc%np3(isa)=imax3-imin3+1
desc%nr1p(desc%iplp(i1))=desc%nr1p(desc%iplp(i1))+1
desc%nr1w(desc%iplw(i1))=desc%nr1w(desc%iplw(i1))+1
desc%nr2p(i)=np+1
desc%nr2p_offset(i+1)=desc%nr2p_offset(i)+desc%nr2p(i)
desc%nr3p(i)=np+1
desc%nr3p_offset(i+1)=desc%nr3p_offset(i)+desc%nr3p(i)
desc%nsp(1)=desc%nsp(1)+1
desc%nsp_offset(i+1,ip)=desc%nsp_offset(i,ip)+desc%nsp(desc%iproc(i,ip))
desc%nst=desc%nst+1
desc%nsw(1)=desc%nsw(1)+1
desc%nsw_offset(i+1,ip)=desc%nsw_offset(i,ip)+desc%nsw(desc%iproc(i,ip))
desc%tg_rcv(1)=desc%nr3x*desc%nsw(desc%iproc(1,desc%mype3+1))
desc%tg_rcv(i)=desc%nr3x*desc%nsw(desc%iproc(i,desc%mype3+1))
desc%tg_rdsp(i)=desc%tg_rdsp(i-1)+desc%tg_rcv(i-1)
desc%tg_sdsp(i)=desc%tg_sdsp(i-1)+desc%nnr
desc%tg_snd(1)=desc%nr3x*desc%nsw(desc%mype+1)
desc%tg_snd(i)=desc%nr3x*desc%nsw(desc%mype+1)
dest=IEOR(me-1,iter-1)
dest=MOD(me-1+(iter-1),nprocp)
dfft%aux(j+i*nnr_)=f(j+i*nnr_)
dfft%ngm=dfft%ngl(dfft%mype+1)
dfft%ngm=(dfft%ngm+1)/2
dfft%ngw=(dfft%ngw+1)/2
dfft%ngw=dfft%nwl(dfft%mype+1)
dfft%nlm(ng)=1+n1+n2*dfft%nr1x+n3*dfft%nr1x*dfft%nr2x
dfft%nlm(ng)=1+n3+(dfft%isind(1+n1+n2*dfft%nr1x)-1)*dfft%nr3x
dfft%nl(ng)=1+n1+n2*dfft%nr1x+n3*dfft%nr1x*dfft%nr2x
dfft%nl(ng)=1+n3+(dfft%isind(1+n1+n2*dfft%nr1x)-1)*dfft%nr3x
dfft%nr1=int(sqrt(gcutm)*sqrt(at(1,1)**2+at(2,1)**2+at(3,1)**2))+1
dfft%nr2=int(sqrt(gcutm)*sqrt(at(1,2)**2+at(2,2)**2+at(3,2)**2))+1
dfft%nr3=int(sqrt(gcutm)*sqrt(at(1,3)**2+at(2,3)**2+at(3,3)**2))+1
dfti_status=DftiSetValue(hand(icurrent)%desc,DFTI_INPUT_DISTANCE,ldx*ldy)
dfti_status=DftiSetValue(hand(icurrent)%desc,DFTI_INPUT_DISTANCE,ldx*ldy*ldz)
DIST(2)=ldx*ldy
DIST=ldx*ldy
DIST=ldx*ldy*ldz
dual=ecutrho/ecutwfc
eig_offset=(eig_index-1)/2
end_in=(i+1)*dfft%nnr
end_out=(i+1)*nstick_zx*n3
end_out=(i+1)*nstick_zx*n3x
end_out=(start_out-1)+dfft%my_nr3p*dfft%nr1w(dfft%mype2+1)*dfft%nr2x
end_out=start_out+dfft%nsw(mp%me+1)*n3
end_sl=(start_out-1)+dfft%nsw(mp%me+1)*n3x
f_aux=(0.d0,0.3d0);i=1;j=2;k=1;aux(i+dffts%nr1x*(j-1)+dffts%nr1x*dffts%nr2x*(k-1))=f_aux
f_aux=(0.d0,0.5d0);i=2;j=1;k=1;aux(i+dffts%nr1x*(j-1)+dffts%nr1x*dffts%nr2x*(k-1))=f_aux
f_aux=(0.d0,0.7d0);i=1;j=1;k=2;aux(i+dffts%nr1x*(j-1)+dffts%nr1x*dffts%nr2x*(k-1))=f_aux
f_aux=(1.0,0.0);i=1;j=1;k=1;aux(i+dffts%nr1x*(j-1)+dffts%nr1x*dffts%nr2x*(k-1))=f_aux
f_aux2_d(cuf_j+it)=f_aux_d(mc+(cuf_j-1)*nnp+i*nnr)
f_aux_d(i1)=f_in_d(k+it)
f_aux_d(i1+j*nnr)=f_in_d(k+it)
f_aux_d(icompact)=f_in_d(j+it)
f_aux_d(kdest+i+(k-1)*nppx)=f_in_d(kfrom+i+(k-1)*nr3x)
f_aux_d(mc+(cuf_j-1)*nnp)=f_in_d(cuf_j+it)
f_aux_d(mc+(cuf_j-1)*nnp+i*nnr)=f_aux2_d(cuf_j+it)
f_aux_d(mc+(cuf_j-1)*nnp+i*nnr)=f_in_d(cuf_j+it)
f_aux(i1)=f_in(k+it)
f_aux(i1+k*desc%nnr)=f_in(i+it)
f_aux(icompact)=f_in(j+it)
f_aux(icompact+k*desc%nnr)=f_in(i+it)
f_aux(j+k*desc%nnr)=(0.0_DP,0.0_DP)
f_aux(kdest+i)=f_in(kfrom+i)
f_aux(mc+(j-1)*dfft%nnp)=f_in(j+it)
f_aux(mc+(j-1)*nnp)=f_in(j+it)
f_aux((me-1)*sendsiz+1:me*sendsiz)=f_in((me-1)*sendsiz+1:me*sendsiz)
f_d(i)=f_d(i)*tscale
f_d(j+i*nnr_)=(0.0_DP,0.0_DP)
ff(i)=aux(i+dffts%nr1x*(j-1)+dffts%nr1x*dffts%nr2x*(k-1))
fft_ops=fft_ops+xyflops(ip)
fft_ops=fft_ops+zflops(ip)
f(i+kj_offset)=f_out(i+kj_offset)
f_in(1:sendsiz*dfft%nproc)=f_in_d(1:sendsiz*dfft%nproc)
f_in_d(1:sendsiz*dfft%nproc)=f_in(1:sendsiz*dfft%nproc)
f_in_d(cuf_j+it)=f_aux_d(mc+(cuf_j-1)*nnp)
f_in_d(cuf_j+it)=f_aux_d(mc+(cuf_j-1)*nnp+i*nnr)
f_in(desc%nr2x*(k-1)+desc%nr2+1:desc%nr2x*k)=(0.0_DP,0.0_DP)
f_in(desc%nr3x*(k-1)+desc%nr3+1:desc%nr3x*k)=(0.0_DP,0.0_DP)
f_in_d(j+it)=f_aux_d(icompact)
f_in_d(j*ncpx*nr3x+(k-1)*nr3x+i)=0.0d0
f_in_d((k-1)*nr3x+i)=(0.d0,0.d0)
f_in_d(kfrom+i+(k-1)*nr3x)=f_aux_d(kdest+i+(k-1)*nppx)
f_in_d(k+it)=f_aux_d(i1)
f_in_d(k+it)=f_aux_d(i1+j*nnr)
f_in(i+it)=f_aux(i1+k*desc%nnr)
f_in(i+it)=f_aux(icompact+k*desc%nnr)
f_in(j+it)=f_aux(icompact)
f_in(j+it)=f_aux(mc+(j-1)*dfft%nnp)
f_in(j+it)=f_aux(mc+(j-1)*nnp)
f_in(kfrom+i)=f_aux(kdest+i)
f_in(k+it)=f_aux(i1)
f_in(k*ncpx*desc%nr2x+(j-1)*desc%nr2x+i)=0.0d0
f_in(k*ncpx*desc%nr3x+(j-1)*desc%nr3x+i)=0.0d0
f_in((me-1)*sendsiz+1:me*sendsiz)=f_aux((me-1)*sendsiz+1:me*sendsiz)
f(i*nnr_+j*nx3+1:i*nnr_+j*nx3+n3)=dfft%aux(i*nnr_+j*nx3+1:i*nnr_+j*nx3+n3)
first_index=first_index+(imin2-1)*ldx;how_many_y=imax2+1-imin2
first_index=(k-1)*ldx*ldy+1
f(j+i*nnr_)=(0.0_DP,0.0_DP)
fm=(psic(dffts%nl(j))-psic(dffts%nlm(j)))*0.5d0
fm=vin(desc%nl(ig))-vin(desc%nlm(ig))
fp=(psic(dffts%nl(j))+psic(dffts%nlm(j)))*0.5d0
fp=vin(desc%nl(ig))+vin(desc%nlm(ig))
g(1:3,ngm)=i*bg(:,1)+j*bg(:,2)+k*bg(:,3)
g(1)=DBLE(i)*bg(1,1)+DBLE(j)*bg(1,2)+DBLE(k)*bg(1,3)
g(2)=DBLE(i)*bg(2,1)+DBLE(j)*bg(2,2)+DBLE(k)*bg(2,3)
g2sort_g(ngm)=tt(k-kstart+1)
g(3)=DBLE(i)*bg(3,1)+DBLE(j)*bg(3,2)+DBLE(k)*bg(3,3)
gcut=gkcut*dual
gg(:)=gcutm+1.d0
gg(ngm)=sum(g(1:3,ngm)**2)
gkcut=gcut/dual
gkcut=sqrt(sum(kmax(1:3)**2))+sqrt(ecutw/tpiba**2)
gproc=dest+1
group_size=MIN(many_fft,nbnd-(ib-1))
gsq=g(1)**2+g(2)**2+g(3)**2
HOW_MANY(1)=ny*nz
hpsi(j,ibnd)=hpsi(j,ibnd)+psic(dffts%nl(j))
i1=i1+desc%nr2x*my_nr1p_
i1=m2+(ir1p__d(m1)-1)*nr2x+(k-1)*(nr2x*my_nr1p_)
i1=m2+(ir1p__d(m1)-1)*nr2x+(k-1)*nr2x*my_nr1p_
i1=m2+(ir1p_(m1)-1)*desc%nr2x
i1=mod(i-1,nr1p__d(iproc2))+1
i1=mod(i,nr1p_(iproc2))+1
i1=mod((j-1),nr1p_(1))+1
i1=mod((j-1),nr1p_(iproc2))+1
ibig2=1+mod(irb2+ir2-2,dfftp%nr2)
ibig2=ibig2-dfftp%my_i0r2p
ibig3=1+mod(irb3+ir3-2,dfftp%nr3)
ibig3=ibig3-dfftp%my_i0r3p
ic=ic+1
icompact=icompact+desc%nr1x
icompact=m1+(m2-1)*desc%nr1x*desc%my_nr2p
icompact=m1+(m3-1)*desc%nr1x*my_nr2p
icompact=m1+(m3-1)*nr1x*my_nr2p+(j-1)*nr1x
i=cudaEventRecord(dfft%bevents(j/dfft%subbatchsize+1),dfft%a2a_comp)
i=cudaEventRecord(dfft%bevents(j/dfft%subbatchsize+1),dfft%bstreams(j/dfft%subbatchsize+1))
i=cudaStreamWaitEvent(dfft%a2a_comp,dfft%bevents(j/dfft%subbatchsize+1),0)
i=cudaStreamWaitEvent(dfft%bstreams(j/dfft%subbatchsize+1),dfft%bevents(j/dfft%subbatchsize+1),0)
icurrent=MOD(icurrent,ndims)+1
idir=-1
idir=+1
idx(ic+mc)=itmp(mc)
ierr=cudaMemcpy2DAsync(f_aux(kdest+1),nr2px,f_in_d(kfrom+1),desc%nr2x,desc%nr2p(iproc2),ncp_(me2),cudaMemcpyDeviceToHost,stream)
ierr=cudaMemcpy2DAsync(f_aux(kdest+1),nr3px,f_in_d(kfrom+1),nr3x,desc%nr3p(iproc3),ncp_(ip),cudaMemcpyDeviceToHost,desc%stream_scatter_yz(iproc3))
ierr=cudaMemcpy2DAsync(f_in_d(kfrom+1),desc%nr2x,f_aux(kdest+1),nr2px,desc%nr2p(iproc2),ncp_(me2),cudaMemcpyHostToDevice,stream)
ierr=cudaMemcpy2DAsync(f_in_d(kfrom+1),nr3x,f_aux(kdest+1),nr3px,desc%nr3p(iproc3),ncp_(ip),cudaMemcpyHostToDevice,desc%stream_scatter_yz(iproc3))
ierr=cudaMemcpy2D(f_aux(kdest+1),nr3px,f_in_d(kfrom+1),nr3x,desc%nr3p(iproc3),howmany*ncpx,cudaMemcpyDeviceToHost)
ierr=cudaMemcpy2D(f_in_d(kfrom+1),nr3x,f_aux(kdest+1),nr3px,desc%nr3p(iproc3),howmany*ncpx,cudaMemcpyHostToDevice)
ierr=cudaMemcpyAsync(f_in_d(it0+1),f_in(it0+1),sendsize,cudaMemcpyHostToDevice,desc%stream_scatter_yz(iproc3))
ierr=cudaMemcpyAsync(f_in_d(kdest+1),f_in(kdest+1),sendsize,cudaMemcpyHostToDevice,stream)
ierr=cudaMemcpyAsync(f_in(kdest+1),f_in_d(kdest+1),sendsize,cudaMemcpyDeviceToHost,desc%stream_scatter_yz(iproc3))
ierr=cudaMemcpyAsync(f_in(kdest+1),f_in_d(kdest+1),sendsize,cudaMemcpyDeviceToHost,stream)
ig_l2g(ngm)=ng+ngm_offset
i=i-(dfft%nr1x*dfft%my_nr2p)*k
i=i-dfft%nr1x*j
ii=i+dfft%nr1*(j-1)+dfft%nr1*dfft%nr2*(k-1)
ii=i+dfft%nr1x*(j-1)
ii=i+dfft%nr1x*(j-1)+dfft%nr1x*dfft%nr2x*(k-1)
ii=i+dfft%nr1x*(j-dfft%i0r2p(jj)-1)+dfft%nr1x*dfft%nr2p(jj)*(k-dfft%i0r3p(kk)-1)
ii=ii+1
ii=i+ldx*(j-1)
i=ir-1
incr=incr*fftx_ntgrp(dffts)
incx1=1;incx2=ldx;m=ldy*nz
incx1=ldx;incx2=ldx*ldy;m=nz
incx1=ldx;incx2=ldx*ldy;m=nz;
incx1=ldx*ldy;incx2=1;m=1
incx1=ldx*ny;incx2=1;m=1
info=2*size(f_in)-displs(dfft%nproc3-1)-sendcount(dfft%nproc3-1)
info=2*size(f_out)-displs(dfft%nproc3-1)-recvcount(dfft%nproc3-1);FLUSH(6)
info=size(f_in)-displs(dfft%nproc3-1)-sendcount(dfft%nproc3-1)
info=size(f_out)-displs(dfft%nproc3-1)-recvcount(dfft%nproc3-1)
ioff=desc%nr1x*desc%my_nr2p*(ir3-1)
ioff=ioff+right_inc
ioff=ioff+right_nnr
ioff_tg=desc%nr1x*desc%nr2x*(ir3-1)+desc%nr1x*desc%my_i0r2p
ip=-1
ip=dest+1
ip=ip+1
ip=nr1p_(1)*desc%my_nr3p+1
ip=nr1p_(iproc2)*desc%my_nr3p+1
iproc2=MOD(iproc-1,desc%nproc2)+1;iproc3=(iproc-1)/desc%nproc2+1
iproc3=MOD(iproc-1,desc%nproc3)+1;iproc2=(iproc-1)/desc%nproc3+1
ir=ir-1
isign=-sgn
istart=-ni
istat=cudaMemcpy2DAsync(f_aux2_d((me-1)*sendsiz+1),nppx,f_in_d(offset+1),nr3x,npp_(me),batchsize*ncpx,cudaMemcpyDeviceToDevice,dfft%bstreams(batch_id))
istat=cudaMemcpy2DAsync(f_aux_d(kdest+1),nppx,f_in_d(kfrom+1),nr3x,npp_(proc),batchsize*ncpx,cudaMemcpyDeviceToDevice,dfft%bstreams(batch_id))
istat=cudaMemcpy2DAsync(f_aux(kdest+1),nppx,f_in_d(kfrom+1),nr3x,npp_(proc),batchsize*ncpx,cudaMemcpyDeviceToHost,dfft%bstreams(batch_id))
istat=cudaMemcpy2D(f_aux(kdest+1),nppx,f_in_d(kfrom+1),nr3x,npp_(gproc),batchsize*ncpx,cudaMemcpyDeviceToHost)
istat=cudaMemcpy2D(f_aux(kdest+1),nppx,f_in_d(kfrom+1),nr3x,npp_(gproc),ncp_(me),cudaMemcpyDeviceToHost)
istat=cudaMemcpy2D(f_in_d(kfrom+1),nr3x,f_aux(kdest+1),nppx,npp_(gproc),batchsize*ncpx,cudaMemcpyHostToDevice)
istat=cudaMemcpy2D(f_in_d(kfrom+1),nr3x,f_aux(kdest+1),nppx,npp_(gproc),ncp_(me),cudaMemcpyHostToDevice)
istat=cudaMemcpyAsync(f_aux2_d(kdest+1),f_aux2(kdest+1),sendsiz,stream=dfft%bstreams(batch_id))
istat=cudaMemcpyAsync(f_aux2(kdest+1),f_aux2_d(kdest+1),sendsiz,stream=dfft%bstreams(batch_id))
istat=cudaMemcpyAsync(f_aux_d((me-1)*sendsiz+1),f_in_d((me-1)*sendsiz+1),sendsiz,stream=dfft%a2a_comp)
istat=cudaMemcpyAsync(f_in_d((me-1)*sendsiz+1),f_aux_d((me-1)*sendsiz+1),sendsiz,stream=dfft%a2a_comp)
istat=cufftExecZ2Z(cufft_plan_y(2,ip),temp_d(1,1,nx-batch_2+1),temp_d(1,1,nx-batch_2+1),CUFFT_FORWARD)
istat=cufftExecZ2Z(cufft_plan_y(2,ip),temp_d(1,1,nx-batch_2+1),temp_d(1,1,nx-batch_2+1),CUFFT_INVERSE)
it0=(iproc2-1)*sendsize
it0=(iproc3-1)*sendsize
it0=it0+ncp_(ip)*nr3px
it=(cuf_i-1)*nppx+(gproc-1)*sendsiz
it=(cuf_i-1)*nppx+(gproc-1)*sendsiz+i*nppx*ncpx
it=(cuf_i-1)*nppx+(ip-1)*sendsiz+i*nppx*ncpx
itid=MOD(itid+1,ntids)
it=ii*nppx+(gproc-1)*sendsiz
it=ii*nppx+(ip-1)*sendsiz
it=(ip-1)*sendsiz
it=(ip-1)*sendsiz+(cuf_i-1)*nppx
it=(ip-1)*sendsiz+(cuf_i-1)*nppx+i*nppx*ncpx
it=(iproc2-1)*sendsize+(i-1)*nr2px
it=(iproc2-1)*sendsize+nr2px*i
it=(iproc3-1)*sendsize+nr3px*(me2_iproc3_offset(me2-me2_start+1,iproc3)+i-1)
it=it0+(i-1)*nr3px
it=it0+(i-1)*nr3px+j*ncpx*nr3px
it=it0+(j-1)*nr2px+k*ncpx*nr2px
it=it0+(j-1)*nr3px+k*ncpx*nr3px
it=it+nppx
it=(j-1)*nr2px+k*ncpx*nr2px
it=(j-1)*nr3px+k*ncpx*nr3px
jbnd=start_nbnd_proc(proc_+1)+ibnd-1
j=i/dfft%nr1x
j=i+ldx*ldy*(k-1)
j=i+ldx_t*ldy_t*(k-1)
j=ir+1
j=j+1
j=j+dfft%my_i0r2p
j=j+j
j=l+l
jstart=-nj
kdest=(gproc-1)*sendsiz
kdest=(iproc2-1)*sendsize
kdest=(iproc2-1)*sendsize+nr2px*(j+k*ncpx)
kdest=(iproc2-1)*sendsize+nr2px*k
kdest=(iproc3-1)*sendsize
kdest=(iproc3-1)*sendsize+nr3px*(j+k*ncpx)
kdest=(iproc3-1)*sendsize+nr3px*(me2_iproc3_offset(me2-me2_start+1,me3)+k)
kdest=kdest+nppx
kdest=kdest+nr3px*ncp_(ip)
kdest=(proc-1)*sendsiz
kfrom=desc%nr2p_offset(iproc2)+desc%nr2x*(j+k*ncpx)
kfrom=desc%nr2p_offset(iproc2)+desc%nr2x*k
kfrom=desc%nr3p_offset(iproc3)+desc%nr3x*(j+k*ncpx)
kfrom=desc%nr3p_offset(iproc3)+desc%nr3x*(me2_iproc3_offset(me2-me2_start+1,me3)+k)
kfrom=kfrom+nr3x
kfrom=kfrom+nr3x*ncp_(ip)
k=i/(dfft%nr1x*dfft%my_nr2p)
kj_offset=(j-1)*ldx+k_off
kk=1+(k-1)*ldx*ldy
k=k+dfft%my_i0r3p
kk=i+(k-1)*ldx*ldy
kk=(k)*ldx*ldy
kk=k*ldx*ldy
k_off=(k-1)*ldx*ldy
kstart=-nk
lb=-ub
ldh=ldx*ldy*ldz
l=l-1
l=n/2+1
log2n=LOG(dble(n))/LOG(2.0_DP)
m1=mod(i,desc%nr1)+1
m1=mod(mc-1,desc%nr1x)+1
m1=mod(mc-1,nr1x)+1;m2=(mc-1)/nr1x+1
m2=(j-1)/nr1p_(1)+1
m2=(j-1)/nr1p_(iproc2)+1
m2=(mc-1)/desc%nr1x+1
m2=mod(j,desc%nr2)+1
m3=(i-1)/nr1p__d(iproc2)+1
m3=(i-1)/nr1p__d(iproc2)+1;i1=mod(i-1,nr1p__d(iproc2))+1;m1=indx_d(i1,iproc2)
m3=i/nr1p_(iproc2)+1
maxpwr=NINT(LOG(DBLE(mr))/LOG(DBLE(fac)))+1
mc=desc%ismap(j+desc%iss(ip))
mc=dfft%ismap(i+ioff)
mc=m1+(m2-1)*desc%nr1x
mc=p_ismap_d(cuf_i+ioff)
me2=desc%mype2+1
me2=dfft%mype2+1
me3=desc%mype3+1
me=desc%mype+1
me=dfft%mype+1
me_p=dfft%mype+1
mill_unsorted(:,ngm_local)=(/i,j,k/)
mr=mr/fac
my_time(i)=my_time(i)+(time(i)-time(i-1))
my_time=my_time/DBLE(ncount)
n1=nint(sum(g(:,ng)*at(:,1)))
n2=nint(sum(g(:,ng)*at(:,2)))
n3=nint(sum(g(:,ng)*at(:,3)))
nc=nc+1
ncount=ncount+1
ncp_=desc%nr1p*desc%my_nr3p
ncp_=desc%nr1w*desc%my_nr3p
ncp(jj)=ncp(jj)+1
ncp(stown(i1,i2))=ncp(stown(i1,i2))+1
nct=nct+1
new=new+1
ngm_=dfftp%ngl(dfftp%mype+1)
ngm_local=ngm_local+1
ngm=ngm+1
ngm_=(ngm_+1)/2
ngm_offset=ngm_offset+ngmpe(ng)
ngmpe(mype+1)=ngm
ng=ngp(mype+1)
ngp(jj)=ngp(jj)+ngc(idx(mc))
ngp(stown(i1,i2))=ngp(stown(i1,i2))+ngc(idx(mc))
ngs_=dffts%ngl(dffts%mype+1)
ngs_=(ngs_+1)/2
ngw_=dffts%nwl(dffts%mype+1)
ngw_=(ngw_+1)/2
ni=(dfftp%nr1-1)/2
nj=(dfftp%nr2-1)/2
nk=(dfftp%nr3-1)/2
nplanes=imax3-imin3+1
np=nr2/desc%nproc2
np=nr3/desc%nproc3
nq=nr2-np*desc%nproc2
nq=nr3-np*desc%nproc3
nr1=2*nb(1)+1
nr1w_tg=nr1w_tg+1;desc%ir1w_tg(i1)=nr1w_tg;desc%indw_tg(nr1w_tg)=i1
nr2=2*nb(2)+1
nr3=2*nb(3)+1
nsiz=2*dffts%nnr_tg
nsp(-ip)=nsp(-ip)+1
nsp(ip)=nsp(ip)+1
nsticks_x=dfft%my_nr2p*dfft%my_nr3p
nsticks_x=dfft%nr2*dfft%my_nr3p
nsticks_y=dfft%nr1p(dfft%mype2+1)*dfft%my_nr3p
nsticks_y=dfft%nr1w(dfft%mype2+1)*dfft%my_nr3p
nsticks_y=dfft%nr1w_tg*dfft%my_nr3p
nsticks_yx=MAXVAL(dfft%nr1p)*MAXVAL(dfft%nr3p)
nsticks_yx=MAXVAL(dfft%nr1w)*MAXVAL(dfft%nr3p)
nsticks_z=dfft%nsp(dfft%mype+1)
nsticks_z=dfft%nsw(dfft%mype+1)
nsticks_z=dfft%nsw_tg(dfft%mype+1)
nsubbatches=ceiling(real(desc%batchsize)/desc%subbatchsize)
nx=2*int(sqrt(gcutm)*sqrt(at(1,1)**2+at(2,1)**2+at(3,1)**2))+1
nxyp=desc%nr1x*desc%my_nr2p
nxyp=dffts%nr1x*dffts%my_nr2p
ny=2*int(sqrt(gcutm)*sqrt(at(1,2)**2+at(2,2)**2+at(3,2)**2))+1
nz=2*int(sqrt(gcutm)*sqrt(at(1,3)**2+at(2,3)**2+at(3,3)**2))+1
nzfft=nproc/nyfft
nzfft=smap%nproc/nyfft
off=dffts%nr1x*dffts%my_nr2p*(ir3-1)
off=nr1x*my_nr2p*(ir3-1)
offset=1+((i-1)*(ldx_t*ldy_t))
offset=1+((i-1)*ldz_t)
offset_aux=offset_aux+dfft%nr1x*dfft%nr2
offset_aux=offset_aux+dfft%nr1x*dfft%nr2x
offset_aux=offset_aux+dfftp%nr1x*dfftp%nr2x
offset_in=offset_in+dfft%nr1x*dfft%my_nr2p
offset_in=offset_in+dfftp%nr1x*dfftp%my_nr2p
offset=offset+desc%nr2p(iproc2)
offset=offset+desc%nr3p(iproc3)
offset=offset+npp_(gproc)
offset=offset+npp_(proc)
offset_out=offset_out+dfftp%nr1x*dfftp%my_nr2p
proc2_=dfftp%iproc2(proc_+1)-1;proc3_=dfftp%iproc3(proc_+1)-1
proc=dest+1
psic(dffts%nl(j))=psi(j,ibnd)+(0.0d0,1.d0)*psi(j,ibnd+1)
psic(dffts%nlm(j))=conjg(psi(j,ibnd)-(0.0d0,1.d0)*psi(j,ibnd+1))
psic(j)=psic(j)*v(j)
psi(desc%nl(ig))=c(ig)+ci*ca(ig)
psi(desc%nlm(ig))=CONJG(c(ig))+ci*conjg(ca(ig))
pwr(i)=pwr(i)+1
r_d(i,j,k)=r_d(i,j,k)*tscale
r_d(i,j,k)=temp_d(j,k,i)*tscale
recvcount(proc)=2*dfft%nr1x*dfft%nr2p(proc+1)
recvcount(proc)=2*dfft%nr1x*dfft%nr2x*dfft%nr3p(proc+1)
recvcount(proc)=2*dfftp%nr1x*dfftp%nr2p(proc+1)
recvcount(proc)=2*dfftp%nr1x*dfftp%nr2x*dfftp%nr3p(proc+1)
recvcount(proc)=dfft%nr1x*dfft%nr2p(proc+1)
recvcount(proc)=dfft%nr1x*dfft%nr2x*dfft%nr3p(proc+1)
req_cnt=req_cnt+1
re=rs+nx*ny*nz-1
rhos(ioff+1:ioff+nxyp,ispin)=rhos(ioff+1:ioff+nxyp,ispin)+tmp_rhos(ioff_tg+1:ioff_tg+nxyp)
rhos(ioff+1:ioff+nxyp,:)=rhos(ioff+1:ioff+nxyp,:)+tmp_rhos(ioff_tg+1:ioff_tg+nxyp,:)
rhos(ioff+1:ioff+nxyp)=rhos(ioff+1:ioff+nxyp)+tmp_rhos(ioff_tg+1:ioff_tg+nxyp)
rhos(ir+ioff,ipol)=rhos(ir+ioff,ipol)+tg_rho_nc(ir+ioff_tg,ipol)
rhos(ir+ioff,ispin)=rhos(ir+ioff,ispin)+tg_rho(ir+ioff_tg)
r(i+(j)*ldx+kk)=XY(j+1)
r(ir,1)=r(ir,1)+f(ir)
r(ir,2)=r(ir,2)+f(ir)
r=r*tscale
rs=i*ldx*ldy*ldz+1
scatter_in_d(start_out:end_out)=scatter_in(start_in:start_in+nstick_zx*n3)
seed=seed+mpime
sendcount(proc)=2*dfft%nr1x*dfft%nr2p(proc+1)
sendcount(proc)=2*dfft%nr1x*dfft%nr2x*dfft%nr3p(proc+1)
sendcount(proc)=2*dfftp%nr1x*dfftp%nr2p(proc+1)
sendcount(proc)=2*dfftp%nr1x*dfftp%nr2x*dfftp%nr3p(proc+1)
sendcount(proc)=dfft%nr1x*dfft%nr2p(proc+1)
sendcount(proc)=dfft%nr1x*dfft%nr2x*dfft%nr3p(proc+1)
sendsiz=batchsize*ncpx*nppx
sendsiz=ncpx*nppx
sorc=IEOR(me-1,iter-1)
sorc=MOD(me-1-(iter-1)+nprocp,nprocp)
s=-s
start=i*dfft%nnr
start_in=i*dfft%nnr+1
start_out=1+i*nstick_zx*n3x
start_out=i*dfft%nnr+1
start_out=i*nstick_zx*n3x+1
st(i1,i2)=st(i1,i2)+1
stown(-i1,-i2)=jj
STRIDE(3)=ldx*ldy
t(1)=ty(1)+k*bg(1,3)
t(2)=ty(2)+k*bg(2,3)
t(3)=ty(3)+k*bg(3,3)
test%tolerance64=1.d-12
test%tolerance64=1.d-13
test%tolerance64=1.d-14
tg_off=dffts%nr1x*dffts%nr2x*(ir3-1)+dffts%nr1x*dffts%my_i0r2p
tg_off=nr1x*nr2x*(ir3-1)+nr1x*my_i0r2p
tg_psic(j)=tg_psic(j)*tg_v(j)
tg_psi(dffts%nl(j)+ioff)=psi(j,idx+ibnd-1)
tg_psi(dffts%nlm(j)+ioff)=CONJG(psi(j,idx+ibnd-1))
tg_v_d(tg_off+i)=v_d(off+i)
tg_v(tg_off+1:tg_off+nxyp)=v(off+1:off+nxyp)
this%n_errors=this%n_errors+1
this%n_tests=this%n_tests+1
this%tolerance32=2._real32*epsilon(1._real32)
this%tolerance64=2._real64*epsilon(1._real64)
time_avg=time_avg/npes
times(10)=times(10)-MPI_WTIME()
times(10)=times(10)+MPI_WTIME()
times(11)=times(11)-MPI_WTIME()
times(11)=times(11)+MPI_WTIME()
times(12)=times(12)-MPI_WTIME()
times(12)=times(12)+MPI_WTIME()
times(13)=times(13)-MPI_WTIME()
times(13)=times(13)+MPI_WTIME()
times(14)=times(14)-MPI_WTIME()
times(14)=times(14)+MPI_WTIME()
times(15)=times(15)-MPI_WTIME()
times(15)=times(15)+MPI_WTIME()
times(16)=times(16)-MPI_WTIME()
times(16)=times(16)+MPI_WTIME()
times(17)=times(17)-MPI_WTIME()
times(17)=times(17)+MPI_WTIME()
times(18)=times(18)-MPI_WTIME()
times(18)=times(18)+MPI_WTIME()
times(19)=times(19)-MPI_WTIME()
times(19)=times(19)+MPI_WTIME()
times(1)=times(1)-MPI_WTIME()
times(1)=times(1)+MPI_WTIME()
times(20)=times(20)-MPI_WTIME()
times(20)=times(20)+MPI_WTIME()
times(21)=times(21)-MPI_WTIME()
times(21)=times(21)+MPI_WTIME()
times(2)=times(2)-MPI_WTIME()
times(2)=times(2)+MPI_WTIME()
times(3)=times(3)-MPI_WTIME()
times(3)=times(3)+MPI_WTIME()
times(4)=times(4)-MPI_WTIME()
times(4)=times(4)+MPI_WTIME()
times(5)=times(5)-MPI_WTIME()
times(5)=times(5)+MPI_WTIME()
times(6)=times(6)-MPI_WTIME()
times(6)=times(6)+MPI_WTIME()
times(7)=times(7)-MPI_WTIME()
times(7)=times(7)+MPI_WTIME()
times(8)=times(8)-MPI_WTIME()
times(8)=times(8)+MPI_WTIME()
times(9)=times(9)-MPI_WTIME()
times(9)=times(9)+MPI_WTIME()
tpiba=2.0d0*pi/alat
tscale=1.0_DP/DBLE(nx*ny*nz)
tscale=1.0_DP/(nx*ny)
tscale=1.0_DP/(nx*ny*nz)
tscale=1.0_DP/nz
tscale=tscale/DBLE(nx*ny*nz)
tt(k-kstart+1)=t(1)**2+t(2)**2+t(3)**2
tx(1:3)=i*bg(1:3,1)
ty(1:3)=tx(1:3)+j*bg(1:3,2)
ub(1)=(nr1-1)/2
ub(2)=(nr2-1)/2
ub(3)=(nr3-1)/2
vout1(ig)=0.5d0*CMPLX(DBLE(fp),AIMAG(fm),kind=DP)
vout1(ig)=CMPLX(DBLE(vin(nl(ig))+vin(nlm(ig))),AIMAG(vin(nl(ig))-vin(nlm(ig))),kind=DP)
vout1(ig)=vout1(ig)+0.5d0*CMPLX(DBLE(fp),AIMAG(fm),kind=DP)
vout1(ig)=vout1(ig)+vin(desc%nl(ig))
vout2(ig)=0.5d0*CMPLX(AIMAG(fp),-DBLE(fm),kind=DP)
vout2(ig)=CMPLX(AIMAG(fp),-DBLE(fm),kind=DP)
vout2(ig)=CMPLX(AIMAG(vin(nl(ig))+vin(nlm(ig))),-DBLE(vin(nl(ig))-vin(nlm(ig))),kind=DP)
vout2(ig)=vout2(ig)+0.5d0*CMPLX(AIMAG(fp),-DBLE(fm),kind=DP)
vsiz=dfft%nnr*howmany
wall_avg=wall_avg/npes
wall=MPI_WTIME()-wall
XY(j+1)=r(i+(j)*ldx+kk)
yc(i1)=yc(i1)+1
yg(i1)=yg(i1)+ngc(idx(mc))
ygrc(j2)=ygrc(j2)+yc(i1)
ygrc(ygr(i1))=ygrc(ygr(i1))+yc(i1)
ygrg(j2)=ygrg(j2)+yg(i1)
ygrg(ygr(i1))=ygrg(ygr(i1))+yg(i1)
ygrp(j2)=ygrp(j2)+1
ygrp(ygr(i1))=ygrp(ygr(i1))+1
zflops(icurrent)=5.0d0*REAL(nz)*log(REAL(nz))/log(2.d0)
