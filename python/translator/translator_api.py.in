# SPDX-License-Identifier: MIT                                                
# Copyright (c) 2021 GPUFORT Advanced Micro Devices, Inc. All rights reserved.

# API
def createIndexRecordsFromDeclaration(ttdeclaration):
    """
    Per declared variable in the declaration, creates
    a context dictionary that can be easily piped
    to the (HIP) kernel code generation
    and the Fortran-C interface code generation.
    """
    context = []
    hasDimension = ttdeclaration.hasDimension()
    for ttdeclaredvariable in ttdeclaration._rhs:
        varName    = ttdeclaredvariable.name().lower()
        varContext = {}
        # basic 
        fType = makeFStr(ttdeclaration._datatype.type())
        kind  = makeFStr(ttdeclaration._datatype.kind())
        bpe   = bytes(fType,kind,default=None)
        varContext["name"]                       = varName
        varContext["fType"]                      = fType
        varContext["kind"]                       = kind
        varContext["bytesPerElement"]            = bpe 
        varContext["cType"]                      = convertToCType(fType,kind,"TODO unknown")
        varContext["fInterfaceType"]             = varContext["cType"]
        varContext["fInterfaceQualifiers"]       = [ "value" ] # assume pass by value by default
        # TODO pack into single variable
        varContext["parameter"]                  = ttdeclaration.hasParameter()
        varContext["pointer"]                    = ttdeclaration.hasStringQualifier("pointer")
        # CUF
        varContext["device"]                     = ttdeclaration.hasStringQualifier("device")
        varContext["pinned"]                     = ttdeclaration.hasStringQualifier("pinned")
        varContext["managed"]                    = ttdeclaration.hasStringQualifier("managed")
        varContext["allocatable"]                = ttdeclaration.hasStringQualifier("allocatable")
        # ACC/OMP
        varContext["declareOnTarget"]           = False
        # arrays
        varContext["rank"]                       = 0
        dimensionQualifier = findAll(ttdeclaration._qualifiers,TTDimensionQualifier)
        if ttdeclaredvariable.hasBounds() or len(dimensionQualifier):
            varContext["fInterfaceType"] = "type(c_ptr)"
            if len(dimensionQualifier):
                ttbounds = dimensionQualifier[0]._bounds
            else:
                ttbounds = ttdeclaredvariable.getBounds()
            rank = ttbounds.rank()
            varContext["rank"] = rank
            varContext["unspecifiedBounds"] = ttbounds.hasUnspecifiedBounds()
            if varContext["unspecifiedBounds"]: # TODO: return a mix of unspecified bounds and specified bounds in the future
                varContext["lbounds"]                    = [ "{0}_lb{1}".format(varName,i) for i in range(1,rank+1) ]
                varContext["counts"]                     = [ "{0}_n{1}".format(varName,i) for i in range(1,rank+1 ) ]
                varContext["indexMacroWithPlaceHolders"] = ttbounds.indexMacroCStr(varName,usePlaceHolders=True)
                varContext["indexMacro"]                 = varContext["indexMacroWithPlaceHolders"]
            else:
                varContext["lbounds"]                    = ttbounds.specifiedLowerBounds()
                varContext["counts"]                     = ttbounds.specifiedCounts()
                varContext["indexMacroWithPlaceHolders"] = ttbounds.indexMacroCStr(varName,usePlaceHolders=True) 
                varContext["indexMacro"]                 = ttbounds.indexMacroCStr(varName,usePlaceHolders=False)
            varContext["totalCount"]   = "*".join(varContext["counts"])
            varContext["totalBytes"]   = None if bpe is None else bpe+"*("+varContext["totalCount"]+")"
        # handle parameters
        varContext["value"] = None
        if ttdeclaration.hasParameter():
            if ttdeclaredvariable.rhsIsNumber():
                varContext["value"] = ttdeclaredvariable.rhsCStr()
            else:
                #varContext["value"] = ttdeclaredvariable.rhsCStr()
                # TODO 
                pass
        context.append(varContext)
    return context

def changeKind(varContext,kind):
    fType = varContext["fType"]
    bpe   = bytes(fType,kind,default=None)
    varContext["kind"]                 = kind
    varContext["bytesPerElement"]      = bpe 
    varContext["cType"]                = convertToCType(fType,kind,"TODO unknown")
    if varContext["rank"] == 0:
      varContext["fInterfaceType"] = varContext["cType"]
    #
    varContext["totalBytes"] = None if bpe is None else bpe+"*("+varContext["totalCount"]+")"

def convertArithmeticExpression(fortranSnippet):
    return ( matrixArithmeticExpression | complexArithmeticExpression | arithmeticExpression ).parseString(fortranSnippet)[0].cStr()

def parseAttributes(ttattributes):
    attribute    = makeFStr(ttattributes._qualifiers[0]).lower()
    modifiedVars = [makeFStr(var).lower() for var in ttattributes._rhs]
    return attribute, modifiedVars 

def createIndexSearchTagForVariable(variableExpression):
    """
    Creates tag from variable expressions such as 'A%b(i)%c' that
    can be used to search the index via the scoper module.
    The example 'A%b(i)%c' is translated to a tag 'a%b%c' (lower case).
    All array indexing expressions are stripped away.
    A single identifer 'a' would be translated to the tag 'a'.

    :param str variableExpression: a simple identifier such as 'a' or 'A_d' or a more complicated derived-type member variable expression such as 'a%b%c' or 'A%b(i)%c'.
    :see: indexer.scoper.searchIndexForVariable
    """
    if not "(" in variableExpression:
        return variableExpression.lower()
    else:
        expr        = derivedTypeElem
        parseResult = expr.parseString(variableExpression.lower())[0]
        def traverse(ttderivedtype):
            result = ttderivedtype._type.name().lower() + "%"
            if type(ttderivedtype._element) == TTIdentifier or\
               type(ttderivedtype._element) == TTFunctionCallOrTensorAccess:
                result += ttderivedtype._element.name().lower() # end of recursion
            else: # if type(ttderivedtype._element) == TTDerivedTypeElem:
               result += traverse(ttderivedtype._element)
            return result
        return traverse(parseResult)

# TODO parsing and translation is similar but analysis differs between the different kernel
# types. For example for CUF, the reduction vars must be detected by the parser (lhs scalars)
# while they are specified with ACC,OMP.
def parseLoopKernel(fortranSnippet,scope=[],maxRecursions=30):
    """
    Return a csnippet equivalent to the original Fortran code.
    """
    global KEYWORDS 

    recursionsLeft=0
    def simplifyLoopKernelUntilItCanGetParsed(fortranSnippet,recursionsToGo):
        nonlocal recursionsLeft
        recursionsLeft = recursionsToGo
        try:
            return loopKernel.parseString(fortranSnippet)[0]
        except ParseBaseException as pbe:
            if recursionsToGo <= 0:
                raise pbe
            else:
                lineno = pbe.__getattr__("lineno")
                lines = fortranSnippet.split("\n")
                lines[lineno-1] = "! TODO could not parse: {}".format(lines[lineno-1])
                modifiedFortranSnippet = "\n".join(lines)
                #print(modifiedFortranSnippet)
                return simplifyLoopKernelUntilItCanGetParsed(modifiedFortranSnippet,recursionsToGo-1)
        except Exception as e:
            raise e        
   
    fortranSnippet = prepareFortranSnippet(fortranSnippet)
    try:
        computeConstruct = simplifyLoopKernelUntilItCanGetParsed(fortranSnippet,maxRecursions)
        computeConstruct._scope = scope
        if recursionsLeft < maxRecursions:
            body = "\n".join(fortranSnippet.split("\n")[1:])
        return computeConstruct
    except Exception as e:
        #raise e
        utils.logging.logError("failed to convert kernel:\n{}".format(fortranSnippet))
        utils.logging.logError(str(e))
        return EmptyComputeConstruct(fsnippet)

class EmptyProcedureBody():
    def cStr(self):
        return "" 

def parseProcedureBody(fortranSnippet,scope,indexRecord,resultName="",maxRecursions=10):
    """
    Parse a function/subroutine body.
    """
    global KEYWORDS 

    recursionsLeft=0
    def simplifyProcedureBodyUntilItCanGetParsed(fortranSnippet,recursionsToGo):
        nonlocal recursionsLeft
        recursionsLeft = recursionsToGo
        try:
            return procedureBody.parseString(fortranSnippet)[0]
        except ParseBaseException as pbe:
            if recursionsToGo <= 0:
                raise pbe
            else:
                lineno = pbe.__getattr__("lineno")
                lines = fortranSnippet.split("\n")
                lines[lineno-1] = "! TODO(gpufort) could not parse: {}".format(lines[lineno-1])
                modifiedFortranSnippet = "\n".join(lines)
                return simplifyProcedureBodyUntilItCanGetParsed(modifiedFortranSnippet,recursionsToGo-1)
        except Exception as e:
            raise e 
 
    fortranSnippet = prepareFortranSnippet(fortranSnippet)
    try:
        parseResult = simplifyProcedureBodyUntilItCanGetParsed(fortranSnippet,maxRecursions)
        parseResult._scope        = scope 
        parseResult._resultName   = resultName
        parseResult._ignoredVars += indexRecord["dummyArgs"]
    except Exception as e:
        #raise e
        utils.logging.logError(LOG_PREFIX,"parseProcedureBody","failed to convert kernel:\n{}".format(fortranSnippet))
        utils.logging.logError(LOG_PREFIX,"parseProcedureBody",str(e))
        return EmptyProcedureBody()
    return parseResult
