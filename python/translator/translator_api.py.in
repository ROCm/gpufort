# SPDX-License-Identifier: MIT                                                
# Copyright (c) 2021 GPUFORT Advanced Micro Devices, Inc. All rights reserved.

# API
def create_indexRecordsFromDeclaration(ttdeclaration):
    """
    Per declared variable in the declaration, creates
    a context dictionary that can be easily piped
    to the (HIP) kernel code generation
    and the Fortran-C interface code generation.
    """
    global LOG_PREFIX

    utils.logging.log_enter_function(LOG_PREFIX,"create_indexRecordsFromDeclaration")
    
    context = []
    has_dimension = ttdeclaration.has_dimension()
    for ttdeclaredvariable in ttdeclaration._rhs:
        var_name    = ttdeclaredvariable.name().lower()
        ivar = {}
        # basic 
        f_type = make_f_str(ttdeclaration._datatype.type())
        kind  = make_f_str(ttdeclaration._datatype.kind())
        bpe   = bytes(f_type,kind,default=None)
        ivar["name"]                       = var_name
        ivar["f_type"]                     = f_type
        ivar["kind"]                       = kind
        ivar["bytes_per_element"]          = bpe 
        ivar["c_type"]                     = convert_to_c_type(f_type,kind,"TODO unknown")
        ivar["f_interface_type"]           = ivar["f_type"]
        ivar["f_interface_qualifiers"]     = [ "value" ] # assume pass by value by default
        # TODO pack into single variable
        ivar["qualifiers"]                 = ttdeclaration.get_string_qualifiers()
        # ACC/OMP
        ivar["declare_on_target"]          = False
        # arrays
        ivar["rank"]                       = 0
        dimension_qualifier = find_all(ttdeclaration._qualifiers,TTDimensionQualifier)
        if ttdeclaredvariable.has_bounds() or len(dimension_qualifier):
            ivar["f_interface_type"] = "type(c_ptr)"
            if len(dimension_qualifier):
                ttbounds = dimension_qualifier[0]._bounds
            else:
                ttbounds = ttdeclaredvariable.get_bounds()
            rank = ttbounds.rank()
            ivar["rank"] = rank
            ivar["unspecified_bounds"] = ttbounds.has_unspecified_bounds()
            if ivar["unspecified_bounds"]: # TODO: return a mix of unspecified bounds and specified bounds in the future
                ivar["lbounds"]                       = [ "{0}_lb{1}".format(var_name,i) for i in range(1,rank+1) ]
                ivar["counts"]                        = [ "{0}_n{1}".format(var_name,i) for i in range(1,rank+1 ) ]
                ivar["index_macro_with_placeholders"] = ttbounds.index_macro_c_str(var_name,use_place_holders=True)
                ivar["index_macro"]                   = ivar["index_macro_with_placeholders"]
            else:
                ivar["lbounds"]                       = ttbounds.specified_lower_bounds()
                ivar["counts"]                        = ttbounds.specified_counts()
                ivar["index_macro_with_placeholders"] = ttbounds.index_macro_c_str(var_name,use_place_holders=True) 
                ivar["index_macro"]                   = ttbounds.index_macro_c_str(var_name,use_place_holders=False)
            ivar["total_count"]   = "*".join(ivar["counts"])
            ivar["total_bytes"]   = None if bpe is None else bpe+"*("+ivar["total_count"]+")"
        # handle parameters
        ivar["value"] = None
        if "parameter" in ivar["qualifiers"]:
            if ttdeclaredvariable.rhs_is_number():
                ivar["value"] = ttdeclaredvariable.rhs_c_str()
            else:
                #ivar["value"] = ttdeclaredvariable.rhs_c_str()
                # TODO 
                pass
        context.append(ivar)
    
    utils.logging.log_leave_function(LOG_PREFIX,"create_indexRecordsFromDeclaration")
    
    return context

def change_kind(ivar,kind):
    f_type                    = ivar["f_type"]
    bpe                       = bytes(f_type,kind,default=None)
    ivar["kind"]              = kind
    ivar["bytes_per_element"] = bpe 
    ivar["c_type"]            = convert_to_c_type(f_type,kind,"TODO unknown")
    if ivar["rank"] == 0:
      ivar["f_interface_type"] = ivar["c_type"]
    #
    ivar["total_bytes"] = None if bpe is None else bpe+"*("+ivar["total_count"]+")"

def convert_arithmetic_expression(fortran_snippet):
    return ( matrix_arithmetic_expression | complex_arithmetic_expression | arithmetic_expression ).parseString(fortran_snippet)[0].c_str()

def parse_attributes(ttattributes):
    attribute    = make_f_str(ttattributes._qualifiers[0]).lower()
    modified_vars = [make_f_str(var).lower() for var in ttattributes._rhs]
    return attribute, modified_vars 

def create_index_search_tag_for_variable(variable_expression):
    """
    Creates tag from variable expressions such as 'A%b(i)%c' that
    can be used to search the index via the scoper module.
    The example 'A%b(i)%c' is translated to a tag 'a%b%c' (lower case).
    All array indexing expressions are stripped away.
    A single identifer 'a' would be translated to the tag 'a'.

    :param str variable_expression: a simple identifier such as 'a' or 'A_d' or a more complicated derived-type member variable expression such as 'a%b%c' or 'A%b(i)%c'.
    :see: indexer.scoper.search_index_for_variable
    """
    if not "(" in variable_expression:
        return variable_expression.lower()
    else:
        expr         = derived_type_elem
        parse_result = expr.parseString(variable_expression.lower())[0]
        def traverse(ttderivedtype):
            result = ttderivedtype._type.name().lower() + "%"
            if type(ttderivedtype._element) == TTIdentifier or\
               type(ttderivedtype._element) == TTFunctionCallOrTensorAccess:
                result += ttderivedtype._element.name().lower() # end of recursion
            else: # if type(ttderivedtype._element) == TTDerivedTypeElem:
               result += traverse(ttderivedtype._element)
            return result
        return traverse(parse_result)

# TODO parsing and translation is similar but analysis differs between the different kernel
# types. For example for CUF, the reduction vars must be detected by the parser (lhs scalars)
# while they are specified with ACC,OMP.
def parse_loop_kernel(fortran_statements,scope=[],max_recursions=30):
    """
    Return a csnippet equivalent to the original Fortran code.
    """
    global LOG_PREFIX

    ttloopkernel = _intrnl_parse_fortran_code(fortran_statements).body[0]
    
    ttloopkernel.scope = scope
    return ttloopkernel

def parse_procedure_body(fortran_statements,scope=[],result_name="",max_recursions=10):
    """
    Parse a function/subroutine body.
    """
    global KEYWORDS 
    global LOG_PREFIX

    parse_result    = _intrnl_parse_fortran_code(fortran_statements)
    ttprocedurebody = TTProcedureBody("",0,[parse_result.body])
    
    ttprocedurebody.scope      = scope 
    ttprocedurebody.result_name = result_name
    return ttprocedurebody
