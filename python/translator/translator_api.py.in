# SPDX-License-Identifier: MIT                                                
# Copyright (c) 2021 GPUFORT Advanced Micro Devices, Inc. All rights reserved.

# API
def _intrnl_extract_qualifiers_and_variables(tokens):
    # ex:
    # input: "parameter , intent ( inout ) , dimension ( : , : ) ::"
    # result : ["parameter", "intent(inout)", "dimension(:,:)" ]
    result = []
    idx               = 0
    current_qualifier = ""
    open_brackets     = 0
    criterion         = len(tokens)
    while (criterion):
        tk  = tokens[idx]
        print(tk)
        idx += 1
        criterion == idx < len(tokens)
        if tk == "," and open_brackets == 0:
            if len(current_qualifier):
                result.append(current_qualifier)
            current_qualifier = ""
        elif tk == "::":
            criterion = False
        else:
            current_qualifier += tk
        if tk == "(":
            open_brackets += 1
        elif tk == ")":
            open_brackets -= 1
    if len(current_qualifier):
        result.append(current_qualifier)
    return result

def parse_declaration(fortran_statement):
    global LOG_PREFIX

    orig_tokens             = utils.pyparsingutils.tokenize(fortran_statement,padded_size=10)
    tokens                  = orig_tokens
    idx_last_consumed_token = -1 # inclusive
    # handle datatype
    datatype            = None
    kind                = None
    if tokens[0] == "type" or tokens[1] == "*":
        # ex: type ( dim3 )
        # ex: integer * 4
        datatype = tokens[0]
        kind     = tokens[2]
        idx_last_consumed_token = 2 if tokens[1] == "*" else 3
    elif tokens[1] == "(" and tokens[2] == "kind" and\
         tokens[3] in ["=","("]:
        # ex: integer ( kind = 4 )
        # ex: integer ( kind ( 4 ) )
        datatype = tokens[0]
        kind     = tokens[4]
        idx_last_consumed_token = 5 if tokens[3] == "=" else 6
    elif tokens[1] in [",","::"] or tokens[1].isidentifier():
        # ex: integer ,
        # ex: integer ::
        # ex: integer a
        datatype = tokens[0]
        idx_last_consumed_token = 0
    else:
        utils.logging.log_error(LOG_PREFIX,"parse_declaration","could not parse datatype in variable declaration statement '{}'".format(fortran_statement))
        sys.exit(2)
    # handle qualifiers
    qualifiers_raw          = []
    tokens                  = tokens[idx_last_consumed_token+1:] # remove type part tokens
    idx_last_consumed_token = -1
    if tokens[0] == "," and "::" in tokens:
        qualifiers = _intrnl_extract_qualifiers_and_variables(tokens)
        # handle intent
        # handle dimension
        idx_last_consumed_token == tokens.index("::")
    elif tokens[0] == "::":
        idx_last_consumed_token = 0
    elif tokens[0] == ",":
        utils.logging.log_error(LOG_PREFIX,"parse_declaration","could not parse qualifier list in variable declaration statement '{}'".format(fortran_statement))
        sys.exit(2)
    # handle variables list
    tokens = tokens[idx_last_consumed_token+1:] # remove qualifier list tokens
    variables_raw = _intrnl_extract_qualifiers_and_variables(tokens) 

    # construct declaration tree node
    # TODO
    qualifiers = []
    for qualifier in qualifiers_raw:
        if qualifier.startswith("dimension"):
            pass
        elif qualifiers.startswith("intent"):
            pass
        else:
            qualifiers.append(qualifier)
    variables = []
    for var in variables_raw:
        pass
   #
   #def _assign_fields(self,tokens):
   #     #declaration = datatype + Optional(COMMA + attribute_list,default=[]) + COLONS + Group(delimitedList(declaration_variable))   # ! emits *,[*],[*]
   #     self._datatype, self._qualifiers, self._rhs = tokens
   #     self.ignore_list = []
   declaration_tokens = [ datatype, kind, qualifiers, variables ]
   return TTDeclaration( fortran_statement,0, declaration_tokens )

def create_index_records_from_declaration(ttdeclaration):
    """
    Per declared variable in the declaration, creates
    a context dictionary that can be easily piped
    to the (HIP) kernel code generation
    and the Fortran-C interface code generation.
    """
    global LOG_PREFIX

    utils.logging.log_enter_function(LOG_PREFIX,"create_index_records_from_declaration")
    
    context = []
    has_dimension = ttdeclaration.has_dimension()
    for ttdeclaredvariable in ttdeclaration._rhs:
        var_name    = ttdeclaredvariable.name().lower()
        ivar = {}
        # basic 
        f_type = make_f_str(ttdeclaration._datatype.type())
        kind  = make_f_str(ttdeclaration._datatype.kind())
        bpe   = bytes(f_type,kind,default=None)
        ivar["name"]                       = var_name
        ivar["f_type"]                     = f_type
        ivar["kind"]                       = kind
        ivar["bytes_per_element"]          = bpe 
        ivar["c_type"]                     = convert_to_c_type(f_type,kind,"TODO unknown")
        ivar["f_interface_type"]           = ivar["f_type"]
        ivar["f_interface_qualifiers"]     = [ "value" ] # assume pass by value by default
        # TODO pack into single variable
        ivar["qualifiers"]                 = ttdeclaration.get_string_qualifiers()
        # ACC/OMP
        ivar["declare_on_target"]          = False
        # arrays
        ivar["rank"]                       = 0
        dimension_qualifier = find_all(ttdeclaration._qualifiers,TTDimensionQualifier)
        if ttdeclaredvariable.has_bounds() or len(dimension_qualifier):
            ivar["f_interface_type"] = "type(c_ptr)"
            if len(dimension_qualifier):
                ttbounds = dimension_qualifier[0]._bounds
            else:
                ttbounds = ttdeclaredvariable.get_bounds()
            rank = ttbounds.rank()
            ivar["rank"] = rank
            ivar["unspecified_bounds"] = ttbounds.has_unspecified_bounds()
            if ivar["unspecified_bounds"]: # TODO: return a mix of unspecified bounds and specified bounds in the future
                ivar["lbounds"]                       = [ "{0}_lb{1}".format(var_name,i) for i in range(1,rank+1) ]
                ivar["counts"]                        = [ "{0}_n{1}".format(var_name,i) for i in range(1,rank+1 ) ]
                ivar["index_macro_with_placeholders"] = ttbounds.index_macro_c_str(var_name,use_place_holders=True)
                ivar["index_macro"]                   = ivar["index_macro_with_placeholders"]
            else:
                ivar["lbounds"]                       = ttbounds.specified_lower_bounds()
                ivar["counts"]                        = ttbounds.specified_counts()
                ivar["index_macro_with_placeholders"] = ttbounds.index_macro_c_str(var_name,use_place_holders=True) 
                ivar["index_macro"]                   = ttbounds.index_macro_c_str(var_name,use_place_holders=False)
            ivar["total_count"]   = "*".join(ivar["counts"])
            ivar["total_bytes"]   = None if bpe is None else bpe+"*("+ivar["total_count"]+")"
        # handle parameters
        ivar["value"] = None
        if "parameter" in ivar["qualifiers"]:
            if ttdeclaredvariable.rhs_is_number():
                ivar["value"] = ttdeclaredvariable.rhs_c_str()
            else:
                #ivar["value"] = ttdeclaredvariable.rhs_c_str()
                # TODO 
                pass
        context.append(ivar)
    
    utils.logging.log_leave_function(LOG_PREFIX,"create_index_records_from_declaration")
    
    return context

def change_kind(ivar,kind):
    f_type                    = ivar["f_type"]
    bpe                       = bytes(f_type,kind,default=None)
    ivar["kind"]              = kind
    ivar["bytes_per_element"] = bpe 
    ivar["c_type"]            = convert_to_c_type(f_type,kind,"TODO unknown")
    if ivar["rank"] == 0:
      ivar["f_interface_type"] = ivar["c_type"]
    #
    ivar["total_bytes"] = None if bpe is None else bpe+"*("+ivar["total_count"]+")"

def convert_arithmetic_expression(fortran_snippet):
    return ( matrix_arithmetic_expression | complex_arithmetic_expression | arithmetic_expression ).parseString(fortran_snippet)[0].c_str()

def parse_attributes(ttattributes):
    attribute    = make_f_str(ttattributes._qualifiers[0]).lower()
    modified_vars = [make_f_str(var).lower() for var in ttattributes._rhs]
    return attribute, modified_vars 
# TODO parsing and translation is similar but analysis differs between the different kernel
# types. For example for CUF, the reduction vars must be detected by the parser (lhs scalars)
# while they are specified with ACC,OMP.
def parse_loop_kernel(fortran_statements,scope=[]):
    """
    Return a csnippet equivalent to the original Fortran code.
    """
    global LOG_PREFIX

    ttloopkernel = _intrnl_parse_fortran_code(fortran_statements).body[0]
    
    ttloopkernel.scope = scope
    return ttloopkernel

def parse_procedure_body(fortran_statements,scope=[],result_name=""):
    """
    Parse a function/subroutine body.
    """
    global KEYWORDS 
    global LOG_PREFIX

    parse_result    = _intrnl_parse_fortran_code(fortran_statements)
    ttprocedurebody = TTProcedureBody("",0,[parse_result.body])
    
    ttprocedurebody.scope      = scope 
    ttprocedurebody.result_name = result_name
    return ttprocedurebody
