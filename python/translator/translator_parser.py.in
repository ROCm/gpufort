def _intrnl_preprocess_fortran_statement(statement):
    """Performs the following operations:
    - replace power (**) expression by func call expression
    # TODO handle directly via arithmetic expression grammar
    """
    result = statement
    if "**" in result:
        result = power.transformString(result)
    return result

def _intrnl_parse_fortran_code(statements,scope=[]):
    """
    :param list for
    
    requirements:
    
    - input is statements:
      - all lower case
      - & multiline statement/directives have been converted to single-line statement
      - single-line multi-statement has been converted to multiple single statements
      - lines may contain comments and directives appended to actual code
        - comments must be preserved
  
    behavior:

    - treat do, do while, if, elseif, else, select and end statements explicitly
    - parse other statements
    - consider comments
    - every call returns a subtree
    """
    global LOG_PREFIX
    
    utils.logging.log_enter_function(LOG_PREFIX,"_intrnl_parse_fortran_code")

    # tree creation ops
    def append_(node,kind=None):
        nonlocal curr
        nonlocal level
        if isinstance(node,TTNode):
            node.parent = curr
            node.indent = "  "*level
        curr.body.append(node)
        if kind != None:
            utils.logging.log_debug2(LOG_PREFIX,"_intrnl_parse_fortran_code.append_","found {} in statement '{}'".format(kind,stmt))
    def descend_(node,kind,inc_level=True):
        nonlocal curr
        nonlocal stmt
        nonlocal level
        append_(node)
        curr = node
        if inc_level:
            level += 1
        utils.logging.log_debug2(LOG_PREFIX,"_intrnl_parse_fortran_code.append_","enter {} in statement '{}'".format(kind,stmt))
    def ascend_(kind):
        nonlocal curr
        nonlocal stmt
        nonlocal level
        curr  = curr.parent
        level = min(level-1,0)
        utils.logging.log_debug2(LOG_PREFIX,"_intrnl_parse_fortran_code.append_","leave {} in statement '{}'".format(kind,stmt))
    
    # error handling
    def error_(expr,exception=None):
        nonlocal stmt1
        utils.logging.log_error(LOG_PREFIX,"_intrnl_parse_fortran_code","failed to parse {} expression '{}'".format(expr,stmt))
        if exception != None:
            debug_msg = ": "+str(exception)
            utils.logging.log_debug(LOG_PREFIX,"_intrnl_parse_fortran_code",debug_msg)
        sys.exit(2) # TODO error code
    def warn_(expr,exception=None):
        nonlocal stmt1
        utils.logging.log_warn(LOG_PREFIX,"_intrnl_parse_fortran_code","ignored {} expression '{}'".format(expr,stmt))
        if exception != None:
            utils.logging.log_debug(LOG_PREFIX,"_intrnl_parse_fortran_code",str(exception))
        sys.exit(2) # TODO error code
    def ignore_(expr):
        nonlocal stmt1
        utils.logging.log_debug3(LOG_PREFIX,"_intrnl_parse_fortran_code","ignored {} '{}'".format(expr,stmt))

    # parser loop
    ttree               = TTRoot()
    curr                = ttree
    curr_offload_region = None 
    curr_offload_loop   = None
    level               = 0
    for stmt1 in statements:
        stmt   = _intrnl_preprocess_fortran_statement(stmt1)
        tokens = utils.parsingutils.tokenize(stmt.lower(),padded_size=6)
        # strip of ! from tokens.index("!")
        if "!" in stmt:
            stmt_no_comment = stmt.split("!")[0].lower()
        else:
            stmt_no_comment = stmt.lower()
        utils.logging.log_debug3(LOG_PREFIX,"_intrnl_parse_fortran_code","process statement '{}' (preprocessed: '{}')".format(stmt1,stmt))
        if len(tokens):
            utils.logging.log_debug4(LOG_PREFIX,"_intrnl_parse_fortran_code","tokens=['{}']".format("','".join(tokens)))
        # tree construction 
        if utils.parsingutils.is_blank_line(stmt):
            if type(curr) != TTRoot:
                append_(stmt,"blank line")
        elif utils.parsingutils.is_ignored_statement(tokens):
            ignore_("statement")
        elif utils.parsingutils.is_comment(tokens,stmt):
            if type(curr) != TTRoot:
                comment = re.split("!|^[c*]",stmt1,1,re.IGNORECASE)[1]
                append_("// "+comment+"\n","comment")
        elif utils.parsingutils.is_fortran_directive(tokens,stmt):
            try:
                if utils.parsingutils.is_ignored_fortran_directive(tokens):
                    ignore_("directive")
                elif utils.parsingutils.is_fortran_offload_region_plus_loop_directive(tokens): # most complex first
                    parse_result = loop_annotation.parseString(stmt,parseAll=True)
                    curr_offload_region = parse_result[0]
                    curr_offload_loop   = parse_result[0] 
                    utils.logging.log_debug2(LOG_PREFIX,"_intrnl_parse_fortran_code.append_","found {} in statement '{}'".format("loop offloading directive",stmt))
                elif utils.parsingutils.is_fortran_offload_region_directive(tokens):
                    parse_result = parallel_region_start.parseString(stmt,parseAll=True)
                    curr_offload_region = parse_result[0]
                    utils.logging.log_debug2(LOG_PREFIX,"_intrnl_parse_fortran_code.append_","found {} in statement '{}'".format("begin of offloaded region",stmt))
                elif utils.parsingutils.is_fortran_offload_loop_directive(tokens):
                    parse_result = loop_annotation.parseString(stmt,parseAll=True)
                    curr_offload_loop = parse_result[0] 
                    utils.logging.log_debug2(LOG_PREFIX,"_intrnl_parse_fortran_code.append_","found {} in statement '{}'".format("loop directive",stmt))
                else:
                    warn_("directive",e)
            except Exception as e:
                error_("directive",e)
                pass
        # do/while
        elif utils.parsingutils.is_do_while(tokens):
            try: 
                parse_result = fortran_do_while.parseString(stmt_no_comment,parseAll=True)
                descend_(TTDoWhile(stmt,0,parse_result.asList()+[[]]),"do-while loop")
            except Exception as e:
                error_("do-while loop",e)
        elif utils.parsingutils.is_do(tokens):
            try: 
                parse_result   = fortran_do.parseString(stmt_no_comment,parseAll=True)
                do_loop_tokens = [ curr_offload_loop ] + parse_result.asList() + [[]]
                do_loop = TTDo(stmt,0,do_loop_tokens)
                if curr_offload_region != None:
                    descend_(TTLoopKernel(stmt_no_comment,"", [curr_offload_region, [do_loop]]),\
                            "offloaded do loop")
                    do_loop.parent      = curr
                    curr                = do_loop
                    curr_offload_region = None
                else:
                    descend_(do_loop,"do loop")
                curr_offload_loop   = None
            except Exception as e:
                error_("do loop",e)
        # if-then-else
        elif utils.parsingutils.is_if_then(tokens):
            try: 
                descend_(TTIfElseBlock(),"if block",inc_level=False)
                parse_result = fortran_if_else_if.parseString(stmt_no_comment,parseAll=True)
                descend_(TTIfElseIf(stmt_no_comment,0,parse_result.asList()+[[]]),"if branch")
            except Exception as e:
                error_("if",e)
        elif utils.parsingutils.is_else_if_then(tokens):
            assert type(curr) is TTIfElseIf
            ascend_("if")
            try: 
                parse_result = fortran_if_else_if.parseString(stmt_no_comment,parseAll=True)
                descend_(TTIfElseIf(stmt_no_comment,0,parse_result.asList()+[[]]),"else-if branch")
            except Exception as e:
                error_("else-if",e)
        elif utils.parsingutils.is_else(tokens):
            assert type(curr) is TTIfElseIf, type(curr)
            ascend_("if/else-if")
            descend_(TTElse(stmt_no_comment,0,[]),"else branch")
        # select-case
        elif utils.parsingutils.is_select_case(tokens):
            try: 
                parse_result = fortran_select_case.parseString(stmt_no_comment,parseAll=True)
                descend_(TTSelectCase(stmt_no_comment,0,parse_result.asList()+[[]]),"select-case")
            except Exception as e:
                error_("select-case",e)
        elif utils.parsingutils.is_case(tokens):
            if type(curr) is TTCase:
                ascend_("case")
            try: 
                parse_result = fortran_case.parseString(stmt_no_comment,parseAll=True)
                descend_(TTCase(stmt_no_comment,0,parse_result.asList()+[[]]),"case")
            except Exception as e:
                error_("else-if",e)
        elif utils.parsingutils.is_case_default(tokens):
            if type(curr) is TTCase:
                ascend_("case")
            descend_(TTCase(stmt_no_comment,0,[[]]),"case default")
        # end
        elif utils.parsingutils.is_end(tokens,["do"]):
            ascend_(tokens[1])
        elif utils.parsingutils.is_end(tokens,["if","select"]):
            ascend_(tokens[1])
            ascend_(tokens[1])
        # single statements
        elif utils.parsingutils.is_pointer_assignment(tokens):
            error_("pointer assignment")
        elif utils.parsingutils.is_assignment(tokens):
            try: 
                parse_result = fortran_assignment.parseString(stmt_no_comment,parseAll=True)
                append_(parse_result[0],"assignment")
            except Exception as e:
                error_("assignment",e)
        elif utils.parsingutils.is_subroutine_call(tokens):
            try: 
                parse_result = fortran_subroutine_call.parseString(stmt_no_comment,parseAll=True)
                append_(parse_result[0],"subroutine call")
            except Exception as e:
                error_("subroutine call",e)
        else:
            error_("unknown and not ignored")
    
    utils.logging.log_leave_function(LOG_PREFIX,"_intrnl_parse_fortran_code")
    return ttree
