# SPDX-License-Identifier: MIT                                                
# Copyright (c) 2021 GPUFORT Advanced Micro Devices, Inc. All rights reserved.
import pyparsing
import re

def tokenize(statement,padded_size=0):
    """Splits string at whitespaces and substrings such as
    'end', '$', '!', '(', ')', '=>', '=', ',' and "::".
    Preserves the substrings in the resulting token stream but not the whitespaces.
    :param str padded_size: Always ensure that the list has at least this size by adding padded_size-N empty
               strings at the end of the returned token stream. Has no effect if N >= padded_size. 
               Disable padding by specifying value <= 0.
    """
    tokens1 = re.split(r"\s+|\t+",statement)
    tokens  = []
    for tk in tokens1:
        tokens += [part for part in re.split('(end|else|!\$?|(c|\*)\$|[(),]|::?|=>?|(<|>)=?|(/|=)=|(\.\w+\.))',tk,0,re.IGNORECASE)]
    result = [tk for tk in tokens if tk != None and len(tk)]
    if padded_size > 0 and len(result) < padded_size:
        return result + [""]*(padded_size-len(result))
    else:
        return result

def replaceAll(fSnippet,ppexpression,repl=lambda parseResult: ("",False),stripSearchString=True):
    """Replaces all matches for the given pyparsing expression with
    the string generated by the 'repl' function argument, 
    which takes the pyparsing parse result into account.
    """
    matched     = True
    transformed = False
    usedList    = []
    while matched:
        matched = False
        for tokens,begin,end in ppexpression.scanString(fSnippet):
             parseResult = tokens[0]
             subst, changed = repl(parseResult)
             transformed |= changed
             if not begin in usedList:
                 if changed:
                     searchString = fSnippet[begin:end]
                     if stripSearchString:
                         searchString = searchString.strip().strip("\n").strip()
                     fSnippet = fSnippet.replace(searchString,subst)
                 else:
                     usedList.append(begin) # do not check this match again
                 matched = True
                 break
    return fSnippet, transformed
def replaceFirst(fSnippet,ppexpression,repl=lambda parseResult: ("",False),stripSearchString=True):
    """Replaces the first match for the given pyparsing expression with
    the string generated by the 'repl' function argument, 
    which takes the pyparsing parse result into account.
    """
    transformed = False
    for tokens,begin,end in ppexpression.scanString(fSnippet):
        parseResult = tokens[0]
        subst, transformed = repl(parseResult)
        if transformed:
            searchString = fSnippet[begin:end]
            if stripSearchString:
                searchString = searchString.strip().strip("\n").strip()
            fSnippet = fSnippet.replace(searchString,subst)
        break
    return fSnippet, transformed

def eraseAll(fSnippet,ppexpression,stripSearchString=True):
    """Removes all matches for the given pyparsing expression
    """
    matched     = True
    transformed = False
    usedList    = []
    while matched:
        matched = False
        for tokens,begin,end in ppexpression.scanString(fSnippet):
            if not begin in usedList:
                searchString = fSnippet[begin:end]
                if stripSearchString:
                    searchString = searchString.strip().strip("\n").strip()
                fSnippet = fSnippet.replace(searchString,"")
                matched = True
                break
            transformed |= matched
    return fSnippet, transformed
def eraseFirst(fSnippet,ppexpression,stripSearchString=True):
    """Replaces the first match for the given pyparsing expression with
    the string generated by the 'repl' function argument, 
    which takes the pyparsing parse result into account.
    """
    transformed = False
    for tokens,begin,end in ppexpression.scanString(fSnippet):
        searchString = fSnippet[begin:end]
        if stripSearchString:
            searchString = searchString.strip().strip("\n").strip()
        fSnippet = fSnippet.replace(searchString,"")
        transformed = True
        break
    return fSnippet, transformed
