module gpufort_array
  use iso_c_binding
  implicit none
  
  enum, bind(c)
    enumerator :: gpufort_array_sync_none             = 0 !> No copies between host and device data after initialization and before destruction.
    enumerator :: gpufort_array_sync_copy             = 1 !> Copy to device after initialization and back to host before destruction.
    enumerator :: gpufort_array_sync_copyin           = 2 !> Copy to device after initialization.
    enumerator :: gpufort_array_sync_copyout          = 3 !> Copy back to host before destruction.
    enumerator :: gpufort_array_sync_inverted_copy    = 4 !> 'Copy'   in opposite direction: Copy from device to host after initialization and back to device before destruction.
    enumerator :: gpufort_array_sync_inverted_copyin  = 5 !> 'Copyin' in opposite direction: Copy from device to host after initialization.
    enumerator :: gpufort_array_sync_inverted_copyout = 6 !> 'Copyout'in opposite direction: Copy from host to device before destruction.
  end enum

  enum, bind(c)
    enumerator :: gpufort_array_wrap_host_wrap_device          = 0 !> Wrap host and device pointers.
    enumerator :: gpufort_array_wrap_host_alloc_device         = 1 !> Wrap host pointer and allocate a new device array.
    enumerator :: gpufort_array_alloc_host_wrap_device         = 2 !> Allocate new host array and wrap device pointer.
    enumerator :: gpufort_array_alloc_host_alloc_device        = 3 !> Allocate new host and device arrays.
    enumerator :: gpufort_array_alloc_pinned_host_wrap_device  = 4 !> Allocate new pinned host array and wrap device pointer.
    enumerator :: gpufort_array_alloc_pinned_host_alloc_device = 5 !> Allocate new pinned host array and wrap device pointer.
  end enum

  ! NOTE: the below types must have exactly the
  ! same data layout as the corresponding 
  ! gpufort C/C++ structs.
  ! 1-dimensional array
  type, bind(c) :: gpufort_array_descr1
    type(c_ptr) :: data_host    = c_null_ptr
    type(c_ptr) :: data_dev     = c_null_ptr
    integer(c_int) :: num_elements = 0  !> Number of elements represented by this array.
    integer(c_int) :: index_offset = -1 !> Offset for index calculation; scalar product of negative lower bounds and strides.
  end type

  type, bind(c) :: gpufort_array1
    type(gpufort_array_descr1) :: data
    integer(kind(gpufort_array_wrap_host_wrap_device)) :: alloc_mode = gpufort_array_wrap_host_alloc_device  !> Data allocation strategy. Default: 
                                                                                                             !> wrap the host and allocate device data
    integer(kind(gpufort_array_sync_none)) :: sync_mode  = gpufort_array_sync_none               !> How data should be synchronized
                                                                                                             !> during the initialization and destruction of this GPUFORT array.
    integer(c_int) :: num_refs          = 0  !> Number of references.
    integer(c_int) :: bytes_per_element = -1 !> Bytes per data element. 
  end type

  ! 2-dimensional array
  type, bind(c) :: gpufort_array_descr2
    type(c_ptr) :: data_host    = c_null_ptr
    type(c_ptr) :: data_dev     = c_null_ptr
    integer(c_int) :: num_elements = 0  !> Number of elements represented by this array.
    integer(c_int) :: index_offset = -1 !> Offset for index calculation; scalar product of negative lower bounds and strides.
    integer(c_int) :: stride2  = -1 !> Stride for dimension 2
  end type

  type, bind(c) :: gpufort_array2
    type(gpufort_array_descr2) :: data
    integer(kind(gpufort_array_wrap_host_wrap_device)) :: alloc_mode = gpufort_array_wrap_host_alloc_device  !> Data allocation strategy. Default: 
                                                                                                             !> wrap the host and allocate device data
    integer(kind(gpufort_array_sync_none)) :: sync_mode  = gpufort_array_sync_none               !> How data should be synchronized
                                                                                                             !> during the initialization and destruction of this GPUFORT array.
    integer(c_int) :: num_refs          = 0  !> Number of references.
    integer(c_int) :: bytes_per_element = -1 !> Bytes per data element. 
  end type

  ! 3-dimensional array
  type, bind(c) :: gpufort_array_descr3
    type(c_ptr) :: data_host    = c_null_ptr
    type(c_ptr) :: data_dev     = c_null_ptr
    integer(c_int) :: num_elements = 0  !> Number of elements represented by this array.
    integer(c_int) :: index_offset = -1 !> Offset for index calculation; scalar product of negative lower bounds and strides.
    integer(c_int) :: stride2  = -1 !> Stride for dimension 2
    integer(c_int) :: stride3  = -1 !> Stride for dimension 3
  end type

  type, bind(c) :: gpufort_array3
    type(gpufort_array_descr3) :: data
    integer(kind(gpufort_array_wrap_host_wrap_device)) :: alloc_mode = gpufort_array_wrap_host_alloc_device  !> Data allocation strategy. Default: 
                                                                                                             !> wrap the host and allocate device data
    integer(kind(gpufort_array_sync_none)) :: sync_mode  = gpufort_array_sync_none               !> How data should be synchronized
                                                                                                             !> during the initialization and destruction of this GPUFORT array.
    integer(c_int) :: num_refs          = 0  !> Number of references.
    integer(c_int) :: bytes_per_element = -1 !> Bytes per data element. 
  end type

  ! 4-dimensional array
  type, bind(c) :: gpufort_array_descr4
    type(c_ptr) :: data_host    = c_null_ptr
    type(c_ptr) :: data_dev     = c_null_ptr
    integer(c_int) :: num_elements = 0  !> Number of elements represented by this array.
    integer(c_int) :: index_offset = -1 !> Offset for index calculation; scalar product of negative lower bounds and strides.
    integer(c_int) :: stride2  = -1 !> Stride for dimension 2
    integer(c_int) :: stride3  = -1 !> Stride for dimension 3
    integer(c_int) :: stride4  = -1 !> Stride for dimension 4
  end type

  type, bind(c) :: gpufort_array4
    type(gpufort_array_descr4) :: data
    integer(kind(gpufort_array_wrap_host_wrap_device)) :: alloc_mode = gpufort_array_wrap_host_alloc_device  !> Data allocation strategy. Default: 
                                                                                                             !> wrap the host and allocate device data
    integer(kind(gpufort_array_sync_none)) :: sync_mode  = gpufort_array_sync_none               !> How data should be synchronized
                                                                                                             !> during the initialization and destruction of this GPUFORT array.
    integer(c_int) :: num_refs          = 0  !> Number of references.
    integer(c_int) :: bytes_per_element = -1 !> Bytes per data element. 
  end type

  ! 5-dimensional array
  type, bind(c) :: gpufort_array_descr5
    type(c_ptr) :: data_host    = c_null_ptr
    type(c_ptr) :: data_dev     = c_null_ptr
    integer(c_int) :: num_elements = 0  !> Number of elements represented by this array.
    integer(c_int) :: index_offset = -1 !> Offset for index calculation; scalar product of negative lower bounds and strides.
    integer(c_int) :: stride2  = -1 !> Stride for dimension 2
    integer(c_int) :: stride3  = -1 !> Stride for dimension 3
    integer(c_int) :: stride4  = -1 !> Stride for dimension 4
    integer(c_int) :: stride5  = -1 !> Stride for dimension 5
  end type

  type, bind(c) :: gpufort_array5
    type(gpufort_array_descr5) :: data
    integer(kind(gpufort_array_wrap_host_wrap_device)) :: alloc_mode = gpufort_array_wrap_host_alloc_device  !> Data allocation strategy. Default: 
                                                                                                             !> wrap the host and allocate device data
    integer(kind(gpufort_array_sync_none)) :: sync_mode  = gpufort_array_sync_none               !> How data should be synchronized
                                                                                                             !> during the initialization and destruction of this GPUFORT array.
    integer(c_int) :: num_refs          = 0  !> Number of references.
    integer(c_int) :: bytes_per_element = -1 !> Bytes per data element. 
  end type

  ! 6-dimensional array
  type, bind(c) :: gpufort_array_descr6
    type(c_ptr) :: data_host    = c_null_ptr
    type(c_ptr) :: data_dev     = c_null_ptr
    integer(c_int) :: num_elements = 0  !> Number of elements represented by this array.
    integer(c_int) :: index_offset = -1 !> Offset for index calculation; scalar product of negative lower bounds and strides.
    integer(c_int) :: stride2  = -1 !> Stride for dimension 2
    integer(c_int) :: stride3  = -1 !> Stride for dimension 3
    integer(c_int) :: stride4  = -1 !> Stride for dimension 4
    integer(c_int) :: stride5  = -1 !> Stride for dimension 5
    integer(c_int) :: stride6  = -1 !> Stride for dimension 6
  end type

  type, bind(c) :: gpufort_array6
    type(gpufort_array_descr6) :: data
    integer(kind(gpufort_array_wrap_host_wrap_device)) :: alloc_mode = gpufort_array_wrap_host_alloc_device  !> Data allocation strategy. Default: 
                                                                                                             !> wrap the host and allocate device data
    integer(kind(gpufort_array_sync_none)) :: sync_mode  = gpufort_array_sync_none               !> How data should be synchronized
                                                                                                             !> during the initialization and destruction of this GPUFORT array.
    integer(c_int) :: num_refs          = 0  !> Number of references.
    integer(c_int) :: bytes_per_element = -1 !> Bytes per data element. 
  end type

  ! 7-dimensional array
  type, bind(c) :: gpufort_array_descr7
    type(c_ptr) :: data_host    = c_null_ptr
    type(c_ptr) :: data_dev     = c_null_ptr
    integer(c_int) :: num_elements = 0  !> Number of elements represented by this array.
    integer(c_int) :: index_offset = -1 !> Offset for index calculation; scalar product of negative lower bounds and strides.
    integer(c_int) :: stride2  = -1 !> Stride for dimension 2
    integer(c_int) :: stride3  = -1 !> Stride for dimension 3
    integer(c_int) :: stride4  = -1 !> Stride for dimension 4
    integer(c_int) :: stride5  = -1 !> Stride for dimension 5
    integer(c_int) :: stride6  = -1 !> Stride for dimension 6
    integer(c_int) :: stride7  = -1 !> Stride for dimension 7
  end type

  type, bind(c) :: gpufort_array7
    type(gpufort_array_descr7) :: data
    integer(kind(gpufort_array_wrap_host_wrap_device)) :: alloc_mode = gpufort_array_wrap_host_alloc_device  !> Data allocation strategy. Default: 
                                                                                                             !> wrap the host and allocate device data
    integer(kind(gpufort_array_sync_none)) :: sync_mode  = gpufort_array_sync_none               !> How data should be synchronized
                                                                                                             !> during the initialization and destruction of this GPUFORT array.
    integer(c_int) :: num_refs          = 0  !> Number of references.
    integer(c_int) :: bytes_per_element = -1 !> Bytes per data element. 
  end type

  ! interfaces
  !> Initialize a gpufort_array of a rank that matches that of the input data.
  interface gpufort_array_init_async
    function gpufort_array1_init_async (&
        array,&
        bytes_per_element,&
        data_host,data_dev,&
        sizes, lbounds,&
        stream,alloc_mode,sync_mode) &
          bind(c,name="gpufort_array1_init") &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array1
      import gpufort_array_wrap_host_wrap_device
      import gpufort_array_sync_none
      implicit none
      type(gpufort_array1),intent(inout) :: array
      integer(c_int),intent(in),value :: bytes_per_element
      type(c_ptr),intent(in),value :: data_host, data_dev
      integer(c_int),dimension(1),intent(in) :: sizes, lbounds
      integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),value :: alloc_mode 
      integer(kind(gpufort_array_sync_none)),intent(in),value :: sync_mode
      type(c_ptr),intent(in),value :: stream
      !
      integer(kind(hipSuccess)) :: ierr
    end function
    function gpufort_array2_init_async (&
        array,&
        bytes_per_element,&
        data_host,data_dev,&
        sizes, lbounds,&
        stream,alloc_mode,sync_mode) &
          bind(c,name="gpufort_array2_init") &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array2
      import gpufort_array_wrap_host_wrap_device
      import gpufort_array_sync_none
      implicit none
      type(gpufort_array2),intent(inout) :: array
      integer(c_int),intent(in),value :: bytes_per_element
      type(c_ptr),intent(in),value :: data_host, data_dev
      integer(c_int),dimension(2),intent(in) :: sizes, lbounds
      integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),value :: alloc_mode 
      integer(kind(gpufort_array_sync_none)),intent(in),value :: sync_mode
      type(c_ptr),intent(in),value :: stream
      !
      integer(kind(hipSuccess)) :: ierr
    end function
    function gpufort_array3_init_async (&
        array,&
        bytes_per_element,&
        data_host,data_dev,&
        sizes, lbounds,&
        stream,alloc_mode,sync_mode) &
          bind(c,name="gpufort_array3_init") &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array3
      import gpufort_array_wrap_host_wrap_device
      import gpufort_array_sync_none
      implicit none
      type(gpufort_array3),intent(inout) :: array
      integer(c_int),intent(in),value :: bytes_per_element
      type(c_ptr),intent(in),value :: data_host, data_dev
      integer(c_int),dimension(3),intent(in) :: sizes, lbounds
      integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),value :: alloc_mode 
      integer(kind(gpufort_array_sync_none)),intent(in),value :: sync_mode
      type(c_ptr),intent(in),value :: stream
      !
      integer(kind(hipSuccess)) :: ierr
    end function
    function gpufort_array4_init_async (&
        array,&
        bytes_per_element,&
        data_host,data_dev,&
        sizes, lbounds,&
        stream,alloc_mode,sync_mode) &
          bind(c,name="gpufort_array4_init") &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array4
      import gpufort_array_wrap_host_wrap_device
      import gpufort_array_sync_none
      implicit none
      type(gpufort_array4),intent(inout) :: array
      integer(c_int),intent(in),value :: bytes_per_element
      type(c_ptr),intent(in),value :: data_host, data_dev
      integer(c_int),dimension(4),intent(in) :: sizes, lbounds
      integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),value :: alloc_mode 
      integer(kind(gpufort_array_sync_none)),intent(in),value :: sync_mode
      type(c_ptr),intent(in),value :: stream
      !
      integer(kind(hipSuccess)) :: ierr
    end function
    function gpufort_array5_init_async (&
        array,&
        bytes_per_element,&
        data_host,data_dev,&
        sizes, lbounds,&
        stream,alloc_mode,sync_mode) &
          bind(c,name="gpufort_array5_init") &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array5
      import gpufort_array_wrap_host_wrap_device
      import gpufort_array_sync_none
      implicit none
      type(gpufort_array5),intent(inout) :: array
      integer(c_int),intent(in),value :: bytes_per_element
      type(c_ptr),intent(in),value :: data_host, data_dev
      integer(c_int),dimension(5),intent(in) :: sizes, lbounds
      integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),value :: alloc_mode 
      integer(kind(gpufort_array_sync_none)),intent(in),value :: sync_mode
      type(c_ptr),intent(in),value :: stream
      !
      integer(kind(hipSuccess)) :: ierr
    end function
    function gpufort_array6_init_async (&
        array,&
        bytes_per_element,&
        data_host,data_dev,&
        sizes, lbounds,&
        stream,alloc_mode,sync_mode) &
          bind(c,name="gpufort_array6_init") &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array6
      import gpufort_array_wrap_host_wrap_device
      import gpufort_array_sync_none
      implicit none
      type(gpufort_array6),intent(inout) :: array
      integer(c_int),intent(in),value :: bytes_per_element
      type(c_ptr),intent(in),value :: data_host, data_dev
      integer(c_int),dimension(6),intent(in) :: sizes, lbounds
      integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),value :: alloc_mode 
      integer(kind(gpufort_array_sync_none)),intent(in),value :: sync_mode
      type(c_ptr),intent(in),value :: stream
      !
      integer(kind(hipSuccess)) :: ierr
    end function
    function gpufort_array7_init_async (&
        array,&
        bytes_per_element,&
        data_host,data_dev,&
        sizes, lbounds,&
        stream,alloc_mode,sync_mode) &
          bind(c,name="gpufort_array7_init") &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array7
      import gpufort_array_wrap_host_wrap_device
      import gpufort_array_sync_none
      implicit none
      type(gpufort_array7),intent(inout) :: array
      integer(c_int),intent(in),value :: bytes_per_element
      type(c_ptr),intent(in),value :: data_host, data_dev
      integer(c_int),dimension(7),intent(in) :: sizes, lbounds
      integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),value :: alloc_mode 
      integer(kind(gpufort_array_sync_none)),intent(in),value :: sync_mode
      type(c_ptr),intent(in),value :: stream
      !
      integer(kind(hipSuccess)) :: ierr
    end function
      module procedure :: &
        gpufort_array1_init_async_host,&
        gpufort_array1_init_async_c_bool,&
        gpufort_array1_init_async_c_short,&
        gpufort_array1_init_async_c_int,&
        gpufort_array1_init_async_c_long,&
        gpufort_array1_init_async_c_float,&
        gpufort_array1_init_async_c_double,&
        gpufort_array1_init_async_c_float_complex,&
        gpufort_array1_init_async_c_double_complex,&
        gpufort_array2_init_async_host,&
        gpufort_array2_init_async_c_bool,&
        gpufort_array2_init_async_c_short,&
        gpufort_array2_init_async_c_int,&
        gpufort_array2_init_async_c_long,&
        gpufort_array2_init_async_c_float,&
        gpufort_array2_init_async_c_double,&
        gpufort_array2_init_async_c_float_complex,&
        gpufort_array2_init_async_c_double_complex,&
        gpufort_array3_init_async_host,&
        gpufort_array3_init_async_c_bool,&
        gpufort_array3_init_async_c_short,&
        gpufort_array3_init_async_c_int,&
        gpufort_array3_init_async_c_long,&
        gpufort_array3_init_async_c_float,&
        gpufort_array3_init_async_c_double,&
        gpufort_array3_init_async_c_float_complex,&
        gpufort_array3_init_async_c_double_complex,&
        gpufort_array4_init_async_host,&
        gpufort_array4_init_async_c_bool,&
        gpufort_array4_init_async_c_short,&
        gpufort_array4_init_async_c_int,&
        gpufort_array4_init_async_c_long,&
        gpufort_array4_init_async_c_float,&
        gpufort_array4_init_async_c_double,&
        gpufort_array4_init_async_c_float_complex,&
        gpufort_array4_init_async_c_double_complex,&
        gpufort_array5_init_async_host,&
        gpufort_array5_init_async_c_bool,&
        gpufort_array5_init_async_c_short,&
        gpufort_array5_init_async_c_int,&
        gpufort_array5_init_async_c_long,&
        gpufort_array5_init_async_c_float,&
        gpufort_array5_init_async_c_double,&
        gpufort_array5_init_async_c_float_complex,&
        gpufort_array5_init_async_c_double_complex,&
        gpufort_array6_init_async_host,&
        gpufort_array6_init_async_c_bool,&
        gpufort_array6_init_async_c_short,&
        gpufort_array6_init_async_c_int,&
        gpufort_array6_init_async_c_long,&
        gpufort_array6_init_async_c_float,&
        gpufort_array6_init_async_c_double,&
        gpufort_array6_init_async_c_float_complex,&
        gpufort_array6_init_async_c_double_complex,&
        gpufort_array7_init_async_host,&
        gpufort_array7_init_async_c_bool,&
        gpufort_array7_init_async_c_short,&
        gpufort_array7_init_async_c_int,&
        gpufort_array7_init_async_c_long,&
        gpufort_array7_init_async_c_float,&
        gpufort_array7_init_async_c_double,&
        gpufort_array7_init_async_c_float_complex,&
        gpufort_array7_init_async_c_double_complex
  end interface
  interface gpufort_array_init
    function gpufort_array1_init (&
        array,&
        bytes_per_element,&
        data_host,data_dev,&
        sizes, lbounds,&
        alloc_mode,sync_mode) &
          bind(c,name="gpufort_array1_init") &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array1
      import gpufort_array_wrap_host_wrap_device
      import gpufort_array_sync_none
      implicit none
      type(gpufort_array1),intent(inout) :: array
      integer(c_int),intent(in),value :: bytes_per_element
      type(c_ptr),intent(in),value :: data_host, data_dev
      integer(c_int),dimension(1),intent(in) :: sizes, lbounds
      integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),value :: alloc_mode 
      integer(kind(gpufort_array_sync_none)),intent(in),value :: sync_mode
      !
      integer(kind(hipSuccess)) :: ierr
    end function
    function gpufort_array2_init (&
        array,&
        bytes_per_element,&
        data_host,data_dev,&
        sizes, lbounds,&
        alloc_mode,sync_mode) &
          bind(c,name="gpufort_array2_init") &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array2
      import gpufort_array_wrap_host_wrap_device
      import gpufort_array_sync_none
      implicit none
      type(gpufort_array2),intent(inout) :: array
      integer(c_int),intent(in),value :: bytes_per_element
      type(c_ptr),intent(in),value :: data_host, data_dev
      integer(c_int),dimension(2),intent(in) :: sizes, lbounds
      integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),value :: alloc_mode 
      integer(kind(gpufort_array_sync_none)),intent(in),value :: sync_mode
      !
      integer(kind(hipSuccess)) :: ierr
    end function
    function gpufort_array3_init (&
        array,&
        bytes_per_element,&
        data_host,data_dev,&
        sizes, lbounds,&
        alloc_mode,sync_mode) &
          bind(c,name="gpufort_array3_init") &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array3
      import gpufort_array_wrap_host_wrap_device
      import gpufort_array_sync_none
      implicit none
      type(gpufort_array3),intent(inout) :: array
      integer(c_int),intent(in),value :: bytes_per_element
      type(c_ptr),intent(in),value :: data_host, data_dev
      integer(c_int),dimension(3),intent(in) :: sizes, lbounds
      integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),value :: alloc_mode 
      integer(kind(gpufort_array_sync_none)),intent(in),value :: sync_mode
      !
      integer(kind(hipSuccess)) :: ierr
    end function
    function gpufort_array4_init (&
        array,&
        bytes_per_element,&
        data_host,data_dev,&
        sizes, lbounds,&
        alloc_mode,sync_mode) &
          bind(c,name="gpufort_array4_init") &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array4
      import gpufort_array_wrap_host_wrap_device
      import gpufort_array_sync_none
      implicit none
      type(gpufort_array4),intent(inout) :: array
      integer(c_int),intent(in),value :: bytes_per_element
      type(c_ptr),intent(in),value :: data_host, data_dev
      integer(c_int),dimension(4),intent(in) :: sizes, lbounds
      integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),value :: alloc_mode 
      integer(kind(gpufort_array_sync_none)),intent(in),value :: sync_mode
      !
      integer(kind(hipSuccess)) :: ierr
    end function
    function gpufort_array5_init (&
        array,&
        bytes_per_element,&
        data_host,data_dev,&
        sizes, lbounds,&
        alloc_mode,sync_mode) &
          bind(c,name="gpufort_array5_init") &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array5
      import gpufort_array_wrap_host_wrap_device
      import gpufort_array_sync_none
      implicit none
      type(gpufort_array5),intent(inout) :: array
      integer(c_int),intent(in),value :: bytes_per_element
      type(c_ptr),intent(in),value :: data_host, data_dev
      integer(c_int),dimension(5),intent(in) :: sizes, lbounds
      integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),value :: alloc_mode 
      integer(kind(gpufort_array_sync_none)),intent(in),value :: sync_mode
      !
      integer(kind(hipSuccess)) :: ierr
    end function
    function gpufort_array6_init (&
        array,&
        bytes_per_element,&
        data_host,data_dev,&
        sizes, lbounds,&
        alloc_mode,sync_mode) &
          bind(c,name="gpufort_array6_init") &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array6
      import gpufort_array_wrap_host_wrap_device
      import gpufort_array_sync_none
      implicit none
      type(gpufort_array6),intent(inout) :: array
      integer(c_int),intent(in),value :: bytes_per_element
      type(c_ptr),intent(in),value :: data_host, data_dev
      integer(c_int),dimension(6),intent(in) :: sizes, lbounds
      integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),value :: alloc_mode 
      integer(kind(gpufort_array_sync_none)),intent(in),value :: sync_mode
      !
      integer(kind(hipSuccess)) :: ierr
    end function
    function gpufort_array7_init (&
        array,&
        bytes_per_element,&
        data_host,data_dev,&
        sizes, lbounds,&
        alloc_mode,sync_mode) &
          bind(c,name="gpufort_array7_init") &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array7
      import gpufort_array_wrap_host_wrap_device
      import gpufort_array_sync_none
      implicit none
      type(gpufort_array7),intent(inout) :: array
      integer(c_int),intent(in),value :: bytes_per_element
      type(c_ptr),intent(in),value :: data_host, data_dev
      integer(c_int),dimension(7),intent(in) :: sizes, lbounds
      integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),value :: alloc_mode 
      integer(kind(gpufort_array_sync_none)),intent(in),value :: sync_mode
      !
      integer(kind(hipSuccess)) :: ierr
    end function
      module procedure :: &
        gpufort_array1_init_host,&
        gpufort_array1_init_c_bool,&
        gpufort_array1_init_c_short,&
        gpufort_array1_init_c_int,&
        gpufort_array1_init_c_long,&
        gpufort_array1_init_c_float,&
        gpufort_array1_init_c_double,&
        gpufort_array1_init_c_float_complex,&
        gpufort_array1_init_c_double_complex,&
        gpufort_array2_init_host,&
        gpufort_array2_init_c_bool,&
        gpufort_array2_init_c_short,&
        gpufort_array2_init_c_int,&
        gpufort_array2_init_c_long,&
        gpufort_array2_init_c_float,&
        gpufort_array2_init_c_double,&
        gpufort_array2_init_c_float_complex,&
        gpufort_array2_init_c_double_complex,&
        gpufort_array3_init_host,&
        gpufort_array3_init_c_bool,&
        gpufort_array3_init_c_short,&
        gpufort_array3_init_c_int,&
        gpufort_array3_init_c_long,&
        gpufort_array3_init_c_float,&
        gpufort_array3_init_c_double,&
        gpufort_array3_init_c_float_complex,&
        gpufort_array3_init_c_double_complex,&
        gpufort_array4_init_host,&
        gpufort_array4_init_c_bool,&
        gpufort_array4_init_c_short,&
        gpufort_array4_init_c_int,&
        gpufort_array4_init_c_long,&
        gpufort_array4_init_c_float,&
        gpufort_array4_init_c_double,&
        gpufort_array4_init_c_float_complex,&
        gpufort_array4_init_c_double_complex,&
        gpufort_array5_init_host,&
        gpufort_array5_init_c_bool,&
        gpufort_array5_init_c_short,&
        gpufort_array5_init_c_int,&
        gpufort_array5_init_c_long,&
        gpufort_array5_init_c_float,&
        gpufort_array5_init_c_double,&
        gpufort_array5_init_c_float_complex,&
        gpufort_array5_init_c_double_complex,&
        gpufort_array6_init_host,&
        gpufort_array6_init_c_bool,&
        gpufort_array6_init_c_short,&
        gpufort_array6_init_c_int,&
        gpufort_array6_init_c_long,&
        gpufort_array6_init_c_float,&
        gpufort_array6_init_c_double,&
        gpufort_array6_init_c_float_complex,&
        gpufort_array6_init_c_double_complex,&
        gpufort_array7_init_host,&
        gpufort_array7_init_c_bool,&
        gpufort_array7_init_c_short,&
        gpufort_array7_init_c_int,&
        gpufort_array7_init_c_long,&
        gpufort_array7_init_c_float,&
        gpufort_array7_init_c_double,&
        gpufort_array7_init_c_float_complex,&
        gpufort_array7_init_c_double_complex
  end interface
  !> Wrap a Fortran or type(c_ptr) pointer pair that points to host and device data.
  !> Only wrap, allocate nothing,
  !> and do not synchronize at initialization or destruction time.
  !> \return gpufort_array of a rank that matches that of the input data.
  interface gpufort_array_wrap_async
      module procedure :: &
        gpufort_array1_wrap_async_c_bool,&
        gpufort_array1_wrap_async_c_bool_cptr,&
        gpufort_array1_wrap_async_c_short,&
        gpufort_array1_wrap_async_c_short_cptr,&
        gpufort_array1_wrap_async_c_int,&
        gpufort_array1_wrap_async_c_int_cptr,&
        gpufort_array1_wrap_async_c_long,&
        gpufort_array1_wrap_async_c_long_cptr,&
        gpufort_array1_wrap_async_c_float,&
        gpufort_array1_wrap_async_c_float_cptr,&
        gpufort_array1_wrap_async_c_double,&
        gpufort_array1_wrap_async_c_double_cptr,&
        gpufort_array1_wrap_async_c_float_complex,&
        gpufort_array1_wrap_async_c_float_complex_cptr,&
        gpufort_array1_wrap_async_c_double_complex,&
        gpufort_array1_wrap_async_c_double_complex_cptr,&
        gpufort_array2_wrap_async_c_bool,&
        gpufort_array2_wrap_async_c_bool_cptr,&
        gpufort_array2_wrap_async_c_short,&
        gpufort_array2_wrap_async_c_short_cptr,&
        gpufort_array2_wrap_async_c_int,&
        gpufort_array2_wrap_async_c_int_cptr,&
        gpufort_array2_wrap_async_c_long,&
        gpufort_array2_wrap_async_c_long_cptr,&
        gpufort_array2_wrap_async_c_float,&
        gpufort_array2_wrap_async_c_float_cptr,&
        gpufort_array2_wrap_async_c_double,&
        gpufort_array2_wrap_async_c_double_cptr,&
        gpufort_array2_wrap_async_c_float_complex,&
        gpufort_array2_wrap_async_c_float_complex_cptr,&
        gpufort_array2_wrap_async_c_double_complex,&
        gpufort_array2_wrap_async_c_double_complex_cptr,&
        gpufort_array3_wrap_async_c_bool,&
        gpufort_array3_wrap_async_c_bool_cptr,&
        gpufort_array3_wrap_async_c_short,&
        gpufort_array3_wrap_async_c_short_cptr,&
        gpufort_array3_wrap_async_c_int,&
        gpufort_array3_wrap_async_c_int_cptr,&
        gpufort_array3_wrap_async_c_long,&
        gpufort_array3_wrap_async_c_long_cptr,&
        gpufort_array3_wrap_async_c_float,&
        gpufort_array3_wrap_async_c_float_cptr,&
        gpufort_array3_wrap_async_c_double,&
        gpufort_array3_wrap_async_c_double_cptr,&
        gpufort_array3_wrap_async_c_float_complex,&
        gpufort_array3_wrap_async_c_float_complex_cptr,&
        gpufort_array3_wrap_async_c_double_complex,&
        gpufort_array3_wrap_async_c_double_complex_cptr,&
        gpufort_array4_wrap_async_c_bool,&
        gpufort_array4_wrap_async_c_bool_cptr,&
        gpufort_array4_wrap_async_c_short,&
        gpufort_array4_wrap_async_c_short_cptr,&
        gpufort_array4_wrap_async_c_int,&
        gpufort_array4_wrap_async_c_int_cptr,&
        gpufort_array4_wrap_async_c_long,&
        gpufort_array4_wrap_async_c_long_cptr,&
        gpufort_array4_wrap_async_c_float,&
        gpufort_array4_wrap_async_c_float_cptr,&
        gpufort_array4_wrap_async_c_double,&
        gpufort_array4_wrap_async_c_double_cptr,&
        gpufort_array4_wrap_async_c_float_complex,&
        gpufort_array4_wrap_async_c_float_complex_cptr,&
        gpufort_array4_wrap_async_c_double_complex,&
        gpufort_array4_wrap_async_c_double_complex_cptr,&
        gpufort_array5_wrap_async_c_bool,&
        gpufort_array5_wrap_async_c_bool_cptr,&
        gpufort_array5_wrap_async_c_short,&
        gpufort_array5_wrap_async_c_short_cptr,&
        gpufort_array5_wrap_async_c_int,&
        gpufort_array5_wrap_async_c_int_cptr,&
        gpufort_array5_wrap_async_c_long,&
        gpufort_array5_wrap_async_c_long_cptr,&
        gpufort_array5_wrap_async_c_float,&
        gpufort_array5_wrap_async_c_float_cptr,&
        gpufort_array5_wrap_async_c_double,&
        gpufort_array5_wrap_async_c_double_cptr,&
        gpufort_array5_wrap_async_c_float_complex,&
        gpufort_array5_wrap_async_c_float_complex_cptr,&
        gpufort_array5_wrap_async_c_double_complex,&
        gpufort_array5_wrap_async_c_double_complex_cptr,&
        gpufort_array6_wrap_async_c_bool,&
        gpufort_array6_wrap_async_c_bool_cptr,&
        gpufort_array6_wrap_async_c_short,&
        gpufort_array6_wrap_async_c_short_cptr,&
        gpufort_array6_wrap_async_c_int,&
        gpufort_array6_wrap_async_c_int_cptr,&
        gpufort_array6_wrap_async_c_long,&
        gpufort_array6_wrap_async_c_long_cptr,&
        gpufort_array6_wrap_async_c_float,&
        gpufort_array6_wrap_async_c_float_cptr,&
        gpufort_array6_wrap_async_c_double,&
        gpufort_array6_wrap_async_c_double_cptr,&
        gpufort_array6_wrap_async_c_float_complex,&
        gpufort_array6_wrap_async_c_float_complex_cptr,&
        gpufort_array6_wrap_async_c_double_complex,&
        gpufort_array6_wrap_async_c_double_complex_cptr,&
        gpufort_array7_wrap_async_c_bool,&
        gpufort_array7_wrap_async_c_bool_cptr,&
        gpufort_array7_wrap_async_c_short,&
        gpufort_array7_wrap_async_c_short_cptr,&
        gpufort_array7_wrap_async_c_int,&
        gpufort_array7_wrap_async_c_int_cptr,&
        gpufort_array7_wrap_async_c_long,&
        gpufort_array7_wrap_async_c_long_cptr,&
        gpufort_array7_wrap_async_c_float,&
        gpufort_array7_wrap_async_c_float_cptr,&
        gpufort_array7_wrap_async_c_double,&
        gpufort_array7_wrap_async_c_double_cptr,&
        gpufort_array7_wrap_async_c_float_complex,&
        gpufort_array7_wrap_async_c_float_complex_cptr,&
        gpufort_array7_wrap_async_c_double_complex,&
        gpufort_array7_wrap_async_c_double_complex_cptr
  end interface
  !> Wrap a Fortran or type(c_ptr) pointer pair that points to host and device data.
  !> Only wrap, allocate nothing,
  !> and do not synchronize at initialization or destruction time.
  !> \return gpufort_array of a rank that matches that of the input data.
  interface gpufort_array_wrap
      module procedure :: &
        gpufort_array1_wrap_c_bool,&
        gpufort_array1_wrap_c_bool_cptr,&
        gpufort_array1_wrap_c_short,&
        gpufort_array1_wrap_c_short_cptr,&
        gpufort_array1_wrap_c_int,&
        gpufort_array1_wrap_c_int_cptr,&
        gpufort_array1_wrap_c_long,&
        gpufort_array1_wrap_c_long_cptr,&
        gpufort_array1_wrap_c_float,&
        gpufort_array1_wrap_c_float_cptr,&
        gpufort_array1_wrap_c_double,&
        gpufort_array1_wrap_c_double_cptr,&
        gpufort_array1_wrap_c_float_complex,&
        gpufort_array1_wrap_c_float_complex_cptr,&
        gpufort_array1_wrap_c_double_complex,&
        gpufort_array1_wrap_c_double_complex_cptr,&
        gpufort_array2_wrap_c_bool,&
        gpufort_array2_wrap_c_bool_cptr,&
        gpufort_array2_wrap_c_short,&
        gpufort_array2_wrap_c_short_cptr,&
        gpufort_array2_wrap_c_int,&
        gpufort_array2_wrap_c_int_cptr,&
        gpufort_array2_wrap_c_long,&
        gpufort_array2_wrap_c_long_cptr,&
        gpufort_array2_wrap_c_float,&
        gpufort_array2_wrap_c_float_cptr,&
        gpufort_array2_wrap_c_double,&
        gpufort_array2_wrap_c_double_cptr,&
        gpufort_array2_wrap_c_float_complex,&
        gpufort_array2_wrap_c_float_complex_cptr,&
        gpufort_array2_wrap_c_double_complex,&
        gpufort_array2_wrap_c_double_complex_cptr,&
        gpufort_array3_wrap_c_bool,&
        gpufort_array3_wrap_c_bool_cptr,&
        gpufort_array3_wrap_c_short,&
        gpufort_array3_wrap_c_short_cptr,&
        gpufort_array3_wrap_c_int,&
        gpufort_array3_wrap_c_int_cptr,&
        gpufort_array3_wrap_c_long,&
        gpufort_array3_wrap_c_long_cptr,&
        gpufort_array3_wrap_c_float,&
        gpufort_array3_wrap_c_float_cptr,&
        gpufort_array3_wrap_c_double,&
        gpufort_array3_wrap_c_double_cptr,&
        gpufort_array3_wrap_c_float_complex,&
        gpufort_array3_wrap_c_float_complex_cptr,&
        gpufort_array3_wrap_c_double_complex,&
        gpufort_array3_wrap_c_double_complex_cptr,&
        gpufort_array4_wrap_c_bool,&
        gpufort_array4_wrap_c_bool_cptr,&
        gpufort_array4_wrap_c_short,&
        gpufort_array4_wrap_c_short_cptr,&
        gpufort_array4_wrap_c_int,&
        gpufort_array4_wrap_c_int_cptr,&
        gpufort_array4_wrap_c_long,&
        gpufort_array4_wrap_c_long_cptr,&
        gpufort_array4_wrap_c_float,&
        gpufort_array4_wrap_c_float_cptr,&
        gpufort_array4_wrap_c_double,&
        gpufort_array4_wrap_c_double_cptr,&
        gpufort_array4_wrap_c_float_complex,&
        gpufort_array4_wrap_c_float_complex_cptr,&
        gpufort_array4_wrap_c_double_complex,&
        gpufort_array4_wrap_c_double_complex_cptr,&
        gpufort_array5_wrap_c_bool,&
        gpufort_array5_wrap_c_bool_cptr,&
        gpufort_array5_wrap_c_short,&
        gpufort_array5_wrap_c_short_cptr,&
        gpufort_array5_wrap_c_int,&
        gpufort_array5_wrap_c_int_cptr,&
        gpufort_array5_wrap_c_long,&
        gpufort_array5_wrap_c_long_cptr,&
        gpufort_array5_wrap_c_float,&
        gpufort_array5_wrap_c_float_cptr,&
        gpufort_array5_wrap_c_double,&
        gpufort_array5_wrap_c_double_cptr,&
        gpufort_array5_wrap_c_float_complex,&
        gpufort_array5_wrap_c_float_complex_cptr,&
        gpufort_array5_wrap_c_double_complex,&
        gpufort_array5_wrap_c_double_complex_cptr,&
        gpufort_array6_wrap_c_bool,&
        gpufort_array6_wrap_c_bool_cptr,&
        gpufort_array6_wrap_c_short,&
        gpufort_array6_wrap_c_short_cptr,&
        gpufort_array6_wrap_c_int,&
        gpufort_array6_wrap_c_int_cptr,&
        gpufort_array6_wrap_c_long,&
        gpufort_array6_wrap_c_long_cptr,&
        gpufort_array6_wrap_c_float,&
        gpufort_array6_wrap_c_float_cptr,&
        gpufort_array6_wrap_c_double,&
        gpufort_array6_wrap_c_double_cptr,&
        gpufort_array6_wrap_c_float_complex,&
        gpufort_array6_wrap_c_float_complex_cptr,&
        gpufort_array6_wrap_c_double_complex,&
        gpufort_array6_wrap_c_double_complex_cptr,&
        gpufort_array7_wrap_c_bool,&
        gpufort_array7_wrap_c_bool_cptr,&
        gpufort_array7_wrap_c_short,&
        gpufort_array7_wrap_c_short_cptr,&
        gpufort_array7_wrap_c_int,&
        gpufort_array7_wrap_c_int_cptr,&
        gpufort_array7_wrap_c_long,&
        gpufort_array7_wrap_c_long_cptr,&
        gpufort_array7_wrap_c_float,&
        gpufort_array7_wrap_c_float_cptr,&
        gpufort_array7_wrap_c_double,&
        gpufort_array7_wrap_c_double_cptr,&
        gpufort_array7_wrap_c_float_complex,&
        gpufort_array7_wrap_c_float_complex_cptr,&
        gpufort_array7_wrap_c_double_complex,&
        gpufort_array7_wrap_c_double_complex_cptr
  end interface

  !> Wrap a Fortran pointer or type(c_ptr) that points to device data.
  !> Set the host pointer to null. Only wrap, allocate nothing,
  !> and do not synchronize at initialization or destruction time.
  !> \note Calling gpufort_array_copy_to_host or gpufort_array_copy_to_device
  !>       will result in HIP errors as the host pointer is set to null.
  !> \return gpufort_array of a rank that matches that of the input data.
  interface gpufort_array_wrap_device_ptr
      module procedure :: &
        gpufort_array1_wrap_device_ptr_c_bool,&
        gpufort_array1_wrap_device_ptr_c_short,&
        gpufort_array1_wrap_device_ptr_c_int,&
        gpufort_array1_wrap_device_ptr_c_long,&
        gpufort_array1_wrap_device_ptr_c_float,&
        gpufort_array1_wrap_device_ptr_c_double,&
        gpufort_array1_wrap_device_ptr_c_float_complex,&
        gpufort_array1_wrap_device_ptr_c_double_complex,&
        gpufort_array2_wrap_device_ptr_c_bool,&
        gpufort_array2_wrap_device_ptr_c_short,&
        gpufort_array2_wrap_device_ptr_c_int,&
        gpufort_array2_wrap_device_ptr_c_long,&
        gpufort_array2_wrap_device_ptr_c_float,&
        gpufort_array2_wrap_device_ptr_c_double,&
        gpufort_array2_wrap_device_ptr_c_float_complex,&
        gpufort_array2_wrap_device_ptr_c_double_complex,&
        gpufort_array3_wrap_device_ptr_c_bool,&
        gpufort_array3_wrap_device_ptr_c_short,&
        gpufort_array3_wrap_device_ptr_c_int,&
        gpufort_array3_wrap_device_ptr_c_long,&
        gpufort_array3_wrap_device_ptr_c_float,&
        gpufort_array3_wrap_device_ptr_c_double,&
        gpufort_array3_wrap_device_ptr_c_float_complex,&
        gpufort_array3_wrap_device_ptr_c_double_complex,&
        gpufort_array4_wrap_device_ptr_c_bool,&
        gpufort_array4_wrap_device_ptr_c_short,&
        gpufort_array4_wrap_device_ptr_c_int,&
        gpufort_array4_wrap_device_ptr_c_long,&
        gpufort_array4_wrap_device_ptr_c_float,&
        gpufort_array4_wrap_device_ptr_c_double,&
        gpufort_array4_wrap_device_ptr_c_float_complex,&
        gpufort_array4_wrap_device_ptr_c_double_complex,&
        gpufort_array5_wrap_device_ptr_c_bool,&
        gpufort_array5_wrap_device_ptr_c_short,&
        gpufort_array5_wrap_device_ptr_c_int,&
        gpufort_array5_wrap_device_ptr_c_long,&
        gpufort_array5_wrap_device_ptr_c_float,&
        gpufort_array5_wrap_device_ptr_c_double,&
        gpufort_array5_wrap_device_ptr_c_float_complex,&
        gpufort_array5_wrap_device_ptr_c_double_complex,&
        gpufort_array6_wrap_device_ptr_c_bool,&
        gpufort_array6_wrap_device_ptr_c_short,&
        gpufort_array6_wrap_device_ptr_c_int,&
        gpufort_array6_wrap_device_ptr_c_long,&
        gpufort_array6_wrap_device_ptr_c_float,&
        gpufort_array6_wrap_device_ptr_c_double,&
        gpufort_array6_wrap_device_ptr_c_float_complex,&
        gpufort_array6_wrap_device_ptr_c_double_complex,&
        gpufort_array7_wrap_device_ptr_c_bool,&
        gpufort_array7_wrap_device_ptr_c_short,&
        gpufort_array7_wrap_device_ptr_c_int,&
        gpufort_array7_wrap_device_ptr_c_long,&
        gpufort_array7_wrap_device_ptr_c_float,&
        gpufort_array7_wrap_device_ptr_c_double,&
        gpufort_array7_wrap_device_ptr_c_float_complex,&
        gpufort_array7_wrap_device_ptr_c_double_complex
  end interface

  interface gpufort_array_destroy_async
    function gpufort_array1_destroy_async(array,stream) &
          bind(c,name="gpufort_array1_destroy") &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array1
      implicit none
      type(gpufort_array1),intent(inout) :: array
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
    end function
    function gpufort_array2_destroy_async(array,stream) &
          bind(c,name="gpufort_array2_destroy") &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array2
      implicit none
      type(gpufort_array2),intent(inout) :: array
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
    end function
    function gpufort_array3_destroy_async(array,stream) &
          bind(c,name="gpufort_array3_destroy") &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array3
      implicit none
      type(gpufort_array3),intent(inout) :: array
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
    end function
    function gpufort_array4_destroy_async(array,stream) &
          bind(c,name="gpufort_array4_destroy") &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array4
      implicit none
      type(gpufort_array4),intent(inout) :: array
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
    end function
    function gpufort_array5_destroy_async(array,stream) &
          bind(c,name="gpufort_array5_destroy") &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array5
      implicit none
      type(gpufort_array5),intent(inout) :: array
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
    end function
    function gpufort_array6_destroy_async(array,stream) &
          bind(c,name="gpufort_array6_destroy") &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array6
      implicit none
      type(gpufort_array6),intent(inout) :: array
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
    end function
    function gpufort_array7_destroy_async(array,stream) &
          bind(c,name="gpufort_array7_destroy") &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array7
      implicit none
      type(gpufort_array7),intent(inout) :: array
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
    end function
  end interface
  interface gpufort_array_copy_to_host_async
    function gpufort_array1_copy_to_host_async(array,stream) &
          bind(c,name="gpufort_array1_copy_to_host") &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array1
      implicit none
      type(gpufort_array1),intent(inout) :: array
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
    end function
    function gpufort_array2_copy_to_host_async(array,stream) &
          bind(c,name="gpufort_array2_copy_to_host") &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array2
      implicit none
      type(gpufort_array2),intent(inout) :: array
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
    end function
    function gpufort_array3_copy_to_host_async(array,stream) &
          bind(c,name="gpufort_array3_copy_to_host") &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array3
      implicit none
      type(gpufort_array3),intent(inout) :: array
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
    end function
    function gpufort_array4_copy_to_host_async(array,stream) &
          bind(c,name="gpufort_array4_copy_to_host") &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array4
      implicit none
      type(gpufort_array4),intent(inout) :: array
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
    end function
    function gpufort_array5_copy_to_host_async(array,stream) &
          bind(c,name="gpufort_array5_copy_to_host") &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array5
      implicit none
      type(gpufort_array5),intent(inout) :: array
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
    end function
    function gpufort_array6_copy_to_host_async(array,stream) &
          bind(c,name="gpufort_array6_copy_to_host") &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array6
      implicit none
      type(gpufort_array6),intent(inout) :: array
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
    end function
    function gpufort_array7_copy_to_host_async(array,stream) &
          bind(c,name="gpufort_array7_copy_to_host") &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array7
      implicit none
      type(gpufort_array7),intent(inout) :: array
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
    end function
  end interface
  interface gpufort_array_copy_to_device_async
    function gpufort_array1_copy_to_device_async(array,stream) &
          bind(c,name="gpufort_array1_copy_to_device") &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array1
      implicit none
      type(gpufort_array1),intent(inout) :: array
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
    end function
    function gpufort_array2_copy_to_device_async(array,stream) &
          bind(c,name="gpufort_array2_copy_to_device") &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array2
      implicit none
      type(gpufort_array2),intent(inout) :: array
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
    end function
    function gpufort_array3_copy_to_device_async(array,stream) &
          bind(c,name="gpufort_array3_copy_to_device") &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array3
      implicit none
      type(gpufort_array3),intent(inout) :: array
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
    end function
    function gpufort_array4_copy_to_device_async(array,stream) &
          bind(c,name="gpufort_array4_copy_to_device") &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array4
      implicit none
      type(gpufort_array4),intent(inout) :: array
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
    end function
    function gpufort_array5_copy_to_device_async(array,stream) &
          bind(c,name="gpufort_array5_copy_to_device") &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array5
      implicit none
      type(gpufort_array5),intent(inout) :: array
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
    end function
    function gpufort_array6_copy_to_device_async(array,stream) &
          bind(c,name="gpufort_array6_copy_to_device") &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array6
      implicit none
      type(gpufort_array6),intent(inout) :: array
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
    end function
    function gpufort_array7_copy_to_device_async(array,stream) &
          bind(c,name="gpufort_array7_copy_to_device") &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array7
      implicit none
      type(gpufort_array7),intent(inout) :: array
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
    end function
  end interface
  !>
  !> Copy this array's host or device data FROM a host or device buffer.
  !>
  interface gpufort_array_copy_from_buffer_async
    function gpufort_array1_copy_from_buffer_async(&
      array,buffer,memcpy_kind,&
      stream) &
          bind(c,name="gpufort_array1_copy_from_buffer_async") &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array1
      implicit none
      type(gpufort_array1),intent(inout) :: array
      type(c_ptr),value,intent(in) :: buffer
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
    end function
    function gpufort_array2_copy_from_buffer_async(&
      array,buffer,memcpy_kind,&
      stream) &
          bind(c,name="gpufort_array2_copy_from_buffer_async") &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array2
      implicit none
      type(gpufort_array2),intent(inout) :: array
      type(c_ptr),value,intent(in) :: buffer
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
    end function
    function gpufort_array3_copy_from_buffer_async(&
      array,buffer,memcpy_kind,&
      stream) &
          bind(c,name="gpufort_array3_copy_from_buffer_async") &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array3
      implicit none
      type(gpufort_array3),intent(inout) :: array
      type(c_ptr),value,intent(in) :: buffer
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
    end function
    function gpufort_array4_copy_from_buffer_async(&
      array,buffer,memcpy_kind,&
      stream) &
          bind(c,name="gpufort_array4_copy_from_buffer_async") &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array4
      implicit none
      type(gpufort_array4),intent(inout) :: array
      type(c_ptr),value,intent(in) :: buffer
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
    end function
    function gpufort_array5_copy_from_buffer_async(&
      array,buffer,memcpy_kind,&
      stream) &
          bind(c,name="gpufort_array5_copy_from_buffer_async") &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array5
      implicit none
      type(gpufort_array5),intent(inout) :: array
      type(c_ptr),value,intent(in) :: buffer
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
    end function
    function gpufort_array6_copy_from_buffer_async(&
      array,buffer,memcpy_kind,&
      stream) &
          bind(c,name="gpufort_array6_copy_from_buffer_async") &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array6
      implicit none
      type(gpufort_array6),intent(inout) :: array
      type(c_ptr),value,intent(in) :: buffer
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
    end function
    function gpufort_array7_copy_from_buffer_async(&
      array,buffer,memcpy_kind,&
      stream) &
          bind(c,name="gpufort_array7_copy_from_buffer_async") &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array7
      implicit none
      type(gpufort_array7),intent(inout) :: array
      type(c_ptr),value,intent(in) :: buffer
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
    end function
    module procedure :: &
        gpufort_array1_copy_from_buffer_c_bool,&
        gpufort_array1_copy_from_buffer_c_short,&
        gpufort_array1_copy_from_buffer_c_int,&
        gpufort_array1_copy_from_buffer_c_long,&
        gpufort_array1_copy_from_buffer_c_float,&
        gpufort_array1_copy_from_buffer_c_double,&
        gpufort_array1_copy_from_buffer_c_float_complex,&
        gpufort_array1_copy_from_buffer_c_double_complex,&
        gpufort_array2_copy_from_buffer_c_bool,&
        gpufort_array2_copy_from_buffer_c_short,&
        gpufort_array2_copy_from_buffer_c_int,&
        gpufort_array2_copy_from_buffer_c_long,&
        gpufort_array2_copy_from_buffer_c_float,&
        gpufort_array2_copy_from_buffer_c_double,&
        gpufort_array2_copy_from_buffer_c_float_complex,&
        gpufort_array2_copy_from_buffer_c_double_complex,&
        gpufort_array3_copy_from_buffer_c_bool,&
        gpufort_array3_copy_from_buffer_c_short,&
        gpufort_array3_copy_from_buffer_c_int,&
        gpufort_array3_copy_from_buffer_c_long,&
        gpufort_array3_copy_from_buffer_c_float,&
        gpufort_array3_copy_from_buffer_c_double,&
        gpufort_array3_copy_from_buffer_c_float_complex,&
        gpufort_array3_copy_from_buffer_c_double_complex,&
        gpufort_array4_copy_from_buffer_c_bool,&
        gpufort_array4_copy_from_buffer_c_short,&
        gpufort_array4_copy_from_buffer_c_int,&
        gpufort_array4_copy_from_buffer_c_long,&
        gpufort_array4_copy_from_buffer_c_float,&
        gpufort_array4_copy_from_buffer_c_double,&
        gpufort_array4_copy_from_buffer_c_float_complex,&
        gpufort_array4_copy_from_buffer_c_double_complex,&
        gpufort_array5_copy_from_buffer_c_bool,&
        gpufort_array5_copy_from_buffer_c_short,&
        gpufort_array5_copy_from_buffer_c_int,&
        gpufort_array5_copy_from_buffer_c_long,&
        gpufort_array5_copy_from_buffer_c_float,&
        gpufort_array5_copy_from_buffer_c_double,&
        gpufort_array5_copy_from_buffer_c_float_complex,&
        gpufort_array5_copy_from_buffer_c_double_complex,&
        gpufort_array6_copy_from_buffer_c_bool,&
        gpufort_array6_copy_from_buffer_c_short,&
        gpufort_array6_copy_from_buffer_c_int,&
        gpufort_array6_copy_from_buffer_c_long,&
        gpufort_array6_copy_from_buffer_c_float,&
        gpufort_array6_copy_from_buffer_c_double,&
        gpufort_array6_copy_from_buffer_c_float_complex,&
        gpufort_array6_copy_from_buffer_c_double_complex,&
        gpufort_array7_copy_from_buffer_c_bool,&
        gpufort_array7_copy_from_buffer_c_short,&
        gpufort_array7_copy_from_buffer_c_int,&
        gpufort_array7_copy_from_buffer_c_long,&
        gpufort_array7_copy_from_buffer_c_float,&
        gpufort_array7_copy_from_buffer_c_double,&
        gpufort_array7_copy_from_buffer_c_float_complex,&
        gpufort_array7_copy_from_buffer_c_double_complex
  end interface
  !>
  !> Copy this array's host or device data TO a host or device buffer.
  !>
  interface gpufort_array_copy_to_buffer_async
    function gpufort_array1_copy_to_buffer_async(&
      array,buffer,memcpy_kind,&
      stream) &
          bind(c,name="gpufort_array1_copy_to_buffer_async") &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array1
      implicit none
      type(gpufort_array1),intent(inout) :: array
      type(c_ptr),value,intent(in) :: buffer
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
    end function
    function gpufort_array2_copy_to_buffer_async(&
      array,buffer,memcpy_kind,&
      stream) &
          bind(c,name="gpufort_array2_copy_to_buffer_async") &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array2
      implicit none
      type(gpufort_array2),intent(inout) :: array
      type(c_ptr),value,intent(in) :: buffer
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
    end function
    function gpufort_array3_copy_to_buffer_async(&
      array,buffer,memcpy_kind,&
      stream) &
          bind(c,name="gpufort_array3_copy_to_buffer_async") &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array3
      implicit none
      type(gpufort_array3),intent(inout) :: array
      type(c_ptr),value,intent(in) :: buffer
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
    end function
    function gpufort_array4_copy_to_buffer_async(&
      array,buffer,memcpy_kind,&
      stream) &
          bind(c,name="gpufort_array4_copy_to_buffer_async") &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array4
      implicit none
      type(gpufort_array4),intent(inout) :: array
      type(c_ptr),value,intent(in) :: buffer
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
    end function
    function gpufort_array5_copy_to_buffer_async(&
      array,buffer,memcpy_kind,&
      stream) &
          bind(c,name="gpufort_array5_copy_to_buffer_async") &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array5
      implicit none
      type(gpufort_array5),intent(inout) :: array
      type(c_ptr),value,intent(in) :: buffer
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
    end function
    function gpufort_array6_copy_to_buffer_async(&
      array,buffer,memcpy_kind,&
      stream) &
          bind(c,name="gpufort_array6_copy_to_buffer_async") &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array6
      implicit none
      type(gpufort_array6),intent(inout) :: array
      type(c_ptr),value,intent(in) :: buffer
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
    end function
    function gpufort_array7_copy_to_buffer_async(&
      array,buffer,memcpy_kind,&
      stream) &
          bind(c,name="gpufort_array7_copy_to_buffer_async") &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array7
      implicit none
      type(gpufort_array7),intent(inout) :: array
      type(c_ptr),value,intent(in) :: buffer
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
    end function
    module procedure :: &
        gpufort_array1_copy_to_buffer_c_bool,&
        gpufort_array1_copy_to_buffer_c_short,&
        gpufort_array1_copy_to_buffer_c_int,&
        gpufort_array1_copy_to_buffer_c_long,&
        gpufort_array1_copy_to_buffer_c_float,&
        gpufort_array1_copy_to_buffer_c_double,&
        gpufort_array1_copy_to_buffer_c_float_complex,&
        gpufort_array1_copy_to_buffer_c_double_complex,&
        gpufort_array2_copy_to_buffer_c_bool,&
        gpufort_array2_copy_to_buffer_c_short,&
        gpufort_array2_copy_to_buffer_c_int,&
        gpufort_array2_copy_to_buffer_c_long,&
        gpufort_array2_copy_to_buffer_c_float,&
        gpufort_array2_copy_to_buffer_c_double,&
        gpufort_array2_copy_to_buffer_c_float_complex,&
        gpufort_array2_copy_to_buffer_c_double_complex,&
        gpufort_array3_copy_to_buffer_c_bool,&
        gpufort_array3_copy_to_buffer_c_short,&
        gpufort_array3_copy_to_buffer_c_int,&
        gpufort_array3_copy_to_buffer_c_long,&
        gpufort_array3_copy_to_buffer_c_float,&
        gpufort_array3_copy_to_buffer_c_double,&
        gpufort_array3_copy_to_buffer_c_float_complex,&
        gpufort_array3_copy_to_buffer_c_double_complex,&
        gpufort_array4_copy_to_buffer_c_bool,&
        gpufort_array4_copy_to_buffer_c_short,&
        gpufort_array4_copy_to_buffer_c_int,&
        gpufort_array4_copy_to_buffer_c_long,&
        gpufort_array4_copy_to_buffer_c_float,&
        gpufort_array4_copy_to_buffer_c_double,&
        gpufort_array4_copy_to_buffer_c_float_complex,&
        gpufort_array4_copy_to_buffer_c_double_complex,&
        gpufort_array5_copy_to_buffer_c_bool,&
        gpufort_array5_copy_to_buffer_c_short,&
        gpufort_array5_copy_to_buffer_c_int,&
        gpufort_array5_copy_to_buffer_c_long,&
        gpufort_array5_copy_to_buffer_c_float,&
        gpufort_array5_copy_to_buffer_c_double,&
        gpufort_array5_copy_to_buffer_c_float_complex,&
        gpufort_array5_copy_to_buffer_c_double_complex,&
        gpufort_array6_copy_to_buffer_c_bool,&
        gpufort_array6_copy_to_buffer_c_short,&
        gpufort_array6_copy_to_buffer_c_int,&
        gpufort_array6_copy_to_buffer_c_long,&
        gpufort_array6_copy_to_buffer_c_float,&
        gpufort_array6_copy_to_buffer_c_double,&
        gpufort_array6_copy_to_buffer_c_float_complex,&
        gpufort_array6_copy_to_buffer_c_double_complex,&
        gpufort_array7_copy_to_buffer_c_bool,&
        gpufort_array7_copy_to_buffer_c_short,&
        gpufort_array7_copy_to_buffer_c_int,&
        gpufort_array7_copy_to_buffer_c_long,&
        gpufort_array7_copy_to_buffer_c_float,&
        gpufort_array7_copy_to_buffer_c_double,&
        gpufort_array7_copy_to_buffer_c_float_complex,&
        gpufort_array7_copy_to_buffer_c_double_complex
  end interface
  interface gpufort_array_dec_num_refs_async
    function gpufort_array1_dec_num_refs_async(&
      array,destroy_if_zero_refs,&
      stream) &
          bind(c,name="gpufort_array1_dec_num_refs") &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array1
      implicit none
      type(gpufort_array1),intent(inout) :: array
      type(c_ptr),value,intent(in) :: stream
      logical(c_bool),intent(in),value :: destroy_if_zero_refs
      integer(kind(hipSuccess)) :: ierr
    end function
    function gpufort_array2_dec_num_refs_async(&
      array,destroy_if_zero_refs,&
      stream) &
          bind(c,name="gpufort_array2_dec_num_refs") &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array2
      implicit none
      type(gpufort_array2),intent(inout) :: array
      type(c_ptr),value,intent(in) :: stream
      logical(c_bool),intent(in),value :: destroy_if_zero_refs
      integer(kind(hipSuccess)) :: ierr
    end function
    function gpufort_array3_dec_num_refs_async(&
      array,destroy_if_zero_refs,&
      stream) &
          bind(c,name="gpufort_array3_dec_num_refs") &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array3
      implicit none
      type(gpufort_array3),intent(inout) :: array
      type(c_ptr),value,intent(in) :: stream
      logical(c_bool),intent(in),value :: destroy_if_zero_refs
      integer(kind(hipSuccess)) :: ierr
    end function
    function gpufort_array4_dec_num_refs_async(&
      array,destroy_if_zero_refs,&
      stream) &
          bind(c,name="gpufort_array4_dec_num_refs") &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array4
      implicit none
      type(gpufort_array4),intent(inout) :: array
      type(c_ptr),value,intent(in) :: stream
      logical(c_bool),intent(in),value :: destroy_if_zero_refs
      integer(kind(hipSuccess)) :: ierr
    end function
    function gpufort_array5_dec_num_refs_async(&
      array,destroy_if_zero_refs,&
      stream) &
          bind(c,name="gpufort_array5_dec_num_refs") &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array5
      implicit none
      type(gpufort_array5),intent(inout) :: array
      type(c_ptr),value,intent(in) :: stream
      logical(c_bool),intent(in),value :: destroy_if_zero_refs
      integer(kind(hipSuccess)) :: ierr
    end function
    function gpufort_array6_dec_num_refs_async(&
      array,destroy_if_zero_refs,&
      stream) &
          bind(c,name="gpufort_array6_dec_num_refs") &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array6
      implicit none
      type(gpufort_array6),intent(inout) :: array
      type(c_ptr),value,intent(in) :: stream
      logical(c_bool),intent(in),value :: destroy_if_zero_refs
      integer(kind(hipSuccess)) :: ierr
    end function
    function gpufort_array7_dec_num_refs_async(&
      array,destroy_if_zero_refs,&
      stream) &
          bind(c,name="gpufort_array7_dec_num_refs") &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array7
      implicit none
      type(gpufort_array7),intent(inout) :: array
      type(c_ptr),value,intent(in) :: stream
      logical(c_bool),intent(in),value :: destroy_if_zero_refs
      integer(kind(hipSuccess)) :: ierr
    end function
  end interface
  interface gpufort_array_destroy
    function gpufort_array1_destroy(array) &
          bind(c,name="gpufort_array1_destroy") &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array1
      implicit none
      type(gpufort_array1),intent(inout) :: array
      integer(kind(hipSuccess)) :: ierr
    end function
    function gpufort_array2_destroy(array) &
          bind(c,name="gpufort_array2_destroy") &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array2
      implicit none
      type(gpufort_array2),intent(inout) :: array
      integer(kind(hipSuccess)) :: ierr
    end function
    function gpufort_array3_destroy(array) &
          bind(c,name="gpufort_array3_destroy") &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array3
      implicit none
      type(gpufort_array3),intent(inout) :: array
      integer(kind(hipSuccess)) :: ierr
    end function
    function gpufort_array4_destroy(array) &
          bind(c,name="gpufort_array4_destroy") &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array4
      implicit none
      type(gpufort_array4),intent(inout) :: array
      integer(kind(hipSuccess)) :: ierr
    end function
    function gpufort_array5_destroy(array) &
          bind(c,name="gpufort_array5_destroy") &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array5
      implicit none
      type(gpufort_array5),intent(inout) :: array
      integer(kind(hipSuccess)) :: ierr
    end function
    function gpufort_array6_destroy(array) &
          bind(c,name="gpufort_array6_destroy") &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array6
      implicit none
      type(gpufort_array6),intent(inout) :: array
      integer(kind(hipSuccess)) :: ierr
    end function
    function gpufort_array7_destroy(array) &
          bind(c,name="gpufort_array7_destroy") &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array7
      implicit none
      type(gpufort_array7),intent(inout) :: array
      integer(kind(hipSuccess)) :: ierr
    end function
  end interface
  interface gpufort_array_copy_to_host
    function gpufort_array1_copy_to_host(array) &
          bind(c,name="gpufort_array1_copy_to_host") &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array1
      implicit none
      type(gpufort_array1),intent(inout) :: array
      integer(kind(hipSuccess)) :: ierr
    end function
    function gpufort_array2_copy_to_host(array) &
          bind(c,name="gpufort_array2_copy_to_host") &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array2
      implicit none
      type(gpufort_array2),intent(inout) :: array
      integer(kind(hipSuccess)) :: ierr
    end function
    function gpufort_array3_copy_to_host(array) &
          bind(c,name="gpufort_array3_copy_to_host") &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array3
      implicit none
      type(gpufort_array3),intent(inout) :: array
      integer(kind(hipSuccess)) :: ierr
    end function
    function gpufort_array4_copy_to_host(array) &
          bind(c,name="gpufort_array4_copy_to_host") &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array4
      implicit none
      type(gpufort_array4),intent(inout) :: array
      integer(kind(hipSuccess)) :: ierr
    end function
    function gpufort_array5_copy_to_host(array) &
          bind(c,name="gpufort_array5_copy_to_host") &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array5
      implicit none
      type(gpufort_array5),intent(inout) :: array
      integer(kind(hipSuccess)) :: ierr
    end function
    function gpufort_array6_copy_to_host(array) &
          bind(c,name="gpufort_array6_copy_to_host") &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array6
      implicit none
      type(gpufort_array6),intent(inout) :: array
      integer(kind(hipSuccess)) :: ierr
    end function
    function gpufort_array7_copy_to_host(array) &
          bind(c,name="gpufort_array7_copy_to_host") &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array7
      implicit none
      type(gpufort_array7),intent(inout) :: array
      integer(kind(hipSuccess)) :: ierr
    end function
  end interface
  interface gpufort_array_copy_to_device
    function gpufort_array1_copy_to_device(array) &
          bind(c,name="gpufort_array1_copy_to_device") &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array1
      implicit none
      type(gpufort_array1),intent(inout) :: array
      integer(kind(hipSuccess)) :: ierr
    end function
    function gpufort_array2_copy_to_device(array) &
          bind(c,name="gpufort_array2_copy_to_device") &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array2
      implicit none
      type(gpufort_array2),intent(inout) :: array
      integer(kind(hipSuccess)) :: ierr
    end function
    function gpufort_array3_copy_to_device(array) &
          bind(c,name="gpufort_array3_copy_to_device") &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array3
      implicit none
      type(gpufort_array3),intent(inout) :: array
      integer(kind(hipSuccess)) :: ierr
    end function
    function gpufort_array4_copy_to_device(array) &
          bind(c,name="gpufort_array4_copy_to_device") &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array4
      implicit none
      type(gpufort_array4),intent(inout) :: array
      integer(kind(hipSuccess)) :: ierr
    end function
    function gpufort_array5_copy_to_device(array) &
          bind(c,name="gpufort_array5_copy_to_device") &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array5
      implicit none
      type(gpufort_array5),intent(inout) :: array
      integer(kind(hipSuccess)) :: ierr
    end function
    function gpufort_array6_copy_to_device(array) &
          bind(c,name="gpufort_array6_copy_to_device") &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array6
      implicit none
      type(gpufort_array6),intent(inout) :: array
      integer(kind(hipSuccess)) :: ierr
    end function
    function gpufort_array7_copy_to_device(array) &
          bind(c,name="gpufort_array7_copy_to_device") &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array7
      implicit none
      type(gpufort_array7),intent(inout) :: array
      integer(kind(hipSuccess)) :: ierr
    end function
  end interface
  !>
  !> Copy this array's host or device data FROM a host or device buffer.
  !>
  interface gpufort_array_copy_from_buffer
    function gpufort_array1_copy_from_buffer(&
      array,buffer,memcpy_kind) &
          bind(c,name="gpufort_array1_copy_from_buffer") &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array1
      implicit none
      type(gpufort_array1),intent(inout) :: array
      type(c_ptr),value,intent(in) :: buffer
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      integer(kind(hipSuccess)) :: ierr
    end function
    function gpufort_array2_copy_from_buffer(&
      array,buffer,memcpy_kind) &
          bind(c,name="gpufort_array2_copy_from_buffer") &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array2
      implicit none
      type(gpufort_array2),intent(inout) :: array
      type(c_ptr),value,intent(in) :: buffer
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      integer(kind(hipSuccess)) :: ierr
    end function
    function gpufort_array3_copy_from_buffer(&
      array,buffer,memcpy_kind) &
          bind(c,name="gpufort_array3_copy_from_buffer") &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array3
      implicit none
      type(gpufort_array3),intent(inout) :: array
      type(c_ptr),value,intent(in) :: buffer
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      integer(kind(hipSuccess)) :: ierr
    end function
    function gpufort_array4_copy_from_buffer(&
      array,buffer,memcpy_kind) &
          bind(c,name="gpufort_array4_copy_from_buffer") &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array4
      implicit none
      type(gpufort_array4),intent(inout) :: array
      type(c_ptr),value,intent(in) :: buffer
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      integer(kind(hipSuccess)) :: ierr
    end function
    function gpufort_array5_copy_from_buffer(&
      array,buffer,memcpy_kind) &
          bind(c,name="gpufort_array5_copy_from_buffer") &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array5
      implicit none
      type(gpufort_array5),intent(inout) :: array
      type(c_ptr),value,intent(in) :: buffer
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      integer(kind(hipSuccess)) :: ierr
    end function
    function gpufort_array6_copy_from_buffer(&
      array,buffer,memcpy_kind) &
          bind(c,name="gpufort_array6_copy_from_buffer") &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array6
      implicit none
      type(gpufort_array6),intent(inout) :: array
      type(c_ptr),value,intent(in) :: buffer
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      integer(kind(hipSuccess)) :: ierr
    end function
    function gpufort_array7_copy_from_buffer(&
      array,buffer,memcpy_kind) &
          bind(c,name="gpufort_array7_copy_from_buffer") &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array7
      implicit none
      type(gpufort_array7),intent(inout) :: array
      type(c_ptr),value,intent(in) :: buffer
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      integer(kind(hipSuccess)) :: ierr
    end function
    module procedure :: &
        gpufort_array1_copy_from_buffer_c_bool,&
        gpufort_array1_copy_from_buffer_c_short,&
        gpufort_array1_copy_from_buffer_c_int,&
        gpufort_array1_copy_from_buffer_c_long,&
        gpufort_array1_copy_from_buffer_c_float,&
        gpufort_array1_copy_from_buffer_c_double,&
        gpufort_array1_copy_from_buffer_c_float_complex,&
        gpufort_array1_copy_from_buffer_c_double_complex,&
        gpufort_array2_copy_from_buffer_c_bool,&
        gpufort_array2_copy_from_buffer_c_short,&
        gpufort_array2_copy_from_buffer_c_int,&
        gpufort_array2_copy_from_buffer_c_long,&
        gpufort_array2_copy_from_buffer_c_float,&
        gpufort_array2_copy_from_buffer_c_double,&
        gpufort_array2_copy_from_buffer_c_float_complex,&
        gpufort_array2_copy_from_buffer_c_double_complex,&
        gpufort_array3_copy_from_buffer_c_bool,&
        gpufort_array3_copy_from_buffer_c_short,&
        gpufort_array3_copy_from_buffer_c_int,&
        gpufort_array3_copy_from_buffer_c_long,&
        gpufort_array3_copy_from_buffer_c_float,&
        gpufort_array3_copy_from_buffer_c_double,&
        gpufort_array3_copy_from_buffer_c_float_complex,&
        gpufort_array3_copy_from_buffer_c_double_complex,&
        gpufort_array4_copy_from_buffer_c_bool,&
        gpufort_array4_copy_from_buffer_c_short,&
        gpufort_array4_copy_from_buffer_c_int,&
        gpufort_array4_copy_from_buffer_c_long,&
        gpufort_array4_copy_from_buffer_c_float,&
        gpufort_array4_copy_from_buffer_c_double,&
        gpufort_array4_copy_from_buffer_c_float_complex,&
        gpufort_array4_copy_from_buffer_c_double_complex,&
        gpufort_array5_copy_from_buffer_c_bool,&
        gpufort_array5_copy_from_buffer_c_short,&
        gpufort_array5_copy_from_buffer_c_int,&
        gpufort_array5_copy_from_buffer_c_long,&
        gpufort_array5_copy_from_buffer_c_float,&
        gpufort_array5_copy_from_buffer_c_double,&
        gpufort_array5_copy_from_buffer_c_float_complex,&
        gpufort_array5_copy_from_buffer_c_double_complex,&
        gpufort_array6_copy_from_buffer_c_bool,&
        gpufort_array6_copy_from_buffer_c_short,&
        gpufort_array6_copy_from_buffer_c_int,&
        gpufort_array6_copy_from_buffer_c_long,&
        gpufort_array6_copy_from_buffer_c_float,&
        gpufort_array6_copy_from_buffer_c_double,&
        gpufort_array6_copy_from_buffer_c_float_complex,&
        gpufort_array6_copy_from_buffer_c_double_complex,&
        gpufort_array7_copy_from_buffer_c_bool,&
        gpufort_array7_copy_from_buffer_c_short,&
        gpufort_array7_copy_from_buffer_c_int,&
        gpufort_array7_copy_from_buffer_c_long,&
        gpufort_array7_copy_from_buffer_c_float,&
        gpufort_array7_copy_from_buffer_c_double,&
        gpufort_array7_copy_from_buffer_c_float_complex,&
        gpufort_array7_copy_from_buffer_c_double_complex
  end interface
  !>
  !> Copy this array's host or device data TO a host or device buffer.
  !>
  interface gpufort_array_copy_to_buffer
    function gpufort_array1_copy_to_buffer(&
      array,buffer,memcpy_kind) &
          bind(c,name="gpufort_array1_copy_to_buffer") &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array1
      implicit none
      type(gpufort_array1),intent(inout) :: array
      type(c_ptr),value,intent(in) :: buffer
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      integer(kind(hipSuccess)) :: ierr
    end function
    function gpufort_array2_copy_to_buffer(&
      array,buffer,memcpy_kind) &
          bind(c,name="gpufort_array2_copy_to_buffer") &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array2
      implicit none
      type(gpufort_array2),intent(inout) :: array
      type(c_ptr),value,intent(in) :: buffer
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      integer(kind(hipSuccess)) :: ierr
    end function
    function gpufort_array3_copy_to_buffer(&
      array,buffer,memcpy_kind) &
          bind(c,name="gpufort_array3_copy_to_buffer") &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array3
      implicit none
      type(gpufort_array3),intent(inout) :: array
      type(c_ptr),value,intent(in) :: buffer
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      integer(kind(hipSuccess)) :: ierr
    end function
    function gpufort_array4_copy_to_buffer(&
      array,buffer,memcpy_kind) &
          bind(c,name="gpufort_array4_copy_to_buffer") &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array4
      implicit none
      type(gpufort_array4),intent(inout) :: array
      type(c_ptr),value,intent(in) :: buffer
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      integer(kind(hipSuccess)) :: ierr
    end function
    function gpufort_array5_copy_to_buffer(&
      array,buffer,memcpy_kind) &
          bind(c,name="gpufort_array5_copy_to_buffer") &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array5
      implicit none
      type(gpufort_array5),intent(inout) :: array
      type(c_ptr),value,intent(in) :: buffer
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      integer(kind(hipSuccess)) :: ierr
    end function
    function gpufort_array6_copy_to_buffer(&
      array,buffer,memcpy_kind) &
          bind(c,name="gpufort_array6_copy_to_buffer") &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array6
      implicit none
      type(gpufort_array6),intent(inout) :: array
      type(c_ptr),value,intent(in) :: buffer
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      integer(kind(hipSuccess)) :: ierr
    end function
    function gpufort_array7_copy_to_buffer(&
      array,buffer,memcpy_kind) &
          bind(c,name="gpufort_array7_copy_to_buffer") &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array7
      implicit none
      type(gpufort_array7),intent(inout) :: array
      type(c_ptr),value,intent(in) :: buffer
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      integer(kind(hipSuccess)) :: ierr
    end function
    module procedure :: &
        gpufort_array1_copy_to_buffer_c_bool,&
        gpufort_array1_copy_to_buffer_c_short,&
        gpufort_array1_copy_to_buffer_c_int,&
        gpufort_array1_copy_to_buffer_c_long,&
        gpufort_array1_copy_to_buffer_c_float,&
        gpufort_array1_copy_to_buffer_c_double,&
        gpufort_array1_copy_to_buffer_c_float_complex,&
        gpufort_array1_copy_to_buffer_c_double_complex,&
        gpufort_array2_copy_to_buffer_c_bool,&
        gpufort_array2_copy_to_buffer_c_short,&
        gpufort_array2_copy_to_buffer_c_int,&
        gpufort_array2_copy_to_buffer_c_long,&
        gpufort_array2_copy_to_buffer_c_float,&
        gpufort_array2_copy_to_buffer_c_double,&
        gpufort_array2_copy_to_buffer_c_float_complex,&
        gpufort_array2_copy_to_buffer_c_double_complex,&
        gpufort_array3_copy_to_buffer_c_bool,&
        gpufort_array3_copy_to_buffer_c_short,&
        gpufort_array3_copy_to_buffer_c_int,&
        gpufort_array3_copy_to_buffer_c_long,&
        gpufort_array3_copy_to_buffer_c_float,&
        gpufort_array3_copy_to_buffer_c_double,&
        gpufort_array3_copy_to_buffer_c_float_complex,&
        gpufort_array3_copy_to_buffer_c_double_complex,&
        gpufort_array4_copy_to_buffer_c_bool,&
        gpufort_array4_copy_to_buffer_c_short,&
        gpufort_array4_copy_to_buffer_c_int,&
        gpufort_array4_copy_to_buffer_c_long,&
        gpufort_array4_copy_to_buffer_c_float,&
        gpufort_array4_copy_to_buffer_c_double,&
        gpufort_array4_copy_to_buffer_c_float_complex,&
        gpufort_array4_copy_to_buffer_c_double_complex,&
        gpufort_array5_copy_to_buffer_c_bool,&
        gpufort_array5_copy_to_buffer_c_short,&
        gpufort_array5_copy_to_buffer_c_int,&
        gpufort_array5_copy_to_buffer_c_long,&
        gpufort_array5_copy_to_buffer_c_float,&
        gpufort_array5_copy_to_buffer_c_double,&
        gpufort_array5_copy_to_buffer_c_float_complex,&
        gpufort_array5_copy_to_buffer_c_double_complex,&
        gpufort_array6_copy_to_buffer_c_bool,&
        gpufort_array6_copy_to_buffer_c_short,&
        gpufort_array6_copy_to_buffer_c_int,&
        gpufort_array6_copy_to_buffer_c_long,&
        gpufort_array6_copy_to_buffer_c_float,&
        gpufort_array6_copy_to_buffer_c_double,&
        gpufort_array6_copy_to_buffer_c_float_complex,&
        gpufort_array6_copy_to_buffer_c_double_complex,&
        gpufort_array7_copy_to_buffer_c_bool,&
        gpufort_array7_copy_to_buffer_c_short,&
        gpufort_array7_copy_to_buffer_c_int,&
        gpufort_array7_copy_to_buffer_c_long,&
        gpufort_array7_copy_to_buffer_c_float,&
        gpufort_array7_copy_to_buffer_c_double,&
        gpufort_array7_copy_to_buffer_c_float_complex,&
        gpufort_array7_copy_to_buffer_c_double_complex
  end interface
  interface gpufort_array_dec_num_refs
    function gpufort_array1_dec_num_refs(&
      array,destroy_if_zero_refs) &
          bind(c,name="gpufort_array1_dec_num_refs") &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array1
      implicit none
      type(gpufort_array1),intent(inout) :: array
      logical(c_bool),intent(in),value :: destroy_if_zero_refs
      integer(kind(hipSuccess)) :: ierr
    end function
    function gpufort_array2_dec_num_refs(&
      array,destroy_if_zero_refs) &
          bind(c,name="gpufort_array2_dec_num_refs") &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array2
      implicit none
      type(gpufort_array2),intent(inout) :: array
      logical(c_bool),intent(in),value :: destroy_if_zero_refs
      integer(kind(hipSuccess)) :: ierr
    end function
    function gpufort_array3_dec_num_refs(&
      array,destroy_if_zero_refs) &
          bind(c,name="gpufort_array3_dec_num_refs") &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array3
      implicit none
      type(gpufort_array3),intent(inout) :: array
      logical(c_bool),intent(in),value :: destroy_if_zero_refs
      integer(kind(hipSuccess)) :: ierr
    end function
    function gpufort_array4_dec_num_refs(&
      array,destroy_if_zero_refs) &
          bind(c,name="gpufort_array4_dec_num_refs") &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array4
      implicit none
      type(gpufort_array4),intent(inout) :: array
      logical(c_bool),intent(in),value :: destroy_if_zero_refs
      integer(kind(hipSuccess)) :: ierr
    end function
    function gpufort_array5_dec_num_refs(&
      array,destroy_if_zero_refs) &
          bind(c,name="gpufort_array5_dec_num_refs") &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array5
      implicit none
      type(gpufort_array5),intent(inout) :: array
      logical(c_bool),intent(in),value :: destroy_if_zero_refs
      integer(kind(hipSuccess)) :: ierr
    end function
    function gpufort_array6_dec_num_refs(&
      array,destroy_if_zero_refs) &
          bind(c,name="gpufort_array6_dec_num_refs") &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array6
      implicit none
      type(gpufort_array6),intent(inout) :: array
      logical(c_bool),intent(in),value :: destroy_if_zero_refs
      integer(kind(hipSuccess)) :: ierr
    end function
    function gpufort_array7_dec_num_refs(&
      array,destroy_if_zero_refs) &
          bind(c,name="gpufort_array7_dec_num_refs") &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array7
      implicit none
      type(gpufort_array7),intent(inout) :: array
      logical(c_bool),intent(in),value :: destroy_if_zero_refs
      integer(kind(hipSuccess)) :: ierr
    end function
  end interface
  !> Allocate a host buffer with
  !> the same size as the data buffers
  !> associated with this gpufort array.
  !> @see num_data_bytes()
  !> \param[inout] pointer to the buffer to allocate
  !> \param[in] pinned If the memory should be pinned.
  !> \param[in] flags  Flags to pass to host memory allocation.
  interface gpufort_array_allocate_host_buffer
    function gpufort_array1_allocate_host_buffer(&
        array,buffer,pinned,flags) &
          bind(c,name="gpufort_array1_allocate_host_buffer") &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array1
      implicit none
      type(gpufort_array1),intent(in) :: array
      type(c_ptr),intent(in) :: buffer
      logical(c_bool),value :: pinned
      integer(c_int),value :: flags
      integer(kind(hipSuccess)) :: ierr
    end function
    function gpufort_array2_allocate_host_buffer(&
        array,buffer,pinned,flags) &
          bind(c,name="gpufort_array2_allocate_host_buffer") &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array2
      implicit none
      type(gpufort_array2),intent(in) :: array
      type(c_ptr),intent(in) :: buffer
      logical(c_bool),value :: pinned
      integer(c_int),value :: flags
      integer(kind(hipSuccess)) :: ierr
    end function
    function gpufort_array3_allocate_host_buffer(&
        array,buffer,pinned,flags) &
          bind(c,name="gpufort_array3_allocate_host_buffer") &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array3
      implicit none
      type(gpufort_array3),intent(in) :: array
      type(c_ptr),intent(in) :: buffer
      logical(c_bool),value :: pinned
      integer(c_int),value :: flags
      integer(kind(hipSuccess)) :: ierr
    end function
    function gpufort_array4_allocate_host_buffer(&
        array,buffer,pinned,flags) &
          bind(c,name="gpufort_array4_allocate_host_buffer") &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array4
      implicit none
      type(gpufort_array4),intent(in) :: array
      type(c_ptr),intent(in) :: buffer
      logical(c_bool),value :: pinned
      integer(c_int),value :: flags
      integer(kind(hipSuccess)) :: ierr
    end function
    function gpufort_array5_allocate_host_buffer(&
        array,buffer,pinned,flags) &
          bind(c,name="gpufort_array5_allocate_host_buffer") &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array5
      implicit none
      type(gpufort_array5),intent(in) :: array
      type(c_ptr),intent(in) :: buffer
      logical(c_bool),value :: pinned
      integer(c_int),value :: flags
      integer(kind(hipSuccess)) :: ierr
    end function
    function gpufort_array6_allocate_host_buffer(&
        array,buffer,pinned,flags) &
          bind(c,name="gpufort_array6_allocate_host_buffer") &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array6
      implicit none
      type(gpufort_array6),intent(in) :: array
      type(c_ptr),intent(in) :: buffer
      logical(c_bool),value :: pinned
      integer(c_int),value :: flags
      integer(kind(hipSuccess)) :: ierr
    end function
    function gpufort_array7_allocate_host_buffer(&
        array,buffer,pinned,flags) &
          bind(c,name="gpufort_array7_allocate_host_buffer") &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array7
      implicit none
      type(gpufort_array7),intent(in) :: array
      type(c_ptr),intent(in) :: buffer
      logical(c_bool),value :: pinned
      integer(c_int),value :: flags
      integer(kind(hipSuccess)) :: ierr
    end function
    module procedure :: &
        gpufort_array1_allocate_host_buffer_c_bool,&
        gpufort_array1_allocate_host_buffer_c_short,&
        gpufort_array1_allocate_host_buffer_c_int,&
        gpufort_array1_allocate_host_buffer_c_long,&
        gpufort_array1_allocate_host_buffer_c_float,&
        gpufort_array1_allocate_host_buffer_c_double,&
        gpufort_array1_allocate_host_buffer_c_float_complex,&
        gpufort_array1_allocate_host_buffer_c_double_complex,&
        gpufort_array2_allocate_host_buffer_c_bool,&
        gpufort_array2_allocate_host_buffer_c_short,&
        gpufort_array2_allocate_host_buffer_c_int,&
        gpufort_array2_allocate_host_buffer_c_long,&
        gpufort_array2_allocate_host_buffer_c_float,&
        gpufort_array2_allocate_host_buffer_c_double,&
        gpufort_array2_allocate_host_buffer_c_float_complex,&
        gpufort_array2_allocate_host_buffer_c_double_complex,&
        gpufort_array3_allocate_host_buffer_c_bool,&
        gpufort_array3_allocate_host_buffer_c_short,&
        gpufort_array3_allocate_host_buffer_c_int,&
        gpufort_array3_allocate_host_buffer_c_long,&
        gpufort_array3_allocate_host_buffer_c_float,&
        gpufort_array3_allocate_host_buffer_c_double,&
        gpufort_array3_allocate_host_buffer_c_float_complex,&
        gpufort_array3_allocate_host_buffer_c_double_complex,&
        gpufort_array4_allocate_host_buffer_c_bool,&
        gpufort_array4_allocate_host_buffer_c_short,&
        gpufort_array4_allocate_host_buffer_c_int,&
        gpufort_array4_allocate_host_buffer_c_long,&
        gpufort_array4_allocate_host_buffer_c_float,&
        gpufort_array4_allocate_host_buffer_c_double,&
        gpufort_array4_allocate_host_buffer_c_float_complex,&
        gpufort_array4_allocate_host_buffer_c_double_complex,&
        gpufort_array5_allocate_host_buffer_c_bool,&
        gpufort_array5_allocate_host_buffer_c_short,&
        gpufort_array5_allocate_host_buffer_c_int,&
        gpufort_array5_allocate_host_buffer_c_long,&
        gpufort_array5_allocate_host_buffer_c_float,&
        gpufort_array5_allocate_host_buffer_c_double,&
        gpufort_array5_allocate_host_buffer_c_float_complex,&
        gpufort_array5_allocate_host_buffer_c_double_complex,&
        gpufort_array6_allocate_host_buffer_c_bool,&
        gpufort_array6_allocate_host_buffer_c_short,&
        gpufort_array6_allocate_host_buffer_c_int,&
        gpufort_array6_allocate_host_buffer_c_long,&
        gpufort_array6_allocate_host_buffer_c_float,&
        gpufort_array6_allocate_host_buffer_c_double,&
        gpufort_array6_allocate_host_buffer_c_float_complex,&
        gpufort_array6_allocate_host_buffer_c_double_complex,&
        gpufort_array7_allocate_host_buffer_c_bool,&
        gpufort_array7_allocate_host_buffer_c_short,&
        gpufort_array7_allocate_host_buffer_c_int,&
        gpufort_array7_allocate_host_buffer_c_long,&
        gpufort_array7_allocate_host_buffer_c_float,&
        gpufort_array7_allocate_host_buffer_c_double,&
        gpufort_array7_allocate_host_buffer_c_float_complex,&
        gpufort_array7_allocate_host_buffer_c_double_complex
  end interface
  !> Allocate a device buffer with
  !> the same size as the data buffers
  !> associated with this gpufort array.
  !> @see num_data_bytes()
  !> \param[inout] pointer to the buffer to allocate
  interface gpufort_array_allocate_device_buffer
    function gpufort_array1_allocate_device_buffer(&
        array,buffer) &
          bind(c,name="gpufort_array1_allocate_device_buffer") &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array1
      implicit none
      type(gpufort_array1),intent(in) :: array
      type(c_ptr),intent(in) :: buffer
      integer(kind(hipSuccess)) :: ierr
    end function
    function gpufort_array2_allocate_device_buffer(&
        array,buffer) &
          bind(c,name="gpufort_array2_allocate_device_buffer") &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array2
      implicit none
      type(gpufort_array2),intent(in) :: array
      type(c_ptr),intent(in) :: buffer
      integer(kind(hipSuccess)) :: ierr
    end function
    function gpufort_array3_allocate_device_buffer(&
        array,buffer) &
          bind(c,name="gpufort_array3_allocate_device_buffer") &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array3
      implicit none
      type(gpufort_array3),intent(in) :: array
      type(c_ptr),intent(in) :: buffer
      integer(kind(hipSuccess)) :: ierr
    end function
    function gpufort_array4_allocate_device_buffer(&
        array,buffer) &
          bind(c,name="gpufort_array4_allocate_device_buffer") &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array4
      implicit none
      type(gpufort_array4),intent(in) :: array
      type(c_ptr),intent(in) :: buffer
      integer(kind(hipSuccess)) :: ierr
    end function
    function gpufort_array5_allocate_device_buffer(&
        array,buffer) &
          bind(c,name="gpufort_array5_allocate_device_buffer") &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array5
      implicit none
      type(gpufort_array5),intent(in) :: array
      type(c_ptr),intent(in) :: buffer
      integer(kind(hipSuccess)) :: ierr
    end function
    function gpufort_array6_allocate_device_buffer(&
        array,buffer) &
          bind(c,name="gpufort_array6_allocate_device_buffer") &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array6
      implicit none
      type(gpufort_array6),intent(in) :: array
      type(c_ptr),intent(in) :: buffer
      integer(kind(hipSuccess)) :: ierr
    end function
    function gpufort_array7_allocate_device_buffer(&
        array,buffer) &
          bind(c,name="gpufort_array7_allocate_device_buffer") &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array7
      implicit none
      type(gpufort_array7),intent(in) :: array
      type(c_ptr),intent(in) :: buffer
      integer(kind(hipSuccess)) :: ierr
    end function
    module procedure :: &
        gpufort_array1_allocate_device_buffer_c_bool,&
        gpufort_array1_allocate_device_buffer_c_short,&
        gpufort_array1_allocate_device_buffer_c_int,&
        gpufort_array1_allocate_device_buffer_c_long,&
        gpufort_array1_allocate_device_buffer_c_float,&
        gpufort_array1_allocate_device_buffer_c_double,&
        gpufort_array1_allocate_device_buffer_c_float_complex,&
        gpufort_array1_allocate_device_buffer_c_double_complex,&
        gpufort_array2_allocate_device_buffer_c_bool,&
        gpufort_array2_allocate_device_buffer_c_short,&
        gpufort_array2_allocate_device_buffer_c_int,&
        gpufort_array2_allocate_device_buffer_c_long,&
        gpufort_array2_allocate_device_buffer_c_float,&
        gpufort_array2_allocate_device_buffer_c_double,&
        gpufort_array2_allocate_device_buffer_c_float_complex,&
        gpufort_array2_allocate_device_buffer_c_double_complex,&
        gpufort_array3_allocate_device_buffer_c_bool,&
        gpufort_array3_allocate_device_buffer_c_short,&
        gpufort_array3_allocate_device_buffer_c_int,&
        gpufort_array3_allocate_device_buffer_c_long,&
        gpufort_array3_allocate_device_buffer_c_float,&
        gpufort_array3_allocate_device_buffer_c_double,&
        gpufort_array3_allocate_device_buffer_c_float_complex,&
        gpufort_array3_allocate_device_buffer_c_double_complex,&
        gpufort_array4_allocate_device_buffer_c_bool,&
        gpufort_array4_allocate_device_buffer_c_short,&
        gpufort_array4_allocate_device_buffer_c_int,&
        gpufort_array4_allocate_device_buffer_c_long,&
        gpufort_array4_allocate_device_buffer_c_float,&
        gpufort_array4_allocate_device_buffer_c_double,&
        gpufort_array4_allocate_device_buffer_c_float_complex,&
        gpufort_array4_allocate_device_buffer_c_double_complex,&
        gpufort_array5_allocate_device_buffer_c_bool,&
        gpufort_array5_allocate_device_buffer_c_short,&
        gpufort_array5_allocate_device_buffer_c_int,&
        gpufort_array5_allocate_device_buffer_c_long,&
        gpufort_array5_allocate_device_buffer_c_float,&
        gpufort_array5_allocate_device_buffer_c_double,&
        gpufort_array5_allocate_device_buffer_c_float_complex,&
        gpufort_array5_allocate_device_buffer_c_double_complex,&
        gpufort_array6_allocate_device_buffer_c_bool,&
        gpufort_array6_allocate_device_buffer_c_short,&
        gpufort_array6_allocate_device_buffer_c_int,&
        gpufort_array6_allocate_device_buffer_c_long,&
        gpufort_array6_allocate_device_buffer_c_float,&
        gpufort_array6_allocate_device_buffer_c_double,&
        gpufort_array6_allocate_device_buffer_c_float_complex,&
        gpufort_array6_allocate_device_buffer_c_double_complex,&
        gpufort_array7_allocate_device_buffer_c_bool,&
        gpufort_array7_allocate_device_buffer_c_short,&
        gpufort_array7_allocate_device_buffer_c_int,&
        gpufort_array7_allocate_device_buffer_c_long,&
        gpufort_array7_allocate_device_buffer_c_float,&
        gpufort_array7_allocate_device_buffer_c_double,&
        gpufort_array7_allocate_device_buffer_c_float_complex,&
        gpufort_array7_allocate_device_buffer_c_double_complex
  end interface
  !> Deallocate a host buffer
  !> created via the allocate_host_buffer routine.
  !> \see num_data_bytes(), allocate_host_buffer
  !> \param[inout] the buffer to deallocate
  !> \param[in] pinned If the memory to deallocate is pinned.
  interface gpufort_array_deallocate_host_buffer
    function gpufort_array1_deallocate_host_buffer(&
        array,buffer,pinned) &
          bind(c,name="gpufort_array1_deallocate_host_buffer") &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array1
      implicit none
      type(gpufort_array1),intent(in) :: array
      type(c_ptr),value,intent(in) :: buffer
      logical(c_bool),value :: pinned
      integer(kind(hipSuccess)) :: ierr
    end function
    function gpufort_array2_deallocate_host_buffer(&
        array,buffer,pinned) &
          bind(c,name="gpufort_array2_deallocate_host_buffer") &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array2
      implicit none
      type(gpufort_array2),intent(in) :: array
      type(c_ptr),value,intent(in) :: buffer
      logical(c_bool),value :: pinned
      integer(kind(hipSuccess)) :: ierr
    end function
    function gpufort_array3_deallocate_host_buffer(&
        array,buffer,pinned) &
          bind(c,name="gpufort_array3_deallocate_host_buffer") &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array3
      implicit none
      type(gpufort_array3),intent(in) :: array
      type(c_ptr),value,intent(in) :: buffer
      logical(c_bool),value :: pinned
      integer(kind(hipSuccess)) :: ierr
    end function
    function gpufort_array4_deallocate_host_buffer(&
        array,buffer,pinned) &
          bind(c,name="gpufort_array4_deallocate_host_buffer") &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array4
      implicit none
      type(gpufort_array4),intent(in) :: array
      type(c_ptr),value,intent(in) :: buffer
      logical(c_bool),value :: pinned
      integer(kind(hipSuccess)) :: ierr
    end function
    function gpufort_array5_deallocate_host_buffer(&
        array,buffer,pinned) &
          bind(c,name="gpufort_array5_deallocate_host_buffer") &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array5
      implicit none
      type(gpufort_array5),intent(in) :: array
      type(c_ptr),value,intent(in) :: buffer
      logical(c_bool),value :: pinned
      integer(kind(hipSuccess)) :: ierr
    end function
    function gpufort_array6_deallocate_host_buffer(&
        array,buffer,pinned) &
          bind(c,name="gpufort_array6_deallocate_host_buffer") &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array6
      implicit none
      type(gpufort_array6),intent(in) :: array
      type(c_ptr),value,intent(in) :: buffer
      logical(c_bool),value :: pinned
      integer(kind(hipSuccess)) :: ierr
    end function
    function gpufort_array7_deallocate_host_buffer(&
        array,buffer,pinned) &
          bind(c,name="gpufort_array7_deallocate_host_buffer") &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array7
      implicit none
      type(gpufort_array7),intent(in) :: array
      type(c_ptr),value,intent(in) :: buffer
      logical(c_bool),value :: pinned
      integer(kind(hipSuccess)) :: ierr
    end function
    module procedure :: &
        gpufort_array1_deallocate_host_buffer_c_bool,&
        gpufort_array1_deallocate_host_buffer_c_short,&
        gpufort_array1_deallocate_host_buffer_c_int,&
        gpufort_array1_deallocate_host_buffer_c_long,&
        gpufort_array1_deallocate_host_buffer_c_float,&
        gpufort_array1_deallocate_host_buffer_c_double,&
        gpufort_array1_deallocate_host_buffer_c_float_complex,&
        gpufort_array1_deallocate_host_buffer_c_double_complex,&
        gpufort_array2_deallocate_host_buffer_c_bool,&
        gpufort_array2_deallocate_host_buffer_c_short,&
        gpufort_array2_deallocate_host_buffer_c_int,&
        gpufort_array2_deallocate_host_buffer_c_long,&
        gpufort_array2_deallocate_host_buffer_c_float,&
        gpufort_array2_deallocate_host_buffer_c_double,&
        gpufort_array2_deallocate_host_buffer_c_float_complex,&
        gpufort_array2_deallocate_host_buffer_c_double_complex,&
        gpufort_array3_deallocate_host_buffer_c_bool,&
        gpufort_array3_deallocate_host_buffer_c_short,&
        gpufort_array3_deallocate_host_buffer_c_int,&
        gpufort_array3_deallocate_host_buffer_c_long,&
        gpufort_array3_deallocate_host_buffer_c_float,&
        gpufort_array3_deallocate_host_buffer_c_double,&
        gpufort_array3_deallocate_host_buffer_c_float_complex,&
        gpufort_array3_deallocate_host_buffer_c_double_complex,&
        gpufort_array4_deallocate_host_buffer_c_bool,&
        gpufort_array4_deallocate_host_buffer_c_short,&
        gpufort_array4_deallocate_host_buffer_c_int,&
        gpufort_array4_deallocate_host_buffer_c_long,&
        gpufort_array4_deallocate_host_buffer_c_float,&
        gpufort_array4_deallocate_host_buffer_c_double,&
        gpufort_array4_deallocate_host_buffer_c_float_complex,&
        gpufort_array4_deallocate_host_buffer_c_double_complex,&
        gpufort_array5_deallocate_host_buffer_c_bool,&
        gpufort_array5_deallocate_host_buffer_c_short,&
        gpufort_array5_deallocate_host_buffer_c_int,&
        gpufort_array5_deallocate_host_buffer_c_long,&
        gpufort_array5_deallocate_host_buffer_c_float,&
        gpufort_array5_deallocate_host_buffer_c_double,&
        gpufort_array5_deallocate_host_buffer_c_float_complex,&
        gpufort_array5_deallocate_host_buffer_c_double_complex,&
        gpufort_array6_deallocate_host_buffer_c_bool,&
        gpufort_array6_deallocate_host_buffer_c_short,&
        gpufort_array6_deallocate_host_buffer_c_int,&
        gpufort_array6_deallocate_host_buffer_c_long,&
        gpufort_array6_deallocate_host_buffer_c_float,&
        gpufort_array6_deallocate_host_buffer_c_double,&
        gpufort_array6_deallocate_host_buffer_c_float_complex,&
        gpufort_array6_deallocate_host_buffer_c_double_complex,&
        gpufort_array7_deallocate_host_buffer_c_bool,&
        gpufort_array7_deallocate_host_buffer_c_short,&
        gpufort_array7_deallocate_host_buffer_c_int,&
        gpufort_array7_deallocate_host_buffer_c_long,&
        gpufort_array7_deallocate_host_buffer_c_float,&
        gpufort_array7_deallocate_host_buffer_c_double,&
        gpufort_array7_deallocate_host_buffer_c_float_complex,&
        gpufort_array7_deallocate_host_buffer_c_double_complex
  end interface
  !> Deallocate a device buffer
  !> created via the allocate_device_buffer routine.
  !> \see num_data_bytes(), allocate_device_buffer
  !> \param[inout] the buffer to deallocate
  interface gpufort_array_deallocate_device_buffer
    function gpufort_array1_deallocate_device_buffer(&
        array,buffer) &
          bind(c,name="gpufort_array1_deallocate_device_buffer") &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array1
      implicit none
      type(gpufort_array1),intent(in) :: array
      type(c_ptr),value,intent(in) :: buffer
      integer(kind(hipSuccess)) :: ierr
    end function
    function gpufort_array2_deallocate_device_buffer(&
        array,buffer) &
          bind(c,name="gpufort_array2_deallocate_device_buffer") &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array2
      implicit none
      type(gpufort_array2),intent(in) :: array
      type(c_ptr),value,intent(in) :: buffer
      integer(kind(hipSuccess)) :: ierr
    end function
    function gpufort_array3_deallocate_device_buffer(&
        array,buffer) &
          bind(c,name="gpufort_array3_deallocate_device_buffer") &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array3
      implicit none
      type(gpufort_array3),intent(in) :: array
      type(c_ptr),value,intent(in) :: buffer
      integer(kind(hipSuccess)) :: ierr
    end function
    function gpufort_array4_deallocate_device_buffer(&
        array,buffer) &
          bind(c,name="gpufort_array4_deallocate_device_buffer") &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array4
      implicit none
      type(gpufort_array4),intent(in) :: array
      type(c_ptr),value,intent(in) :: buffer
      integer(kind(hipSuccess)) :: ierr
    end function
    function gpufort_array5_deallocate_device_buffer(&
        array,buffer) &
          bind(c,name="gpufort_array5_deallocate_device_buffer") &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array5
      implicit none
      type(gpufort_array5),intent(in) :: array
      type(c_ptr),value,intent(in) :: buffer
      integer(kind(hipSuccess)) :: ierr
    end function
    function gpufort_array6_deallocate_device_buffer(&
        array,buffer) &
          bind(c,name="gpufort_array6_deallocate_device_buffer") &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array6
      implicit none
      type(gpufort_array6),intent(in) :: array
      type(c_ptr),value,intent(in) :: buffer
      integer(kind(hipSuccess)) :: ierr
    end function
    function gpufort_array7_deallocate_device_buffer(&
        array,buffer) &
          bind(c,name="gpufort_array7_deallocate_device_buffer") &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array7
      implicit none
      type(gpufort_array7),intent(in) :: array
      type(c_ptr),value,intent(in) :: buffer
      integer(kind(hipSuccess)) :: ierr
    end function
    module procedure :: &
        gpufort_array1_deallocate_device_buffer_c_bool,&
        gpufort_array1_deallocate_device_buffer_c_short,&
        gpufort_array1_deallocate_device_buffer_c_int,&
        gpufort_array1_deallocate_device_buffer_c_long,&
        gpufort_array1_deallocate_device_buffer_c_float,&
        gpufort_array1_deallocate_device_buffer_c_double,&
        gpufort_array1_deallocate_device_buffer_c_float_complex,&
        gpufort_array1_deallocate_device_buffer_c_double_complex,&
        gpufort_array2_deallocate_device_buffer_c_bool,&
        gpufort_array2_deallocate_device_buffer_c_short,&
        gpufort_array2_deallocate_device_buffer_c_int,&
        gpufort_array2_deallocate_device_buffer_c_long,&
        gpufort_array2_deallocate_device_buffer_c_float,&
        gpufort_array2_deallocate_device_buffer_c_double,&
        gpufort_array2_deallocate_device_buffer_c_float_complex,&
        gpufort_array2_deallocate_device_buffer_c_double_complex,&
        gpufort_array3_deallocate_device_buffer_c_bool,&
        gpufort_array3_deallocate_device_buffer_c_short,&
        gpufort_array3_deallocate_device_buffer_c_int,&
        gpufort_array3_deallocate_device_buffer_c_long,&
        gpufort_array3_deallocate_device_buffer_c_float,&
        gpufort_array3_deallocate_device_buffer_c_double,&
        gpufort_array3_deallocate_device_buffer_c_float_complex,&
        gpufort_array3_deallocate_device_buffer_c_double_complex,&
        gpufort_array4_deallocate_device_buffer_c_bool,&
        gpufort_array4_deallocate_device_buffer_c_short,&
        gpufort_array4_deallocate_device_buffer_c_int,&
        gpufort_array4_deallocate_device_buffer_c_long,&
        gpufort_array4_deallocate_device_buffer_c_float,&
        gpufort_array4_deallocate_device_buffer_c_double,&
        gpufort_array4_deallocate_device_buffer_c_float_complex,&
        gpufort_array4_deallocate_device_buffer_c_double_complex,&
        gpufort_array5_deallocate_device_buffer_c_bool,&
        gpufort_array5_deallocate_device_buffer_c_short,&
        gpufort_array5_deallocate_device_buffer_c_int,&
        gpufort_array5_deallocate_device_buffer_c_long,&
        gpufort_array5_deallocate_device_buffer_c_float,&
        gpufort_array5_deallocate_device_buffer_c_double,&
        gpufort_array5_deallocate_device_buffer_c_float_complex,&
        gpufort_array5_deallocate_device_buffer_c_double_complex,&
        gpufort_array6_deallocate_device_buffer_c_bool,&
        gpufort_array6_deallocate_device_buffer_c_short,&
        gpufort_array6_deallocate_device_buffer_c_int,&
        gpufort_array6_deallocate_device_buffer_c_long,&
        gpufort_array6_deallocate_device_buffer_c_float,&
        gpufort_array6_deallocate_device_buffer_c_double,&
        gpufort_array6_deallocate_device_buffer_c_float_complex,&
        gpufort_array6_deallocate_device_buffer_c_double_complex,&
        gpufort_array7_deallocate_device_buffer_c_bool,&
        gpufort_array7_deallocate_device_buffer_c_short,&
        gpufort_array7_deallocate_device_buffer_c_int,&
        gpufort_array7_deallocate_device_buffer_c_long,&
        gpufort_array7_deallocate_device_buffer_c_float,&
        gpufort_array7_deallocate_device_buffer_c_double,&
        gpufort_array7_deallocate_device_buffer_c_float_complex,&
        gpufort_array7_deallocate_device_buffer_c_double_complex
  end interface
  interface gpufort_array_inc_num_refs
    function gpufort_array1_inc_num_refs(array) &
          bind(c,name="gpufort_array1_inc_num_refs") &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array1
      implicit none
      type(gpufort_array1),intent(inout) :: array
      integer(kind(hipSuccess)) :: ierr
    end function
    function gpufort_array2_inc_num_refs(array) &
          bind(c,name="gpufort_array2_inc_num_refs") &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array2
      implicit none
      type(gpufort_array2),intent(inout) :: array
      integer(kind(hipSuccess)) :: ierr
    end function
    function gpufort_array3_inc_num_refs(array) &
          bind(c,name="gpufort_array3_inc_num_refs") &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array3
      implicit none
      type(gpufort_array3),intent(inout) :: array
      integer(kind(hipSuccess)) :: ierr
    end function
    function gpufort_array4_inc_num_refs(array) &
          bind(c,name="gpufort_array4_inc_num_refs") &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array4
      implicit none
      type(gpufort_array4),intent(inout) :: array
      integer(kind(hipSuccess)) :: ierr
    end function
    function gpufort_array5_inc_num_refs(array) &
          bind(c,name="gpufort_array5_inc_num_refs") &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array5
      implicit none
      type(gpufort_array5),intent(inout) :: array
      integer(kind(hipSuccess)) :: ierr
    end function
    function gpufort_array6_inc_num_refs(array) &
          bind(c,name="gpufort_array6_inc_num_refs") &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array6
      implicit none
      type(gpufort_array6),intent(inout) :: array
      integer(kind(hipSuccess)) :: ierr
    end function
    function gpufort_array7_inc_num_refs(array) &
          bind(c,name="gpufort_array7_inc_num_refs") &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array7
      implicit none
      type(gpufort_array7),intent(inout) :: array
      integer(kind(hipSuccess)) :: ierr
    end function
  end interface
  interface gpufort_array_size
    function gpufort_array1_size(array,d) &
          bind(c,name="gpufort_array1_size") &
            result(retval)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array1
      implicit none
      type(gpufort_array1),intent(in) :: array
      integer(c_int),intent(in),value :: d
      !
      integer(c_int) :: retval
    end function
    function gpufort_array2_size(array,d) &
          bind(c,name="gpufort_array2_size") &
            result(retval)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array2
      implicit none
      type(gpufort_array2),intent(in) :: array
      integer(c_int),intent(in),value :: d
      !
      integer(c_int) :: retval
    end function
    function gpufort_array3_size(array,d) &
          bind(c,name="gpufort_array3_size") &
            result(retval)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array3
      implicit none
      type(gpufort_array3),intent(in) :: array
      integer(c_int),intent(in),value :: d
      !
      integer(c_int) :: retval
    end function
    function gpufort_array4_size(array,d) &
          bind(c,name="gpufort_array4_size") &
            result(retval)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array4
      implicit none
      type(gpufort_array4),intent(in) :: array
      integer(c_int),intent(in),value :: d
      !
      integer(c_int) :: retval
    end function
    function gpufort_array5_size(array,d) &
          bind(c,name="gpufort_array5_size") &
            result(retval)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array5
      implicit none
      type(gpufort_array5),intent(in) :: array
      integer(c_int),intent(in),value :: d
      !
      integer(c_int) :: retval
    end function
    function gpufort_array6_size(array,d) &
          bind(c,name="gpufort_array6_size") &
            result(retval)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array6
      implicit none
      type(gpufort_array6),intent(in) :: array
      integer(c_int),intent(in),value :: d
      !
      integer(c_int) :: retval
    end function
    function gpufort_array7_size(array,d) &
          bind(c,name="gpufort_array7_size") &
            result(retval)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array7
      implicit none
      type(gpufort_array7),intent(in) :: array
      integer(c_int),intent(in),value :: d
      !
      integer(c_int) :: retval
    end function
  end interface
  interface gpufort_array_lbound
    function gpufort_array1_lbound(array,d) &
          bind(c,name="gpufort_array1_lbound") &
            result(retval)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array1
      implicit none
      type(gpufort_array1),intent(in) :: array
      integer(c_int),intent(in),value :: d
      !
      integer(c_int) :: retval
    end function
    function gpufort_array2_lbound(array,d) &
          bind(c,name="gpufort_array2_lbound") &
            result(retval)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array2
      implicit none
      type(gpufort_array2),intent(in) :: array
      integer(c_int),intent(in),value :: d
      !
      integer(c_int) :: retval
    end function
    function gpufort_array3_lbound(array,d) &
          bind(c,name="gpufort_array3_lbound") &
            result(retval)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array3
      implicit none
      type(gpufort_array3),intent(in) :: array
      integer(c_int),intent(in),value :: d
      !
      integer(c_int) :: retval
    end function
    function gpufort_array4_lbound(array,d) &
          bind(c,name="gpufort_array4_lbound") &
            result(retval)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array4
      implicit none
      type(gpufort_array4),intent(in) :: array
      integer(c_int),intent(in),value :: d
      !
      integer(c_int) :: retval
    end function
    function gpufort_array5_lbound(array,d) &
          bind(c,name="gpufort_array5_lbound") &
            result(retval)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array5
      implicit none
      type(gpufort_array5),intent(in) :: array
      integer(c_int),intent(in),value :: d
      !
      integer(c_int) :: retval
    end function
    function gpufort_array6_lbound(array,d) &
          bind(c,name="gpufort_array6_lbound") &
            result(retval)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array6
      implicit none
      type(gpufort_array6),intent(in) :: array
      integer(c_int),intent(in),value :: d
      !
      integer(c_int) :: retval
    end function
    function gpufort_array7_lbound(array,d) &
          bind(c,name="gpufort_array7_lbound") &
            result(retval)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array7
      implicit none
      type(gpufort_array7),intent(in) :: array
      integer(c_int),intent(in),value :: d
      !
      integer(c_int) :: retval
    end function
  end interface
  interface gpufort_array_ubound
    function gpufort_array1_ubound(array,d) &
          bind(c,name="gpufort_array1_ubound") &
            result(retval)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array1
      implicit none
      type(gpufort_array1),intent(in) :: array
      integer(c_int),intent(in),value :: d
      !
      integer(c_int) :: retval
    end function
    function gpufort_array2_ubound(array,d) &
          bind(c,name="gpufort_array2_ubound") &
            result(retval)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array2
      implicit none
      type(gpufort_array2),intent(in) :: array
      integer(c_int),intent(in),value :: d
      !
      integer(c_int) :: retval
    end function
    function gpufort_array3_ubound(array,d) &
          bind(c,name="gpufort_array3_ubound") &
            result(retval)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array3
      implicit none
      type(gpufort_array3),intent(in) :: array
      integer(c_int),intent(in),value :: d
      !
      integer(c_int) :: retval
    end function
    function gpufort_array4_ubound(array,d) &
          bind(c,name="gpufort_array4_ubound") &
            result(retval)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array4
      implicit none
      type(gpufort_array4),intent(in) :: array
      integer(c_int),intent(in),value :: d
      !
      integer(c_int) :: retval
    end function
    function gpufort_array5_ubound(array,d) &
          bind(c,name="gpufort_array5_ubound") &
            result(retval)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array5
      implicit none
      type(gpufort_array5),intent(in) :: array
      integer(c_int),intent(in),value :: d
      !
      integer(c_int) :: retval
    end function
    function gpufort_array6_ubound(array,d) &
          bind(c,name="gpufort_array6_ubound") &
            result(retval)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array6
      implicit none
      type(gpufort_array6),intent(in) :: array
      integer(c_int),intent(in),value :: d
      !
      integer(c_int) :: retval
    end function
    function gpufort_array7_ubound(array,d) &
          bind(c,name="gpufort_array7_ubound") &
            result(retval)
      use iso_c_binding
      use hipfort_enums
      import gpufort_array7
      implicit none
      type(gpufort_array7),intent(in) :: array
      integer(c_int),intent(in),value :: d
      !
      integer(c_int) :: retval
    end function
  end interface
  !> 
  !> Collapse the array by fixing indices.
  !> \return A gpufort array of reduced rank.
  !> \param[in] i2,i3,... indices to fix.
  !> 
  interface gpufort_array_collapse
    subroutine gpufort_array2_collapse_1 (collapsed_array,array,&
        i2) &
        bind(c,name="gpufort_array2_collapse_1")
      use iso_c_binding
      use hipfort_enums
      import gpufort_array2
      import gpufort_array1
      implicit none
      type(gpufort_array1),intent(inout) :: collapsed_array
      type(gpufort_array2),intent(in) :: array
      integer(c_int),value,intent(in) :: &
        i2
    end subroutine
    subroutine gpufort_array3_collapse_2 (collapsed_array,array,&
        i3) &
        bind(c,name="gpufort_array3_collapse_2")
      use iso_c_binding
      use hipfort_enums
      import gpufort_array3
      import gpufort_array2
      implicit none
      type(gpufort_array2),intent(inout) :: collapsed_array
      type(gpufort_array3),intent(in) :: array
      integer(c_int),value,intent(in) :: &
        i3
    end subroutine
    subroutine gpufort_array3_collapse_1 (collapsed_array,array,&
        i2,i3) &
        bind(c,name="gpufort_array3_collapse_1")
      use iso_c_binding
      use hipfort_enums
      import gpufort_array3
      import gpufort_array1
      implicit none
      type(gpufort_array1),intent(inout) :: collapsed_array
      type(gpufort_array3),intent(in) :: array
      integer(c_int),value,intent(in) :: &
        i2,i3
    end subroutine
    subroutine gpufort_array4_collapse_3 (collapsed_array,array,&
        i4) &
        bind(c,name="gpufort_array4_collapse_3")
      use iso_c_binding
      use hipfort_enums
      import gpufort_array4
      import gpufort_array3
      implicit none
      type(gpufort_array3),intent(inout) :: collapsed_array
      type(gpufort_array4),intent(in) :: array
      integer(c_int),value,intent(in) :: &
        i4
    end subroutine
    subroutine gpufort_array4_collapse_2 (collapsed_array,array,&
        i3,i4) &
        bind(c,name="gpufort_array4_collapse_2")
      use iso_c_binding
      use hipfort_enums
      import gpufort_array4
      import gpufort_array2
      implicit none
      type(gpufort_array2),intent(inout) :: collapsed_array
      type(gpufort_array4),intent(in) :: array
      integer(c_int),value,intent(in) :: &
        i3,i4
    end subroutine
    subroutine gpufort_array4_collapse_1 (collapsed_array,array,&
        i2,i3,i4) &
        bind(c,name="gpufort_array4_collapse_1")
      use iso_c_binding
      use hipfort_enums
      import gpufort_array4
      import gpufort_array1
      implicit none
      type(gpufort_array1),intent(inout) :: collapsed_array
      type(gpufort_array4),intent(in) :: array
      integer(c_int),value,intent(in) :: &
        i2,i3,i4
    end subroutine
    subroutine gpufort_array5_collapse_4 (collapsed_array,array,&
        i5) &
        bind(c,name="gpufort_array5_collapse_4")
      use iso_c_binding
      use hipfort_enums
      import gpufort_array5
      import gpufort_array4
      implicit none
      type(gpufort_array4),intent(inout) :: collapsed_array
      type(gpufort_array5),intent(in) :: array
      integer(c_int),value,intent(in) :: &
        i5
    end subroutine
    subroutine gpufort_array5_collapse_3 (collapsed_array,array,&
        i4,i5) &
        bind(c,name="gpufort_array5_collapse_3")
      use iso_c_binding
      use hipfort_enums
      import gpufort_array5
      import gpufort_array3
      implicit none
      type(gpufort_array3),intent(inout) :: collapsed_array
      type(gpufort_array5),intent(in) :: array
      integer(c_int),value,intent(in) :: &
        i4,i5
    end subroutine
    subroutine gpufort_array5_collapse_2 (collapsed_array,array,&
        i3,i4,i5) &
        bind(c,name="gpufort_array5_collapse_2")
      use iso_c_binding
      use hipfort_enums
      import gpufort_array5
      import gpufort_array2
      implicit none
      type(gpufort_array2),intent(inout) :: collapsed_array
      type(gpufort_array5),intent(in) :: array
      integer(c_int),value,intent(in) :: &
        i3,i4,i5
    end subroutine
    subroutine gpufort_array5_collapse_1 (collapsed_array,array,&
        i2,i3,i4,i5) &
        bind(c,name="gpufort_array5_collapse_1")
      use iso_c_binding
      use hipfort_enums
      import gpufort_array5
      import gpufort_array1
      implicit none
      type(gpufort_array1),intent(inout) :: collapsed_array
      type(gpufort_array5),intent(in) :: array
      integer(c_int),value,intent(in) :: &
        i2,i3,i4,i5
    end subroutine
    subroutine gpufort_array6_collapse_5 (collapsed_array,array,&
        i6) &
        bind(c,name="gpufort_array6_collapse_5")
      use iso_c_binding
      use hipfort_enums
      import gpufort_array6
      import gpufort_array5
      implicit none
      type(gpufort_array5),intent(inout) :: collapsed_array
      type(gpufort_array6),intent(in) :: array
      integer(c_int),value,intent(in) :: &
        i6
    end subroutine
    subroutine gpufort_array6_collapse_4 (collapsed_array,array,&
        i5,i6) &
        bind(c,name="gpufort_array6_collapse_4")
      use iso_c_binding
      use hipfort_enums
      import gpufort_array6
      import gpufort_array4
      implicit none
      type(gpufort_array4),intent(inout) :: collapsed_array
      type(gpufort_array6),intent(in) :: array
      integer(c_int),value,intent(in) :: &
        i5,i6
    end subroutine
    subroutine gpufort_array6_collapse_3 (collapsed_array,array,&
        i4,i5,i6) &
        bind(c,name="gpufort_array6_collapse_3")
      use iso_c_binding
      use hipfort_enums
      import gpufort_array6
      import gpufort_array3
      implicit none
      type(gpufort_array3),intent(inout) :: collapsed_array
      type(gpufort_array6),intent(in) :: array
      integer(c_int),value,intent(in) :: &
        i4,i5,i6
    end subroutine
    subroutine gpufort_array6_collapse_2 (collapsed_array,array,&
        i3,i4,i5,i6) &
        bind(c,name="gpufort_array6_collapse_2")
      use iso_c_binding
      use hipfort_enums
      import gpufort_array6
      import gpufort_array2
      implicit none
      type(gpufort_array2),intent(inout) :: collapsed_array
      type(gpufort_array6),intent(in) :: array
      integer(c_int),value,intent(in) :: &
        i3,i4,i5,i6
    end subroutine
    subroutine gpufort_array6_collapse_1 (collapsed_array,array,&
        i2,i3,i4,i5,i6) &
        bind(c,name="gpufort_array6_collapse_1")
      use iso_c_binding
      use hipfort_enums
      import gpufort_array6
      import gpufort_array1
      implicit none
      type(gpufort_array1),intent(inout) :: collapsed_array
      type(gpufort_array6),intent(in) :: array
      integer(c_int),value,intent(in) :: &
        i2,i3,i4,i5,i6
    end subroutine
    subroutine gpufort_array7_collapse_6 (collapsed_array,array,&
        i7) &
        bind(c,name="gpufort_array7_collapse_6")
      use iso_c_binding
      use hipfort_enums
      import gpufort_array7
      import gpufort_array6
      implicit none
      type(gpufort_array6),intent(inout) :: collapsed_array
      type(gpufort_array7),intent(in) :: array
      integer(c_int),value,intent(in) :: &
        i7
    end subroutine
    subroutine gpufort_array7_collapse_5 (collapsed_array,array,&
        i6,i7) &
        bind(c,name="gpufort_array7_collapse_5")
      use iso_c_binding
      use hipfort_enums
      import gpufort_array7
      import gpufort_array5
      implicit none
      type(gpufort_array5),intent(inout) :: collapsed_array
      type(gpufort_array7),intent(in) :: array
      integer(c_int),value,intent(in) :: &
        i6,i7
    end subroutine
    subroutine gpufort_array7_collapse_4 (collapsed_array,array,&
        i5,i6,i7) &
        bind(c,name="gpufort_array7_collapse_4")
      use iso_c_binding
      use hipfort_enums
      import gpufort_array7
      import gpufort_array4
      implicit none
      type(gpufort_array4),intent(inout) :: collapsed_array
      type(gpufort_array7),intent(in) :: array
      integer(c_int),value,intent(in) :: &
        i5,i6,i7
    end subroutine
    subroutine gpufort_array7_collapse_3 (collapsed_array,array,&
        i4,i5,i6,i7) &
        bind(c,name="gpufort_array7_collapse_3")
      use iso_c_binding
      use hipfort_enums
      import gpufort_array7
      import gpufort_array3
      implicit none
      type(gpufort_array3),intent(inout) :: collapsed_array
      type(gpufort_array7),intent(in) :: array
      integer(c_int),value,intent(in) :: &
        i4,i5,i6,i7
    end subroutine
    subroutine gpufort_array7_collapse_2 (collapsed_array,array,&
        i3,i4,i5,i6,i7) &
        bind(c,name="gpufort_array7_collapse_2")
      use iso_c_binding
      use hipfort_enums
      import gpufort_array7
      import gpufort_array2
      implicit none
      type(gpufort_array2),intent(inout) :: collapsed_array
      type(gpufort_array7),intent(in) :: array
      integer(c_int),value,intent(in) :: &
        i3,i4,i5,i6,i7
    end subroutine
    subroutine gpufort_array7_collapse_1 (collapsed_array,array,&
        i2,i3,i4,i5,i6,i7) &
        bind(c,name="gpufort_array7_collapse_1")
      use iso_c_binding
      use hipfort_enums
      import gpufort_array7
      import gpufort_array1
      implicit none
      type(gpufort_array1),intent(inout) :: collapsed_array
      type(gpufort_array7),intent(in) :: array
      integer(c_int),value,intent(in) :: &
        i2,i3,i4,i5,i6,i7
    end subroutine
  end interface
  !>
  !> \return the number of array elements.
  !>
  interface gpufort_array_num_elements
    module procedure :: &
      gpufort_array1_num_elements,&
      gpufort_array2_num_elements,&
      gpufort_array3_num_elements,&
      gpufort_array4_num_elements,&
      gpufort_array5_num_elements,&
      gpufort_array6_num_elements,&
      gpufort_array7_num_elements
  end interface
  !>
  !> \return the number of bytes required for storing the array elements.
  !>
  interface gpufort_array_num_data_bytes
    module procedure :: &
      gpufort_array1_num_data_bytes,&
      gpufort_array2_num_data_bytes,&
      gpufort_array3_num_data_bytes,&
      gpufort_array4_num_data_bytes,&
      gpufort_array5_num_data_bytes,&
      gpufort_array6_num_data_bytes,&
      gpufort_array7_num_data_bytes
  end interface

  !>
  !> Writes host address of the array data
  !> and this arrays bounds to \p data_host.
  !>
  interface gpufort_array_hostptr
    module procedure :: &
      gpufort_array1_hostptr_c_bool,&
      gpufort_array1_hostptr_c_short,&
      gpufort_array1_hostptr_c_int,&
      gpufort_array1_hostptr_c_long,&
      gpufort_array1_hostptr_c_float,&
      gpufort_array1_hostptr_c_double,&
      gpufort_array1_hostptr_c_float_complex,&
      gpufort_array1_hostptr_c_double_complex,&
      gpufort_array2_hostptr_c_bool,&
      gpufort_array2_hostptr_c_short,&
      gpufort_array2_hostptr_c_int,&
      gpufort_array2_hostptr_c_long,&
      gpufort_array2_hostptr_c_float,&
      gpufort_array2_hostptr_c_double,&
      gpufort_array2_hostptr_c_float_complex,&
      gpufort_array2_hostptr_c_double_complex,&
      gpufort_array3_hostptr_c_bool,&
      gpufort_array3_hostptr_c_short,&
      gpufort_array3_hostptr_c_int,&
      gpufort_array3_hostptr_c_long,&
      gpufort_array3_hostptr_c_float,&
      gpufort_array3_hostptr_c_double,&
      gpufort_array3_hostptr_c_float_complex,&
      gpufort_array3_hostptr_c_double_complex,&
      gpufort_array4_hostptr_c_bool,&
      gpufort_array4_hostptr_c_short,&
      gpufort_array4_hostptr_c_int,&
      gpufort_array4_hostptr_c_long,&
      gpufort_array4_hostptr_c_float,&
      gpufort_array4_hostptr_c_double,&
      gpufort_array4_hostptr_c_float_complex,&
      gpufort_array4_hostptr_c_double_complex,&
      gpufort_array5_hostptr_c_bool,&
      gpufort_array5_hostptr_c_short,&
      gpufort_array5_hostptr_c_int,&
      gpufort_array5_hostptr_c_long,&
      gpufort_array5_hostptr_c_float,&
      gpufort_array5_hostptr_c_double,&
      gpufort_array5_hostptr_c_float_complex,&
      gpufort_array5_hostptr_c_double_complex,&
      gpufort_array6_hostptr_c_bool,&
      gpufort_array6_hostptr_c_short,&
      gpufort_array6_hostptr_c_int,&
      gpufort_array6_hostptr_c_long,&
      gpufort_array6_hostptr_c_float,&
      gpufort_array6_hostptr_c_double,&
      gpufort_array6_hostptr_c_float_complex,&
      gpufort_array6_hostptr_c_double_complex,&
      gpufort_array7_hostptr_c_bool,&
      gpufort_array7_hostptr_c_short,&
      gpufort_array7_hostptr_c_int,&
      gpufort_array7_hostptr_c_long,&
      gpufort_array7_hostptr_c_float,&
      gpufort_array7_hostptr_c_double,&
      gpufort_array7_hostptr_c_float_complex,&
      gpufort_array7_hostptr_c_double_complex
  end interface
  !>
  !> Writes device address of the array data
  !> and this arrays bounds to \p data_dev.
  !>
  interface gpufort_array_deviceptr
    module procedure :: &
      gpufort_array1_deviceptr_c_bool,&
      gpufort_array1_deviceptr_c_short,&
      gpufort_array1_deviceptr_c_int,&
      gpufort_array1_deviceptr_c_long,&
      gpufort_array1_deviceptr_c_float,&
      gpufort_array1_deviceptr_c_double,&
      gpufort_array1_deviceptr_c_float_complex,&
      gpufort_array1_deviceptr_c_double_complex,&
      gpufort_array2_deviceptr_c_bool,&
      gpufort_array2_deviceptr_c_short,&
      gpufort_array2_deviceptr_c_int,&
      gpufort_array2_deviceptr_c_long,&
      gpufort_array2_deviceptr_c_float,&
      gpufort_array2_deviceptr_c_double,&
      gpufort_array2_deviceptr_c_float_complex,&
      gpufort_array2_deviceptr_c_double_complex,&
      gpufort_array3_deviceptr_c_bool,&
      gpufort_array3_deviceptr_c_short,&
      gpufort_array3_deviceptr_c_int,&
      gpufort_array3_deviceptr_c_long,&
      gpufort_array3_deviceptr_c_float,&
      gpufort_array3_deviceptr_c_double,&
      gpufort_array3_deviceptr_c_float_complex,&
      gpufort_array3_deviceptr_c_double_complex,&
      gpufort_array4_deviceptr_c_bool,&
      gpufort_array4_deviceptr_c_short,&
      gpufort_array4_deviceptr_c_int,&
      gpufort_array4_deviceptr_c_long,&
      gpufort_array4_deviceptr_c_float,&
      gpufort_array4_deviceptr_c_double,&
      gpufort_array4_deviceptr_c_float_complex,&
      gpufort_array4_deviceptr_c_double_complex,&
      gpufort_array5_deviceptr_c_bool,&
      gpufort_array5_deviceptr_c_short,&
      gpufort_array5_deviceptr_c_int,&
      gpufort_array5_deviceptr_c_long,&
      gpufort_array5_deviceptr_c_float,&
      gpufort_array5_deviceptr_c_double,&
      gpufort_array5_deviceptr_c_float_complex,&
      gpufort_array5_deviceptr_c_double_complex,&
      gpufort_array6_deviceptr_c_bool,&
      gpufort_array6_deviceptr_c_short,&
      gpufort_array6_deviceptr_c_int,&
      gpufort_array6_deviceptr_c_long,&
      gpufort_array6_deviceptr_c_float,&
      gpufort_array6_deviceptr_c_double,&
      gpufort_array6_deviceptr_c_float_complex,&
      gpufort_array6_deviceptr_c_double_complex,&
      gpufort_array7_deviceptr_c_bool,&
      gpufort_array7_deviceptr_c_short,&
      gpufort_array7_deviceptr_c_int,&
      gpufort_array7_deviceptr_c_long,&
      gpufort_array7_deviceptr_c_float,&
      gpufort_array7_deviceptr_c_double,&
      gpufort_array7_deviceptr_c_float_complex,&
      gpufort_array7_deviceptr_c_double_complex
  end interface


  ! subroutines
contains
  function gpufort_array1_init_async_host(&
      array,&
      bytes_per_element,&
      sizes,lbounds,&
      stream,alloc_mode,sync_mode) result(ierr)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array1),intent(inout) :: array
    integer(c_int),dimension(1),intent(in) :: sizes
    integer(c_int),dimension(1),intent(in),optional :: lbounds
    type(c_ptr),intent(in) :: stream
    integer(c_int),intent(in) :: bytes_per_element
    integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),optional :: alloc_mode 
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode 
    !
    integer(kind(hipSuccess)) :: ierr
    !
    integer(c_int),dimension(1) :: opt_lbounds
    integer(kind(gpufort_array_wrap_host_wrap_device)) :: opt_alloc_mode 
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    !
    opt_lbounds    = 1
    opt_alloc_mode = gpufort_array_alloc_host_alloc_device ! allocate both by default
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )    opt_lbounds    = lbounds             
    if ( present(alloc_mode) ) opt_alloc_mode = alloc_mode 
    if ( present(sync_mode) )  opt_sync_mode  = sync_mode 
    ierr = gpufort_array1_init_async(&
      array,&
      bytes_per_element,&
      c_null_ptr,c_null_ptr, &
      sizes, opt_lbounds,&
      stream,opt_alloc_mode, opt_sync_mode )
  end function
  function gpufort_array1_init_async_c_bool(&
      array,&
      data_host,lbounds,&
      stream,data_dev,alloc_mode,sync_mode) result(ierr)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array1),intent(inout) :: array
    logical(c_bool),intent(in),target,dimension(:) :: data_host 
    integer(c_int),dimension(1),intent(in),optional :: lbounds
    type(c_ptr),intent(in) :: stream
    type(c_ptr),intent(in),optional :: data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),optional :: alloc_mode 
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode 
    !
    integer(kind(hipSuccess)) :: ierr
    !
    integer(c_int),dimension(1) :: opt_lbounds
    type(c_ptr) :: opt_data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)) :: opt_alloc_mode 
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    !
    opt_lbounds    = 1
    opt_data_dev   = c_null_ptr
    opt_alloc_mode = gpufort_array_wrap_host_alloc_device
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )    opt_lbounds    = lbounds             
    if ( present(data_dev) )   opt_data_dev   = data_dev              
    if ( present(alloc_mode) ) opt_alloc_mode = alloc_mode 
    if ( present(sync_mode) )  opt_sync_mode  = sync_mode 
    ierr = gpufort_array1_init_async(&
      array,&
      int(c_bool, c_int),&
      c_loc(data_host),opt_data_dev,&
      shape(data_host), opt_lbounds,&
      stream,opt_alloc_mode, opt_sync_mode)
  end function
  function gpufort_array1_init_async_c_short(&
      array,&
      data_host,lbounds,&
      stream,data_dev,alloc_mode,sync_mode) result(ierr)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array1),intent(inout) :: array
    integer(c_short),intent(in),target,dimension(:) :: data_host 
    integer(c_int),dimension(1),intent(in),optional :: lbounds
    type(c_ptr),intent(in) :: stream
    type(c_ptr),intent(in),optional :: data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),optional :: alloc_mode 
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode 
    !
    integer(kind(hipSuccess)) :: ierr
    !
    integer(c_int),dimension(1) :: opt_lbounds
    type(c_ptr) :: opt_data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)) :: opt_alloc_mode 
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    !
    opt_lbounds    = 1
    opt_data_dev   = c_null_ptr
    opt_alloc_mode = gpufort_array_wrap_host_alloc_device
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )    opt_lbounds    = lbounds             
    if ( present(data_dev) )   opt_data_dev   = data_dev              
    if ( present(alloc_mode) ) opt_alloc_mode = alloc_mode 
    if ( present(sync_mode) )  opt_sync_mode  = sync_mode 
    ierr = gpufort_array1_init_async(&
      array,&
      int(c_short, c_int),&
      c_loc(data_host),opt_data_dev,&
      shape(data_host), opt_lbounds,&
      stream,opt_alloc_mode, opt_sync_mode)
  end function
  function gpufort_array1_init_async_c_int(&
      array,&
      data_host,lbounds,&
      stream,data_dev,alloc_mode,sync_mode) result(ierr)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array1),intent(inout) :: array
    integer(c_int),intent(in),target,dimension(:) :: data_host 
    integer(c_int),dimension(1),intent(in),optional :: lbounds
    type(c_ptr),intent(in) :: stream
    type(c_ptr),intent(in),optional :: data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),optional :: alloc_mode 
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode 
    !
    integer(kind(hipSuccess)) :: ierr
    !
    integer(c_int),dimension(1) :: opt_lbounds
    type(c_ptr) :: opt_data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)) :: opt_alloc_mode 
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    !
    opt_lbounds    = 1
    opt_data_dev   = c_null_ptr
    opt_alloc_mode = gpufort_array_wrap_host_alloc_device
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )    opt_lbounds    = lbounds             
    if ( present(data_dev) )   opt_data_dev   = data_dev              
    if ( present(alloc_mode) ) opt_alloc_mode = alloc_mode 
    if ( present(sync_mode) )  opt_sync_mode  = sync_mode 
    ierr = gpufort_array1_init_async(&
      array,&
      int(c_int, c_int),&
      c_loc(data_host),opt_data_dev,&
      shape(data_host), opt_lbounds,&
      stream,opt_alloc_mode, opt_sync_mode)
  end function
  function gpufort_array1_init_async_c_long(&
      array,&
      data_host,lbounds,&
      stream,data_dev,alloc_mode,sync_mode) result(ierr)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array1),intent(inout) :: array
    integer(c_long),intent(in),target,dimension(:) :: data_host 
    integer(c_int),dimension(1),intent(in),optional :: lbounds
    type(c_ptr),intent(in) :: stream
    type(c_ptr),intent(in),optional :: data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),optional :: alloc_mode 
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode 
    !
    integer(kind(hipSuccess)) :: ierr
    !
    integer(c_int),dimension(1) :: opt_lbounds
    type(c_ptr) :: opt_data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)) :: opt_alloc_mode 
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    !
    opt_lbounds    = 1
    opt_data_dev   = c_null_ptr
    opt_alloc_mode = gpufort_array_wrap_host_alloc_device
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )    opt_lbounds    = lbounds             
    if ( present(data_dev) )   opt_data_dev   = data_dev              
    if ( present(alloc_mode) ) opt_alloc_mode = alloc_mode 
    if ( present(sync_mode) )  opt_sync_mode  = sync_mode 
    ierr = gpufort_array1_init_async(&
      array,&
      int(c_long, c_int),&
      c_loc(data_host),opt_data_dev,&
      shape(data_host), opt_lbounds,&
      stream,opt_alloc_mode, opt_sync_mode)
  end function
  function gpufort_array1_init_async_c_float(&
      array,&
      data_host,lbounds,&
      stream,data_dev,alloc_mode,sync_mode) result(ierr)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array1),intent(inout) :: array
    real(c_float),intent(in),target,dimension(:) :: data_host 
    integer(c_int),dimension(1),intent(in),optional :: lbounds
    type(c_ptr),intent(in) :: stream
    type(c_ptr),intent(in),optional :: data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),optional :: alloc_mode 
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode 
    !
    integer(kind(hipSuccess)) :: ierr
    !
    integer(c_int),dimension(1) :: opt_lbounds
    type(c_ptr) :: opt_data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)) :: opt_alloc_mode 
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    !
    opt_lbounds    = 1
    opt_data_dev   = c_null_ptr
    opt_alloc_mode = gpufort_array_wrap_host_alloc_device
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )    opt_lbounds    = lbounds             
    if ( present(data_dev) )   opt_data_dev   = data_dev              
    if ( present(alloc_mode) ) opt_alloc_mode = alloc_mode 
    if ( present(sync_mode) )  opt_sync_mode  = sync_mode 
    ierr = gpufort_array1_init_async(&
      array,&
      int(c_float, c_int),&
      c_loc(data_host),opt_data_dev,&
      shape(data_host), opt_lbounds,&
      stream,opt_alloc_mode, opt_sync_mode)
  end function
  function gpufort_array1_init_async_c_double(&
      array,&
      data_host,lbounds,&
      stream,data_dev,alloc_mode,sync_mode) result(ierr)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array1),intent(inout) :: array
    real(c_double),intent(in),target,dimension(:) :: data_host 
    integer(c_int),dimension(1),intent(in),optional :: lbounds
    type(c_ptr),intent(in) :: stream
    type(c_ptr),intent(in),optional :: data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),optional :: alloc_mode 
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode 
    !
    integer(kind(hipSuccess)) :: ierr
    !
    integer(c_int),dimension(1) :: opt_lbounds
    type(c_ptr) :: opt_data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)) :: opt_alloc_mode 
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    !
    opt_lbounds    = 1
    opt_data_dev   = c_null_ptr
    opt_alloc_mode = gpufort_array_wrap_host_alloc_device
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )    opt_lbounds    = lbounds             
    if ( present(data_dev) )   opt_data_dev   = data_dev              
    if ( present(alloc_mode) ) opt_alloc_mode = alloc_mode 
    if ( present(sync_mode) )  opt_sync_mode  = sync_mode 
    ierr = gpufort_array1_init_async(&
      array,&
      int(c_double, c_int),&
      c_loc(data_host),opt_data_dev,&
      shape(data_host), opt_lbounds,&
      stream,opt_alloc_mode, opt_sync_mode)
  end function
  function gpufort_array1_init_async_c_float_complex(&
      array,&
      data_host,lbounds,&
      stream,data_dev,alloc_mode,sync_mode) result(ierr)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array1),intent(inout) :: array
    complex(c_float_complex),intent(in),target,dimension(:) :: data_host 
    integer(c_int),dimension(1),intent(in),optional :: lbounds
    type(c_ptr),intent(in) :: stream
    type(c_ptr),intent(in),optional :: data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),optional :: alloc_mode 
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode 
    !
    integer(kind(hipSuccess)) :: ierr
    !
    integer(c_int),dimension(1) :: opt_lbounds
    type(c_ptr) :: opt_data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)) :: opt_alloc_mode 
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    !
    opt_lbounds    = 1
    opt_data_dev   = c_null_ptr
    opt_alloc_mode = gpufort_array_wrap_host_alloc_device
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )    opt_lbounds    = lbounds             
    if ( present(data_dev) )   opt_data_dev   = data_dev              
    if ( present(alloc_mode) ) opt_alloc_mode = alloc_mode 
    if ( present(sync_mode) )  opt_sync_mode  = sync_mode 
    ierr = gpufort_array1_init_async(&
      array,&
      int(2*c_float_complex, c_int),&
      c_loc(data_host),opt_data_dev,&
      shape(data_host), opt_lbounds,&
      stream,opt_alloc_mode, opt_sync_mode)
  end function
  function gpufort_array1_init_async_c_double_complex(&
      array,&
      data_host,lbounds,&
      stream,data_dev,alloc_mode,sync_mode) result(ierr)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array1),intent(inout) :: array
    complex(c_double_complex),intent(in),target,dimension(:) :: data_host 
    integer(c_int),dimension(1),intent(in),optional :: lbounds
    type(c_ptr),intent(in) :: stream
    type(c_ptr),intent(in),optional :: data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),optional :: alloc_mode 
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode 
    !
    integer(kind(hipSuccess)) :: ierr
    !
    integer(c_int),dimension(1) :: opt_lbounds
    type(c_ptr) :: opt_data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)) :: opt_alloc_mode 
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    !
    opt_lbounds    = 1
    opt_data_dev   = c_null_ptr
    opt_alloc_mode = gpufort_array_wrap_host_alloc_device
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )    opt_lbounds    = lbounds             
    if ( present(data_dev) )   opt_data_dev   = data_dev              
    if ( present(alloc_mode) ) opt_alloc_mode = alloc_mode 
    if ( present(sync_mode) )  opt_sync_mode  = sync_mode 
    ierr = gpufort_array1_init_async(&
      array,&
      int(2*c_double_complex, c_int),&
      c_loc(data_host),opt_data_dev,&
      shape(data_host), opt_lbounds,&
      stream,opt_alloc_mode, opt_sync_mode)
  end function
  function gpufort_array1_init_host(&
      array,&
      bytes_per_element,&
      sizes,lbounds,&
      alloc_mode,sync_mode) result(ierr)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array1),intent(inout) :: array
    integer(c_int),dimension(1),intent(in) :: sizes
    integer(c_int),dimension(1),intent(in),optional :: lbounds
    integer(c_int),intent(in) :: bytes_per_element
    integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),optional :: alloc_mode 
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode 
    !
    integer(kind(hipSuccess)) :: ierr
    !
    integer(c_int),dimension(1) :: opt_lbounds
    integer(kind(gpufort_array_wrap_host_wrap_device)) :: opt_alloc_mode 
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    !
    opt_lbounds    = 1
    opt_alloc_mode = gpufort_array_alloc_host_alloc_device ! allocate both by default
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )    opt_lbounds    = lbounds             
    if ( present(alloc_mode) ) opt_alloc_mode = alloc_mode 
    if ( present(sync_mode) )  opt_sync_mode  = sync_mode 
    ierr = gpufort_array1_init(&
      array,&
      bytes_per_element,&
      c_null_ptr,c_null_ptr, &
      sizes, opt_lbounds,&
      opt_alloc_mode, opt_sync_mode )
  end function
  function gpufort_array1_init_c_bool(&
      array,&
      data_host,lbounds,&
      data_dev,alloc_mode,sync_mode) result(ierr)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array1),intent(inout) :: array
    logical(c_bool),intent(in),target,dimension(:) :: data_host 
    integer(c_int),dimension(1),intent(in),optional :: lbounds
    type(c_ptr),intent(in),optional :: data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),optional :: alloc_mode 
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode 
    !
    integer(kind(hipSuccess)) :: ierr
    !
    integer(c_int),dimension(1) :: opt_lbounds
    type(c_ptr) :: opt_data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)) :: opt_alloc_mode 
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    !
    opt_lbounds    = 1
    opt_data_dev   = c_null_ptr
    opt_alloc_mode = gpufort_array_wrap_host_alloc_device
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )    opt_lbounds    = lbounds             
    if ( present(data_dev) )   opt_data_dev   = data_dev              
    if ( present(alloc_mode) ) opt_alloc_mode = alloc_mode 
    if ( present(sync_mode) )  opt_sync_mode  = sync_mode 
    ierr = gpufort_array1_init(&
      array,&
      int(c_bool, c_int),&
      c_loc(data_host),opt_data_dev,&
      shape(data_host), opt_lbounds,&
      opt_alloc_mode, opt_sync_mode)
  end function
  function gpufort_array1_init_c_short(&
      array,&
      data_host,lbounds,&
      data_dev,alloc_mode,sync_mode) result(ierr)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array1),intent(inout) :: array
    integer(c_short),intent(in),target,dimension(:) :: data_host 
    integer(c_int),dimension(1),intent(in),optional :: lbounds
    type(c_ptr),intent(in),optional :: data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),optional :: alloc_mode 
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode 
    !
    integer(kind(hipSuccess)) :: ierr
    !
    integer(c_int),dimension(1) :: opt_lbounds
    type(c_ptr) :: opt_data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)) :: opt_alloc_mode 
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    !
    opt_lbounds    = 1
    opt_data_dev   = c_null_ptr
    opt_alloc_mode = gpufort_array_wrap_host_alloc_device
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )    opt_lbounds    = lbounds             
    if ( present(data_dev) )   opt_data_dev   = data_dev              
    if ( present(alloc_mode) ) opt_alloc_mode = alloc_mode 
    if ( present(sync_mode) )  opt_sync_mode  = sync_mode 
    ierr = gpufort_array1_init(&
      array,&
      int(c_short, c_int),&
      c_loc(data_host),opt_data_dev,&
      shape(data_host), opt_lbounds,&
      opt_alloc_mode, opt_sync_mode)
  end function
  function gpufort_array1_init_c_int(&
      array,&
      data_host,lbounds,&
      data_dev,alloc_mode,sync_mode) result(ierr)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array1),intent(inout) :: array
    integer(c_int),intent(in),target,dimension(:) :: data_host 
    integer(c_int),dimension(1),intent(in),optional :: lbounds
    type(c_ptr),intent(in),optional :: data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),optional :: alloc_mode 
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode 
    !
    integer(kind(hipSuccess)) :: ierr
    !
    integer(c_int),dimension(1) :: opt_lbounds
    type(c_ptr) :: opt_data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)) :: opt_alloc_mode 
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    !
    opt_lbounds    = 1
    opt_data_dev   = c_null_ptr
    opt_alloc_mode = gpufort_array_wrap_host_alloc_device
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )    opt_lbounds    = lbounds             
    if ( present(data_dev) )   opt_data_dev   = data_dev              
    if ( present(alloc_mode) ) opt_alloc_mode = alloc_mode 
    if ( present(sync_mode) )  opt_sync_mode  = sync_mode 
    ierr = gpufort_array1_init(&
      array,&
      int(c_int, c_int),&
      c_loc(data_host),opt_data_dev,&
      shape(data_host), opt_lbounds,&
      opt_alloc_mode, opt_sync_mode)
  end function
  function gpufort_array1_init_c_long(&
      array,&
      data_host,lbounds,&
      data_dev,alloc_mode,sync_mode) result(ierr)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array1),intent(inout) :: array
    integer(c_long),intent(in),target,dimension(:) :: data_host 
    integer(c_int),dimension(1),intent(in),optional :: lbounds
    type(c_ptr),intent(in),optional :: data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),optional :: alloc_mode 
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode 
    !
    integer(kind(hipSuccess)) :: ierr
    !
    integer(c_int),dimension(1) :: opt_lbounds
    type(c_ptr) :: opt_data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)) :: opt_alloc_mode 
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    !
    opt_lbounds    = 1
    opt_data_dev   = c_null_ptr
    opt_alloc_mode = gpufort_array_wrap_host_alloc_device
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )    opt_lbounds    = lbounds             
    if ( present(data_dev) )   opt_data_dev   = data_dev              
    if ( present(alloc_mode) ) opt_alloc_mode = alloc_mode 
    if ( present(sync_mode) )  opt_sync_mode  = sync_mode 
    ierr = gpufort_array1_init(&
      array,&
      int(c_long, c_int),&
      c_loc(data_host),opt_data_dev,&
      shape(data_host), opt_lbounds,&
      opt_alloc_mode, opt_sync_mode)
  end function
  function gpufort_array1_init_c_float(&
      array,&
      data_host,lbounds,&
      data_dev,alloc_mode,sync_mode) result(ierr)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array1),intent(inout) :: array
    real(c_float),intent(in),target,dimension(:) :: data_host 
    integer(c_int),dimension(1),intent(in),optional :: lbounds
    type(c_ptr),intent(in),optional :: data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),optional :: alloc_mode 
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode 
    !
    integer(kind(hipSuccess)) :: ierr
    !
    integer(c_int),dimension(1) :: opt_lbounds
    type(c_ptr) :: opt_data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)) :: opt_alloc_mode 
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    !
    opt_lbounds    = 1
    opt_data_dev   = c_null_ptr
    opt_alloc_mode = gpufort_array_wrap_host_alloc_device
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )    opt_lbounds    = lbounds             
    if ( present(data_dev) )   opt_data_dev   = data_dev              
    if ( present(alloc_mode) ) opt_alloc_mode = alloc_mode 
    if ( present(sync_mode) )  opt_sync_mode  = sync_mode 
    ierr = gpufort_array1_init(&
      array,&
      int(c_float, c_int),&
      c_loc(data_host),opt_data_dev,&
      shape(data_host), opt_lbounds,&
      opt_alloc_mode, opt_sync_mode)
  end function
  function gpufort_array1_init_c_double(&
      array,&
      data_host,lbounds,&
      data_dev,alloc_mode,sync_mode) result(ierr)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array1),intent(inout) :: array
    real(c_double),intent(in),target,dimension(:) :: data_host 
    integer(c_int),dimension(1),intent(in),optional :: lbounds
    type(c_ptr),intent(in),optional :: data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),optional :: alloc_mode 
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode 
    !
    integer(kind(hipSuccess)) :: ierr
    !
    integer(c_int),dimension(1) :: opt_lbounds
    type(c_ptr) :: opt_data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)) :: opt_alloc_mode 
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    !
    opt_lbounds    = 1
    opt_data_dev   = c_null_ptr
    opt_alloc_mode = gpufort_array_wrap_host_alloc_device
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )    opt_lbounds    = lbounds             
    if ( present(data_dev) )   opt_data_dev   = data_dev              
    if ( present(alloc_mode) ) opt_alloc_mode = alloc_mode 
    if ( present(sync_mode) )  opt_sync_mode  = sync_mode 
    ierr = gpufort_array1_init(&
      array,&
      int(c_double, c_int),&
      c_loc(data_host),opt_data_dev,&
      shape(data_host), opt_lbounds,&
      opt_alloc_mode, opt_sync_mode)
  end function
  function gpufort_array1_init_c_float_complex(&
      array,&
      data_host,lbounds,&
      data_dev,alloc_mode,sync_mode) result(ierr)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array1),intent(inout) :: array
    complex(c_float_complex),intent(in),target,dimension(:) :: data_host 
    integer(c_int),dimension(1),intent(in),optional :: lbounds
    type(c_ptr),intent(in),optional :: data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),optional :: alloc_mode 
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode 
    !
    integer(kind(hipSuccess)) :: ierr
    !
    integer(c_int),dimension(1) :: opt_lbounds
    type(c_ptr) :: opt_data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)) :: opt_alloc_mode 
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    !
    opt_lbounds    = 1
    opt_data_dev   = c_null_ptr
    opt_alloc_mode = gpufort_array_wrap_host_alloc_device
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )    opt_lbounds    = lbounds             
    if ( present(data_dev) )   opt_data_dev   = data_dev              
    if ( present(alloc_mode) ) opt_alloc_mode = alloc_mode 
    if ( present(sync_mode) )  opt_sync_mode  = sync_mode 
    ierr = gpufort_array1_init(&
      array,&
      int(2*c_float_complex, c_int),&
      c_loc(data_host),opt_data_dev,&
      shape(data_host), opt_lbounds,&
      opt_alloc_mode, opt_sync_mode)
  end function
  function gpufort_array1_init_c_double_complex(&
      array,&
      data_host,lbounds,&
      data_dev,alloc_mode,sync_mode) result(ierr)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array1),intent(inout) :: array
    complex(c_double_complex),intent(in),target,dimension(:) :: data_host 
    integer(c_int),dimension(1),intent(in),optional :: lbounds
    type(c_ptr),intent(in),optional :: data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),optional :: alloc_mode 
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode 
    !
    integer(kind(hipSuccess)) :: ierr
    !
    integer(c_int),dimension(1) :: opt_lbounds
    type(c_ptr) :: opt_data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)) :: opt_alloc_mode 
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    !
    opt_lbounds    = 1
    opt_data_dev   = c_null_ptr
    opt_alloc_mode = gpufort_array_wrap_host_alloc_device
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )    opt_lbounds    = lbounds             
    if ( present(data_dev) )   opt_data_dev   = data_dev              
    if ( present(alloc_mode) ) opt_alloc_mode = alloc_mode 
    if ( present(sync_mode) )  opt_sync_mode  = sync_mode 
    ierr = gpufort_array1_init(&
      array,&
      int(2*c_double_complex, c_int),&
      c_loc(data_host),opt_data_dev,&
      shape(data_host), opt_lbounds,&
      opt_alloc_mode, opt_sync_mode)
  end function
  function gpufort_array2_init_async_host(&
      array,&
      bytes_per_element,&
      sizes,lbounds,&
      stream,alloc_mode,sync_mode) result(ierr)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array2),intent(inout) :: array
    integer(c_int),dimension(2),intent(in) :: sizes
    integer(c_int),dimension(2),intent(in),optional :: lbounds
    type(c_ptr),intent(in) :: stream
    integer(c_int),intent(in) :: bytes_per_element
    integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),optional :: alloc_mode 
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode 
    !
    integer(kind(hipSuccess)) :: ierr
    !
    integer(c_int),dimension(2) :: opt_lbounds
    integer(kind(gpufort_array_wrap_host_wrap_device)) :: opt_alloc_mode 
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    !
    opt_lbounds    = 1
    opt_alloc_mode = gpufort_array_alloc_host_alloc_device ! allocate both by default
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )    opt_lbounds    = lbounds             
    if ( present(alloc_mode) ) opt_alloc_mode = alloc_mode 
    if ( present(sync_mode) )  opt_sync_mode  = sync_mode 
    ierr = gpufort_array2_init_async(&
      array,&
      bytes_per_element,&
      c_null_ptr,c_null_ptr, &
      sizes, opt_lbounds,&
      stream,opt_alloc_mode, opt_sync_mode )
  end function
  function gpufort_array2_init_async_c_bool(&
      array,&
      data_host,lbounds,&
      stream,data_dev,alloc_mode,sync_mode) result(ierr)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array2),intent(inout) :: array
    logical(c_bool),intent(in),target,dimension(:,:) :: data_host 
    integer(c_int),dimension(2),intent(in),optional :: lbounds
    type(c_ptr),intent(in) :: stream
    type(c_ptr),intent(in),optional :: data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),optional :: alloc_mode 
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode 
    !
    integer(kind(hipSuccess)) :: ierr
    !
    integer(c_int),dimension(2) :: opt_lbounds
    type(c_ptr) :: opt_data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)) :: opt_alloc_mode 
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    !
    opt_lbounds    = 1
    opt_data_dev   = c_null_ptr
    opt_alloc_mode = gpufort_array_wrap_host_alloc_device
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )    opt_lbounds    = lbounds             
    if ( present(data_dev) )   opt_data_dev   = data_dev              
    if ( present(alloc_mode) ) opt_alloc_mode = alloc_mode 
    if ( present(sync_mode) )  opt_sync_mode  = sync_mode 
    ierr = gpufort_array2_init_async(&
      array,&
      int(c_bool, c_int),&
      c_loc(data_host),opt_data_dev,&
      shape(data_host), opt_lbounds,&
      stream,opt_alloc_mode, opt_sync_mode)
  end function
  function gpufort_array2_init_async_c_short(&
      array,&
      data_host,lbounds,&
      stream,data_dev,alloc_mode,sync_mode) result(ierr)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array2),intent(inout) :: array
    integer(c_short),intent(in),target,dimension(:,:) :: data_host 
    integer(c_int),dimension(2),intent(in),optional :: lbounds
    type(c_ptr),intent(in) :: stream
    type(c_ptr),intent(in),optional :: data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),optional :: alloc_mode 
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode 
    !
    integer(kind(hipSuccess)) :: ierr
    !
    integer(c_int),dimension(2) :: opt_lbounds
    type(c_ptr) :: opt_data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)) :: opt_alloc_mode 
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    !
    opt_lbounds    = 1
    opt_data_dev   = c_null_ptr
    opt_alloc_mode = gpufort_array_wrap_host_alloc_device
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )    opt_lbounds    = lbounds             
    if ( present(data_dev) )   opt_data_dev   = data_dev              
    if ( present(alloc_mode) ) opt_alloc_mode = alloc_mode 
    if ( present(sync_mode) )  opt_sync_mode  = sync_mode 
    ierr = gpufort_array2_init_async(&
      array,&
      int(c_short, c_int),&
      c_loc(data_host),opt_data_dev,&
      shape(data_host), opt_lbounds,&
      stream,opt_alloc_mode, opt_sync_mode)
  end function
  function gpufort_array2_init_async_c_int(&
      array,&
      data_host,lbounds,&
      stream,data_dev,alloc_mode,sync_mode) result(ierr)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array2),intent(inout) :: array
    integer(c_int),intent(in),target,dimension(:,:) :: data_host 
    integer(c_int),dimension(2),intent(in),optional :: lbounds
    type(c_ptr),intent(in) :: stream
    type(c_ptr),intent(in),optional :: data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),optional :: alloc_mode 
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode 
    !
    integer(kind(hipSuccess)) :: ierr
    !
    integer(c_int),dimension(2) :: opt_lbounds
    type(c_ptr) :: opt_data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)) :: opt_alloc_mode 
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    !
    opt_lbounds    = 1
    opt_data_dev   = c_null_ptr
    opt_alloc_mode = gpufort_array_wrap_host_alloc_device
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )    opt_lbounds    = lbounds             
    if ( present(data_dev) )   opt_data_dev   = data_dev              
    if ( present(alloc_mode) ) opt_alloc_mode = alloc_mode 
    if ( present(sync_mode) )  opt_sync_mode  = sync_mode 
    ierr = gpufort_array2_init_async(&
      array,&
      int(c_int, c_int),&
      c_loc(data_host),opt_data_dev,&
      shape(data_host), opt_lbounds,&
      stream,opt_alloc_mode, opt_sync_mode)
  end function
  function gpufort_array2_init_async_c_long(&
      array,&
      data_host,lbounds,&
      stream,data_dev,alloc_mode,sync_mode) result(ierr)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array2),intent(inout) :: array
    integer(c_long),intent(in),target,dimension(:,:) :: data_host 
    integer(c_int),dimension(2),intent(in),optional :: lbounds
    type(c_ptr),intent(in) :: stream
    type(c_ptr),intent(in),optional :: data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),optional :: alloc_mode 
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode 
    !
    integer(kind(hipSuccess)) :: ierr
    !
    integer(c_int),dimension(2) :: opt_lbounds
    type(c_ptr) :: opt_data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)) :: opt_alloc_mode 
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    !
    opt_lbounds    = 1
    opt_data_dev   = c_null_ptr
    opt_alloc_mode = gpufort_array_wrap_host_alloc_device
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )    opt_lbounds    = lbounds             
    if ( present(data_dev) )   opt_data_dev   = data_dev              
    if ( present(alloc_mode) ) opt_alloc_mode = alloc_mode 
    if ( present(sync_mode) )  opt_sync_mode  = sync_mode 
    ierr = gpufort_array2_init_async(&
      array,&
      int(c_long, c_int),&
      c_loc(data_host),opt_data_dev,&
      shape(data_host), opt_lbounds,&
      stream,opt_alloc_mode, opt_sync_mode)
  end function
  function gpufort_array2_init_async_c_float(&
      array,&
      data_host,lbounds,&
      stream,data_dev,alloc_mode,sync_mode) result(ierr)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array2),intent(inout) :: array
    real(c_float),intent(in),target,dimension(:,:) :: data_host 
    integer(c_int),dimension(2),intent(in),optional :: lbounds
    type(c_ptr),intent(in) :: stream
    type(c_ptr),intent(in),optional :: data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),optional :: alloc_mode 
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode 
    !
    integer(kind(hipSuccess)) :: ierr
    !
    integer(c_int),dimension(2) :: opt_lbounds
    type(c_ptr) :: opt_data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)) :: opt_alloc_mode 
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    !
    opt_lbounds    = 1
    opt_data_dev   = c_null_ptr
    opt_alloc_mode = gpufort_array_wrap_host_alloc_device
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )    opt_lbounds    = lbounds             
    if ( present(data_dev) )   opt_data_dev   = data_dev              
    if ( present(alloc_mode) ) opt_alloc_mode = alloc_mode 
    if ( present(sync_mode) )  opt_sync_mode  = sync_mode 
    ierr = gpufort_array2_init_async(&
      array,&
      int(c_float, c_int),&
      c_loc(data_host),opt_data_dev,&
      shape(data_host), opt_lbounds,&
      stream,opt_alloc_mode, opt_sync_mode)
  end function
  function gpufort_array2_init_async_c_double(&
      array,&
      data_host,lbounds,&
      stream,data_dev,alloc_mode,sync_mode) result(ierr)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array2),intent(inout) :: array
    real(c_double),intent(in),target,dimension(:,:) :: data_host 
    integer(c_int),dimension(2),intent(in),optional :: lbounds
    type(c_ptr),intent(in) :: stream
    type(c_ptr),intent(in),optional :: data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),optional :: alloc_mode 
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode 
    !
    integer(kind(hipSuccess)) :: ierr
    !
    integer(c_int),dimension(2) :: opt_lbounds
    type(c_ptr) :: opt_data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)) :: opt_alloc_mode 
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    !
    opt_lbounds    = 1
    opt_data_dev   = c_null_ptr
    opt_alloc_mode = gpufort_array_wrap_host_alloc_device
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )    opt_lbounds    = lbounds             
    if ( present(data_dev) )   opt_data_dev   = data_dev              
    if ( present(alloc_mode) ) opt_alloc_mode = alloc_mode 
    if ( present(sync_mode) )  opt_sync_mode  = sync_mode 
    ierr = gpufort_array2_init_async(&
      array,&
      int(c_double, c_int),&
      c_loc(data_host),opt_data_dev,&
      shape(data_host), opt_lbounds,&
      stream,opt_alloc_mode, opt_sync_mode)
  end function
  function gpufort_array2_init_async_c_float_complex(&
      array,&
      data_host,lbounds,&
      stream,data_dev,alloc_mode,sync_mode) result(ierr)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array2),intent(inout) :: array
    complex(c_float_complex),intent(in),target,dimension(:,:) :: data_host 
    integer(c_int),dimension(2),intent(in),optional :: lbounds
    type(c_ptr),intent(in) :: stream
    type(c_ptr),intent(in),optional :: data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),optional :: alloc_mode 
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode 
    !
    integer(kind(hipSuccess)) :: ierr
    !
    integer(c_int),dimension(2) :: opt_lbounds
    type(c_ptr) :: opt_data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)) :: opt_alloc_mode 
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    !
    opt_lbounds    = 1
    opt_data_dev   = c_null_ptr
    opt_alloc_mode = gpufort_array_wrap_host_alloc_device
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )    opt_lbounds    = lbounds             
    if ( present(data_dev) )   opt_data_dev   = data_dev              
    if ( present(alloc_mode) ) opt_alloc_mode = alloc_mode 
    if ( present(sync_mode) )  opt_sync_mode  = sync_mode 
    ierr = gpufort_array2_init_async(&
      array,&
      int(2*c_float_complex, c_int),&
      c_loc(data_host),opt_data_dev,&
      shape(data_host), opt_lbounds,&
      stream,opt_alloc_mode, opt_sync_mode)
  end function
  function gpufort_array2_init_async_c_double_complex(&
      array,&
      data_host,lbounds,&
      stream,data_dev,alloc_mode,sync_mode) result(ierr)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array2),intent(inout) :: array
    complex(c_double_complex),intent(in),target,dimension(:,:) :: data_host 
    integer(c_int),dimension(2),intent(in),optional :: lbounds
    type(c_ptr),intent(in) :: stream
    type(c_ptr),intent(in),optional :: data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),optional :: alloc_mode 
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode 
    !
    integer(kind(hipSuccess)) :: ierr
    !
    integer(c_int),dimension(2) :: opt_lbounds
    type(c_ptr) :: opt_data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)) :: opt_alloc_mode 
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    !
    opt_lbounds    = 1
    opt_data_dev   = c_null_ptr
    opt_alloc_mode = gpufort_array_wrap_host_alloc_device
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )    opt_lbounds    = lbounds             
    if ( present(data_dev) )   opt_data_dev   = data_dev              
    if ( present(alloc_mode) ) opt_alloc_mode = alloc_mode 
    if ( present(sync_mode) )  opt_sync_mode  = sync_mode 
    ierr = gpufort_array2_init_async(&
      array,&
      int(2*c_double_complex, c_int),&
      c_loc(data_host),opt_data_dev,&
      shape(data_host), opt_lbounds,&
      stream,opt_alloc_mode, opt_sync_mode)
  end function
  function gpufort_array2_init_host(&
      array,&
      bytes_per_element,&
      sizes,lbounds,&
      alloc_mode,sync_mode) result(ierr)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array2),intent(inout) :: array
    integer(c_int),dimension(2),intent(in) :: sizes
    integer(c_int),dimension(2),intent(in),optional :: lbounds
    integer(c_int),intent(in) :: bytes_per_element
    integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),optional :: alloc_mode 
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode 
    !
    integer(kind(hipSuccess)) :: ierr
    !
    integer(c_int),dimension(2) :: opt_lbounds
    integer(kind(gpufort_array_wrap_host_wrap_device)) :: opt_alloc_mode 
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    !
    opt_lbounds    = 1
    opt_alloc_mode = gpufort_array_alloc_host_alloc_device ! allocate both by default
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )    opt_lbounds    = lbounds             
    if ( present(alloc_mode) ) opt_alloc_mode = alloc_mode 
    if ( present(sync_mode) )  opt_sync_mode  = sync_mode 
    ierr = gpufort_array2_init(&
      array,&
      bytes_per_element,&
      c_null_ptr,c_null_ptr, &
      sizes, opt_lbounds,&
      opt_alloc_mode, opt_sync_mode )
  end function
  function gpufort_array2_init_c_bool(&
      array,&
      data_host,lbounds,&
      data_dev,alloc_mode,sync_mode) result(ierr)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array2),intent(inout) :: array
    logical(c_bool),intent(in),target,dimension(:,:) :: data_host 
    integer(c_int),dimension(2),intent(in),optional :: lbounds
    type(c_ptr),intent(in),optional :: data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),optional :: alloc_mode 
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode 
    !
    integer(kind(hipSuccess)) :: ierr
    !
    integer(c_int),dimension(2) :: opt_lbounds
    type(c_ptr) :: opt_data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)) :: opt_alloc_mode 
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    !
    opt_lbounds    = 1
    opt_data_dev   = c_null_ptr
    opt_alloc_mode = gpufort_array_wrap_host_alloc_device
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )    opt_lbounds    = lbounds             
    if ( present(data_dev) )   opt_data_dev   = data_dev              
    if ( present(alloc_mode) ) opt_alloc_mode = alloc_mode 
    if ( present(sync_mode) )  opt_sync_mode  = sync_mode 
    ierr = gpufort_array2_init(&
      array,&
      int(c_bool, c_int),&
      c_loc(data_host),opt_data_dev,&
      shape(data_host), opt_lbounds,&
      opt_alloc_mode, opt_sync_mode)
  end function
  function gpufort_array2_init_c_short(&
      array,&
      data_host,lbounds,&
      data_dev,alloc_mode,sync_mode) result(ierr)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array2),intent(inout) :: array
    integer(c_short),intent(in),target,dimension(:,:) :: data_host 
    integer(c_int),dimension(2),intent(in),optional :: lbounds
    type(c_ptr),intent(in),optional :: data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),optional :: alloc_mode 
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode 
    !
    integer(kind(hipSuccess)) :: ierr
    !
    integer(c_int),dimension(2) :: opt_lbounds
    type(c_ptr) :: opt_data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)) :: opt_alloc_mode 
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    !
    opt_lbounds    = 1
    opt_data_dev   = c_null_ptr
    opt_alloc_mode = gpufort_array_wrap_host_alloc_device
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )    opt_lbounds    = lbounds             
    if ( present(data_dev) )   opt_data_dev   = data_dev              
    if ( present(alloc_mode) ) opt_alloc_mode = alloc_mode 
    if ( present(sync_mode) )  opt_sync_mode  = sync_mode 
    ierr = gpufort_array2_init(&
      array,&
      int(c_short, c_int),&
      c_loc(data_host),opt_data_dev,&
      shape(data_host), opt_lbounds,&
      opt_alloc_mode, opt_sync_mode)
  end function
  function gpufort_array2_init_c_int(&
      array,&
      data_host,lbounds,&
      data_dev,alloc_mode,sync_mode) result(ierr)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array2),intent(inout) :: array
    integer(c_int),intent(in),target,dimension(:,:) :: data_host 
    integer(c_int),dimension(2),intent(in),optional :: lbounds
    type(c_ptr),intent(in),optional :: data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),optional :: alloc_mode 
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode 
    !
    integer(kind(hipSuccess)) :: ierr
    !
    integer(c_int),dimension(2) :: opt_lbounds
    type(c_ptr) :: opt_data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)) :: opt_alloc_mode 
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    !
    opt_lbounds    = 1
    opt_data_dev   = c_null_ptr
    opt_alloc_mode = gpufort_array_wrap_host_alloc_device
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )    opt_lbounds    = lbounds             
    if ( present(data_dev) )   opt_data_dev   = data_dev              
    if ( present(alloc_mode) ) opt_alloc_mode = alloc_mode 
    if ( present(sync_mode) )  opt_sync_mode  = sync_mode 
    ierr = gpufort_array2_init(&
      array,&
      int(c_int, c_int),&
      c_loc(data_host),opt_data_dev,&
      shape(data_host), opt_lbounds,&
      opt_alloc_mode, opt_sync_mode)
  end function
  function gpufort_array2_init_c_long(&
      array,&
      data_host,lbounds,&
      data_dev,alloc_mode,sync_mode) result(ierr)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array2),intent(inout) :: array
    integer(c_long),intent(in),target,dimension(:,:) :: data_host 
    integer(c_int),dimension(2),intent(in),optional :: lbounds
    type(c_ptr),intent(in),optional :: data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),optional :: alloc_mode 
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode 
    !
    integer(kind(hipSuccess)) :: ierr
    !
    integer(c_int),dimension(2) :: opt_lbounds
    type(c_ptr) :: opt_data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)) :: opt_alloc_mode 
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    !
    opt_lbounds    = 1
    opt_data_dev   = c_null_ptr
    opt_alloc_mode = gpufort_array_wrap_host_alloc_device
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )    opt_lbounds    = lbounds             
    if ( present(data_dev) )   opt_data_dev   = data_dev              
    if ( present(alloc_mode) ) opt_alloc_mode = alloc_mode 
    if ( present(sync_mode) )  opt_sync_mode  = sync_mode 
    ierr = gpufort_array2_init(&
      array,&
      int(c_long, c_int),&
      c_loc(data_host),opt_data_dev,&
      shape(data_host), opt_lbounds,&
      opt_alloc_mode, opt_sync_mode)
  end function
  function gpufort_array2_init_c_float(&
      array,&
      data_host,lbounds,&
      data_dev,alloc_mode,sync_mode) result(ierr)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array2),intent(inout) :: array
    real(c_float),intent(in),target,dimension(:,:) :: data_host 
    integer(c_int),dimension(2),intent(in),optional :: lbounds
    type(c_ptr),intent(in),optional :: data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),optional :: alloc_mode 
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode 
    !
    integer(kind(hipSuccess)) :: ierr
    !
    integer(c_int),dimension(2) :: opt_lbounds
    type(c_ptr) :: opt_data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)) :: opt_alloc_mode 
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    !
    opt_lbounds    = 1
    opt_data_dev   = c_null_ptr
    opt_alloc_mode = gpufort_array_wrap_host_alloc_device
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )    opt_lbounds    = lbounds             
    if ( present(data_dev) )   opt_data_dev   = data_dev              
    if ( present(alloc_mode) ) opt_alloc_mode = alloc_mode 
    if ( present(sync_mode) )  opt_sync_mode  = sync_mode 
    ierr = gpufort_array2_init(&
      array,&
      int(c_float, c_int),&
      c_loc(data_host),opt_data_dev,&
      shape(data_host), opt_lbounds,&
      opt_alloc_mode, opt_sync_mode)
  end function
  function gpufort_array2_init_c_double(&
      array,&
      data_host,lbounds,&
      data_dev,alloc_mode,sync_mode) result(ierr)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array2),intent(inout) :: array
    real(c_double),intent(in),target,dimension(:,:) :: data_host 
    integer(c_int),dimension(2),intent(in),optional :: lbounds
    type(c_ptr),intent(in),optional :: data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),optional :: alloc_mode 
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode 
    !
    integer(kind(hipSuccess)) :: ierr
    !
    integer(c_int),dimension(2) :: opt_lbounds
    type(c_ptr) :: opt_data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)) :: opt_alloc_mode 
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    !
    opt_lbounds    = 1
    opt_data_dev   = c_null_ptr
    opt_alloc_mode = gpufort_array_wrap_host_alloc_device
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )    opt_lbounds    = lbounds             
    if ( present(data_dev) )   opt_data_dev   = data_dev              
    if ( present(alloc_mode) ) opt_alloc_mode = alloc_mode 
    if ( present(sync_mode) )  opt_sync_mode  = sync_mode 
    ierr = gpufort_array2_init(&
      array,&
      int(c_double, c_int),&
      c_loc(data_host),opt_data_dev,&
      shape(data_host), opt_lbounds,&
      opt_alloc_mode, opt_sync_mode)
  end function
  function gpufort_array2_init_c_float_complex(&
      array,&
      data_host,lbounds,&
      data_dev,alloc_mode,sync_mode) result(ierr)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array2),intent(inout) :: array
    complex(c_float_complex),intent(in),target,dimension(:,:) :: data_host 
    integer(c_int),dimension(2),intent(in),optional :: lbounds
    type(c_ptr),intent(in),optional :: data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),optional :: alloc_mode 
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode 
    !
    integer(kind(hipSuccess)) :: ierr
    !
    integer(c_int),dimension(2) :: opt_lbounds
    type(c_ptr) :: opt_data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)) :: opt_alloc_mode 
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    !
    opt_lbounds    = 1
    opt_data_dev   = c_null_ptr
    opt_alloc_mode = gpufort_array_wrap_host_alloc_device
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )    opt_lbounds    = lbounds             
    if ( present(data_dev) )   opt_data_dev   = data_dev              
    if ( present(alloc_mode) ) opt_alloc_mode = alloc_mode 
    if ( present(sync_mode) )  opt_sync_mode  = sync_mode 
    ierr = gpufort_array2_init(&
      array,&
      int(2*c_float_complex, c_int),&
      c_loc(data_host),opt_data_dev,&
      shape(data_host), opt_lbounds,&
      opt_alloc_mode, opt_sync_mode)
  end function
  function gpufort_array2_init_c_double_complex(&
      array,&
      data_host,lbounds,&
      data_dev,alloc_mode,sync_mode) result(ierr)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array2),intent(inout) :: array
    complex(c_double_complex),intent(in),target,dimension(:,:) :: data_host 
    integer(c_int),dimension(2),intent(in),optional :: lbounds
    type(c_ptr),intent(in),optional :: data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),optional :: alloc_mode 
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode 
    !
    integer(kind(hipSuccess)) :: ierr
    !
    integer(c_int),dimension(2) :: opt_lbounds
    type(c_ptr) :: opt_data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)) :: opt_alloc_mode 
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    !
    opt_lbounds    = 1
    opt_data_dev   = c_null_ptr
    opt_alloc_mode = gpufort_array_wrap_host_alloc_device
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )    opt_lbounds    = lbounds             
    if ( present(data_dev) )   opt_data_dev   = data_dev              
    if ( present(alloc_mode) ) opt_alloc_mode = alloc_mode 
    if ( present(sync_mode) )  opt_sync_mode  = sync_mode 
    ierr = gpufort_array2_init(&
      array,&
      int(2*c_double_complex, c_int),&
      c_loc(data_host),opt_data_dev,&
      shape(data_host), opt_lbounds,&
      opt_alloc_mode, opt_sync_mode)
  end function
  function gpufort_array3_init_async_host(&
      array,&
      bytes_per_element,&
      sizes,lbounds,&
      stream,alloc_mode,sync_mode) result(ierr)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array3),intent(inout) :: array
    integer(c_int),dimension(3),intent(in) :: sizes
    integer(c_int),dimension(3),intent(in),optional :: lbounds
    type(c_ptr),intent(in) :: stream
    integer(c_int),intent(in) :: bytes_per_element
    integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),optional :: alloc_mode 
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode 
    !
    integer(kind(hipSuccess)) :: ierr
    !
    integer(c_int),dimension(3) :: opt_lbounds
    integer(kind(gpufort_array_wrap_host_wrap_device)) :: opt_alloc_mode 
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    !
    opt_lbounds    = 1
    opt_alloc_mode = gpufort_array_alloc_host_alloc_device ! allocate both by default
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )    opt_lbounds    = lbounds             
    if ( present(alloc_mode) ) opt_alloc_mode = alloc_mode 
    if ( present(sync_mode) )  opt_sync_mode  = sync_mode 
    ierr = gpufort_array3_init_async(&
      array,&
      bytes_per_element,&
      c_null_ptr,c_null_ptr, &
      sizes, opt_lbounds,&
      stream,opt_alloc_mode, opt_sync_mode )
  end function
  function gpufort_array3_init_async_c_bool(&
      array,&
      data_host,lbounds,&
      stream,data_dev,alloc_mode,sync_mode) result(ierr)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array3),intent(inout) :: array
    logical(c_bool),intent(in),target,dimension(:,:,:) :: data_host 
    integer(c_int),dimension(3),intent(in),optional :: lbounds
    type(c_ptr),intent(in) :: stream
    type(c_ptr),intent(in),optional :: data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),optional :: alloc_mode 
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode 
    !
    integer(kind(hipSuccess)) :: ierr
    !
    integer(c_int),dimension(3) :: opt_lbounds
    type(c_ptr) :: opt_data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)) :: opt_alloc_mode 
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    !
    opt_lbounds    = 1
    opt_data_dev   = c_null_ptr
    opt_alloc_mode = gpufort_array_wrap_host_alloc_device
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )    opt_lbounds    = lbounds             
    if ( present(data_dev) )   opt_data_dev   = data_dev              
    if ( present(alloc_mode) ) opt_alloc_mode = alloc_mode 
    if ( present(sync_mode) )  opt_sync_mode  = sync_mode 
    ierr = gpufort_array3_init_async(&
      array,&
      int(c_bool, c_int),&
      c_loc(data_host),opt_data_dev,&
      shape(data_host), opt_lbounds,&
      stream,opt_alloc_mode, opt_sync_mode)
  end function
  function gpufort_array3_init_async_c_short(&
      array,&
      data_host,lbounds,&
      stream,data_dev,alloc_mode,sync_mode) result(ierr)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array3),intent(inout) :: array
    integer(c_short),intent(in),target,dimension(:,:,:) :: data_host 
    integer(c_int),dimension(3),intent(in),optional :: lbounds
    type(c_ptr),intent(in) :: stream
    type(c_ptr),intent(in),optional :: data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),optional :: alloc_mode 
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode 
    !
    integer(kind(hipSuccess)) :: ierr
    !
    integer(c_int),dimension(3) :: opt_lbounds
    type(c_ptr) :: opt_data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)) :: opt_alloc_mode 
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    !
    opt_lbounds    = 1
    opt_data_dev   = c_null_ptr
    opt_alloc_mode = gpufort_array_wrap_host_alloc_device
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )    opt_lbounds    = lbounds             
    if ( present(data_dev) )   opt_data_dev   = data_dev              
    if ( present(alloc_mode) ) opt_alloc_mode = alloc_mode 
    if ( present(sync_mode) )  opt_sync_mode  = sync_mode 
    ierr = gpufort_array3_init_async(&
      array,&
      int(c_short, c_int),&
      c_loc(data_host),opt_data_dev,&
      shape(data_host), opt_lbounds,&
      stream,opt_alloc_mode, opt_sync_mode)
  end function
  function gpufort_array3_init_async_c_int(&
      array,&
      data_host,lbounds,&
      stream,data_dev,alloc_mode,sync_mode) result(ierr)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array3),intent(inout) :: array
    integer(c_int),intent(in),target,dimension(:,:,:) :: data_host 
    integer(c_int),dimension(3),intent(in),optional :: lbounds
    type(c_ptr),intent(in) :: stream
    type(c_ptr),intent(in),optional :: data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),optional :: alloc_mode 
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode 
    !
    integer(kind(hipSuccess)) :: ierr
    !
    integer(c_int),dimension(3) :: opt_lbounds
    type(c_ptr) :: opt_data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)) :: opt_alloc_mode 
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    !
    opt_lbounds    = 1
    opt_data_dev   = c_null_ptr
    opt_alloc_mode = gpufort_array_wrap_host_alloc_device
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )    opt_lbounds    = lbounds             
    if ( present(data_dev) )   opt_data_dev   = data_dev              
    if ( present(alloc_mode) ) opt_alloc_mode = alloc_mode 
    if ( present(sync_mode) )  opt_sync_mode  = sync_mode 
    ierr = gpufort_array3_init_async(&
      array,&
      int(c_int, c_int),&
      c_loc(data_host),opt_data_dev,&
      shape(data_host), opt_lbounds,&
      stream,opt_alloc_mode, opt_sync_mode)
  end function
  function gpufort_array3_init_async_c_long(&
      array,&
      data_host,lbounds,&
      stream,data_dev,alloc_mode,sync_mode) result(ierr)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array3),intent(inout) :: array
    integer(c_long),intent(in),target,dimension(:,:,:) :: data_host 
    integer(c_int),dimension(3),intent(in),optional :: lbounds
    type(c_ptr),intent(in) :: stream
    type(c_ptr),intent(in),optional :: data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),optional :: alloc_mode 
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode 
    !
    integer(kind(hipSuccess)) :: ierr
    !
    integer(c_int),dimension(3) :: opt_lbounds
    type(c_ptr) :: opt_data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)) :: opt_alloc_mode 
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    !
    opt_lbounds    = 1
    opt_data_dev   = c_null_ptr
    opt_alloc_mode = gpufort_array_wrap_host_alloc_device
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )    opt_lbounds    = lbounds             
    if ( present(data_dev) )   opt_data_dev   = data_dev              
    if ( present(alloc_mode) ) opt_alloc_mode = alloc_mode 
    if ( present(sync_mode) )  opt_sync_mode  = sync_mode 
    ierr = gpufort_array3_init_async(&
      array,&
      int(c_long, c_int),&
      c_loc(data_host),opt_data_dev,&
      shape(data_host), opt_lbounds,&
      stream,opt_alloc_mode, opt_sync_mode)
  end function
  function gpufort_array3_init_async_c_float(&
      array,&
      data_host,lbounds,&
      stream,data_dev,alloc_mode,sync_mode) result(ierr)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array3),intent(inout) :: array
    real(c_float),intent(in),target,dimension(:,:,:) :: data_host 
    integer(c_int),dimension(3),intent(in),optional :: lbounds
    type(c_ptr),intent(in) :: stream
    type(c_ptr),intent(in),optional :: data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),optional :: alloc_mode 
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode 
    !
    integer(kind(hipSuccess)) :: ierr
    !
    integer(c_int),dimension(3) :: opt_lbounds
    type(c_ptr) :: opt_data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)) :: opt_alloc_mode 
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    !
    opt_lbounds    = 1
    opt_data_dev   = c_null_ptr
    opt_alloc_mode = gpufort_array_wrap_host_alloc_device
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )    opt_lbounds    = lbounds             
    if ( present(data_dev) )   opt_data_dev   = data_dev              
    if ( present(alloc_mode) ) opt_alloc_mode = alloc_mode 
    if ( present(sync_mode) )  opt_sync_mode  = sync_mode 
    ierr = gpufort_array3_init_async(&
      array,&
      int(c_float, c_int),&
      c_loc(data_host),opt_data_dev,&
      shape(data_host), opt_lbounds,&
      stream,opt_alloc_mode, opt_sync_mode)
  end function
  function gpufort_array3_init_async_c_double(&
      array,&
      data_host,lbounds,&
      stream,data_dev,alloc_mode,sync_mode) result(ierr)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array3),intent(inout) :: array
    real(c_double),intent(in),target,dimension(:,:,:) :: data_host 
    integer(c_int),dimension(3),intent(in),optional :: lbounds
    type(c_ptr),intent(in) :: stream
    type(c_ptr),intent(in),optional :: data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),optional :: alloc_mode 
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode 
    !
    integer(kind(hipSuccess)) :: ierr
    !
    integer(c_int),dimension(3) :: opt_lbounds
    type(c_ptr) :: opt_data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)) :: opt_alloc_mode 
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    !
    opt_lbounds    = 1
    opt_data_dev   = c_null_ptr
    opt_alloc_mode = gpufort_array_wrap_host_alloc_device
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )    opt_lbounds    = lbounds             
    if ( present(data_dev) )   opt_data_dev   = data_dev              
    if ( present(alloc_mode) ) opt_alloc_mode = alloc_mode 
    if ( present(sync_mode) )  opt_sync_mode  = sync_mode 
    ierr = gpufort_array3_init_async(&
      array,&
      int(c_double, c_int),&
      c_loc(data_host),opt_data_dev,&
      shape(data_host), opt_lbounds,&
      stream,opt_alloc_mode, opt_sync_mode)
  end function
  function gpufort_array3_init_async_c_float_complex(&
      array,&
      data_host,lbounds,&
      stream,data_dev,alloc_mode,sync_mode) result(ierr)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array3),intent(inout) :: array
    complex(c_float_complex),intent(in),target,dimension(:,:,:) :: data_host 
    integer(c_int),dimension(3),intent(in),optional :: lbounds
    type(c_ptr),intent(in) :: stream
    type(c_ptr),intent(in),optional :: data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),optional :: alloc_mode 
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode 
    !
    integer(kind(hipSuccess)) :: ierr
    !
    integer(c_int),dimension(3) :: opt_lbounds
    type(c_ptr) :: opt_data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)) :: opt_alloc_mode 
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    !
    opt_lbounds    = 1
    opt_data_dev   = c_null_ptr
    opt_alloc_mode = gpufort_array_wrap_host_alloc_device
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )    opt_lbounds    = lbounds             
    if ( present(data_dev) )   opt_data_dev   = data_dev              
    if ( present(alloc_mode) ) opt_alloc_mode = alloc_mode 
    if ( present(sync_mode) )  opt_sync_mode  = sync_mode 
    ierr = gpufort_array3_init_async(&
      array,&
      int(2*c_float_complex, c_int),&
      c_loc(data_host),opt_data_dev,&
      shape(data_host), opt_lbounds,&
      stream,opt_alloc_mode, opt_sync_mode)
  end function
  function gpufort_array3_init_async_c_double_complex(&
      array,&
      data_host,lbounds,&
      stream,data_dev,alloc_mode,sync_mode) result(ierr)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array3),intent(inout) :: array
    complex(c_double_complex),intent(in),target,dimension(:,:,:) :: data_host 
    integer(c_int),dimension(3),intent(in),optional :: lbounds
    type(c_ptr),intent(in) :: stream
    type(c_ptr),intent(in),optional :: data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),optional :: alloc_mode 
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode 
    !
    integer(kind(hipSuccess)) :: ierr
    !
    integer(c_int),dimension(3) :: opt_lbounds
    type(c_ptr) :: opt_data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)) :: opt_alloc_mode 
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    !
    opt_lbounds    = 1
    opt_data_dev   = c_null_ptr
    opt_alloc_mode = gpufort_array_wrap_host_alloc_device
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )    opt_lbounds    = lbounds             
    if ( present(data_dev) )   opt_data_dev   = data_dev              
    if ( present(alloc_mode) ) opt_alloc_mode = alloc_mode 
    if ( present(sync_mode) )  opt_sync_mode  = sync_mode 
    ierr = gpufort_array3_init_async(&
      array,&
      int(2*c_double_complex, c_int),&
      c_loc(data_host),opt_data_dev,&
      shape(data_host), opt_lbounds,&
      stream,opt_alloc_mode, opt_sync_mode)
  end function
  function gpufort_array3_init_host(&
      array,&
      bytes_per_element,&
      sizes,lbounds,&
      alloc_mode,sync_mode) result(ierr)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array3),intent(inout) :: array
    integer(c_int),dimension(3),intent(in) :: sizes
    integer(c_int),dimension(3),intent(in),optional :: lbounds
    integer(c_int),intent(in) :: bytes_per_element
    integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),optional :: alloc_mode 
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode 
    !
    integer(kind(hipSuccess)) :: ierr
    !
    integer(c_int),dimension(3) :: opt_lbounds
    integer(kind(gpufort_array_wrap_host_wrap_device)) :: opt_alloc_mode 
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    !
    opt_lbounds    = 1
    opt_alloc_mode = gpufort_array_alloc_host_alloc_device ! allocate both by default
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )    opt_lbounds    = lbounds             
    if ( present(alloc_mode) ) opt_alloc_mode = alloc_mode 
    if ( present(sync_mode) )  opt_sync_mode  = sync_mode 
    ierr = gpufort_array3_init(&
      array,&
      bytes_per_element,&
      c_null_ptr,c_null_ptr, &
      sizes, opt_lbounds,&
      opt_alloc_mode, opt_sync_mode )
  end function
  function gpufort_array3_init_c_bool(&
      array,&
      data_host,lbounds,&
      data_dev,alloc_mode,sync_mode) result(ierr)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array3),intent(inout) :: array
    logical(c_bool),intent(in),target,dimension(:,:,:) :: data_host 
    integer(c_int),dimension(3),intent(in),optional :: lbounds
    type(c_ptr),intent(in),optional :: data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),optional :: alloc_mode 
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode 
    !
    integer(kind(hipSuccess)) :: ierr
    !
    integer(c_int),dimension(3) :: opt_lbounds
    type(c_ptr) :: opt_data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)) :: opt_alloc_mode 
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    !
    opt_lbounds    = 1
    opt_data_dev   = c_null_ptr
    opt_alloc_mode = gpufort_array_wrap_host_alloc_device
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )    opt_lbounds    = lbounds             
    if ( present(data_dev) )   opt_data_dev   = data_dev              
    if ( present(alloc_mode) ) opt_alloc_mode = alloc_mode 
    if ( present(sync_mode) )  opt_sync_mode  = sync_mode 
    ierr = gpufort_array3_init(&
      array,&
      int(c_bool, c_int),&
      c_loc(data_host),opt_data_dev,&
      shape(data_host), opt_lbounds,&
      opt_alloc_mode, opt_sync_mode)
  end function
  function gpufort_array3_init_c_short(&
      array,&
      data_host,lbounds,&
      data_dev,alloc_mode,sync_mode) result(ierr)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array3),intent(inout) :: array
    integer(c_short),intent(in),target,dimension(:,:,:) :: data_host 
    integer(c_int),dimension(3),intent(in),optional :: lbounds
    type(c_ptr),intent(in),optional :: data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),optional :: alloc_mode 
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode 
    !
    integer(kind(hipSuccess)) :: ierr
    !
    integer(c_int),dimension(3) :: opt_lbounds
    type(c_ptr) :: opt_data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)) :: opt_alloc_mode 
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    !
    opt_lbounds    = 1
    opt_data_dev   = c_null_ptr
    opt_alloc_mode = gpufort_array_wrap_host_alloc_device
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )    opt_lbounds    = lbounds             
    if ( present(data_dev) )   opt_data_dev   = data_dev              
    if ( present(alloc_mode) ) opt_alloc_mode = alloc_mode 
    if ( present(sync_mode) )  opt_sync_mode  = sync_mode 
    ierr = gpufort_array3_init(&
      array,&
      int(c_short, c_int),&
      c_loc(data_host),opt_data_dev,&
      shape(data_host), opt_lbounds,&
      opt_alloc_mode, opt_sync_mode)
  end function
  function gpufort_array3_init_c_int(&
      array,&
      data_host,lbounds,&
      data_dev,alloc_mode,sync_mode) result(ierr)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array3),intent(inout) :: array
    integer(c_int),intent(in),target,dimension(:,:,:) :: data_host 
    integer(c_int),dimension(3),intent(in),optional :: lbounds
    type(c_ptr),intent(in),optional :: data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),optional :: alloc_mode 
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode 
    !
    integer(kind(hipSuccess)) :: ierr
    !
    integer(c_int),dimension(3) :: opt_lbounds
    type(c_ptr) :: opt_data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)) :: opt_alloc_mode 
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    !
    opt_lbounds    = 1
    opt_data_dev   = c_null_ptr
    opt_alloc_mode = gpufort_array_wrap_host_alloc_device
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )    opt_lbounds    = lbounds             
    if ( present(data_dev) )   opt_data_dev   = data_dev              
    if ( present(alloc_mode) ) opt_alloc_mode = alloc_mode 
    if ( present(sync_mode) )  opt_sync_mode  = sync_mode 
    ierr = gpufort_array3_init(&
      array,&
      int(c_int, c_int),&
      c_loc(data_host),opt_data_dev,&
      shape(data_host), opt_lbounds,&
      opt_alloc_mode, opt_sync_mode)
  end function
  function gpufort_array3_init_c_long(&
      array,&
      data_host,lbounds,&
      data_dev,alloc_mode,sync_mode) result(ierr)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array3),intent(inout) :: array
    integer(c_long),intent(in),target,dimension(:,:,:) :: data_host 
    integer(c_int),dimension(3),intent(in),optional :: lbounds
    type(c_ptr),intent(in),optional :: data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),optional :: alloc_mode 
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode 
    !
    integer(kind(hipSuccess)) :: ierr
    !
    integer(c_int),dimension(3) :: opt_lbounds
    type(c_ptr) :: opt_data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)) :: opt_alloc_mode 
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    !
    opt_lbounds    = 1
    opt_data_dev   = c_null_ptr
    opt_alloc_mode = gpufort_array_wrap_host_alloc_device
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )    opt_lbounds    = lbounds             
    if ( present(data_dev) )   opt_data_dev   = data_dev              
    if ( present(alloc_mode) ) opt_alloc_mode = alloc_mode 
    if ( present(sync_mode) )  opt_sync_mode  = sync_mode 
    ierr = gpufort_array3_init(&
      array,&
      int(c_long, c_int),&
      c_loc(data_host),opt_data_dev,&
      shape(data_host), opt_lbounds,&
      opt_alloc_mode, opt_sync_mode)
  end function
  function gpufort_array3_init_c_float(&
      array,&
      data_host,lbounds,&
      data_dev,alloc_mode,sync_mode) result(ierr)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array3),intent(inout) :: array
    real(c_float),intent(in),target,dimension(:,:,:) :: data_host 
    integer(c_int),dimension(3),intent(in),optional :: lbounds
    type(c_ptr),intent(in),optional :: data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),optional :: alloc_mode 
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode 
    !
    integer(kind(hipSuccess)) :: ierr
    !
    integer(c_int),dimension(3) :: opt_lbounds
    type(c_ptr) :: opt_data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)) :: opt_alloc_mode 
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    !
    opt_lbounds    = 1
    opt_data_dev   = c_null_ptr
    opt_alloc_mode = gpufort_array_wrap_host_alloc_device
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )    opt_lbounds    = lbounds             
    if ( present(data_dev) )   opt_data_dev   = data_dev              
    if ( present(alloc_mode) ) opt_alloc_mode = alloc_mode 
    if ( present(sync_mode) )  opt_sync_mode  = sync_mode 
    ierr = gpufort_array3_init(&
      array,&
      int(c_float, c_int),&
      c_loc(data_host),opt_data_dev,&
      shape(data_host), opt_lbounds,&
      opt_alloc_mode, opt_sync_mode)
  end function
  function gpufort_array3_init_c_double(&
      array,&
      data_host,lbounds,&
      data_dev,alloc_mode,sync_mode) result(ierr)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array3),intent(inout) :: array
    real(c_double),intent(in),target,dimension(:,:,:) :: data_host 
    integer(c_int),dimension(3),intent(in),optional :: lbounds
    type(c_ptr),intent(in),optional :: data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),optional :: alloc_mode 
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode 
    !
    integer(kind(hipSuccess)) :: ierr
    !
    integer(c_int),dimension(3) :: opt_lbounds
    type(c_ptr) :: opt_data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)) :: opt_alloc_mode 
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    !
    opt_lbounds    = 1
    opt_data_dev   = c_null_ptr
    opt_alloc_mode = gpufort_array_wrap_host_alloc_device
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )    opt_lbounds    = lbounds             
    if ( present(data_dev) )   opt_data_dev   = data_dev              
    if ( present(alloc_mode) ) opt_alloc_mode = alloc_mode 
    if ( present(sync_mode) )  opt_sync_mode  = sync_mode 
    ierr = gpufort_array3_init(&
      array,&
      int(c_double, c_int),&
      c_loc(data_host),opt_data_dev,&
      shape(data_host), opt_lbounds,&
      opt_alloc_mode, opt_sync_mode)
  end function
  function gpufort_array3_init_c_float_complex(&
      array,&
      data_host,lbounds,&
      data_dev,alloc_mode,sync_mode) result(ierr)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array3),intent(inout) :: array
    complex(c_float_complex),intent(in),target,dimension(:,:,:) :: data_host 
    integer(c_int),dimension(3),intent(in),optional :: lbounds
    type(c_ptr),intent(in),optional :: data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),optional :: alloc_mode 
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode 
    !
    integer(kind(hipSuccess)) :: ierr
    !
    integer(c_int),dimension(3) :: opt_lbounds
    type(c_ptr) :: opt_data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)) :: opt_alloc_mode 
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    !
    opt_lbounds    = 1
    opt_data_dev   = c_null_ptr
    opt_alloc_mode = gpufort_array_wrap_host_alloc_device
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )    opt_lbounds    = lbounds             
    if ( present(data_dev) )   opt_data_dev   = data_dev              
    if ( present(alloc_mode) ) opt_alloc_mode = alloc_mode 
    if ( present(sync_mode) )  opt_sync_mode  = sync_mode 
    ierr = gpufort_array3_init(&
      array,&
      int(2*c_float_complex, c_int),&
      c_loc(data_host),opt_data_dev,&
      shape(data_host), opt_lbounds,&
      opt_alloc_mode, opt_sync_mode)
  end function
  function gpufort_array3_init_c_double_complex(&
      array,&
      data_host,lbounds,&
      data_dev,alloc_mode,sync_mode) result(ierr)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array3),intent(inout) :: array
    complex(c_double_complex),intent(in),target,dimension(:,:,:) :: data_host 
    integer(c_int),dimension(3),intent(in),optional :: lbounds
    type(c_ptr),intent(in),optional :: data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),optional :: alloc_mode 
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode 
    !
    integer(kind(hipSuccess)) :: ierr
    !
    integer(c_int),dimension(3) :: opt_lbounds
    type(c_ptr) :: opt_data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)) :: opt_alloc_mode 
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    !
    opt_lbounds    = 1
    opt_data_dev   = c_null_ptr
    opt_alloc_mode = gpufort_array_wrap_host_alloc_device
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )    opt_lbounds    = lbounds             
    if ( present(data_dev) )   opt_data_dev   = data_dev              
    if ( present(alloc_mode) ) opt_alloc_mode = alloc_mode 
    if ( present(sync_mode) )  opt_sync_mode  = sync_mode 
    ierr = gpufort_array3_init(&
      array,&
      int(2*c_double_complex, c_int),&
      c_loc(data_host),opt_data_dev,&
      shape(data_host), opt_lbounds,&
      opt_alloc_mode, opt_sync_mode)
  end function
  function gpufort_array4_init_async_host(&
      array,&
      bytes_per_element,&
      sizes,lbounds,&
      stream,alloc_mode,sync_mode) result(ierr)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array4),intent(inout) :: array
    integer(c_int),dimension(4),intent(in) :: sizes
    integer(c_int),dimension(4),intent(in),optional :: lbounds
    type(c_ptr),intent(in) :: stream
    integer(c_int),intent(in) :: bytes_per_element
    integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),optional :: alloc_mode 
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode 
    !
    integer(kind(hipSuccess)) :: ierr
    !
    integer(c_int),dimension(4) :: opt_lbounds
    integer(kind(gpufort_array_wrap_host_wrap_device)) :: opt_alloc_mode 
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    !
    opt_lbounds    = 1
    opt_alloc_mode = gpufort_array_alloc_host_alloc_device ! allocate both by default
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )    opt_lbounds    = lbounds             
    if ( present(alloc_mode) ) opt_alloc_mode = alloc_mode 
    if ( present(sync_mode) )  opt_sync_mode  = sync_mode 
    ierr = gpufort_array4_init_async(&
      array,&
      bytes_per_element,&
      c_null_ptr,c_null_ptr, &
      sizes, opt_lbounds,&
      stream,opt_alloc_mode, opt_sync_mode )
  end function
  function gpufort_array4_init_async_c_bool(&
      array,&
      data_host,lbounds,&
      stream,data_dev,alloc_mode,sync_mode) result(ierr)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array4),intent(inout) :: array
    logical(c_bool),intent(in),target,dimension(:,:,:,:) :: data_host 
    integer(c_int),dimension(4),intent(in),optional :: lbounds
    type(c_ptr),intent(in) :: stream
    type(c_ptr),intent(in),optional :: data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),optional :: alloc_mode 
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode 
    !
    integer(kind(hipSuccess)) :: ierr
    !
    integer(c_int),dimension(4) :: opt_lbounds
    type(c_ptr) :: opt_data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)) :: opt_alloc_mode 
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    !
    opt_lbounds    = 1
    opt_data_dev   = c_null_ptr
    opt_alloc_mode = gpufort_array_wrap_host_alloc_device
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )    opt_lbounds    = lbounds             
    if ( present(data_dev) )   opt_data_dev   = data_dev              
    if ( present(alloc_mode) ) opt_alloc_mode = alloc_mode 
    if ( present(sync_mode) )  opt_sync_mode  = sync_mode 
    ierr = gpufort_array4_init_async(&
      array,&
      int(c_bool, c_int),&
      c_loc(data_host),opt_data_dev,&
      shape(data_host), opt_lbounds,&
      stream,opt_alloc_mode, opt_sync_mode)
  end function
  function gpufort_array4_init_async_c_short(&
      array,&
      data_host,lbounds,&
      stream,data_dev,alloc_mode,sync_mode) result(ierr)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array4),intent(inout) :: array
    integer(c_short),intent(in),target,dimension(:,:,:,:) :: data_host 
    integer(c_int),dimension(4),intent(in),optional :: lbounds
    type(c_ptr),intent(in) :: stream
    type(c_ptr),intent(in),optional :: data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),optional :: alloc_mode 
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode 
    !
    integer(kind(hipSuccess)) :: ierr
    !
    integer(c_int),dimension(4) :: opt_lbounds
    type(c_ptr) :: opt_data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)) :: opt_alloc_mode 
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    !
    opt_lbounds    = 1
    opt_data_dev   = c_null_ptr
    opt_alloc_mode = gpufort_array_wrap_host_alloc_device
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )    opt_lbounds    = lbounds             
    if ( present(data_dev) )   opt_data_dev   = data_dev              
    if ( present(alloc_mode) ) opt_alloc_mode = alloc_mode 
    if ( present(sync_mode) )  opt_sync_mode  = sync_mode 
    ierr = gpufort_array4_init_async(&
      array,&
      int(c_short, c_int),&
      c_loc(data_host),opt_data_dev,&
      shape(data_host), opt_lbounds,&
      stream,opt_alloc_mode, opt_sync_mode)
  end function
  function gpufort_array4_init_async_c_int(&
      array,&
      data_host,lbounds,&
      stream,data_dev,alloc_mode,sync_mode) result(ierr)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array4),intent(inout) :: array
    integer(c_int),intent(in),target,dimension(:,:,:,:) :: data_host 
    integer(c_int),dimension(4),intent(in),optional :: lbounds
    type(c_ptr),intent(in) :: stream
    type(c_ptr),intent(in),optional :: data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),optional :: alloc_mode 
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode 
    !
    integer(kind(hipSuccess)) :: ierr
    !
    integer(c_int),dimension(4) :: opt_lbounds
    type(c_ptr) :: opt_data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)) :: opt_alloc_mode 
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    !
    opt_lbounds    = 1
    opt_data_dev   = c_null_ptr
    opt_alloc_mode = gpufort_array_wrap_host_alloc_device
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )    opt_lbounds    = lbounds             
    if ( present(data_dev) )   opt_data_dev   = data_dev              
    if ( present(alloc_mode) ) opt_alloc_mode = alloc_mode 
    if ( present(sync_mode) )  opt_sync_mode  = sync_mode 
    ierr = gpufort_array4_init_async(&
      array,&
      int(c_int, c_int),&
      c_loc(data_host),opt_data_dev,&
      shape(data_host), opt_lbounds,&
      stream,opt_alloc_mode, opt_sync_mode)
  end function
  function gpufort_array4_init_async_c_long(&
      array,&
      data_host,lbounds,&
      stream,data_dev,alloc_mode,sync_mode) result(ierr)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array4),intent(inout) :: array
    integer(c_long),intent(in),target,dimension(:,:,:,:) :: data_host 
    integer(c_int),dimension(4),intent(in),optional :: lbounds
    type(c_ptr),intent(in) :: stream
    type(c_ptr),intent(in),optional :: data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),optional :: alloc_mode 
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode 
    !
    integer(kind(hipSuccess)) :: ierr
    !
    integer(c_int),dimension(4) :: opt_lbounds
    type(c_ptr) :: opt_data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)) :: opt_alloc_mode 
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    !
    opt_lbounds    = 1
    opt_data_dev   = c_null_ptr
    opt_alloc_mode = gpufort_array_wrap_host_alloc_device
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )    opt_lbounds    = lbounds             
    if ( present(data_dev) )   opt_data_dev   = data_dev              
    if ( present(alloc_mode) ) opt_alloc_mode = alloc_mode 
    if ( present(sync_mode) )  opt_sync_mode  = sync_mode 
    ierr = gpufort_array4_init_async(&
      array,&
      int(c_long, c_int),&
      c_loc(data_host),opt_data_dev,&
      shape(data_host), opt_lbounds,&
      stream,opt_alloc_mode, opt_sync_mode)
  end function
  function gpufort_array4_init_async_c_float(&
      array,&
      data_host,lbounds,&
      stream,data_dev,alloc_mode,sync_mode) result(ierr)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array4),intent(inout) :: array
    real(c_float),intent(in),target,dimension(:,:,:,:) :: data_host 
    integer(c_int),dimension(4),intent(in),optional :: lbounds
    type(c_ptr),intent(in) :: stream
    type(c_ptr),intent(in),optional :: data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),optional :: alloc_mode 
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode 
    !
    integer(kind(hipSuccess)) :: ierr
    !
    integer(c_int),dimension(4) :: opt_lbounds
    type(c_ptr) :: opt_data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)) :: opt_alloc_mode 
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    !
    opt_lbounds    = 1
    opt_data_dev   = c_null_ptr
    opt_alloc_mode = gpufort_array_wrap_host_alloc_device
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )    opt_lbounds    = lbounds             
    if ( present(data_dev) )   opt_data_dev   = data_dev              
    if ( present(alloc_mode) ) opt_alloc_mode = alloc_mode 
    if ( present(sync_mode) )  opt_sync_mode  = sync_mode 
    ierr = gpufort_array4_init_async(&
      array,&
      int(c_float, c_int),&
      c_loc(data_host),opt_data_dev,&
      shape(data_host), opt_lbounds,&
      stream,opt_alloc_mode, opt_sync_mode)
  end function
  function gpufort_array4_init_async_c_double(&
      array,&
      data_host,lbounds,&
      stream,data_dev,alloc_mode,sync_mode) result(ierr)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array4),intent(inout) :: array
    real(c_double),intent(in),target,dimension(:,:,:,:) :: data_host 
    integer(c_int),dimension(4),intent(in),optional :: lbounds
    type(c_ptr),intent(in) :: stream
    type(c_ptr),intent(in),optional :: data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),optional :: alloc_mode 
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode 
    !
    integer(kind(hipSuccess)) :: ierr
    !
    integer(c_int),dimension(4) :: opt_lbounds
    type(c_ptr) :: opt_data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)) :: opt_alloc_mode 
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    !
    opt_lbounds    = 1
    opt_data_dev   = c_null_ptr
    opt_alloc_mode = gpufort_array_wrap_host_alloc_device
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )    opt_lbounds    = lbounds             
    if ( present(data_dev) )   opt_data_dev   = data_dev              
    if ( present(alloc_mode) ) opt_alloc_mode = alloc_mode 
    if ( present(sync_mode) )  opt_sync_mode  = sync_mode 
    ierr = gpufort_array4_init_async(&
      array,&
      int(c_double, c_int),&
      c_loc(data_host),opt_data_dev,&
      shape(data_host), opt_lbounds,&
      stream,opt_alloc_mode, opt_sync_mode)
  end function
  function gpufort_array4_init_async_c_float_complex(&
      array,&
      data_host,lbounds,&
      stream,data_dev,alloc_mode,sync_mode) result(ierr)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array4),intent(inout) :: array
    complex(c_float_complex),intent(in),target,dimension(:,:,:,:) :: data_host 
    integer(c_int),dimension(4),intent(in),optional :: lbounds
    type(c_ptr),intent(in) :: stream
    type(c_ptr),intent(in),optional :: data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),optional :: alloc_mode 
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode 
    !
    integer(kind(hipSuccess)) :: ierr
    !
    integer(c_int),dimension(4) :: opt_lbounds
    type(c_ptr) :: opt_data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)) :: opt_alloc_mode 
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    !
    opt_lbounds    = 1
    opt_data_dev   = c_null_ptr
    opt_alloc_mode = gpufort_array_wrap_host_alloc_device
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )    opt_lbounds    = lbounds             
    if ( present(data_dev) )   opt_data_dev   = data_dev              
    if ( present(alloc_mode) ) opt_alloc_mode = alloc_mode 
    if ( present(sync_mode) )  opt_sync_mode  = sync_mode 
    ierr = gpufort_array4_init_async(&
      array,&
      int(2*c_float_complex, c_int),&
      c_loc(data_host),opt_data_dev,&
      shape(data_host), opt_lbounds,&
      stream,opt_alloc_mode, opt_sync_mode)
  end function
  function gpufort_array4_init_async_c_double_complex(&
      array,&
      data_host,lbounds,&
      stream,data_dev,alloc_mode,sync_mode) result(ierr)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array4),intent(inout) :: array
    complex(c_double_complex),intent(in),target,dimension(:,:,:,:) :: data_host 
    integer(c_int),dimension(4),intent(in),optional :: lbounds
    type(c_ptr),intent(in) :: stream
    type(c_ptr),intent(in),optional :: data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),optional :: alloc_mode 
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode 
    !
    integer(kind(hipSuccess)) :: ierr
    !
    integer(c_int),dimension(4) :: opt_lbounds
    type(c_ptr) :: opt_data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)) :: opt_alloc_mode 
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    !
    opt_lbounds    = 1
    opt_data_dev   = c_null_ptr
    opt_alloc_mode = gpufort_array_wrap_host_alloc_device
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )    opt_lbounds    = lbounds             
    if ( present(data_dev) )   opt_data_dev   = data_dev              
    if ( present(alloc_mode) ) opt_alloc_mode = alloc_mode 
    if ( present(sync_mode) )  opt_sync_mode  = sync_mode 
    ierr = gpufort_array4_init_async(&
      array,&
      int(2*c_double_complex, c_int),&
      c_loc(data_host),opt_data_dev,&
      shape(data_host), opt_lbounds,&
      stream,opt_alloc_mode, opt_sync_mode)
  end function
  function gpufort_array4_init_host(&
      array,&
      bytes_per_element,&
      sizes,lbounds,&
      alloc_mode,sync_mode) result(ierr)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array4),intent(inout) :: array
    integer(c_int),dimension(4),intent(in) :: sizes
    integer(c_int),dimension(4),intent(in),optional :: lbounds
    integer(c_int),intent(in) :: bytes_per_element
    integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),optional :: alloc_mode 
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode 
    !
    integer(kind(hipSuccess)) :: ierr
    !
    integer(c_int),dimension(4) :: opt_lbounds
    integer(kind(gpufort_array_wrap_host_wrap_device)) :: opt_alloc_mode 
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    !
    opt_lbounds    = 1
    opt_alloc_mode = gpufort_array_alloc_host_alloc_device ! allocate both by default
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )    opt_lbounds    = lbounds             
    if ( present(alloc_mode) ) opt_alloc_mode = alloc_mode 
    if ( present(sync_mode) )  opt_sync_mode  = sync_mode 
    ierr = gpufort_array4_init(&
      array,&
      bytes_per_element,&
      c_null_ptr,c_null_ptr, &
      sizes, opt_lbounds,&
      opt_alloc_mode, opt_sync_mode )
  end function
  function gpufort_array4_init_c_bool(&
      array,&
      data_host,lbounds,&
      data_dev,alloc_mode,sync_mode) result(ierr)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array4),intent(inout) :: array
    logical(c_bool),intent(in),target,dimension(:,:,:,:) :: data_host 
    integer(c_int),dimension(4),intent(in),optional :: lbounds
    type(c_ptr),intent(in),optional :: data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),optional :: alloc_mode 
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode 
    !
    integer(kind(hipSuccess)) :: ierr
    !
    integer(c_int),dimension(4) :: opt_lbounds
    type(c_ptr) :: opt_data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)) :: opt_alloc_mode 
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    !
    opt_lbounds    = 1
    opt_data_dev   = c_null_ptr
    opt_alloc_mode = gpufort_array_wrap_host_alloc_device
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )    opt_lbounds    = lbounds             
    if ( present(data_dev) )   opt_data_dev   = data_dev              
    if ( present(alloc_mode) ) opt_alloc_mode = alloc_mode 
    if ( present(sync_mode) )  opt_sync_mode  = sync_mode 
    ierr = gpufort_array4_init(&
      array,&
      int(c_bool, c_int),&
      c_loc(data_host),opt_data_dev,&
      shape(data_host), opt_lbounds,&
      opt_alloc_mode, opt_sync_mode)
  end function
  function gpufort_array4_init_c_short(&
      array,&
      data_host,lbounds,&
      data_dev,alloc_mode,sync_mode) result(ierr)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array4),intent(inout) :: array
    integer(c_short),intent(in),target,dimension(:,:,:,:) :: data_host 
    integer(c_int),dimension(4),intent(in),optional :: lbounds
    type(c_ptr),intent(in),optional :: data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),optional :: alloc_mode 
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode 
    !
    integer(kind(hipSuccess)) :: ierr
    !
    integer(c_int),dimension(4) :: opt_lbounds
    type(c_ptr) :: opt_data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)) :: opt_alloc_mode 
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    !
    opt_lbounds    = 1
    opt_data_dev   = c_null_ptr
    opt_alloc_mode = gpufort_array_wrap_host_alloc_device
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )    opt_lbounds    = lbounds             
    if ( present(data_dev) )   opt_data_dev   = data_dev              
    if ( present(alloc_mode) ) opt_alloc_mode = alloc_mode 
    if ( present(sync_mode) )  opt_sync_mode  = sync_mode 
    ierr = gpufort_array4_init(&
      array,&
      int(c_short, c_int),&
      c_loc(data_host),opt_data_dev,&
      shape(data_host), opt_lbounds,&
      opt_alloc_mode, opt_sync_mode)
  end function
  function gpufort_array4_init_c_int(&
      array,&
      data_host,lbounds,&
      data_dev,alloc_mode,sync_mode) result(ierr)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array4),intent(inout) :: array
    integer(c_int),intent(in),target,dimension(:,:,:,:) :: data_host 
    integer(c_int),dimension(4),intent(in),optional :: lbounds
    type(c_ptr),intent(in),optional :: data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),optional :: alloc_mode 
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode 
    !
    integer(kind(hipSuccess)) :: ierr
    !
    integer(c_int),dimension(4) :: opt_lbounds
    type(c_ptr) :: opt_data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)) :: opt_alloc_mode 
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    !
    opt_lbounds    = 1
    opt_data_dev   = c_null_ptr
    opt_alloc_mode = gpufort_array_wrap_host_alloc_device
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )    opt_lbounds    = lbounds             
    if ( present(data_dev) )   opt_data_dev   = data_dev              
    if ( present(alloc_mode) ) opt_alloc_mode = alloc_mode 
    if ( present(sync_mode) )  opt_sync_mode  = sync_mode 
    ierr = gpufort_array4_init(&
      array,&
      int(c_int, c_int),&
      c_loc(data_host),opt_data_dev,&
      shape(data_host), opt_lbounds,&
      opt_alloc_mode, opt_sync_mode)
  end function
  function gpufort_array4_init_c_long(&
      array,&
      data_host,lbounds,&
      data_dev,alloc_mode,sync_mode) result(ierr)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array4),intent(inout) :: array
    integer(c_long),intent(in),target,dimension(:,:,:,:) :: data_host 
    integer(c_int),dimension(4),intent(in),optional :: lbounds
    type(c_ptr),intent(in),optional :: data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),optional :: alloc_mode 
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode 
    !
    integer(kind(hipSuccess)) :: ierr
    !
    integer(c_int),dimension(4) :: opt_lbounds
    type(c_ptr) :: opt_data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)) :: opt_alloc_mode 
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    !
    opt_lbounds    = 1
    opt_data_dev   = c_null_ptr
    opt_alloc_mode = gpufort_array_wrap_host_alloc_device
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )    opt_lbounds    = lbounds             
    if ( present(data_dev) )   opt_data_dev   = data_dev              
    if ( present(alloc_mode) ) opt_alloc_mode = alloc_mode 
    if ( present(sync_mode) )  opt_sync_mode  = sync_mode 
    ierr = gpufort_array4_init(&
      array,&
      int(c_long, c_int),&
      c_loc(data_host),opt_data_dev,&
      shape(data_host), opt_lbounds,&
      opt_alloc_mode, opt_sync_mode)
  end function
  function gpufort_array4_init_c_float(&
      array,&
      data_host,lbounds,&
      data_dev,alloc_mode,sync_mode) result(ierr)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array4),intent(inout) :: array
    real(c_float),intent(in),target,dimension(:,:,:,:) :: data_host 
    integer(c_int),dimension(4),intent(in),optional :: lbounds
    type(c_ptr),intent(in),optional :: data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),optional :: alloc_mode 
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode 
    !
    integer(kind(hipSuccess)) :: ierr
    !
    integer(c_int),dimension(4) :: opt_lbounds
    type(c_ptr) :: opt_data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)) :: opt_alloc_mode 
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    !
    opt_lbounds    = 1
    opt_data_dev   = c_null_ptr
    opt_alloc_mode = gpufort_array_wrap_host_alloc_device
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )    opt_lbounds    = lbounds             
    if ( present(data_dev) )   opt_data_dev   = data_dev              
    if ( present(alloc_mode) ) opt_alloc_mode = alloc_mode 
    if ( present(sync_mode) )  opt_sync_mode  = sync_mode 
    ierr = gpufort_array4_init(&
      array,&
      int(c_float, c_int),&
      c_loc(data_host),opt_data_dev,&
      shape(data_host), opt_lbounds,&
      opt_alloc_mode, opt_sync_mode)
  end function
  function gpufort_array4_init_c_double(&
      array,&
      data_host,lbounds,&
      data_dev,alloc_mode,sync_mode) result(ierr)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array4),intent(inout) :: array
    real(c_double),intent(in),target,dimension(:,:,:,:) :: data_host 
    integer(c_int),dimension(4),intent(in),optional :: lbounds
    type(c_ptr),intent(in),optional :: data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),optional :: alloc_mode 
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode 
    !
    integer(kind(hipSuccess)) :: ierr
    !
    integer(c_int),dimension(4) :: opt_lbounds
    type(c_ptr) :: opt_data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)) :: opt_alloc_mode 
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    !
    opt_lbounds    = 1
    opt_data_dev   = c_null_ptr
    opt_alloc_mode = gpufort_array_wrap_host_alloc_device
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )    opt_lbounds    = lbounds             
    if ( present(data_dev) )   opt_data_dev   = data_dev              
    if ( present(alloc_mode) ) opt_alloc_mode = alloc_mode 
    if ( present(sync_mode) )  opt_sync_mode  = sync_mode 
    ierr = gpufort_array4_init(&
      array,&
      int(c_double, c_int),&
      c_loc(data_host),opt_data_dev,&
      shape(data_host), opt_lbounds,&
      opt_alloc_mode, opt_sync_mode)
  end function
  function gpufort_array4_init_c_float_complex(&
      array,&
      data_host,lbounds,&
      data_dev,alloc_mode,sync_mode) result(ierr)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array4),intent(inout) :: array
    complex(c_float_complex),intent(in),target,dimension(:,:,:,:) :: data_host 
    integer(c_int),dimension(4),intent(in),optional :: lbounds
    type(c_ptr),intent(in),optional :: data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),optional :: alloc_mode 
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode 
    !
    integer(kind(hipSuccess)) :: ierr
    !
    integer(c_int),dimension(4) :: opt_lbounds
    type(c_ptr) :: opt_data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)) :: opt_alloc_mode 
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    !
    opt_lbounds    = 1
    opt_data_dev   = c_null_ptr
    opt_alloc_mode = gpufort_array_wrap_host_alloc_device
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )    opt_lbounds    = lbounds             
    if ( present(data_dev) )   opt_data_dev   = data_dev              
    if ( present(alloc_mode) ) opt_alloc_mode = alloc_mode 
    if ( present(sync_mode) )  opt_sync_mode  = sync_mode 
    ierr = gpufort_array4_init(&
      array,&
      int(2*c_float_complex, c_int),&
      c_loc(data_host),opt_data_dev,&
      shape(data_host), opt_lbounds,&
      opt_alloc_mode, opt_sync_mode)
  end function
  function gpufort_array4_init_c_double_complex(&
      array,&
      data_host,lbounds,&
      data_dev,alloc_mode,sync_mode) result(ierr)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array4),intent(inout) :: array
    complex(c_double_complex),intent(in),target,dimension(:,:,:,:) :: data_host 
    integer(c_int),dimension(4),intent(in),optional :: lbounds
    type(c_ptr),intent(in),optional :: data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),optional :: alloc_mode 
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode 
    !
    integer(kind(hipSuccess)) :: ierr
    !
    integer(c_int),dimension(4) :: opt_lbounds
    type(c_ptr) :: opt_data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)) :: opt_alloc_mode 
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    !
    opt_lbounds    = 1
    opt_data_dev   = c_null_ptr
    opt_alloc_mode = gpufort_array_wrap_host_alloc_device
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )    opt_lbounds    = lbounds             
    if ( present(data_dev) )   opt_data_dev   = data_dev              
    if ( present(alloc_mode) ) opt_alloc_mode = alloc_mode 
    if ( present(sync_mode) )  opt_sync_mode  = sync_mode 
    ierr = gpufort_array4_init(&
      array,&
      int(2*c_double_complex, c_int),&
      c_loc(data_host),opt_data_dev,&
      shape(data_host), opt_lbounds,&
      opt_alloc_mode, opt_sync_mode)
  end function
  function gpufort_array5_init_async_host(&
      array,&
      bytes_per_element,&
      sizes,lbounds,&
      stream,alloc_mode,sync_mode) result(ierr)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array5),intent(inout) :: array
    integer(c_int),dimension(5),intent(in) :: sizes
    integer(c_int),dimension(5),intent(in),optional :: lbounds
    type(c_ptr),intent(in) :: stream
    integer(c_int),intent(in) :: bytes_per_element
    integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),optional :: alloc_mode 
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode 
    !
    integer(kind(hipSuccess)) :: ierr
    !
    integer(c_int),dimension(5) :: opt_lbounds
    integer(kind(gpufort_array_wrap_host_wrap_device)) :: opt_alloc_mode 
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    !
    opt_lbounds    = 1
    opt_alloc_mode = gpufort_array_alloc_host_alloc_device ! allocate both by default
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )    opt_lbounds    = lbounds             
    if ( present(alloc_mode) ) opt_alloc_mode = alloc_mode 
    if ( present(sync_mode) )  opt_sync_mode  = sync_mode 
    ierr = gpufort_array5_init_async(&
      array,&
      bytes_per_element,&
      c_null_ptr,c_null_ptr, &
      sizes, opt_lbounds,&
      stream,opt_alloc_mode, opt_sync_mode )
  end function
  function gpufort_array5_init_async_c_bool(&
      array,&
      data_host,lbounds,&
      stream,data_dev,alloc_mode,sync_mode) result(ierr)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array5),intent(inout) :: array
    logical(c_bool),intent(in),target,dimension(:,:,:,:,:) :: data_host 
    integer(c_int),dimension(5),intent(in),optional :: lbounds
    type(c_ptr),intent(in) :: stream
    type(c_ptr),intent(in),optional :: data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),optional :: alloc_mode 
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode 
    !
    integer(kind(hipSuccess)) :: ierr
    !
    integer(c_int),dimension(5) :: opt_lbounds
    type(c_ptr) :: opt_data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)) :: opt_alloc_mode 
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    !
    opt_lbounds    = 1
    opt_data_dev   = c_null_ptr
    opt_alloc_mode = gpufort_array_wrap_host_alloc_device
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )    opt_lbounds    = lbounds             
    if ( present(data_dev) )   opt_data_dev   = data_dev              
    if ( present(alloc_mode) ) opt_alloc_mode = alloc_mode 
    if ( present(sync_mode) )  opt_sync_mode  = sync_mode 
    ierr = gpufort_array5_init_async(&
      array,&
      int(c_bool, c_int),&
      c_loc(data_host),opt_data_dev,&
      shape(data_host), opt_lbounds,&
      stream,opt_alloc_mode, opt_sync_mode)
  end function
  function gpufort_array5_init_async_c_short(&
      array,&
      data_host,lbounds,&
      stream,data_dev,alloc_mode,sync_mode) result(ierr)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array5),intent(inout) :: array
    integer(c_short),intent(in),target,dimension(:,:,:,:,:) :: data_host 
    integer(c_int),dimension(5),intent(in),optional :: lbounds
    type(c_ptr),intent(in) :: stream
    type(c_ptr),intent(in),optional :: data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),optional :: alloc_mode 
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode 
    !
    integer(kind(hipSuccess)) :: ierr
    !
    integer(c_int),dimension(5) :: opt_lbounds
    type(c_ptr) :: opt_data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)) :: opt_alloc_mode 
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    !
    opt_lbounds    = 1
    opt_data_dev   = c_null_ptr
    opt_alloc_mode = gpufort_array_wrap_host_alloc_device
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )    opt_lbounds    = lbounds             
    if ( present(data_dev) )   opt_data_dev   = data_dev              
    if ( present(alloc_mode) ) opt_alloc_mode = alloc_mode 
    if ( present(sync_mode) )  opt_sync_mode  = sync_mode 
    ierr = gpufort_array5_init_async(&
      array,&
      int(c_short, c_int),&
      c_loc(data_host),opt_data_dev,&
      shape(data_host), opt_lbounds,&
      stream,opt_alloc_mode, opt_sync_mode)
  end function
  function gpufort_array5_init_async_c_int(&
      array,&
      data_host,lbounds,&
      stream,data_dev,alloc_mode,sync_mode) result(ierr)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array5),intent(inout) :: array
    integer(c_int),intent(in),target,dimension(:,:,:,:,:) :: data_host 
    integer(c_int),dimension(5),intent(in),optional :: lbounds
    type(c_ptr),intent(in) :: stream
    type(c_ptr),intent(in),optional :: data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),optional :: alloc_mode 
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode 
    !
    integer(kind(hipSuccess)) :: ierr
    !
    integer(c_int),dimension(5) :: opt_lbounds
    type(c_ptr) :: opt_data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)) :: opt_alloc_mode 
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    !
    opt_lbounds    = 1
    opt_data_dev   = c_null_ptr
    opt_alloc_mode = gpufort_array_wrap_host_alloc_device
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )    opt_lbounds    = lbounds             
    if ( present(data_dev) )   opt_data_dev   = data_dev              
    if ( present(alloc_mode) ) opt_alloc_mode = alloc_mode 
    if ( present(sync_mode) )  opt_sync_mode  = sync_mode 
    ierr = gpufort_array5_init_async(&
      array,&
      int(c_int, c_int),&
      c_loc(data_host),opt_data_dev,&
      shape(data_host), opt_lbounds,&
      stream,opt_alloc_mode, opt_sync_mode)
  end function
  function gpufort_array5_init_async_c_long(&
      array,&
      data_host,lbounds,&
      stream,data_dev,alloc_mode,sync_mode) result(ierr)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array5),intent(inout) :: array
    integer(c_long),intent(in),target,dimension(:,:,:,:,:) :: data_host 
    integer(c_int),dimension(5),intent(in),optional :: lbounds
    type(c_ptr),intent(in) :: stream
    type(c_ptr),intent(in),optional :: data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),optional :: alloc_mode 
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode 
    !
    integer(kind(hipSuccess)) :: ierr
    !
    integer(c_int),dimension(5) :: opt_lbounds
    type(c_ptr) :: opt_data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)) :: opt_alloc_mode 
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    !
    opt_lbounds    = 1
    opt_data_dev   = c_null_ptr
    opt_alloc_mode = gpufort_array_wrap_host_alloc_device
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )    opt_lbounds    = lbounds             
    if ( present(data_dev) )   opt_data_dev   = data_dev              
    if ( present(alloc_mode) ) opt_alloc_mode = alloc_mode 
    if ( present(sync_mode) )  opt_sync_mode  = sync_mode 
    ierr = gpufort_array5_init_async(&
      array,&
      int(c_long, c_int),&
      c_loc(data_host),opt_data_dev,&
      shape(data_host), opt_lbounds,&
      stream,opt_alloc_mode, opt_sync_mode)
  end function
  function gpufort_array5_init_async_c_float(&
      array,&
      data_host,lbounds,&
      stream,data_dev,alloc_mode,sync_mode) result(ierr)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array5),intent(inout) :: array
    real(c_float),intent(in),target,dimension(:,:,:,:,:) :: data_host 
    integer(c_int),dimension(5),intent(in),optional :: lbounds
    type(c_ptr),intent(in) :: stream
    type(c_ptr),intent(in),optional :: data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),optional :: alloc_mode 
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode 
    !
    integer(kind(hipSuccess)) :: ierr
    !
    integer(c_int),dimension(5) :: opt_lbounds
    type(c_ptr) :: opt_data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)) :: opt_alloc_mode 
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    !
    opt_lbounds    = 1
    opt_data_dev   = c_null_ptr
    opt_alloc_mode = gpufort_array_wrap_host_alloc_device
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )    opt_lbounds    = lbounds             
    if ( present(data_dev) )   opt_data_dev   = data_dev              
    if ( present(alloc_mode) ) opt_alloc_mode = alloc_mode 
    if ( present(sync_mode) )  opt_sync_mode  = sync_mode 
    ierr = gpufort_array5_init_async(&
      array,&
      int(c_float, c_int),&
      c_loc(data_host),opt_data_dev,&
      shape(data_host), opt_lbounds,&
      stream,opt_alloc_mode, opt_sync_mode)
  end function
  function gpufort_array5_init_async_c_double(&
      array,&
      data_host,lbounds,&
      stream,data_dev,alloc_mode,sync_mode) result(ierr)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array5),intent(inout) :: array
    real(c_double),intent(in),target,dimension(:,:,:,:,:) :: data_host 
    integer(c_int),dimension(5),intent(in),optional :: lbounds
    type(c_ptr),intent(in) :: stream
    type(c_ptr),intent(in),optional :: data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),optional :: alloc_mode 
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode 
    !
    integer(kind(hipSuccess)) :: ierr
    !
    integer(c_int),dimension(5) :: opt_lbounds
    type(c_ptr) :: opt_data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)) :: opt_alloc_mode 
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    !
    opt_lbounds    = 1
    opt_data_dev   = c_null_ptr
    opt_alloc_mode = gpufort_array_wrap_host_alloc_device
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )    opt_lbounds    = lbounds             
    if ( present(data_dev) )   opt_data_dev   = data_dev              
    if ( present(alloc_mode) ) opt_alloc_mode = alloc_mode 
    if ( present(sync_mode) )  opt_sync_mode  = sync_mode 
    ierr = gpufort_array5_init_async(&
      array,&
      int(c_double, c_int),&
      c_loc(data_host),opt_data_dev,&
      shape(data_host), opt_lbounds,&
      stream,opt_alloc_mode, opt_sync_mode)
  end function
  function gpufort_array5_init_async_c_float_complex(&
      array,&
      data_host,lbounds,&
      stream,data_dev,alloc_mode,sync_mode) result(ierr)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array5),intent(inout) :: array
    complex(c_float_complex),intent(in),target,dimension(:,:,:,:,:) :: data_host 
    integer(c_int),dimension(5),intent(in),optional :: lbounds
    type(c_ptr),intent(in) :: stream
    type(c_ptr),intent(in),optional :: data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),optional :: alloc_mode 
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode 
    !
    integer(kind(hipSuccess)) :: ierr
    !
    integer(c_int),dimension(5) :: opt_lbounds
    type(c_ptr) :: opt_data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)) :: opt_alloc_mode 
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    !
    opt_lbounds    = 1
    opt_data_dev   = c_null_ptr
    opt_alloc_mode = gpufort_array_wrap_host_alloc_device
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )    opt_lbounds    = lbounds             
    if ( present(data_dev) )   opt_data_dev   = data_dev              
    if ( present(alloc_mode) ) opt_alloc_mode = alloc_mode 
    if ( present(sync_mode) )  opt_sync_mode  = sync_mode 
    ierr = gpufort_array5_init_async(&
      array,&
      int(2*c_float_complex, c_int),&
      c_loc(data_host),opt_data_dev,&
      shape(data_host), opt_lbounds,&
      stream,opt_alloc_mode, opt_sync_mode)
  end function
  function gpufort_array5_init_async_c_double_complex(&
      array,&
      data_host,lbounds,&
      stream,data_dev,alloc_mode,sync_mode) result(ierr)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array5),intent(inout) :: array
    complex(c_double_complex),intent(in),target,dimension(:,:,:,:,:) :: data_host 
    integer(c_int),dimension(5),intent(in),optional :: lbounds
    type(c_ptr),intent(in) :: stream
    type(c_ptr),intent(in),optional :: data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),optional :: alloc_mode 
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode 
    !
    integer(kind(hipSuccess)) :: ierr
    !
    integer(c_int),dimension(5) :: opt_lbounds
    type(c_ptr) :: opt_data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)) :: opt_alloc_mode 
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    !
    opt_lbounds    = 1
    opt_data_dev   = c_null_ptr
    opt_alloc_mode = gpufort_array_wrap_host_alloc_device
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )    opt_lbounds    = lbounds             
    if ( present(data_dev) )   opt_data_dev   = data_dev              
    if ( present(alloc_mode) ) opt_alloc_mode = alloc_mode 
    if ( present(sync_mode) )  opt_sync_mode  = sync_mode 
    ierr = gpufort_array5_init_async(&
      array,&
      int(2*c_double_complex, c_int),&
      c_loc(data_host),opt_data_dev,&
      shape(data_host), opt_lbounds,&
      stream,opt_alloc_mode, opt_sync_mode)
  end function
  function gpufort_array5_init_host(&
      array,&
      bytes_per_element,&
      sizes,lbounds,&
      alloc_mode,sync_mode) result(ierr)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array5),intent(inout) :: array
    integer(c_int),dimension(5),intent(in) :: sizes
    integer(c_int),dimension(5),intent(in),optional :: lbounds
    integer(c_int),intent(in) :: bytes_per_element
    integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),optional :: alloc_mode 
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode 
    !
    integer(kind(hipSuccess)) :: ierr
    !
    integer(c_int),dimension(5) :: opt_lbounds
    integer(kind(gpufort_array_wrap_host_wrap_device)) :: opt_alloc_mode 
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    !
    opt_lbounds    = 1
    opt_alloc_mode = gpufort_array_alloc_host_alloc_device ! allocate both by default
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )    opt_lbounds    = lbounds             
    if ( present(alloc_mode) ) opt_alloc_mode = alloc_mode 
    if ( present(sync_mode) )  opt_sync_mode  = sync_mode 
    ierr = gpufort_array5_init(&
      array,&
      bytes_per_element,&
      c_null_ptr,c_null_ptr, &
      sizes, opt_lbounds,&
      opt_alloc_mode, opt_sync_mode )
  end function
  function gpufort_array5_init_c_bool(&
      array,&
      data_host,lbounds,&
      data_dev,alloc_mode,sync_mode) result(ierr)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array5),intent(inout) :: array
    logical(c_bool),intent(in),target,dimension(:,:,:,:,:) :: data_host 
    integer(c_int),dimension(5),intent(in),optional :: lbounds
    type(c_ptr),intent(in),optional :: data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),optional :: alloc_mode 
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode 
    !
    integer(kind(hipSuccess)) :: ierr
    !
    integer(c_int),dimension(5) :: opt_lbounds
    type(c_ptr) :: opt_data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)) :: opt_alloc_mode 
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    !
    opt_lbounds    = 1
    opt_data_dev   = c_null_ptr
    opt_alloc_mode = gpufort_array_wrap_host_alloc_device
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )    opt_lbounds    = lbounds             
    if ( present(data_dev) )   opt_data_dev   = data_dev              
    if ( present(alloc_mode) ) opt_alloc_mode = alloc_mode 
    if ( present(sync_mode) )  opt_sync_mode  = sync_mode 
    ierr = gpufort_array5_init(&
      array,&
      int(c_bool, c_int),&
      c_loc(data_host),opt_data_dev,&
      shape(data_host), opt_lbounds,&
      opt_alloc_mode, opt_sync_mode)
  end function
  function gpufort_array5_init_c_short(&
      array,&
      data_host,lbounds,&
      data_dev,alloc_mode,sync_mode) result(ierr)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array5),intent(inout) :: array
    integer(c_short),intent(in),target,dimension(:,:,:,:,:) :: data_host 
    integer(c_int),dimension(5),intent(in),optional :: lbounds
    type(c_ptr),intent(in),optional :: data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),optional :: alloc_mode 
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode 
    !
    integer(kind(hipSuccess)) :: ierr
    !
    integer(c_int),dimension(5) :: opt_lbounds
    type(c_ptr) :: opt_data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)) :: opt_alloc_mode 
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    !
    opt_lbounds    = 1
    opt_data_dev   = c_null_ptr
    opt_alloc_mode = gpufort_array_wrap_host_alloc_device
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )    opt_lbounds    = lbounds             
    if ( present(data_dev) )   opt_data_dev   = data_dev              
    if ( present(alloc_mode) ) opt_alloc_mode = alloc_mode 
    if ( present(sync_mode) )  opt_sync_mode  = sync_mode 
    ierr = gpufort_array5_init(&
      array,&
      int(c_short, c_int),&
      c_loc(data_host),opt_data_dev,&
      shape(data_host), opt_lbounds,&
      opt_alloc_mode, opt_sync_mode)
  end function
  function gpufort_array5_init_c_int(&
      array,&
      data_host,lbounds,&
      data_dev,alloc_mode,sync_mode) result(ierr)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array5),intent(inout) :: array
    integer(c_int),intent(in),target,dimension(:,:,:,:,:) :: data_host 
    integer(c_int),dimension(5),intent(in),optional :: lbounds
    type(c_ptr),intent(in),optional :: data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),optional :: alloc_mode 
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode 
    !
    integer(kind(hipSuccess)) :: ierr
    !
    integer(c_int),dimension(5) :: opt_lbounds
    type(c_ptr) :: opt_data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)) :: opt_alloc_mode 
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    !
    opt_lbounds    = 1
    opt_data_dev   = c_null_ptr
    opt_alloc_mode = gpufort_array_wrap_host_alloc_device
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )    opt_lbounds    = lbounds             
    if ( present(data_dev) )   opt_data_dev   = data_dev              
    if ( present(alloc_mode) ) opt_alloc_mode = alloc_mode 
    if ( present(sync_mode) )  opt_sync_mode  = sync_mode 
    ierr = gpufort_array5_init(&
      array,&
      int(c_int, c_int),&
      c_loc(data_host),opt_data_dev,&
      shape(data_host), opt_lbounds,&
      opt_alloc_mode, opt_sync_mode)
  end function
  function gpufort_array5_init_c_long(&
      array,&
      data_host,lbounds,&
      data_dev,alloc_mode,sync_mode) result(ierr)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array5),intent(inout) :: array
    integer(c_long),intent(in),target,dimension(:,:,:,:,:) :: data_host 
    integer(c_int),dimension(5),intent(in),optional :: lbounds
    type(c_ptr),intent(in),optional :: data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),optional :: alloc_mode 
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode 
    !
    integer(kind(hipSuccess)) :: ierr
    !
    integer(c_int),dimension(5) :: opt_lbounds
    type(c_ptr) :: opt_data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)) :: opt_alloc_mode 
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    !
    opt_lbounds    = 1
    opt_data_dev   = c_null_ptr
    opt_alloc_mode = gpufort_array_wrap_host_alloc_device
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )    opt_lbounds    = lbounds             
    if ( present(data_dev) )   opt_data_dev   = data_dev              
    if ( present(alloc_mode) ) opt_alloc_mode = alloc_mode 
    if ( present(sync_mode) )  opt_sync_mode  = sync_mode 
    ierr = gpufort_array5_init(&
      array,&
      int(c_long, c_int),&
      c_loc(data_host),opt_data_dev,&
      shape(data_host), opt_lbounds,&
      opt_alloc_mode, opt_sync_mode)
  end function
  function gpufort_array5_init_c_float(&
      array,&
      data_host,lbounds,&
      data_dev,alloc_mode,sync_mode) result(ierr)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array5),intent(inout) :: array
    real(c_float),intent(in),target,dimension(:,:,:,:,:) :: data_host 
    integer(c_int),dimension(5),intent(in),optional :: lbounds
    type(c_ptr),intent(in),optional :: data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),optional :: alloc_mode 
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode 
    !
    integer(kind(hipSuccess)) :: ierr
    !
    integer(c_int),dimension(5) :: opt_lbounds
    type(c_ptr) :: opt_data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)) :: opt_alloc_mode 
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    !
    opt_lbounds    = 1
    opt_data_dev   = c_null_ptr
    opt_alloc_mode = gpufort_array_wrap_host_alloc_device
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )    opt_lbounds    = lbounds             
    if ( present(data_dev) )   opt_data_dev   = data_dev              
    if ( present(alloc_mode) ) opt_alloc_mode = alloc_mode 
    if ( present(sync_mode) )  opt_sync_mode  = sync_mode 
    ierr = gpufort_array5_init(&
      array,&
      int(c_float, c_int),&
      c_loc(data_host),opt_data_dev,&
      shape(data_host), opt_lbounds,&
      opt_alloc_mode, opt_sync_mode)
  end function
  function gpufort_array5_init_c_double(&
      array,&
      data_host,lbounds,&
      data_dev,alloc_mode,sync_mode) result(ierr)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array5),intent(inout) :: array
    real(c_double),intent(in),target,dimension(:,:,:,:,:) :: data_host 
    integer(c_int),dimension(5),intent(in),optional :: lbounds
    type(c_ptr),intent(in),optional :: data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),optional :: alloc_mode 
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode 
    !
    integer(kind(hipSuccess)) :: ierr
    !
    integer(c_int),dimension(5) :: opt_lbounds
    type(c_ptr) :: opt_data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)) :: opt_alloc_mode 
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    !
    opt_lbounds    = 1
    opt_data_dev   = c_null_ptr
    opt_alloc_mode = gpufort_array_wrap_host_alloc_device
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )    opt_lbounds    = lbounds             
    if ( present(data_dev) )   opt_data_dev   = data_dev              
    if ( present(alloc_mode) ) opt_alloc_mode = alloc_mode 
    if ( present(sync_mode) )  opt_sync_mode  = sync_mode 
    ierr = gpufort_array5_init(&
      array,&
      int(c_double, c_int),&
      c_loc(data_host),opt_data_dev,&
      shape(data_host), opt_lbounds,&
      opt_alloc_mode, opt_sync_mode)
  end function
  function gpufort_array5_init_c_float_complex(&
      array,&
      data_host,lbounds,&
      data_dev,alloc_mode,sync_mode) result(ierr)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array5),intent(inout) :: array
    complex(c_float_complex),intent(in),target,dimension(:,:,:,:,:) :: data_host 
    integer(c_int),dimension(5),intent(in),optional :: lbounds
    type(c_ptr),intent(in),optional :: data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),optional :: alloc_mode 
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode 
    !
    integer(kind(hipSuccess)) :: ierr
    !
    integer(c_int),dimension(5) :: opt_lbounds
    type(c_ptr) :: opt_data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)) :: opt_alloc_mode 
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    !
    opt_lbounds    = 1
    opt_data_dev   = c_null_ptr
    opt_alloc_mode = gpufort_array_wrap_host_alloc_device
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )    opt_lbounds    = lbounds             
    if ( present(data_dev) )   opt_data_dev   = data_dev              
    if ( present(alloc_mode) ) opt_alloc_mode = alloc_mode 
    if ( present(sync_mode) )  opt_sync_mode  = sync_mode 
    ierr = gpufort_array5_init(&
      array,&
      int(2*c_float_complex, c_int),&
      c_loc(data_host),opt_data_dev,&
      shape(data_host), opt_lbounds,&
      opt_alloc_mode, opt_sync_mode)
  end function
  function gpufort_array5_init_c_double_complex(&
      array,&
      data_host,lbounds,&
      data_dev,alloc_mode,sync_mode) result(ierr)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array5),intent(inout) :: array
    complex(c_double_complex),intent(in),target,dimension(:,:,:,:,:) :: data_host 
    integer(c_int),dimension(5),intent(in),optional :: lbounds
    type(c_ptr),intent(in),optional :: data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),optional :: alloc_mode 
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode 
    !
    integer(kind(hipSuccess)) :: ierr
    !
    integer(c_int),dimension(5) :: opt_lbounds
    type(c_ptr) :: opt_data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)) :: opt_alloc_mode 
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    !
    opt_lbounds    = 1
    opt_data_dev   = c_null_ptr
    opt_alloc_mode = gpufort_array_wrap_host_alloc_device
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )    opt_lbounds    = lbounds             
    if ( present(data_dev) )   opt_data_dev   = data_dev              
    if ( present(alloc_mode) ) opt_alloc_mode = alloc_mode 
    if ( present(sync_mode) )  opt_sync_mode  = sync_mode 
    ierr = gpufort_array5_init(&
      array,&
      int(2*c_double_complex, c_int),&
      c_loc(data_host),opt_data_dev,&
      shape(data_host), opt_lbounds,&
      opt_alloc_mode, opt_sync_mode)
  end function
  function gpufort_array6_init_async_host(&
      array,&
      bytes_per_element,&
      sizes,lbounds,&
      stream,alloc_mode,sync_mode) result(ierr)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array6),intent(inout) :: array
    integer(c_int),dimension(6),intent(in) :: sizes
    integer(c_int),dimension(6),intent(in),optional :: lbounds
    type(c_ptr),intent(in) :: stream
    integer(c_int),intent(in) :: bytes_per_element
    integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),optional :: alloc_mode 
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode 
    !
    integer(kind(hipSuccess)) :: ierr
    !
    integer(c_int),dimension(6) :: opt_lbounds
    integer(kind(gpufort_array_wrap_host_wrap_device)) :: opt_alloc_mode 
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    !
    opt_lbounds    = 1
    opt_alloc_mode = gpufort_array_alloc_host_alloc_device ! allocate both by default
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )    opt_lbounds    = lbounds             
    if ( present(alloc_mode) ) opt_alloc_mode = alloc_mode 
    if ( present(sync_mode) )  opt_sync_mode  = sync_mode 
    ierr = gpufort_array6_init_async(&
      array,&
      bytes_per_element,&
      c_null_ptr,c_null_ptr, &
      sizes, opt_lbounds,&
      stream,opt_alloc_mode, opt_sync_mode )
  end function
  function gpufort_array6_init_async_c_bool(&
      array,&
      data_host,lbounds,&
      stream,data_dev,alloc_mode,sync_mode) result(ierr)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array6),intent(inout) :: array
    logical(c_bool),intent(in),target,dimension(:,:,:,:,:,:) :: data_host 
    integer(c_int),dimension(6),intent(in),optional :: lbounds
    type(c_ptr),intent(in) :: stream
    type(c_ptr),intent(in),optional :: data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),optional :: alloc_mode 
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode 
    !
    integer(kind(hipSuccess)) :: ierr
    !
    integer(c_int),dimension(6) :: opt_lbounds
    type(c_ptr) :: opt_data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)) :: opt_alloc_mode 
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    !
    opt_lbounds    = 1
    opt_data_dev   = c_null_ptr
    opt_alloc_mode = gpufort_array_wrap_host_alloc_device
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )    opt_lbounds    = lbounds             
    if ( present(data_dev) )   opt_data_dev   = data_dev              
    if ( present(alloc_mode) ) opt_alloc_mode = alloc_mode 
    if ( present(sync_mode) )  opt_sync_mode  = sync_mode 
    ierr = gpufort_array6_init_async(&
      array,&
      int(c_bool, c_int),&
      c_loc(data_host),opt_data_dev,&
      shape(data_host), opt_lbounds,&
      stream,opt_alloc_mode, opt_sync_mode)
  end function
  function gpufort_array6_init_async_c_short(&
      array,&
      data_host,lbounds,&
      stream,data_dev,alloc_mode,sync_mode) result(ierr)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array6),intent(inout) :: array
    integer(c_short),intent(in),target,dimension(:,:,:,:,:,:) :: data_host 
    integer(c_int),dimension(6),intent(in),optional :: lbounds
    type(c_ptr),intent(in) :: stream
    type(c_ptr),intent(in),optional :: data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),optional :: alloc_mode 
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode 
    !
    integer(kind(hipSuccess)) :: ierr
    !
    integer(c_int),dimension(6) :: opt_lbounds
    type(c_ptr) :: opt_data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)) :: opt_alloc_mode 
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    !
    opt_lbounds    = 1
    opt_data_dev   = c_null_ptr
    opt_alloc_mode = gpufort_array_wrap_host_alloc_device
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )    opt_lbounds    = lbounds             
    if ( present(data_dev) )   opt_data_dev   = data_dev              
    if ( present(alloc_mode) ) opt_alloc_mode = alloc_mode 
    if ( present(sync_mode) )  opt_sync_mode  = sync_mode 
    ierr = gpufort_array6_init_async(&
      array,&
      int(c_short, c_int),&
      c_loc(data_host),opt_data_dev,&
      shape(data_host), opt_lbounds,&
      stream,opt_alloc_mode, opt_sync_mode)
  end function
  function gpufort_array6_init_async_c_int(&
      array,&
      data_host,lbounds,&
      stream,data_dev,alloc_mode,sync_mode) result(ierr)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array6),intent(inout) :: array
    integer(c_int),intent(in),target,dimension(:,:,:,:,:,:) :: data_host 
    integer(c_int),dimension(6),intent(in),optional :: lbounds
    type(c_ptr),intent(in) :: stream
    type(c_ptr),intent(in),optional :: data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),optional :: alloc_mode 
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode 
    !
    integer(kind(hipSuccess)) :: ierr
    !
    integer(c_int),dimension(6) :: opt_lbounds
    type(c_ptr) :: opt_data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)) :: opt_alloc_mode 
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    !
    opt_lbounds    = 1
    opt_data_dev   = c_null_ptr
    opt_alloc_mode = gpufort_array_wrap_host_alloc_device
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )    opt_lbounds    = lbounds             
    if ( present(data_dev) )   opt_data_dev   = data_dev              
    if ( present(alloc_mode) ) opt_alloc_mode = alloc_mode 
    if ( present(sync_mode) )  opt_sync_mode  = sync_mode 
    ierr = gpufort_array6_init_async(&
      array,&
      int(c_int, c_int),&
      c_loc(data_host),opt_data_dev,&
      shape(data_host), opt_lbounds,&
      stream,opt_alloc_mode, opt_sync_mode)
  end function
  function gpufort_array6_init_async_c_long(&
      array,&
      data_host,lbounds,&
      stream,data_dev,alloc_mode,sync_mode) result(ierr)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array6),intent(inout) :: array
    integer(c_long),intent(in),target,dimension(:,:,:,:,:,:) :: data_host 
    integer(c_int),dimension(6),intent(in),optional :: lbounds
    type(c_ptr),intent(in) :: stream
    type(c_ptr),intent(in),optional :: data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),optional :: alloc_mode 
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode 
    !
    integer(kind(hipSuccess)) :: ierr
    !
    integer(c_int),dimension(6) :: opt_lbounds
    type(c_ptr) :: opt_data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)) :: opt_alloc_mode 
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    !
    opt_lbounds    = 1
    opt_data_dev   = c_null_ptr
    opt_alloc_mode = gpufort_array_wrap_host_alloc_device
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )    opt_lbounds    = lbounds             
    if ( present(data_dev) )   opt_data_dev   = data_dev              
    if ( present(alloc_mode) ) opt_alloc_mode = alloc_mode 
    if ( present(sync_mode) )  opt_sync_mode  = sync_mode 
    ierr = gpufort_array6_init_async(&
      array,&
      int(c_long, c_int),&
      c_loc(data_host),opt_data_dev,&
      shape(data_host), opt_lbounds,&
      stream,opt_alloc_mode, opt_sync_mode)
  end function
  function gpufort_array6_init_async_c_float(&
      array,&
      data_host,lbounds,&
      stream,data_dev,alloc_mode,sync_mode) result(ierr)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array6),intent(inout) :: array
    real(c_float),intent(in),target,dimension(:,:,:,:,:,:) :: data_host 
    integer(c_int),dimension(6),intent(in),optional :: lbounds
    type(c_ptr),intent(in) :: stream
    type(c_ptr),intent(in),optional :: data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),optional :: alloc_mode 
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode 
    !
    integer(kind(hipSuccess)) :: ierr
    !
    integer(c_int),dimension(6) :: opt_lbounds
    type(c_ptr) :: opt_data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)) :: opt_alloc_mode 
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    !
    opt_lbounds    = 1
    opt_data_dev   = c_null_ptr
    opt_alloc_mode = gpufort_array_wrap_host_alloc_device
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )    opt_lbounds    = lbounds             
    if ( present(data_dev) )   opt_data_dev   = data_dev              
    if ( present(alloc_mode) ) opt_alloc_mode = alloc_mode 
    if ( present(sync_mode) )  opt_sync_mode  = sync_mode 
    ierr = gpufort_array6_init_async(&
      array,&
      int(c_float, c_int),&
      c_loc(data_host),opt_data_dev,&
      shape(data_host), opt_lbounds,&
      stream,opt_alloc_mode, opt_sync_mode)
  end function
  function gpufort_array6_init_async_c_double(&
      array,&
      data_host,lbounds,&
      stream,data_dev,alloc_mode,sync_mode) result(ierr)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array6),intent(inout) :: array
    real(c_double),intent(in),target,dimension(:,:,:,:,:,:) :: data_host 
    integer(c_int),dimension(6),intent(in),optional :: lbounds
    type(c_ptr),intent(in) :: stream
    type(c_ptr),intent(in),optional :: data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),optional :: alloc_mode 
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode 
    !
    integer(kind(hipSuccess)) :: ierr
    !
    integer(c_int),dimension(6) :: opt_lbounds
    type(c_ptr) :: opt_data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)) :: opt_alloc_mode 
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    !
    opt_lbounds    = 1
    opt_data_dev   = c_null_ptr
    opt_alloc_mode = gpufort_array_wrap_host_alloc_device
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )    opt_lbounds    = lbounds             
    if ( present(data_dev) )   opt_data_dev   = data_dev              
    if ( present(alloc_mode) ) opt_alloc_mode = alloc_mode 
    if ( present(sync_mode) )  opt_sync_mode  = sync_mode 
    ierr = gpufort_array6_init_async(&
      array,&
      int(c_double, c_int),&
      c_loc(data_host),opt_data_dev,&
      shape(data_host), opt_lbounds,&
      stream,opt_alloc_mode, opt_sync_mode)
  end function
  function gpufort_array6_init_async_c_float_complex(&
      array,&
      data_host,lbounds,&
      stream,data_dev,alloc_mode,sync_mode) result(ierr)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array6),intent(inout) :: array
    complex(c_float_complex),intent(in),target,dimension(:,:,:,:,:,:) :: data_host 
    integer(c_int),dimension(6),intent(in),optional :: lbounds
    type(c_ptr),intent(in) :: stream
    type(c_ptr),intent(in),optional :: data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),optional :: alloc_mode 
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode 
    !
    integer(kind(hipSuccess)) :: ierr
    !
    integer(c_int),dimension(6) :: opt_lbounds
    type(c_ptr) :: opt_data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)) :: opt_alloc_mode 
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    !
    opt_lbounds    = 1
    opt_data_dev   = c_null_ptr
    opt_alloc_mode = gpufort_array_wrap_host_alloc_device
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )    opt_lbounds    = lbounds             
    if ( present(data_dev) )   opt_data_dev   = data_dev              
    if ( present(alloc_mode) ) opt_alloc_mode = alloc_mode 
    if ( present(sync_mode) )  opt_sync_mode  = sync_mode 
    ierr = gpufort_array6_init_async(&
      array,&
      int(2*c_float_complex, c_int),&
      c_loc(data_host),opt_data_dev,&
      shape(data_host), opt_lbounds,&
      stream,opt_alloc_mode, opt_sync_mode)
  end function
  function gpufort_array6_init_async_c_double_complex(&
      array,&
      data_host,lbounds,&
      stream,data_dev,alloc_mode,sync_mode) result(ierr)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array6),intent(inout) :: array
    complex(c_double_complex),intent(in),target,dimension(:,:,:,:,:,:) :: data_host 
    integer(c_int),dimension(6),intent(in),optional :: lbounds
    type(c_ptr),intent(in) :: stream
    type(c_ptr),intent(in),optional :: data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),optional :: alloc_mode 
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode 
    !
    integer(kind(hipSuccess)) :: ierr
    !
    integer(c_int),dimension(6) :: opt_lbounds
    type(c_ptr) :: opt_data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)) :: opt_alloc_mode 
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    !
    opt_lbounds    = 1
    opt_data_dev   = c_null_ptr
    opt_alloc_mode = gpufort_array_wrap_host_alloc_device
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )    opt_lbounds    = lbounds             
    if ( present(data_dev) )   opt_data_dev   = data_dev              
    if ( present(alloc_mode) ) opt_alloc_mode = alloc_mode 
    if ( present(sync_mode) )  opt_sync_mode  = sync_mode 
    ierr = gpufort_array6_init_async(&
      array,&
      int(2*c_double_complex, c_int),&
      c_loc(data_host),opt_data_dev,&
      shape(data_host), opt_lbounds,&
      stream,opt_alloc_mode, opt_sync_mode)
  end function
  function gpufort_array6_init_host(&
      array,&
      bytes_per_element,&
      sizes,lbounds,&
      alloc_mode,sync_mode) result(ierr)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array6),intent(inout) :: array
    integer(c_int),dimension(6),intent(in) :: sizes
    integer(c_int),dimension(6),intent(in),optional :: lbounds
    integer(c_int),intent(in) :: bytes_per_element
    integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),optional :: alloc_mode 
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode 
    !
    integer(kind(hipSuccess)) :: ierr
    !
    integer(c_int),dimension(6) :: opt_lbounds
    integer(kind(gpufort_array_wrap_host_wrap_device)) :: opt_alloc_mode 
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    !
    opt_lbounds    = 1
    opt_alloc_mode = gpufort_array_alloc_host_alloc_device ! allocate both by default
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )    opt_lbounds    = lbounds             
    if ( present(alloc_mode) ) opt_alloc_mode = alloc_mode 
    if ( present(sync_mode) )  opt_sync_mode  = sync_mode 
    ierr = gpufort_array6_init(&
      array,&
      bytes_per_element,&
      c_null_ptr,c_null_ptr, &
      sizes, opt_lbounds,&
      opt_alloc_mode, opt_sync_mode )
  end function
  function gpufort_array6_init_c_bool(&
      array,&
      data_host,lbounds,&
      data_dev,alloc_mode,sync_mode) result(ierr)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array6),intent(inout) :: array
    logical(c_bool),intent(in),target,dimension(:,:,:,:,:,:) :: data_host 
    integer(c_int),dimension(6),intent(in),optional :: lbounds
    type(c_ptr),intent(in),optional :: data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),optional :: alloc_mode 
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode 
    !
    integer(kind(hipSuccess)) :: ierr
    !
    integer(c_int),dimension(6) :: opt_lbounds
    type(c_ptr) :: opt_data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)) :: opt_alloc_mode 
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    !
    opt_lbounds    = 1
    opt_data_dev   = c_null_ptr
    opt_alloc_mode = gpufort_array_wrap_host_alloc_device
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )    opt_lbounds    = lbounds             
    if ( present(data_dev) )   opt_data_dev   = data_dev              
    if ( present(alloc_mode) ) opt_alloc_mode = alloc_mode 
    if ( present(sync_mode) )  opt_sync_mode  = sync_mode 
    ierr = gpufort_array6_init(&
      array,&
      int(c_bool, c_int),&
      c_loc(data_host),opt_data_dev,&
      shape(data_host), opt_lbounds,&
      opt_alloc_mode, opt_sync_mode)
  end function
  function gpufort_array6_init_c_short(&
      array,&
      data_host,lbounds,&
      data_dev,alloc_mode,sync_mode) result(ierr)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array6),intent(inout) :: array
    integer(c_short),intent(in),target,dimension(:,:,:,:,:,:) :: data_host 
    integer(c_int),dimension(6),intent(in),optional :: lbounds
    type(c_ptr),intent(in),optional :: data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),optional :: alloc_mode 
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode 
    !
    integer(kind(hipSuccess)) :: ierr
    !
    integer(c_int),dimension(6) :: opt_lbounds
    type(c_ptr) :: opt_data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)) :: opt_alloc_mode 
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    !
    opt_lbounds    = 1
    opt_data_dev   = c_null_ptr
    opt_alloc_mode = gpufort_array_wrap_host_alloc_device
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )    opt_lbounds    = lbounds             
    if ( present(data_dev) )   opt_data_dev   = data_dev              
    if ( present(alloc_mode) ) opt_alloc_mode = alloc_mode 
    if ( present(sync_mode) )  opt_sync_mode  = sync_mode 
    ierr = gpufort_array6_init(&
      array,&
      int(c_short, c_int),&
      c_loc(data_host),opt_data_dev,&
      shape(data_host), opt_lbounds,&
      opt_alloc_mode, opt_sync_mode)
  end function
  function gpufort_array6_init_c_int(&
      array,&
      data_host,lbounds,&
      data_dev,alloc_mode,sync_mode) result(ierr)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array6),intent(inout) :: array
    integer(c_int),intent(in),target,dimension(:,:,:,:,:,:) :: data_host 
    integer(c_int),dimension(6),intent(in),optional :: lbounds
    type(c_ptr),intent(in),optional :: data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),optional :: alloc_mode 
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode 
    !
    integer(kind(hipSuccess)) :: ierr
    !
    integer(c_int),dimension(6) :: opt_lbounds
    type(c_ptr) :: opt_data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)) :: opt_alloc_mode 
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    !
    opt_lbounds    = 1
    opt_data_dev   = c_null_ptr
    opt_alloc_mode = gpufort_array_wrap_host_alloc_device
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )    opt_lbounds    = lbounds             
    if ( present(data_dev) )   opt_data_dev   = data_dev              
    if ( present(alloc_mode) ) opt_alloc_mode = alloc_mode 
    if ( present(sync_mode) )  opt_sync_mode  = sync_mode 
    ierr = gpufort_array6_init(&
      array,&
      int(c_int, c_int),&
      c_loc(data_host),opt_data_dev,&
      shape(data_host), opt_lbounds,&
      opt_alloc_mode, opt_sync_mode)
  end function
  function gpufort_array6_init_c_long(&
      array,&
      data_host,lbounds,&
      data_dev,alloc_mode,sync_mode) result(ierr)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array6),intent(inout) :: array
    integer(c_long),intent(in),target,dimension(:,:,:,:,:,:) :: data_host 
    integer(c_int),dimension(6),intent(in),optional :: lbounds
    type(c_ptr),intent(in),optional :: data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),optional :: alloc_mode 
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode 
    !
    integer(kind(hipSuccess)) :: ierr
    !
    integer(c_int),dimension(6) :: opt_lbounds
    type(c_ptr) :: opt_data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)) :: opt_alloc_mode 
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    !
    opt_lbounds    = 1
    opt_data_dev   = c_null_ptr
    opt_alloc_mode = gpufort_array_wrap_host_alloc_device
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )    opt_lbounds    = lbounds             
    if ( present(data_dev) )   opt_data_dev   = data_dev              
    if ( present(alloc_mode) ) opt_alloc_mode = alloc_mode 
    if ( present(sync_mode) )  opt_sync_mode  = sync_mode 
    ierr = gpufort_array6_init(&
      array,&
      int(c_long, c_int),&
      c_loc(data_host),opt_data_dev,&
      shape(data_host), opt_lbounds,&
      opt_alloc_mode, opt_sync_mode)
  end function
  function gpufort_array6_init_c_float(&
      array,&
      data_host,lbounds,&
      data_dev,alloc_mode,sync_mode) result(ierr)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array6),intent(inout) :: array
    real(c_float),intent(in),target,dimension(:,:,:,:,:,:) :: data_host 
    integer(c_int),dimension(6),intent(in),optional :: lbounds
    type(c_ptr),intent(in),optional :: data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),optional :: alloc_mode 
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode 
    !
    integer(kind(hipSuccess)) :: ierr
    !
    integer(c_int),dimension(6) :: opt_lbounds
    type(c_ptr) :: opt_data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)) :: opt_alloc_mode 
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    !
    opt_lbounds    = 1
    opt_data_dev   = c_null_ptr
    opt_alloc_mode = gpufort_array_wrap_host_alloc_device
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )    opt_lbounds    = lbounds             
    if ( present(data_dev) )   opt_data_dev   = data_dev              
    if ( present(alloc_mode) ) opt_alloc_mode = alloc_mode 
    if ( present(sync_mode) )  opt_sync_mode  = sync_mode 
    ierr = gpufort_array6_init(&
      array,&
      int(c_float, c_int),&
      c_loc(data_host),opt_data_dev,&
      shape(data_host), opt_lbounds,&
      opt_alloc_mode, opt_sync_mode)
  end function
  function gpufort_array6_init_c_double(&
      array,&
      data_host,lbounds,&
      data_dev,alloc_mode,sync_mode) result(ierr)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array6),intent(inout) :: array
    real(c_double),intent(in),target,dimension(:,:,:,:,:,:) :: data_host 
    integer(c_int),dimension(6),intent(in),optional :: lbounds
    type(c_ptr),intent(in),optional :: data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),optional :: alloc_mode 
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode 
    !
    integer(kind(hipSuccess)) :: ierr
    !
    integer(c_int),dimension(6) :: opt_lbounds
    type(c_ptr) :: opt_data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)) :: opt_alloc_mode 
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    !
    opt_lbounds    = 1
    opt_data_dev   = c_null_ptr
    opt_alloc_mode = gpufort_array_wrap_host_alloc_device
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )    opt_lbounds    = lbounds             
    if ( present(data_dev) )   opt_data_dev   = data_dev              
    if ( present(alloc_mode) ) opt_alloc_mode = alloc_mode 
    if ( present(sync_mode) )  opt_sync_mode  = sync_mode 
    ierr = gpufort_array6_init(&
      array,&
      int(c_double, c_int),&
      c_loc(data_host),opt_data_dev,&
      shape(data_host), opt_lbounds,&
      opt_alloc_mode, opt_sync_mode)
  end function
  function gpufort_array6_init_c_float_complex(&
      array,&
      data_host,lbounds,&
      data_dev,alloc_mode,sync_mode) result(ierr)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array6),intent(inout) :: array
    complex(c_float_complex),intent(in),target,dimension(:,:,:,:,:,:) :: data_host 
    integer(c_int),dimension(6),intent(in),optional :: lbounds
    type(c_ptr),intent(in),optional :: data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),optional :: alloc_mode 
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode 
    !
    integer(kind(hipSuccess)) :: ierr
    !
    integer(c_int),dimension(6) :: opt_lbounds
    type(c_ptr) :: opt_data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)) :: opt_alloc_mode 
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    !
    opt_lbounds    = 1
    opt_data_dev   = c_null_ptr
    opt_alloc_mode = gpufort_array_wrap_host_alloc_device
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )    opt_lbounds    = lbounds             
    if ( present(data_dev) )   opt_data_dev   = data_dev              
    if ( present(alloc_mode) ) opt_alloc_mode = alloc_mode 
    if ( present(sync_mode) )  opt_sync_mode  = sync_mode 
    ierr = gpufort_array6_init(&
      array,&
      int(2*c_float_complex, c_int),&
      c_loc(data_host),opt_data_dev,&
      shape(data_host), opt_lbounds,&
      opt_alloc_mode, opt_sync_mode)
  end function
  function gpufort_array6_init_c_double_complex(&
      array,&
      data_host,lbounds,&
      data_dev,alloc_mode,sync_mode) result(ierr)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array6),intent(inout) :: array
    complex(c_double_complex),intent(in),target,dimension(:,:,:,:,:,:) :: data_host 
    integer(c_int),dimension(6),intent(in),optional :: lbounds
    type(c_ptr),intent(in),optional :: data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),optional :: alloc_mode 
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode 
    !
    integer(kind(hipSuccess)) :: ierr
    !
    integer(c_int),dimension(6) :: opt_lbounds
    type(c_ptr) :: opt_data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)) :: opt_alloc_mode 
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    !
    opt_lbounds    = 1
    opt_data_dev   = c_null_ptr
    opt_alloc_mode = gpufort_array_wrap_host_alloc_device
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )    opt_lbounds    = lbounds             
    if ( present(data_dev) )   opt_data_dev   = data_dev              
    if ( present(alloc_mode) ) opt_alloc_mode = alloc_mode 
    if ( present(sync_mode) )  opt_sync_mode  = sync_mode 
    ierr = gpufort_array6_init(&
      array,&
      int(2*c_double_complex, c_int),&
      c_loc(data_host),opt_data_dev,&
      shape(data_host), opt_lbounds,&
      opt_alloc_mode, opt_sync_mode)
  end function
  function gpufort_array7_init_async_host(&
      array,&
      bytes_per_element,&
      sizes,lbounds,&
      stream,alloc_mode,sync_mode) result(ierr)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array7),intent(inout) :: array
    integer(c_int),dimension(7),intent(in) :: sizes
    integer(c_int),dimension(7),intent(in),optional :: lbounds
    type(c_ptr),intent(in) :: stream
    integer(c_int),intent(in) :: bytes_per_element
    integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),optional :: alloc_mode 
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode 
    !
    integer(kind(hipSuccess)) :: ierr
    !
    integer(c_int),dimension(7) :: opt_lbounds
    integer(kind(gpufort_array_wrap_host_wrap_device)) :: opt_alloc_mode 
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    !
    opt_lbounds    = 1
    opt_alloc_mode = gpufort_array_alloc_host_alloc_device ! allocate both by default
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )    opt_lbounds    = lbounds             
    if ( present(alloc_mode) ) opt_alloc_mode = alloc_mode 
    if ( present(sync_mode) )  opt_sync_mode  = sync_mode 
    ierr = gpufort_array7_init_async(&
      array,&
      bytes_per_element,&
      c_null_ptr,c_null_ptr, &
      sizes, opt_lbounds,&
      stream,opt_alloc_mode, opt_sync_mode )
  end function
  function gpufort_array7_init_async_c_bool(&
      array,&
      data_host,lbounds,&
      stream,data_dev,alloc_mode,sync_mode) result(ierr)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array7),intent(inout) :: array
    logical(c_bool),intent(in),target,dimension(:,:,:,:,:,:,:) :: data_host 
    integer(c_int),dimension(7),intent(in),optional :: lbounds
    type(c_ptr),intent(in) :: stream
    type(c_ptr),intent(in),optional :: data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),optional :: alloc_mode 
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode 
    !
    integer(kind(hipSuccess)) :: ierr
    !
    integer(c_int),dimension(7) :: opt_lbounds
    type(c_ptr) :: opt_data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)) :: opt_alloc_mode 
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    !
    opt_lbounds    = 1
    opt_data_dev   = c_null_ptr
    opt_alloc_mode = gpufort_array_wrap_host_alloc_device
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )    opt_lbounds    = lbounds             
    if ( present(data_dev) )   opt_data_dev   = data_dev              
    if ( present(alloc_mode) ) opt_alloc_mode = alloc_mode 
    if ( present(sync_mode) )  opt_sync_mode  = sync_mode 
    ierr = gpufort_array7_init_async(&
      array,&
      int(c_bool, c_int),&
      c_loc(data_host),opt_data_dev,&
      shape(data_host), opt_lbounds,&
      stream,opt_alloc_mode, opt_sync_mode)
  end function
  function gpufort_array7_init_async_c_short(&
      array,&
      data_host,lbounds,&
      stream,data_dev,alloc_mode,sync_mode) result(ierr)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array7),intent(inout) :: array
    integer(c_short),intent(in),target,dimension(:,:,:,:,:,:,:) :: data_host 
    integer(c_int),dimension(7),intent(in),optional :: lbounds
    type(c_ptr),intent(in) :: stream
    type(c_ptr),intent(in),optional :: data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),optional :: alloc_mode 
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode 
    !
    integer(kind(hipSuccess)) :: ierr
    !
    integer(c_int),dimension(7) :: opt_lbounds
    type(c_ptr) :: opt_data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)) :: opt_alloc_mode 
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    !
    opt_lbounds    = 1
    opt_data_dev   = c_null_ptr
    opt_alloc_mode = gpufort_array_wrap_host_alloc_device
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )    opt_lbounds    = lbounds             
    if ( present(data_dev) )   opt_data_dev   = data_dev              
    if ( present(alloc_mode) ) opt_alloc_mode = alloc_mode 
    if ( present(sync_mode) )  opt_sync_mode  = sync_mode 
    ierr = gpufort_array7_init_async(&
      array,&
      int(c_short, c_int),&
      c_loc(data_host),opt_data_dev,&
      shape(data_host), opt_lbounds,&
      stream,opt_alloc_mode, opt_sync_mode)
  end function
  function gpufort_array7_init_async_c_int(&
      array,&
      data_host,lbounds,&
      stream,data_dev,alloc_mode,sync_mode) result(ierr)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array7),intent(inout) :: array
    integer(c_int),intent(in),target,dimension(:,:,:,:,:,:,:) :: data_host 
    integer(c_int),dimension(7),intent(in),optional :: lbounds
    type(c_ptr),intent(in) :: stream
    type(c_ptr),intent(in),optional :: data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),optional :: alloc_mode 
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode 
    !
    integer(kind(hipSuccess)) :: ierr
    !
    integer(c_int),dimension(7) :: opt_lbounds
    type(c_ptr) :: opt_data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)) :: opt_alloc_mode 
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    !
    opt_lbounds    = 1
    opt_data_dev   = c_null_ptr
    opt_alloc_mode = gpufort_array_wrap_host_alloc_device
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )    opt_lbounds    = lbounds             
    if ( present(data_dev) )   opt_data_dev   = data_dev              
    if ( present(alloc_mode) ) opt_alloc_mode = alloc_mode 
    if ( present(sync_mode) )  opt_sync_mode  = sync_mode 
    ierr = gpufort_array7_init_async(&
      array,&
      int(c_int, c_int),&
      c_loc(data_host),opt_data_dev,&
      shape(data_host), opt_lbounds,&
      stream,opt_alloc_mode, opt_sync_mode)
  end function
  function gpufort_array7_init_async_c_long(&
      array,&
      data_host,lbounds,&
      stream,data_dev,alloc_mode,sync_mode) result(ierr)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array7),intent(inout) :: array
    integer(c_long),intent(in),target,dimension(:,:,:,:,:,:,:) :: data_host 
    integer(c_int),dimension(7),intent(in),optional :: lbounds
    type(c_ptr),intent(in) :: stream
    type(c_ptr),intent(in),optional :: data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),optional :: alloc_mode 
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode 
    !
    integer(kind(hipSuccess)) :: ierr
    !
    integer(c_int),dimension(7) :: opt_lbounds
    type(c_ptr) :: opt_data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)) :: opt_alloc_mode 
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    !
    opt_lbounds    = 1
    opt_data_dev   = c_null_ptr
    opt_alloc_mode = gpufort_array_wrap_host_alloc_device
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )    opt_lbounds    = lbounds             
    if ( present(data_dev) )   opt_data_dev   = data_dev              
    if ( present(alloc_mode) ) opt_alloc_mode = alloc_mode 
    if ( present(sync_mode) )  opt_sync_mode  = sync_mode 
    ierr = gpufort_array7_init_async(&
      array,&
      int(c_long, c_int),&
      c_loc(data_host),opt_data_dev,&
      shape(data_host), opt_lbounds,&
      stream,opt_alloc_mode, opt_sync_mode)
  end function
  function gpufort_array7_init_async_c_float(&
      array,&
      data_host,lbounds,&
      stream,data_dev,alloc_mode,sync_mode) result(ierr)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array7),intent(inout) :: array
    real(c_float),intent(in),target,dimension(:,:,:,:,:,:,:) :: data_host 
    integer(c_int),dimension(7),intent(in),optional :: lbounds
    type(c_ptr),intent(in) :: stream
    type(c_ptr),intent(in),optional :: data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),optional :: alloc_mode 
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode 
    !
    integer(kind(hipSuccess)) :: ierr
    !
    integer(c_int),dimension(7) :: opt_lbounds
    type(c_ptr) :: opt_data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)) :: opt_alloc_mode 
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    !
    opt_lbounds    = 1
    opt_data_dev   = c_null_ptr
    opt_alloc_mode = gpufort_array_wrap_host_alloc_device
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )    opt_lbounds    = lbounds             
    if ( present(data_dev) )   opt_data_dev   = data_dev              
    if ( present(alloc_mode) ) opt_alloc_mode = alloc_mode 
    if ( present(sync_mode) )  opt_sync_mode  = sync_mode 
    ierr = gpufort_array7_init_async(&
      array,&
      int(c_float, c_int),&
      c_loc(data_host),opt_data_dev,&
      shape(data_host), opt_lbounds,&
      stream,opt_alloc_mode, opt_sync_mode)
  end function
  function gpufort_array7_init_async_c_double(&
      array,&
      data_host,lbounds,&
      stream,data_dev,alloc_mode,sync_mode) result(ierr)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array7),intent(inout) :: array
    real(c_double),intent(in),target,dimension(:,:,:,:,:,:,:) :: data_host 
    integer(c_int),dimension(7),intent(in),optional :: lbounds
    type(c_ptr),intent(in) :: stream
    type(c_ptr),intent(in),optional :: data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),optional :: alloc_mode 
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode 
    !
    integer(kind(hipSuccess)) :: ierr
    !
    integer(c_int),dimension(7) :: opt_lbounds
    type(c_ptr) :: opt_data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)) :: opt_alloc_mode 
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    !
    opt_lbounds    = 1
    opt_data_dev   = c_null_ptr
    opt_alloc_mode = gpufort_array_wrap_host_alloc_device
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )    opt_lbounds    = lbounds             
    if ( present(data_dev) )   opt_data_dev   = data_dev              
    if ( present(alloc_mode) ) opt_alloc_mode = alloc_mode 
    if ( present(sync_mode) )  opt_sync_mode  = sync_mode 
    ierr = gpufort_array7_init_async(&
      array,&
      int(c_double, c_int),&
      c_loc(data_host),opt_data_dev,&
      shape(data_host), opt_lbounds,&
      stream,opt_alloc_mode, opt_sync_mode)
  end function
  function gpufort_array7_init_async_c_float_complex(&
      array,&
      data_host,lbounds,&
      stream,data_dev,alloc_mode,sync_mode) result(ierr)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array7),intent(inout) :: array
    complex(c_float_complex),intent(in),target,dimension(:,:,:,:,:,:,:) :: data_host 
    integer(c_int),dimension(7),intent(in),optional :: lbounds
    type(c_ptr),intent(in) :: stream
    type(c_ptr),intent(in),optional :: data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),optional :: alloc_mode 
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode 
    !
    integer(kind(hipSuccess)) :: ierr
    !
    integer(c_int),dimension(7) :: opt_lbounds
    type(c_ptr) :: opt_data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)) :: opt_alloc_mode 
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    !
    opt_lbounds    = 1
    opt_data_dev   = c_null_ptr
    opt_alloc_mode = gpufort_array_wrap_host_alloc_device
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )    opt_lbounds    = lbounds             
    if ( present(data_dev) )   opt_data_dev   = data_dev              
    if ( present(alloc_mode) ) opt_alloc_mode = alloc_mode 
    if ( present(sync_mode) )  opt_sync_mode  = sync_mode 
    ierr = gpufort_array7_init_async(&
      array,&
      int(2*c_float_complex, c_int),&
      c_loc(data_host),opt_data_dev,&
      shape(data_host), opt_lbounds,&
      stream,opt_alloc_mode, opt_sync_mode)
  end function
  function gpufort_array7_init_async_c_double_complex(&
      array,&
      data_host,lbounds,&
      stream,data_dev,alloc_mode,sync_mode) result(ierr)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array7),intent(inout) :: array
    complex(c_double_complex),intent(in),target,dimension(:,:,:,:,:,:,:) :: data_host 
    integer(c_int),dimension(7),intent(in),optional :: lbounds
    type(c_ptr),intent(in) :: stream
    type(c_ptr),intent(in),optional :: data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),optional :: alloc_mode 
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode 
    !
    integer(kind(hipSuccess)) :: ierr
    !
    integer(c_int),dimension(7) :: opt_lbounds
    type(c_ptr) :: opt_data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)) :: opt_alloc_mode 
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    !
    opt_lbounds    = 1
    opt_data_dev   = c_null_ptr
    opt_alloc_mode = gpufort_array_wrap_host_alloc_device
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )    opt_lbounds    = lbounds             
    if ( present(data_dev) )   opt_data_dev   = data_dev              
    if ( present(alloc_mode) ) opt_alloc_mode = alloc_mode 
    if ( present(sync_mode) )  opt_sync_mode  = sync_mode 
    ierr = gpufort_array7_init_async(&
      array,&
      int(2*c_double_complex, c_int),&
      c_loc(data_host),opt_data_dev,&
      shape(data_host), opt_lbounds,&
      stream,opt_alloc_mode, opt_sync_mode)
  end function
  function gpufort_array7_init_host(&
      array,&
      bytes_per_element,&
      sizes,lbounds,&
      alloc_mode,sync_mode) result(ierr)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array7),intent(inout) :: array
    integer(c_int),dimension(7),intent(in) :: sizes
    integer(c_int),dimension(7),intent(in),optional :: lbounds
    integer(c_int),intent(in) :: bytes_per_element
    integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),optional :: alloc_mode 
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode 
    !
    integer(kind(hipSuccess)) :: ierr
    !
    integer(c_int),dimension(7) :: opt_lbounds
    integer(kind(gpufort_array_wrap_host_wrap_device)) :: opt_alloc_mode 
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    !
    opt_lbounds    = 1
    opt_alloc_mode = gpufort_array_alloc_host_alloc_device ! allocate both by default
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )    opt_lbounds    = lbounds             
    if ( present(alloc_mode) ) opt_alloc_mode = alloc_mode 
    if ( present(sync_mode) )  opt_sync_mode  = sync_mode 
    ierr = gpufort_array7_init(&
      array,&
      bytes_per_element,&
      c_null_ptr,c_null_ptr, &
      sizes, opt_lbounds,&
      opt_alloc_mode, opt_sync_mode )
  end function
  function gpufort_array7_init_c_bool(&
      array,&
      data_host,lbounds,&
      data_dev,alloc_mode,sync_mode) result(ierr)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array7),intent(inout) :: array
    logical(c_bool),intent(in),target,dimension(:,:,:,:,:,:,:) :: data_host 
    integer(c_int),dimension(7),intent(in),optional :: lbounds
    type(c_ptr),intent(in),optional :: data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),optional :: alloc_mode 
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode 
    !
    integer(kind(hipSuccess)) :: ierr
    !
    integer(c_int),dimension(7) :: opt_lbounds
    type(c_ptr) :: opt_data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)) :: opt_alloc_mode 
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    !
    opt_lbounds    = 1
    opt_data_dev   = c_null_ptr
    opt_alloc_mode = gpufort_array_wrap_host_alloc_device
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )    opt_lbounds    = lbounds             
    if ( present(data_dev) )   opt_data_dev   = data_dev              
    if ( present(alloc_mode) ) opt_alloc_mode = alloc_mode 
    if ( present(sync_mode) )  opt_sync_mode  = sync_mode 
    ierr = gpufort_array7_init(&
      array,&
      int(c_bool, c_int),&
      c_loc(data_host),opt_data_dev,&
      shape(data_host), opt_lbounds,&
      opt_alloc_mode, opt_sync_mode)
  end function
  function gpufort_array7_init_c_short(&
      array,&
      data_host,lbounds,&
      data_dev,alloc_mode,sync_mode) result(ierr)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array7),intent(inout) :: array
    integer(c_short),intent(in),target,dimension(:,:,:,:,:,:,:) :: data_host 
    integer(c_int),dimension(7),intent(in),optional :: lbounds
    type(c_ptr),intent(in),optional :: data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),optional :: alloc_mode 
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode 
    !
    integer(kind(hipSuccess)) :: ierr
    !
    integer(c_int),dimension(7) :: opt_lbounds
    type(c_ptr) :: opt_data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)) :: opt_alloc_mode 
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    !
    opt_lbounds    = 1
    opt_data_dev   = c_null_ptr
    opt_alloc_mode = gpufort_array_wrap_host_alloc_device
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )    opt_lbounds    = lbounds             
    if ( present(data_dev) )   opt_data_dev   = data_dev              
    if ( present(alloc_mode) ) opt_alloc_mode = alloc_mode 
    if ( present(sync_mode) )  opt_sync_mode  = sync_mode 
    ierr = gpufort_array7_init(&
      array,&
      int(c_short, c_int),&
      c_loc(data_host),opt_data_dev,&
      shape(data_host), opt_lbounds,&
      opt_alloc_mode, opt_sync_mode)
  end function
  function gpufort_array7_init_c_int(&
      array,&
      data_host,lbounds,&
      data_dev,alloc_mode,sync_mode) result(ierr)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array7),intent(inout) :: array
    integer(c_int),intent(in),target,dimension(:,:,:,:,:,:,:) :: data_host 
    integer(c_int),dimension(7),intent(in),optional :: lbounds
    type(c_ptr),intent(in),optional :: data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),optional :: alloc_mode 
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode 
    !
    integer(kind(hipSuccess)) :: ierr
    !
    integer(c_int),dimension(7) :: opt_lbounds
    type(c_ptr) :: opt_data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)) :: opt_alloc_mode 
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    !
    opt_lbounds    = 1
    opt_data_dev   = c_null_ptr
    opt_alloc_mode = gpufort_array_wrap_host_alloc_device
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )    opt_lbounds    = lbounds             
    if ( present(data_dev) )   opt_data_dev   = data_dev              
    if ( present(alloc_mode) ) opt_alloc_mode = alloc_mode 
    if ( present(sync_mode) )  opt_sync_mode  = sync_mode 
    ierr = gpufort_array7_init(&
      array,&
      int(c_int, c_int),&
      c_loc(data_host),opt_data_dev,&
      shape(data_host), opt_lbounds,&
      opt_alloc_mode, opt_sync_mode)
  end function
  function gpufort_array7_init_c_long(&
      array,&
      data_host,lbounds,&
      data_dev,alloc_mode,sync_mode) result(ierr)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array7),intent(inout) :: array
    integer(c_long),intent(in),target,dimension(:,:,:,:,:,:,:) :: data_host 
    integer(c_int),dimension(7),intent(in),optional :: lbounds
    type(c_ptr),intent(in),optional :: data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),optional :: alloc_mode 
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode 
    !
    integer(kind(hipSuccess)) :: ierr
    !
    integer(c_int),dimension(7) :: opt_lbounds
    type(c_ptr) :: opt_data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)) :: opt_alloc_mode 
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    !
    opt_lbounds    = 1
    opt_data_dev   = c_null_ptr
    opt_alloc_mode = gpufort_array_wrap_host_alloc_device
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )    opt_lbounds    = lbounds             
    if ( present(data_dev) )   opt_data_dev   = data_dev              
    if ( present(alloc_mode) ) opt_alloc_mode = alloc_mode 
    if ( present(sync_mode) )  opt_sync_mode  = sync_mode 
    ierr = gpufort_array7_init(&
      array,&
      int(c_long, c_int),&
      c_loc(data_host),opt_data_dev,&
      shape(data_host), opt_lbounds,&
      opt_alloc_mode, opt_sync_mode)
  end function
  function gpufort_array7_init_c_float(&
      array,&
      data_host,lbounds,&
      data_dev,alloc_mode,sync_mode) result(ierr)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array7),intent(inout) :: array
    real(c_float),intent(in),target,dimension(:,:,:,:,:,:,:) :: data_host 
    integer(c_int),dimension(7),intent(in),optional :: lbounds
    type(c_ptr),intent(in),optional :: data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),optional :: alloc_mode 
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode 
    !
    integer(kind(hipSuccess)) :: ierr
    !
    integer(c_int),dimension(7) :: opt_lbounds
    type(c_ptr) :: opt_data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)) :: opt_alloc_mode 
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    !
    opt_lbounds    = 1
    opt_data_dev   = c_null_ptr
    opt_alloc_mode = gpufort_array_wrap_host_alloc_device
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )    opt_lbounds    = lbounds             
    if ( present(data_dev) )   opt_data_dev   = data_dev              
    if ( present(alloc_mode) ) opt_alloc_mode = alloc_mode 
    if ( present(sync_mode) )  opt_sync_mode  = sync_mode 
    ierr = gpufort_array7_init(&
      array,&
      int(c_float, c_int),&
      c_loc(data_host),opt_data_dev,&
      shape(data_host), opt_lbounds,&
      opt_alloc_mode, opt_sync_mode)
  end function
  function gpufort_array7_init_c_double(&
      array,&
      data_host,lbounds,&
      data_dev,alloc_mode,sync_mode) result(ierr)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array7),intent(inout) :: array
    real(c_double),intent(in),target,dimension(:,:,:,:,:,:,:) :: data_host 
    integer(c_int),dimension(7),intent(in),optional :: lbounds
    type(c_ptr),intent(in),optional :: data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),optional :: alloc_mode 
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode 
    !
    integer(kind(hipSuccess)) :: ierr
    !
    integer(c_int),dimension(7) :: opt_lbounds
    type(c_ptr) :: opt_data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)) :: opt_alloc_mode 
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    !
    opt_lbounds    = 1
    opt_data_dev   = c_null_ptr
    opt_alloc_mode = gpufort_array_wrap_host_alloc_device
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )    opt_lbounds    = lbounds             
    if ( present(data_dev) )   opt_data_dev   = data_dev              
    if ( present(alloc_mode) ) opt_alloc_mode = alloc_mode 
    if ( present(sync_mode) )  opt_sync_mode  = sync_mode 
    ierr = gpufort_array7_init(&
      array,&
      int(c_double, c_int),&
      c_loc(data_host),opt_data_dev,&
      shape(data_host), opt_lbounds,&
      opt_alloc_mode, opt_sync_mode)
  end function
  function gpufort_array7_init_c_float_complex(&
      array,&
      data_host,lbounds,&
      data_dev,alloc_mode,sync_mode) result(ierr)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array7),intent(inout) :: array
    complex(c_float_complex),intent(in),target,dimension(:,:,:,:,:,:,:) :: data_host 
    integer(c_int),dimension(7),intent(in),optional :: lbounds
    type(c_ptr),intent(in),optional :: data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),optional :: alloc_mode 
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode 
    !
    integer(kind(hipSuccess)) :: ierr
    !
    integer(c_int),dimension(7) :: opt_lbounds
    type(c_ptr) :: opt_data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)) :: opt_alloc_mode 
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    !
    opt_lbounds    = 1
    opt_data_dev   = c_null_ptr
    opt_alloc_mode = gpufort_array_wrap_host_alloc_device
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )    opt_lbounds    = lbounds             
    if ( present(data_dev) )   opt_data_dev   = data_dev              
    if ( present(alloc_mode) ) opt_alloc_mode = alloc_mode 
    if ( present(sync_mode) )  opt_sync_mode  = sync_mode 
    ierr = gpufort_array7_init(&
      array,&
      int(2*c_float_complex, c_int),&
      c_loc(data_host),opt_data_dev,&
      shape(data_host), opt_lbounds,&
      opt_alloc_mode, opt_sync_mode)
  end function
  function gpufort_array7_init_c_double_complex(&
      array,&
      data_host,lbounds,&
      data_dev,alloc_mode,sync_mode) result(ierr)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array7),intent(inout) :: array
    complex(c_double_complex),intent(in),target,dimension(:,:,:,:,:,:,:) :: data_host 
    integer(c_int),dimension(7),intent(in),optional :: lbounds
    type(c_ptr),intent(in),optional :: data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)),intent(in),optional :: alloc_mode 
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode 
    !
    integer(kind(hipSuccess)) :: ierr
    !
    integer(c_int),dimension(7) :: opt_lbounds
    type(c_ptr) :: opt_data_dev
    integer(kind(gpufort_array_wrap_host_wrap_device)) :: opt_alloc_mode 
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    !
    opt_lbounds    = 1
    opt_data_dev   = c_null_ptr
    opt_alloc_mode = gpufort_array_wrap_host_alloc_device
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )    opt_lbounds    = lbounds             
    if ( present(data_dev) )   opt_data_dev   = data_dev              
    if ( present(alloc_mode) ) opt_alloc_mode = alloc_mode 
    if ( present(sync_mode) )  opt_sync_mode  = sync_mode 
    ierr = gpufort_array7_init(&
      array,&
      int(2*c_double_complex, c_int),&
      c_loc(data_host),opt_data_dev,&
      shape(data_host), opt_lbounds,&
      opt_alloc_mode, opt_sync_mode)
  end function

   
  function gpufort_array1_wrap_async_c_bool(&
      data_host,data_dev,lbounds,&
      stream,sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    logical(c_bool),intent(in),target,dimension(:) :: data_host 
    logical(c_bool),intent(in),target,dimension(:) :: data_dev 
    integer(c_int),dimension(1),intent(in),optional :: lbounds 
    type(c_ptr),intent(in) :: stream
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array1) :: array
    !
    integer(c_int),dimension(1) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array1_init_async(&
      array,&
      int(c_bool, c_int),&
      c_loc(data_host),c_loc(data_dev),&
      shape(data_host), opt_lbounds ,stream,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
  function gpufort_array1_wrap_c_bool(&
      data_host,data_dev,lbounds,&
      sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    logical(c_bool),intent(in),target,dimension(:) :: data_host 
    logical(c_bool),intent(in),target,dimension(:) :: data_dev 
    integer(c_int),dimension(1),intent(in),optional :: lbounds
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array1) :: array
    !
    integer(c_int),dimension(1) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array1_init(&
      array,&
      int(c_bool, c_int),&
      c_loc(data_host),c_loc(data_dev),&
      shape(data_host), opt_lbounds ,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
   
  function gpufort_array1_wrap_async_c_bool_cptr(&
      data_host,data_dev,lbounds,&
      stream,sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    logical(c_bool),intent(in),target,dimension(:) :: data_host 
    type(c_ptr),intent(in) :: data_dev
    integer(c_int),dimension(1),intent(in),optional :: lbounds 
    type(c_ptr),intent(in) :: stream
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array1) :: array
    !
    integer(c_int),dimension(1) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array1_init_async(&
      array,&
      int(c_bool, c_int),&
      c_loc(data_host),data_dev,&
      shape(data_host), opt_lbounds ,stream,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
  function gpufort_array1_wrap_c_bool_cptr(&
      data_host,data_dev,lbounds,&
      sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    logical(c_bool),intent(in),target,dimension(:) :: data_host 
    type(c_ptr),intent(in) :: data_dev
    integer(c_int),dimension(1),intent(in),optional :: lbounds
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array1) :: array
    !
    integer(c_int),dimension(1) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array1_init(&
      array,&
      int(c_bool, c_int),&
      c_loc(data_host),data_dev,&
      shape(data_host), opt_lbounds ,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
   
  function gpufort_array1_wrap_async_c_short(&
      data_host,data_dev,lbounds,&
      stream,sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    integer(c_short),intent(in),target,dimension(:) :: data_host 
    integer(c_short),intent(in),target,dimension(:) :: data_dev 
    integer(c_int),dimension(1),intent(in),optional :: lbounds 
    type(c_ptr),intent(in) :: stream
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array1) :: array
    !
    integer(c_int),dimension(1) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array1_init_async(&
      array,&
      int(c_short, c_int),&
      c_loc(data_host),c_loc(data_dev),&
      shape(data_host), opt_lbounds ,stream,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
  function gpufort_array1_wrap_c_short(&
      data_host,data_dev,lbounds,&
      sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    integer(c_short),intent(in),target,dimension(:) :: data_host 
    integer(c_short),intent(in),target,dimension(:) :: data_dev 
    integer(c_int),dimension(1),intent(in),optional :: lbounds
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array1) :: array
    !
    integer(c_int),dimension(1) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array1_init(&
      array,&
      int(c_short, c_int),&
      c_loc(data_host),c_loc(data_dev),&
      shape(data_host), opt_lbounds ,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
   
  function gpufort_array1_wrap_async_c_short_cptr(&
      data_host,data_dev,lbounds,&
      stream,sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    integer(c_short),intent(in),target,dimension(:) :: data_host 
    type(c_ptr),intent(in) :: data_dev
    integer(c_int),dimension(1),intent(in),optional :: lbounds 
    type(c_ptr),intent(in) :: stream
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array1) :: array
    !
    integer(c_int),dimension(1) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array1_init_async(&
      array,&
      int(c_short, c_int),&
      c_loc(data_host),data_dev,&
      shape(data_host), opt_lbounds ,stream,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
  function gpufort_array1_wrap_c_short_cptr(&
      data_host,data_dev,lbounds,&
      sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    integer(c_short),intent(in),target,dimension(:) :: data_host 
    type(c_ptr),intent(in) :: data_dev
    integer(c_int),dimension(1),intent(in),optional :: lbounds
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array1) :: array
    !
    integer(c_int),dimension(1) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array1_init(&
      array,&
      int(c_short, c_int),&
      c_loc(data_host),data_dev,&
      shape(data_host), opt_lbounds ,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
   
  function gpufort_array1_wrap_async_c_int(&
      data_host,data_dev,lbounds,&
      stream,sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    integer(c_int),intent(in),target,dimension(:) :: data_host 
    integer(c_int),intent(in),target,dimension(:) :: data_dev 
    integer(c_int),dimension(1),intent(in),optional :: lbounds 
    type(c_ptr),intent(in) :: stream
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array1) :: array
    !
    integer(c_int),dimension(1) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array1_init_async(&
      array,&
      int(c_int, c_int),&
      c_loc(data_host),c_loc(data_dev),&
      shape(data_host), opt_lbounds ,stream,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
  function gpufort_array1_wrap_c_int(&
      data_host,data_dev,lbounds,&
      sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    integer(c_int),intent(in),target,dimension(:) :: data_host 
    integer(c_int),intent(in),target,dimension(:) :: data_dev 
    integer(c_int),dimension(1),intent(in),optional :: lbounds
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array1) :: array
    !
    integer(c_int),dimension(1) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array1_init(&
      array,&
      int(c_int, c_int),&
      c_loc(data_host),c_loc(data_dev),&
      shape(data_host), opt_lbounds ,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
   
  function gpufort_array1_wrap_async_c_int_cptr(&
      data_host,data_dev,lbounds,&
      stream,sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    integer(c_int),intent(in),target,dimension(:) :: data_host 
    type(c_ptr),intent(in) :: data_dev
    integer(c_int),dimension(1),intent(in),optional :: lbounds 
    type(c_ptr),intent(in) :: stream
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array1) :: array
    !
    integer(c_int),dimension(1) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array1_init_async(&
      array,&
      int(c_int, c_int),&
      c_loc(data_host),data_dev,&
      shape(data_host), opt_lbounds ,stream,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
  function gpufort_array1_wrap_c_int_cptr(&
      data_host,data_dev,lbounds,&
      sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    integer(c_int),intent(in),target,dimension(:) :: data_host 
    type(c_ptr),intent(in) :: data_dev
    integer(c_int),dimension(1),intent(in),optional :: lbounds
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array1) :: array
    !
    integer(c_int),dimension(1) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array1_init(&
      array,&
      int(c_int, c_int),&
      c_loc(data_host),data_dev,&
      shape(data_host), opt_lbounds ,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
   
  function gpufort_array1_wrap_async_c_long(&
      data_host,data_dev,lbounds,&
      stream,sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    integer(c_long),intent(in),target,dimension(:) :: data_host 
    integer(c_long),intent(in),target,dimension(:) :: data_dev 
    integer(c_int),dimension(1),intent(in),optional :: lbounds 
    type(c_ptr),intent(in) :: stream
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array1) :: array
    !
    integer(c_int),dimension(1) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array1_init_async(&
      array,&
      int(c_long, c_int),&
      c_loc(data_host),c_loc(data_dev),&
      shape(data_host), opt_lbounds ,stream,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
  function gpufort_array1_wrap_c_long(&
      data_host,data_dev,lbounds,&
      sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    integer(c_long),intent(in),target,dimension(:) :: data_host 
    integer(c_long),intent(in),target,dimension(:) :: data_dev 
    integer(c_int),dimension(1),intent(in),optional :: lbounds
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array1) :: array
    !
    integer(c_int),dimension(1) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array1_init(&
      array,&
      int(c_long, c_int),&
      c_loc(data_host),c_loc(data_dev),&
      shape(data_host), opt_lbounds ,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
   
  function gpufort_array1_wrap_async_c_long_cptr(&
      data_host,data_dev,lbounds,&
      stream,sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    integer(c_long),intent(in),target,dimension(:) :: data_host 
    type(c_ptr),intent(in) :: data_dev
    integer(c_int),dimension(1),intent(in),optional :: lbounds 
    type(c_ptr),intent(in) :: stream
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array1) :: array
    !
    integer(c_int),dimension(1) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array1_init_async(&
      array,&
      int(c_long, c_int),&
      c_loc(data_host),data_dev,&
      shape(data_host), opt_lbounds ,stream,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
  function gpufort_array1_wrap_c_long_cptr(&
      data_host,data_dev,lbounds,&
      sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    integer(c_long),intent(in),target,dimension(:) :: data_host 
    type(c_ptr),intent(in) :: data_dev
    integer(c_int),dimension(1),intent(in),optional :: lbounds
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array1) :: array
    !
    integer(c_int),dimension(1) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array1_init(&
      array,&
      int(c_long, c_int),&
      c_loc(data_host),data_dev,&
      shape(data_host), opt_lbounds ,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
   
  function gpufort_array1_wrap_async_c_float(&
      data_host,data_dev,lbounds,&
      stream,sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    real(c_float),intent(in),target,dimension(:) :: data_host 
    real(c_float),intent(in),target,dimension(:) :: data_dev 
    integer(c_int),dimension(1),intent(in),optional :: lbounds 
    type(c_ptr),intent(in) :: stream
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array1) :: array
    !
    integer(c_int),dimension(1) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array1_init_async(&
      array,&
      int(c_float, c_int),&
      c_loc(data_host),c_loc(data_dev),&
      shape(data_host), opt_lbounds ,stream,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
  function gpufort_array1_wrap_c_float(&
      data_host,data_dev,lbounds,&
      sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    real(c_float),intent(in),target,dimension(:) :: data_host 
    real(c_float),intent(in),target,dimension(:) :: data_dev 
    integer(c_int),dimension(1),intent(in),optional :: lbounds
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array1) :: array
    !
    integer(c_int),dimension(1) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array1_init(&
      array,&
      int(c_float, c_int),&
      c_loc(data_host),c_loc(data_dev),&
      shape(data_host), opt_lbounds ,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
   
  function gpufort_array1_wrap_async_c_float_cptr(&
      data_host,data_dev,lbounds,&
      stream,sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    real(c_float),intent(in),target,dimension(:) :: data_host 
    type(c_ptr),intent(in) :: data_dev
    integer(c_int),dimension(1),intent(in),optional :: lbounds 
    type(c_ptr),intent(in) :: stream
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array1) :: array
    !
    integer(c_int),dimension(1) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array1_init_async(&
      array,&
      int(c_float, c_int),&
      c_loc(data_host),data_dev,&
      shape(data_host), opt_lbounds ,stream,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
  function gpufort_array1_wrap_c_float_cptr(&
      data_host,data_dev,lbounds,&
      sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    real(c_float),intent(in),target,dimension(:) :: data_host 
    type(c_ptr),intent(in) :: data_dev
    integer(c_int),dimension(1),intent(in),optional :: lbounds
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array1) :: array
    !
    integer(c_int),dimension(1) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array1_init(&
      array,&
      int(c_float, c_int),&
      c_loc(data_host),data_dev,&
      shape(data_host), opt_lbounds ,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
   
  function gpufort_array1_wrap_async_c_double(&
      data_host,data_dev,lbounds,&
      stream,sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    real(c_double),intent(in),target,dimension(:) :: data_host 
    real(c_double),intent(in),target,dimension(:) :: data_dev 
    integer(c_int),dimension(1),intent(in),optional :: lbounds 
    type(c_ptr),intent(in) :: stream
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array1) :: array
    !
    integer(c_int),dimension(1) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array1_init_async(&
      array,&
      int(c_double, c_int),&
      c_loc(data_host),c_loc(data_dev),&
      shape(data_host), opt_lbounds ,stream,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
  function gpufort_array1_wrap_c_double(&
      data_host,data_dev,lbounds,&
      sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    real(c_double),intent(in),target,dimension(:) :: data_host 
    real(c_double),intent(in),target,dimension(:) :: data_dev 
    integer(c_int),dimension(1),intent(in),optional :: lbounds
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array1) :: array
    !
    integer(c_int),dimension(1) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array1_init(&
      array,&
      int(c_double, c_int),&
      c_loc(data_host),c_loc(data_dev),&
      shape(data_host), opt_lbounds ,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
   
  function gpufort_array1_wrap_async_c_double_cptr(&
      data_host,data_dev,lbounds,&
      stream,sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    real(c_double),intent(in),target,dimension(:) :: data_host 
    type(c_ptr),intent(in) :: data_dev
    integer(c_int),dimension(1),intent(in),optional :: lbounds 
    type(c_ptr),intent(in) :: stream
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array1) :: array
    !
    integer(c_int),dimension(1) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array1_init_async(&
      array,&
      int(c_double, c_int),&
      c_loc(data_host),data_dev,&
      shape(data_host), opt_lbounds ,stream,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
  function gpufort_array1_wrap_c_double_cptr(&
      data_host,data_dev,lbounds,&
      sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    real(c_double),intent(in),target,dimension(:) :: data_host 
    type(c_ptr),intent(in) :: data_dev
    integer(c_int),dimension(1),intent(in),optional :: lbounds
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array1) :: array
    !
    integer(c_int),dimension(1) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array1_init(&
      array,&
      int(c_double, c_int),&
      c_loc(data_host),data_dev,&
      shape(data_host), opt_lbounds ,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
   
  function gpufort_array1_wrap_async_c_float_complex(&
      data_host,data_dev,lbounds,&
      stream,sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    complex(c_float_complex),intent(in),target,dimension(:) :: data_host 
    complex(c_float_complex),intent(in),target,dimension(:) :: data_dev 
    integer(c_int),dimension(1),intent(in),optional :: lbounds 
    type(c_ptr),intent(in) :: stream
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array1) :: array
    !
    integer(c_int),dimension(1) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array1_init_async(&
      array,&
      int(2*c_float_complex, c_int),&
      c_loc(data_host),c_loc(data_dev),&
      shape(data_host), opt_lbounds ,stream,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
  function gpufort_array1_wrap_c_float_complex(&
      data_host,data_dev,lbounds,&
      sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    complex(c_float_complex),intent(in),target,dimension(:) :: data_host 
    complex(c_float_complex),intent(in),target,dimension(:) :: data_dev 
    integer(c_int),dimension(1),intent(in),optional :: lbounds
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array1) :: array
    !
    integer(c_int),dimension(1) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array1_init(&
      array,&
      int(2*c_float_complex, c_int),&
      c_loc(data_host),c_loc(data_dev),&
      shape(data_host), opt_lbounds ,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
   
  function gpufort_array1_wrap_async_c_float_complex_cptr(&
      data_host,data_dev,lbounds,&
      stream,sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    complex(c_float_complex),intent(in),target,dimension(:) :: data_host 
    type(c_ptr),intent(in) :: data_dev
    integer(c_int),dimension(1),intent(in),optional :: lbounds 
    type(c_ptr),intent(in) :: stream
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array1) :: array
    !
    integer(c_int),dimension(1) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array1_init_async(&
      array,&
      int(2*c_float_complex, c_int),&
      c_loc(data_host),data_dev,&
      shape(data_host), opt_lbounds ,stream,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
  function gpufort_array1_wrap_c_float_complex_cptr(&
      data_host,data_dev,lbounds,&
      sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    complex(c_float_complex),intent(in),target,dimension(:) :: data_host 
    type(c_ptr),intent(in) :: data_dev
    integer(c_int),dimension(1),intent(in),optional :: lbounds
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array1) :: array
    !
    integer(c_int),dimension(1) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array1_init(&
      array,&
      int(2*c_float_complex, c_int),&
      c_loc(data_host),data_dev,&
      shape(data_host), opt_lbounds ,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
   
  function gpufort_array1_wrap_async_c_double_complex(&
      data_host,data_dev,lbounds,&
      stream,sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    complex(c_double_complex),intent(in),target,dimension(:) :: data_host 
    complex(c_double_complex),intent(in),target,dimension(:) :: data_dev 
    integer(c_int),dimension(1),intent(in),optional :: lbounds 
    type(c_ptr),intent(in) :: stream
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array1) :: array
    !
    integer(c_int),dimension(1) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array1_init_async(&
      array,&
      int(2*c_double_complex, c_int),&
      c_loc(data_host),c_loc(data_dev),&
      shape(data_host), opt_lbounds ,stream,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
  function gpufort_array1_wrap_c_double_complex(&
      data_host,data_dev,lbounds,&
      sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    complex(c_double_complex),intent(in),target,dimension(:) :: data_host 
    complex(c_double_complex),intent(in),target,dimension(:) :: data_dev 
    integer(c_int),dimension(1),intent(in),optional :: lbounds
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array1) :: array
    !
    integer(c_int),dimension(1) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array1_init(&
      array,&
      int(2*c_double_complex, c_int),&
      c_loc(data_host),c_loc(data_dev),&
      shape(data_host), opt_lbounds ,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
   
  function gpufort_array1_wrap_async_c_double_complex_cptr(&
      data_host,data_dev,lbounds,&
      stream,sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    complex(c_double_complex),intent(in),target,dimension(:) :: data_host 
    type(c_ptr),intent(in) :: data_dev
    integer(c_int),dimension(1),intent(in),optional :: lbounds 
    type(c_ptr),intent(in) :: stream
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array1) :: array
    !
    integer(c_int),dimension(1) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array1_init_async(&
      array,&
      int(2*c_double_complex, c_int),&
      c_loc(data_host),data_dev,&
      shape(data_host), opt_lbounds ,stream,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
  function gpufort_array1_wrap_c_double_complex_cptr(&
      data_host,data_dev,lbounds,&
      sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    complex(c_double_complex),intent(in),target,dimension(:) :: data_host 
    type(c_ptr),intent(in) :: data_dev
    integer(c_int),dimension(1),intent(in),optional :: lbounds
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array1) :: array
    !
    integer(c_int),dimension(1) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array1_init(&
      array,&
      int(2*c_double_complex, c_int),&
      c_loc(data_host),data_dev,&
      shape(data_host), opt_lbounds ,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
  function gpufort_array1_wrap_device_cptr(&
      data_dev,sizes,lbounds,bytes_per_element) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(c_ptr),intent(in) :: data_dev 
    integer(c_int),dimension(1),intent(in) :: sizes
    integer(c_int),dimension(1),intent(in),optional :: lbounds
    integer(c_int),intent(in),optional :: bytes_per_element
    !
    type(gpufort_array1) :: array
    !
    integer(c_int),dimension(1) :: opt_lbounds
    integer(c_int) :: opt_bytes_per_element
    !
    integer(kind(hipSuccess)) :: ierr
    !
    opt_lbounds = 1
    opt_bytes_per_element = 1
    if ( present(lbounds) ) opt_lbounds = lbounds             
    if ( present(bytes_per_element) ) opt_bytes_per_element = bytes_per_element             
    ierr = gpufort_array1_init(&
      array,&
      opt_bytes_per_element,&
      c_null_ptr,data_dev,&
      sizes, opt_lbounds,&
      gpufort_array_wrap_host_wrap_device,&
      gpufort_array_sync_none)
  end function
  function gpufort_array1_wrap_device_ptr_c_bool(&
      data_dev,lbounds) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    logical(c_bool),intent(in),pointer,dimension(:) :: data_dev 
    integer(c_int),dimension(1),intent(in),optional :: lbounds
    !
    type(gpufort_array1) :: array
    !
    integer(c_int),dimension(1) :: opt_lbounds
    !
    integer(kind(hipSuccess)) :: ierr
    !
    opt_lbounds    = 1
    if ( present(lbounds) ) opt_lbounds = lbounds             
    ierr = gpufort_array1_init(&
      array,&
      int(c_bool, c_int),&
      c_null_ptr,c_loc(data_dev),&
      shape(data_dev), opt_lbounds,&
      gpufort_array_wrap_host_wrap_device,&
      gpufort_array_sync_none)
  end function
  function gpufort_array1_wrap_device_ptr_c_short(&
      data_dev,lbounds) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    integer(c_short),intent(in),pointer,dimension(:) :: data_dev 
    integer(c_int),dimension(1),intent(in),optional :: lbounds
    !
    type(gpufort_array1) :: array
    !
    integer(c_int),dimension(1) :: opt_lbounds
    !
    integer(kind(hipSuccess)) :: ierr
    !
    opt_lbounds    = 1
    if ( present(lbounds) ) opt_lbounds = lbounds             
    ierr = gpufort_array1_init(&
      array,&
      int(c_short, c_int),&
      c_null_ptr,c_loc(data_dev),&
      shape(data_dev), opt_lbounds,&
      gpufort_array_wrap_host_wrap_device,&
      gpufort_array_sync_none)
  end function
  function gpufort_array1_wrap_device_ptr_c_int(&
      data_dev,lbounds) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    integer(c_int),intent(in),pointer,dimension(:) :: data_dev 
    integer(c_int),dimension(1),intent(in),optional :: lbounds
    !
    type(gpufort_array1) :: array
    !
    integer(c_int),dimension(1) :: opt_lbounds
    !
    integer(kind(hipSuccess)) :: ierr
    !
    opt_lbounds    = 1
    if ( present(lbounds) ) opt_lbounds = lbounds             
    ierr = gpufort_array1_init(&
      array,&
      int(c_int, c_int),&
      c_null_ptr,c_loc(data_dev),&
      shape(data_dev), opt_lbounds,&
      gpufort_array_wrap_host_wrap_device,&
      gpufort_array_sync_none)
  end function
  function gpufort_array1_wrap_device_ptr_c_long(&
      data_dev,lbounds) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    integer(c_long),intent(in),pointer,dimension(:) :: data_dev 
    integer(c_int),dimension(1),intent(in),optional :: lbounds
    !
    type(gpufort_array1) :: array
    !
    integer(c_int),dimension(1) :: opt_lbounds
    !
    integer(kind(hipSuccess)) :: ierr
    !
    opt_lbounds    = 1
    if ( present(lbounds) ) opt_lbounds = lbounds             
    ierr = gpufort_array1_init(&
      array,&
      int(c_long, c_int),&
      c_null_ptr,c_loc(data_dev),&
      shape(data_dev), opt_lbounds,&
      gpufort_array_wrap_host_wrap_device,&
      gpufort_array_sync_none)
  end function
  function gpufort_array1_wrap_device_ptr_c_float(&
      data_dev,lbounds) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    real(c_float),intent(in),pointer,dimension(:) :: data_dev 
    integer(c_int),dimension(1),intent(in),optional :: lbounds
    !
    type(gpufort_array1) :: array
    !
    integer(c_int),dimension(1) :: opt_lbounds
    !
    integer(kind(hipSuccess)) :: ierr
    !
    opt_lbounds    = 1
    if ( present(lbounds) ) opt_lbounds = lbounds             
    ierr = gpufort_array1_init(&
      array,&
      int(c_float, c_int),&
      c_null_ptr,c_loc(data_dev),&
      shape(data_dev), opt_lbounds,&
      gpufort_array_wrap_host_wrap_device,&
      gpufort_array_sync_none)
  end function
  function gpufort_array1_wrap_device_ptr_c_double(&
      data_dev,lbounds) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    real(c_double),intent(in),pointer,dimension(:) :: data_dev 
    integer(c_int),dimension(1),intent(in),optional :: lbounds
    !
    type(gpufort_array1) :: array
    !
    integer(c_int),dimension(1) :: opt_lbounds
    !
    integer(kind(hipSuccess)) :: ierr
    !
    opt_lbounds    = 1
    if ( present(lbounds) ) opt_lbounds = lbounds             
    ierr = gpufort_array1_init(&
      array,&
      int(c_double, c_int),&
      c_null_ptr,c_loc(data_dev),&
      shape(data_dev), opt_lbounds,&
      gpufort_array_wrap_host_wrap_device,&
      gpufort_array_sync_none)
  end function
  function gpufort_array1_wrap_device_ptr_c_float_complex(&
      data_dev,lbounds) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    complex(c_float_complex),intent(in),pointer,dimension(:) :: data_dev 
    integer(c_int),dimension(1),intent(in),optional :: lbounds
    !
    type(gpufort_array1) :: array
    !
    integer(c_int),dimension(1) :: opt_lbounds
    !
    integer(kind(hipSuccess)) :: ierr
    !
    opt_lbounds    = 1
    if ( present(lbounds) ) opt_lbounds = lbounds             
    ierr = gpufort_array1_init(&
      array,&
      int(2*c_float_complex, c_int),&
      c_null_ptr,c_loc(data_dev),&
      shape(data_dev), opt_lbounds,&
      gpufort_array_wrap_host_wrap_device,&
      gpufort_array_sync_none)
  end function
  function gpufort_array1_wrap_device_ptr_c_double_complex(&
      data_dev,lbounds) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    complex(c_double_complex),intent(in),pointer,dimension(:) :: data_dev 
    integer(c_int),dimension(1),intent(in),optional :: lbounds
    !
    type(gpufort_array1) :: array
    !
    integer(c_int),dimension(1) :: opt_lbounds
    !
    integer(kind(hipSuccess)) :: ierr
    !
    opt_lbounds    = 1
    if ( present(lbounds) ) opt_lbounds = lbounds             
    ierr = gpufort_array1_init(&
      array,&
      int(2*c_double_complex, c_int),&
      c_null_ptr,c_loc(data_dev),&
      shape(data_dev), opt_lbounds,&
      gpufort_array_wrap_host_wrap_device,&
      gpufort_array_sync_none)
  end function
   
  function gpufort_array2_wrap_async_c_bool(&
      data_host,data_dev,lbounds,&
      stream,sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    logical(c_bool),intent(in),target,dimension(:,:) :: data_host 
    logical(c_bool),intent(in),target,dimension(:,:) :: data_dev 
    integer(c_int),dimension(2),intent(in),optional :: lbounds 
    type(c_ptr),intent(in) :: stream
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array2) :: array
    !
    integer(c_int),dimension(2) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array2_init_async(&
      array,&
      int(c_bool, c_int),&
      c_loc(data_host),c_loc(data_dev),&
      shape(data_host), opt_lbounds ,stream,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
  function gpufort_array2_wrap_c_bool(&
      data_host,data_dev,lbounds,&
      sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    logical(c_bool),intent(in),target,dimension(:,:) :: data_host 
    logical(c_bool),intent(in),target,dimension(:,:) :: data_dev 
    integer(c_int),dimension(2),intent(in),optional :: lbounds
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array2) :: array
    !
    integer(c_int),dimension(2) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array2_init(&
      array,&
      int(c_bool, c_int),&
      c_loc(data_host),c_loc(data_dev),&
      shape(data_host), opt_lbounds ,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
   
  function gpufort_array2_wrap_async_c_bool_cptr(&
      data_host,data_dev,lbounds,&
      stream,sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    logical(c_bool),intent(in),target,dimension(:,:) :: data_host 
    type(c_ptr),intent(in) :: data_dev
    integer(c_int),dimension(2),intent(in),optional :: lbounds 
    type(c_ptr),intent(in) :: stream
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array2) :: array
    !
    integer(c_int),dimension(2) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array2_init_async(&
      array,&
      int(c_bool, c_int),&
      c_loc(data_host),data_dev,&
      shape(data_host), opt_lbounds ,stream,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
  function gpufort_array2_wrap_c_bool_cptr(&
      data_host,data_dev,lbounds,&
      sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    logical(c_bool),intent(in),target,dimension(:,:) :: data_host 
    type(c_ptr),intent(in) :: data_dev
    integer(c_int),dimension(2),intent(in),optional :: lbounds
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array2) :: array
    !
    integer(c_int),dimension(2) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array2_init(&
      array,&
      int(c_bool, c_int),&
      c_loc(data_host),data_dev,&
      shape(data_host), opt_lbounds ,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
   
  function gpufort_array2_wrap_async_c_short(&
      data_host,data_dev,lbounds,&
      stream,sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    integer(c_short),intent(in),target,dimension(:,:) :: data_host 
    integer(c_short),intent(in),target,dimension(:,:) :: data_dev 
    integer(c_int),dimension(2),intent(in),optional :: lbounds 
    type(c_ptr),intent(in) :: stream
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array2) :: array
    !
    integer(c_int),dimension(2) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array2_init_async(&
      array,&
      int(c_short, c_int),&
      c_loc(data_host),c_loc(data_dev),&
      shape(data_host), opt_lbounds ,stream,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
  function gpufort_array2_wrap_c_short(&
      data_host,data_dev,lbounds,&
      sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    integer(c_short),intent(in),target,dimension(:,:) :: data_host 
    integer(c_short),intent(in),target,dimension(:,:) :: data_dev 
    integer(c_int),dimension(2),intent(in),optional :: lbounds
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array2) :: array
    !
    integer(c_int),dimension(2) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array2_init(&
      array,&
      int(c_short, c_int),&
      c_loc(data_host),c_loc(data_dev),&
      shape(data_host), opt_lbounds ,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
   
  function gpufort_array2_wrap_async_c_short_cptr(&
      data_host,data_dev,lbounds,&
      stream,sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    integer(c_short),intent(in),target,dimension(:,:) :: data_host 
    type(c_ptr),intent(in) :: data_dev
    integer(c_int),dimension(2),intent(in),optional :: lbounds 
    type(c_ptr),intent(in) :: stream
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array2) :: array
    !
    integer(c_int),dimension(2) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array2_init_async(&
      array,&
      int(c_short, c_int),&
      c_loc(data_host),data_dev,&
      shape(data_host), opt_lbounds ,stream,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
  function gpufort_array2_wrap_c_short_cptr(&
      data_host,data_dev,lbounds,&
      sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    integer(c_short),intent(in),target,dimension(:,:) :: data_host 
    type(c_ptr),intent(in) :: data_dev
    integer(c_int),dimension(2),intent(in),optional :: lbounds
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array2) :: array
    !
    integer(c_int),dimension(2) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array2_init(&
      array,&
      int(c_short, c_int),&
      c_loc(data_host),data_dev,&
      shape(data_host), opt_lbounds ,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
   
  function gpufort_array2_wrap_async_c_int(&
      data_host,data_dev,lbounds,&
      stream,sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    integer(c_int),intent(in),target,dimension(:,:) :: data_host 
    integer(c_int),intent(in),target,dimension(:,:) :: data_dev 
    integer(c_int),dimension(2),intent(in),optional :: lbounds 
    type(c_ptr),intent(in) :: stream
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array2) :: array
    !
    integer(c_int),dimension(2) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array2_init_async(&
      array,&
      int(c_int, c_int),&
      c_loc(data_host),c_loc(data_dev),&
      shape(data_host), opt_lbounds ,stream,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
  function gpufort_array2_wrap_c_int(&
      data_host,data_dev,lbounds,&
      sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    integer(c_int),intent(in),target,dimension(:,:) :: data_host 
    integer(c_int),intent(in),target,dimension(:,:) :: data_dev 
    integer(c_int),dimension(2),intent(in),optional :: lbounds
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array2) :: array
    !
    integer(c_int),dimension(2) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array2_init(&
      array,&
      int(c_int, c_int),&
      c_loc(data_host),c_loc(data_dev),&
      shape(data_host), opt_lbounds ,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
   
  function gpufort_array2_wrap_async_c_int_cptr(&
      data_host,data_dev,lbounds,&
      stream,sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    integer(c_int),intent(in),target,dimension(:,:) :: data_host 
    type(c_ptr),intent(in) :: data_dev
    integer(c_int),dimension(2),intent(in),optional :: lbounds 
    type(c_ptr),intent(in) :: stream
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array2) :: array
    !
    integer(c_int),dimension(2) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array2_init_async(&
      array,&
      int(c_int, c_int),&
      c_loc(data_host),data_dev,&
      shape(data_host), opt_lbounds ,stream,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
  function gpufort_array2_wrap_c_int_cptr(&
      data_host,data_dev,lbounds,&
      sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    integer(c_int),intent(in),target,dimension(:,:) :: data_host 
    type(c_ptr),intent(in) :: data_dev
    integer(c_int),dimension(2),intent(in),optional :: lbounds
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array2) :: array
    !
    integer(c_int),dimension(2) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array2_init(&
      array,&
      int(c_int, c_int),&
      c_loc(data_host),data_dev,&
      shape(data_host), opt_lbounds ,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
   
  function gpufort_array2_wrap_async_c_long(&
      data_host,data_dev,lbounds,&
      stream,sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    integer(c_long),intent(in),target,dimension(:,:) :: data_host 
    integer(c_long),intent(in),target,dimension(:,:) :: data_dev 
    integer(c_int),dimension(2),intent(in),optional :: lbounds 
    type(c_ptr),intent(in) :: stream
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array2) :: array
    !
    integer(c_int),dimension(2) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array2_init_async(&
      array,&
      int(c_long, c_int),&
      c_loc(data_host),c_loc(data_dev),&
      shape(data_host), opt_lbounds ,stream,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
  function gpufort_array2_wrap_c_long(&
      data_host,data_dev,lbounds,&
      sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    integer(c_long),intent(in),target,dimension(:,:) :: data_host 
    integer(c_long),intent(in),target,dimension(:,:) :: data_dev 
    integer(c_int),dimension(2),intent(in),optional :: lbounds
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array2) :: array
    !
    integer(c_int),dimension(2) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array2_init(&
      array,&
      int(c_long, c_int),&
      c_loc(data_host),c_loc(data_dev),&
      shape(data_host), opt_lbounds ,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
   
  function gpufort_array2_wrap_async_c_long_cptr(&
      data_host,data_dev,lbounds,&
      stream,sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    integer(c_long),intent(in),target,dimension(:,:) :: data_host 
    type(c_ptr),intent(in) :: data_dev
    integer(c_int),dimension(2),intent(in),optional :: lbounds 
    type(c_ptr),intent(in) :: stream
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array2) :: array
    !
    integer(c_int),dimension(2) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array2_init_async(&
      array,&
      int(c_long, c_int),&
      c_loc(data_host),data_dev,&
      shape(data_host), opt_lbounds ,stream,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
  function gpufort_array2_wrap_c_long_cptr(&
      data_host,data_dev,lbounds,&
      sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    integer(c_long),intent(in),target,dimension(:,:) :: data_host 
    type(c_ptr),intent(in) :: data_dev
    integer(c_int),dimension(2),intent(in),optional :: lbounds
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array2) :: array
    !
    integer(c_int),dimension(2) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array2_init(&
      array,&
      int(c_long, c_int),&
      c_loc(data_host),data_dev,&
      shape(data_host), opt_lbounds ,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
   
  function gpufort_array2_wrap_async_c_float(&
      data_host,data_dev,lbounds,&
      stream,sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    real(c_float),intent(in),target,dimension(:,:) :: data_host 
    real(c_float),intent(in),target,dimension(:,:) :: data_dev 
    integer(c_int),dimension(2),intent(in),optional :: lbounds 
    type(c_ptr),intent(in) :: stream
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array2) :: array
    !
    integer(c_int),dimension(2) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array2_init_async(&
      array,&
      int(c_float, c_int),&
      c_loc(data_host),c_loc(data_dev),&
      shape(data_host), opt_lbounds ,stream,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
  function gpufort_array2_wrap_c_float(&
      data_host,data_dev,lbounds,&
      sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    real(c_float),intent(in),target,dimension(:,:) :: data_host 
    real(c_float),intent(in),target,dimension(:,:) :: data_dev 
    integer(c_int),dimension(2),intent(in),optional :: lbounds
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array2) :: array
    !
    integer(c_int),dimension(2) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array2_init(&
      array,&
      int(c_float, c_int),&
      c_loc(data_host),c_loc(data_dev),&
      shape(data_host), opt_lbounds ,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
   
  function gpufort_array2_wrap_async_c_float_cptr(&
      data_host,data_dev,lbounds,&
      stream,sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    real(c_float),intent(in),target,dimension(:,:) :: data_host 
    type(c_ptr),intent(in) :: data_dev
    integer(c_int),dimension(2),intent(in),optional :: lbounds 
    type(c_ptr),intent(in) :: stream
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array2) :: array
    !
    integer(c_int),dimension(2) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array2_init_async(&
      array,&
      int(c_float, c_int),&
      c_loc(data_host),data_dev,&
      shape(data_host), opt_lbounds ,stream,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
  function gpufort_array2_wrap_c_float_cptr(&
      data_host,data_dev,lbounds,&
      sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    real(c_float),intent(in),target,dimension(:,:) :: data_host 
    type(c_ptr),intent(in) :: data_dev
    integer(c_int),dimension(2),intent(in),optional :: lbounds
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array2) :: array
    !
    integer(c_int),dimension(2) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array2_init(&
      array,&
      int(c_float, c_int),&
      c_loc(data_host),data_dev,&
      shape(data_host), opt_lbounds ,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
   
  function gpufort_array2_wrap_async_c_double(&
      data_host,data_dev,lbounds,&
      stream,sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    real(c_double),intent(in),target,dimension(:,:) :: data_host 
    real(c_double),intent(in),target,dimension(:,:) :: data_dev 
    integer(c_int),dimension(2),intent(in),optional :: lbounds 
    type(c_ptr),intent(in) :: stream
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array2) :: array
    !
    integer(c_int),dimension(2) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array2_init_async(&
      array,&
      int(c_double, c_int),&
      c_loc(data_host),c_loc(data_dev),&
      shape(data_host), opt_lbounds ,stream,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
  function gpufort_array2_wrap_c_double(&
      data_host,data_dev,lbounds,&
      sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    real(c_double),intent(in),target,dimension(:,:) :: data_host 
    real(c_double),intent(in),target,dimension(:,:) :: data_dev 
    integer(c_int),dimension(2),intent(in),optional :: lbounds
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array2) :: array
    !
    integer(c_int),dimension(2) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array2_init(&
      array,&
      int(c_double, c_int),&
      c_loc(data_host),c_loc(data_dev),&
      shape(data_host), opt_lbounds ,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
   
  function gpufort_array2_wrap_async_c_double_cptr(&
      data_host,data_dev,lbounds,&
      stream,sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    real(c_double),intent(in),target,dimension(:,:) :: data_host 
    type(c_ptr),intent(in) :: data_dev
    integer(c_int),dimension(2),intent(in),optional :: lbounds 
    type(c_ptr),intent(in) :: stream
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array2) :: array
    !
    integer(c_int),dimension(2) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array2_init_async(&
      array,&
      int(c_double, c_int),&
      c_loc(data_host),data_dev,&
      shape(data_host), opt_lbounds ,stream,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
  function gpufort_array2_wrap_c_double_cptr(&
      data_host,data_dev,lbounds,&
      sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    real(c_double),intent(in),target,dimension(:,:) :: data_host 
    type(c_ptr),intent(in) :: data_dev
    integer(c_int),dimension(2),intent(in),optional :: lbounds
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array2) :: array
    !
    integer(c_int),dimension(2) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array2_init(&
      array,&
      int(c_double, c_int),&
      c_loc(data_host),data_dev,&
      shape(data_host), opt_lbounds ,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
   
  function gpufort_array2_wrap_async_c_float_complex(&
      data_host,data_dev,lbounds,&
      stream,sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    complex(c_float_complex),intent(in),target,dimension(:,:) :: data_host 
    complex(c_float_complex),intent(in),target,dimension(:,:) :: data_dev 
    integer(c_int),dimension(2),intent(in),optional :: lbounds 
    type(c_ptr),intent(in) :: stream
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array2) :: array
    !
    integer(c_int),dimension(2) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array2_init_async(&
      array,&
      int(2*c_float_complex, c_int),&
      c_loc(data_host),c_loc(data_dev),&
      shape(data_host), opt_lbounds ,stream,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
  function gpufort_array2_wrap_c_float_complex(&
      data_host,data_dev,lbounds,&
      sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    complex(c_float_complex),intent(in),target,dimension(:,:) :: data_host 
    complex(c_float_complex),intent(in),target,dimension(:,:) :: data_dev 
    integer(c_int),dimension(2),intent(in),optional :: lbounds
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array2) :: array
    !
    integer(c_int),dimension(2) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array2_init(&
      array,&
      int(2*c_float_complex, c_int),&
      c_loc(data_host),c_loc(data_dev),&
      shape(data_host), opt_lbounds ,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
   
  function gpufort_array2_wrap_async_c_float_complex_cptr(&
      data_host,data_dev,lbounds,&
      stream,sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    complex(c_float_complex),intent(in),target,dimension(:,:) :: data_host 
    type(c_ptr),intent(in) :: data_dev
    integer(c_int),dimension(2),intent(in),optional :: lbounds 
    type(c_ptr),intent(in) :: stream
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array2) :: array
    !
    integer(c_int),dimension(2) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array2_init_async(&
      array,&
      int(2*c_float_complex, c_int),&
      c_loc(data_host),data_dev,&
      shape(data_host), opt_lbounds ,stream,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
  function gpufort_array2_wrap_c_float_complex_cptr(&
      data_host,data_dev,lbounds,&
      sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    complex(c_float_complex),intent(in),target,dimension(:,:) :: data_host 
    type(c_ptr),intent(in) :: data_dev
    integer(c_int),dimension(2),intent(in),optional :: lbounds
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array2) :: array
    !
    integer(c_int),dimension(2) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array2_init(&
      array,&
      int(2*c_float_complex, c_int),&
      c_loc(data_host),data_dev,&
      shape(data_host), opt_lbounds ,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
   
  function gpufort_array2_wrap_async_c_double_complex(&
      data_host,data_dev,lbounds,&
      stream,sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    complex(c_double_complex),intent(in),target,dimension(:,:) :: data_host 
    complex(c_double_complex),intent(in),target,dimension(:,:) :: data_dev 
    integer(c_int),dimension(2),intent(in),optional :: lbounds 
    type(c_ptr),intent(in) :: stream
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array2) :: array
    !
    integer(c_int),dimension(2) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array2_init_async(&
      array,&
      int(2*c_double_complex, c_int),&
      c_loc(data_host),c_loc(data_dev),&
      shape(data_host), opt_lbounds ,stream,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
  function gpufort_array2_wrap_c_double_complex(&
      data_host,data_dev,lbounds,&
      sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    complex(c_double_complex),intent(in),target,dimension(:,:) :: data_host 
    complex(c_double_complex),intent(in),target,dimension(:,:) :: data_dev 
    integer(c_int),dimension(2),intent(in),optional :: lbounds
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array2) :: array
    !
    integer(c_int),dimension(2) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array2_init(&
      array,&
      int(2*c_double_complex, c_int),&
      c_loc(data_host),c_loc(data_dev),&
      shape(data_host), opt_lbounds ,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
   
  function gpufort_array2_wrap_async_c_double_complex_cptr(&
      data_host,data_dev,lbounds,&
      stream,sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    complex(c_double_complex),intent(in),target,dimension(:,:) :: data_host 
    type(c_ptr),intent(in) :: data_dev
    integer(c_int),dimension(2),intent(in),optional :: lbounds 
    type(c_ptr),intent(in) :: stream
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array2) :: array
    !
    integer(c_int),dimension(2) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array2_init_async(&
      array,&
      int(2*c_double_complex, c_int),&
      c_loc(data_host),data_dev,&
      shape(data_host), opt_lbounds ,stream,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
  function gpufort_array2_wrap_c_double_complex_cptr(&
      data_host,data_dev,lbounds,&
      sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    complex(c_double_complex),intent(in),target,dimension(:,:) :: data_host 
    type(c_ptr),intent(in) :: data_dev
    integer(c_int),dimension(2),intent(in),optional :: lbounds
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array2) :: array
    !
    integer(c_int),dimension(2) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array2_init(&
      array,&
      int(2*c_double_complex, c_int),&
      c_loc(data_host),data_dev,&
      shape(data_host), opt_lbounds ,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
  function gpufort_array2_wrap_device_cptr(&
      data_dev,sizes,lbounds,bytes_per_element) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(c_ptr),intent(in) :: data_dev 
    integer(c_int),dimension(2),intent(in) :: sizes
    integer(c_int),dimension(2),intent(in),optional :: lbounds
    integer(c_int),intent(in),optional :: bytes_per_element
    !
    type(gpufort_array2) :: array
    !
    integer(c_int),dimension(2) :: opt_lbounds
    integer(c_int) :: opt_bytes_per_element
    !
    integer(kind(hipSuccess)) :: ierr
    !
    opt_lbounds = 1
    opt_bytes_per_element = 1
    if ( present(lbounds) ) opt_lbounds = lbounds             
    if ( present(bytes_per_element) ) opt_bytes_per_element = bytes_per_element             
    ierr = gpufort_array2_init(&
      array,&
      opt_bytes_per_element,&
      c_null_ptr,data_dev,&
      sizes, opt_lbounds,&
      gpufort_array_wrap_host_wrap_device,&
      gpufort_array_sync_none)
  end function
  function gpufort_array2_wrap_device_ptr_c_bool(&
      data_dev,lbounds) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    logical(c_bool),intent(in),pointer,dimension(:,:) :: data_dev 
    integer(c_int),dimension(2),intent(in),optional :: lbounds
    !
    type(gpufort_array2) :: array
    !
    integer(c_int),dimension(2) :: opt_lbounds
    !
    integer(kind(hipSuccess)) :: ierr
    !
    opt_lbounds    = 1
    if ( present(lbounds) ) opt_lbounds = lbounds             
    ierr = gpufort_array2_init(&
      array,&
      int(c_bool, c_int),&
      c_null_ptr,c_loc(data_dev),&
      shape(data_dev), opt_lbounds,&
      gpufort_array_wrap_host_wrap_device,&
      gpufort_array_sync_none)
  end function
  function gpufort_array2_wrap_device_ptr_c_short(&
      data_dev,lbounds) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    integer(c_short),intent(in),pointer,dimension(:,:) :: data_dev 
    integer(c_int),dimension(2),intent(in),optional :: lbounds
    !
    type(gpufort_array2) :: array
    !
    integer(c_int),dimension(2) :: opt_lbounds
    !
    integer(kind(hipSuccess)) :: ierr
    !
    opt_lbounds    = 1
    if ( present(lbounds) ) opt_lbounds = lbounds             
    ierr = gpufort_array2_init(&
      array,&
      int(c_short, c_int),&
      c_null_ptr,c_loc(data_dev),&
      shape(data_dev), opt_lbounds,&
      gpufort_array_wrap_host_wrap_device,&
      gpufort_array_sync_none)
  end function
  function gpufort_array2_wrap_device_ptr_c_int(&
      data_dev,lbounds) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    integer(c_int),intent(in),pointer,dimension(:,:) :: data_dev 
    integer(c_int),dimension(2),intent(in),optional :: lbounds
    !
    type(gpufort_array2) :: array
    !
    integer(c_int),dimension(2) :: opt_lbounds
    !
    integer(kind(hipSuccess)) :: ierr
    !
    opt_lbounds    = 1
    if ( present(lbounds) ) opt_lbounds = lbounds             
    ierr = gpufort_array2_init(&
      array,&
      int(c_int, c_int),&
      c_null_ptr,c_loc(data_dev),&
      shape(data_dev), opt_lbounds,&
      gpufort_array_wrap_host_wrap_device,&
      gpufort_array_sync_none)
  end function
  function gpufort_array2_wrap_device_ptr_c_long(&
      data_dev,lbounds) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    integer(c_long),intent(in),pointer,dimension(:,:) :: data_dev 
    integer(c_int),dimension(2),intent(in),optional :: lbounds
    !
    type(gpufort_array2) :: array
    !
    integer(c_int),dimension(2) :: opt_lbounds
    !
    integer(kind(hipSuccess)) :: ierr
    !
    opt_lbounds    = 1
    if ( present(lbounds) ) opt_lbounds = lbounds             
    ierr = gpufort_array2_init(&
      array,&
      int(c_long, c_int),&
      c_null_ptr,c_loc(data_dev),&
      shape(data_dev), opt_lbounds,&
      gpufort_array_wrap_host_wrap_device,&
      gpufort_array_sync_none)
  end function
  function gpufort_array2_wrap_device_ptr_c_float(&
      data_dev,lbounds) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    real(c_float),intent(in),pointer,dimension(:,:) :: data_dev 
    integer(c_int),dimension(2),intent(in),optional :: lbounds
    !
    type(gpufort_array2) :: array
    !
    integer(c_int),dimension(2) :: opt_lbounds
    !
    integer(kind(hipSuccess)) :: ierr
    !
    opt_lbounds    = 1
    if ( present(lbounds) ) opt_lbounds = lbounds             
    ierr = gpufort_array2_init(&
      array,&
      int(c_float, c_int),&
      c_null_ptr,c_loc(data_dev),&
      shape(data_dev), opt_lbounds,&
      gpufort_array_wrap_host_wrap_device,&
      gpufort_array_sync_none)
  end function
  function gpufort_array2_wrap_device_ptr_c_double(&
      data_dev,lbounds) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    real(c_double),intent(in),pointer,dimension(:,:) :: data_dev 
    integer(c_int),dimension(2),intent(in),optional :: lbounds
    !
    type(gpufort_array2) :: array
    !
    integer(c_int),dimension(2) :: opt_lbounds
    !
    integer(kind(hipSuccess)) :: ierr
    !
    opt_lbounds    = 1
    if ( present(lbounds) ) opt_lbounds = lbounds             
    ierr = gpufort_array2_init(&
      array,&
      int(c_double, c_int),&
      c_null_ptr,c_loc(data_dev),&
      shape(data_dev), opt_lbounds,&
      gpufort_array_wrap_host_wrap_device,&
      gpufort_array_sync_none)
  end function
  function gpufort_array2_wrap_device_ptr_c_float_complex(&
      data_dev,lbounds) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    complex(c_float_complex),intent(in),pointer,dimension(:,:) :: data_dev 
    integer(c_int),dimension(2),intent(in),optional :: lbounds
    !
    type(gpufort_array2) :: array
    !
    integer(c_int),dimension(2) :: opt_lbounds
    !
    integer(kind(hipSuccess)) :: ierr
    !
    opt_lbounds    = 1
    if ( present(lbounds) ) opt_lbounds = lbounds             
    ierr = gpufort_array2_init(&
      array,&
      int(2*c_float_complex, c_int),&
      c_null_ptr,c_loc(data_dev),&
      shape(data_dev), opt_lbounds,&
      gpufort_array_wrap_host_wrap_device,&
      gpufort_array_sync_none)
  end function
  function gpufort_array2_wrap_device_ptr_c_double_complex(&
      data_dev,lbounds) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    complex(c_double_complex),intent(in),pointer,dimension(:,:) :: data_dev 
    integer(c_int),dimension(2),intent(in),optional :: lbounds
    !
    type(gpufort_array2) :: array
    !
    integer(c_int),dimension(2) :: opt_lbounds
    !
    integer(kind(hipSuccess)) :: ierr
    !
    opt_lbounds    = 1
    if ( present(lbounds) ) opt_lbounds = lbounds             
    ierr = gpufort_array2_init(&
      array,&
      int(2*c_double_complex, c_int),&
      c_null_ptr,c_loc(data_dev),&
      shape(data_dev), opt_lbounds,&
      gpufort_array_wrap_host_wrap_device,&
      gpufort_array_sync_none)
  end function
   
  function gpufort_array3_wrap_async_c_bool(&
      data_host,data_dev,lbounds,&
      stream,sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    logical(c_bool),intent(in),target,dimension(:,:,:) :: data_host 
    logical(c_bool),intent(in),target,dimension(:,:,:) :: data_dev 
    integer(c_int),dimension(3),intent(in),optional :: lbounds 
    type(c_ptr),intent(in) :: stream
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array3) :: array
    !
    integer(c_int),dimension(3) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array3_init_async(&
      array,&
      int(c_bool, c_int),&
      c_loc(data_host),c_loc(data_dev),&
      shape(data_host), opt_lbounds ,stream,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
  function gpufort_array3_wrap_c_bool(&
      data_host,data_dev,lbounds,&
      sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    logical(c_bool),intent(in),target,dimension(:,:,:) :: data_host 
    logical(c_bool),intent(in),target,dimension(:,:,:) :: data_dev 
    integer(c_int),dimension(3),intent(in),optional :: lbounds
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array3) :: array
    !
    integer(c_int),dimension(3) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array3_init(&
      array,&
      int(c_bool, c_int),&
      c_loc(data_host),c_loc(data_dev),&
      shape(data_host), opt_lbounds ,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
   
  function gpufort_array3_wrap_async_c_bool_cptr(&
      data_host,data_dev,lbounds,&
      stream,sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    logical(c_bool),intent(in),target,dimension(:,:,:) :: data_host 
    type(c_ptr),intent(in) :: data_dev
    integer(c_int),dimension(3),intent(in),optional :: lbounds 
    type(c_ptr),intent(in) :: stream
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array3) :: array
    !
    integer(c_int),dimension(3) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array3_init_async(&
      array,&
      int(c_bool, c_int),&
      c_loc(data_host),data_dev,&
      shape(data_host), opt_lbounds ,stream,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
  function gpufort_array3_wrap_c_bool_cptr(&
      data_host,data_dev,lbounds,&
      sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    logical(c_bool),intent(in),target,dimension(:,:,:) :: data_host 
    type(c_ptr),intent(in) :: data_dev
    integer(c_int),dimension(3),intent(in),optional :: lbounds
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array3) :: array
    !
    integer(c_int),dimension(3) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array3_init(&
      array,&
      int(c_bool, c_int),&
      c_loc(data_host),data_dev,&
      shape(data_host), opt_lbounds ,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
   
  function gpufort_array3_wrap_async_c_short(&
      data_host,data_dev,lbounds,&
      stream,sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    integer(c_short),intent(in),target,dimension(:,:,:) :: data_host 
    integer(c_short),intent(in),target,dimension(:,:,:) :: data_dev 
    integer(c_int),dimension(3),intent(in),optional :: lbounds 
    type(c_ptr),intent(in) :: stream
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array3) :: array
    !
    integer(c_int),dimension(3) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array3_init_async(&
      array,&
      int(c_short, c_int),&
      c_loc(data_host),c_loc(data_dev),&
      shape(data_host), opt_lbounds ,stream,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
  function gpufort_array3_wrap_c_short(&
      data_host,data_dev,lbounds,&
      sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    integer(c_short),intent(in),target,dimension(:,:,:) :: data_host 
    integer(c_short),intent(in),target,dimension(:,:,:) :: data_dev 
    integer(c_int),dimension(3),intent(in),optional :: lbounds
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array3) :: array
    !
    integer(c_int),dimension(3) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array3_init(&
      array,&
      int(c_short, c_int),&
      c_loc(data_host),c_loc(data_dev),&
      shape(data_host), opt_lbounds ,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
   
  function gpufort_array3_wrap_async_c_short_cptr(&
      data_host,data_dev,lbounds,&
      stream,sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    integer(c_short),intent(in),target,dimension(:,:,:) :: data_host 
    type(c_ptr),intent(in) :: data_dev
    integer(c_int),dimension(3),intent(in),optional :: lbounds 
    type(c_ptr),intent(in) :: stream
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array3) :: array
    !
    integer(c_int),dimension(3) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array3_init_async(&
      array,&
      int(c_short, c_int),&
      c_loc(data_host),data_dev,&
      shape(data_host), opt_lbounds ,stream,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
  function gpufort_array3_wrap_c_short_cptr(&
      data_host,data_dev,lbounds,&
      sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    integer(c_short),intent(in),target,dimension(:,:,:) :: data_host 
    type(c_ptr),intent(in) :: data_dev
    integer(c_int),dimension(3),intent(in),optional :: lbounds
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array3) :: array
    !
    integer(c_int),dimension(3) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array3_init(&
      array,&
      int(c_short, c_int),&
      c_loc(data_host),data_dev,&
      shape(data_host), opt_lbounds ,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
   
  function gpufort_array3_wrap_async_c_int(&
      data_host,data_dev,lbounds,&
      stream,sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    integer(c_int),intent(in),target,dimension(:,:,:) :: data_host 
    integer(c_int),intent(in),target,dimension(:,:,:) :: data_dev 
    integer(c_int),dimension(3),intent(in),optional :: lbounds 
    type(c_ptr),intent(in) :: stream
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array3) :: array
    !
    integer(c_int),dimension(3) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array3_init_async(&
      array,&
      int(c_int, c_int),&
      c_loc(data_host),c_loc(data_dev),&
      shape(data_host), opt_lbounds ,stream,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
  function gpufort_array3_wrap_c_int(&
      data_host,data_dev,lbounds,&
      sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    integer(c_int),intent(in),target,dimension(:,:,:) :: data_host 
    integer(c_int),intent(in),target,dimension(:,:,:) :: data_dev 
    integer(c_int),dimension(3),intent(in),optional :: lbounds
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array3) :: array
    !
    integer(c_int),dimension(3) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array3_init(&
      array,&
      int(c_int, c_int),&
      c_loc(data_host),c_loc(data_dev),&
      shape(data_host), opt_lbounds ,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
   
  function gpufort_array3_wrap_async_c_int_cptr(&
      data_host,data_dev,lbounds,&
      stream,sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    integer(c_int),intent(in),target,dimension(:,:,:) :: data_host 
    type(c_ptr),intent(in) :: data_dev
    integer(c_int),dimension(3),intent(in),optional :: lbounds 
    type(c_ptr),intent(in) :: stream
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array3) :: array
    !
    integer(c_int),dimension(3) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array3_init_async(&
      array,&
      int(c_int, c_int),&
      c_loc(data_host),data_dev,&
      shape(data_host), opt_lbounds ,stream,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
  function gpufort_array3_wrap_c_int_cptr(&
      data_host,data_dev,lbounds,&
      sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    integer(c_int),intent(in),target,dimension(:,:,:) :: data_host 
    type(c_ptr),intent(in) :: data_dev
    integer(c_int),dimension(3),intent(in),optional :: lbounds
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array3) :: array
    !
    integer(c_int),dimension(3) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array3_init(&
      array,&
      int(c_int, c_int),&
      c_loc(data_host),data_dev,&
      shape(data_host), opt_lbounds ,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
   
  function gpufort_array3_wrap_async_c_long(&
      data_host,data_dev,lbounds,&
      stream,sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    integer(c_long),intent(in),target,dimension(:,:,:) :: data_host 
    integer(c_long),intent(in),target,dimension(:,:,:) :: data_dev 
    integer(c_int),dimension(3),intent(in),optional :: lbounds 
    type(c_ptr),intent(in) :: stream
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array3) :: array
    !
    integer(c_int),dimension(3) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array3_init_async(&
      array,&
      int(c_long, c_int),&
      c_loc(data_host),c_loc(data_dev),&
      shape(data_host), opt_lbounds ,stream,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
  function gpufort_array3_wrap_c_long(&
      data_host,data_dev,lbounds,&
      sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    integer(c_long),intent(in),target,dimension(:,:,:) :: data_host 
    integer(c_long),intent(in),target,dimension(:,:,:) :: data_dev 
    integer(c_int),dimension(3),intent(in),optional :: lbounds
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array3) :: array
    !
    integer(c_int),dimension(3) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array3_init(&
      array,&
      int(c_long, c_int),&
      c_loc(data_host),c_loc(data_dev),&
      shape(data_host), opt_lbounds ,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
   
  function gpufort_array3_wrap_async_c_long_cptr(&
      data_host,data_dev,lbounds,&
      stream,sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    integer(c_long),intent(in),target,dimension(:,:,:) :: data_host 
    type(c_ptr),intent(in) :: data_dev
    integer(c_int),dimension(3),intent(in),optional :: lbounds 
    type(c_ptr),intent(in) :: stream
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array3) :: array
    !
    integer(c_int),dimension(3) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array3_init_async(&
      array,&
      int(c_long, c_int),&
      c_loc(data_host),data_dev,&
      shape(data_host), opt_lbounds ,stream,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
  function gpufort_array3_wrap_c_long_cptr(&
      data_host,data_dev,lbounds,&
      sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    integer(c_long),intent(in),target,dimension(:,:,:) :: data_host 
    type(c_ptr),intent(in) :: data_dev
    integer(c_int),dimension(3),intent(in),optional :: lbounds
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array3) :: array
    !
    integer(c_int),dimension(3) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array3_init(&
      array,&
      int(c_long, c_int),&
      c_loc(data_host),data_dev,&
      shape(data_host), opt_lbounds ,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
   
  function gpufort_array3_wrap_async_c_float(&
      data_host,data_dev,lbounds,&
      stream,sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    real(c_float),intent(in),target,dimension(:,:,:) :: data_host 
    real(c_float),intent(in),target,dimension(:,:,:) :: data_dev 
    integer(c_int),dimension(3),intent(in),optional :: lbounds 
    type(c_ptr),intent(in) :: stream
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array3) :: array
    !
    integer(c_int),dimension(3) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array3_init_async(&
      array,&
      int(c_float, c_int),&
      c_loc(data_host),c_loc(data_dev),&
      shape(data_host), opt_lbounds ,stream,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
  function gpufort_array3_wrap_c_float(&
      data_host,data_dev,lbounds,&
      sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    real(c_float),intent(in),target,dimension(:,:,:) :: data_host 
    real(c_float),intent(in),target,dimension(:,:,:) :: data_dev 
    integer(c_int),dimension(3),intent(in),optional :: lbounds
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array3) :: array
    !
    integer(c_int),dimension(3) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array3_init(&
      array,&
      int(c_float, c_int),&
      c_loc(data_host),c_loc(data_dev),&
      shape(data_host), opt_lbounds ,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
   
  function gpufort_array3_wrap_async_c_float_cptr(&
      data_host,data_dev,lbounds,&
      stream,sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    real(c_float),intent(in),target,dimension(:,:,:) :: data_host 
    type(c_ptr),intent(in) :: data_dev
    integer(c_int),dimension(3),intent(in),optional :: lbounds 
    type(c_ptr),intent(in) :: stream
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array3) :: array
    !
    integer(c_int),dimension(3) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array3_init_async(&
      array,&
      int(c_float, c_int),&
      c_loc(data_host),data_dev,&
      shape(data_host), opt_lbounds ,stream,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
  function gpufort_array3_wrap_c_float_cptr(&
      data_host,data_dev,lbounds,&
      sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    real(c_float),intent(in),target,dimension(:,:,:) :: data_host 
    type(c_ptr),intent(in) :: data_dev
    integer(c_int),dimension(3),intent(in),optional :: lbounds
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array3) :: array
    !
    integer(c_int),dimension(3) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array3_init(&
      array,&
      int(c_float, c_int),&
      c_loc(data_host),data_dev,&
      shape(data_host), opt_lbounds ,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
   
  function gpufort_array3_wrap_async_c_double(&
      data_host,data_dev,lbounds,&
      stream,sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    real(c_double),intent(in),target,dimension(:,:,:) :: data_host 
    real(c_double),intent(in),target,dimension(:,:,:) :: data_dev 
    integer(c_int),dimension(3),intent(in),optional :: lbounds 
    type(c_ptr),intent(in) :: stream
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array3) :: array
    !
    integer(c_int),dimension(3) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array3_init_async(&
      array,&
      int(c_double, c_int),&
      c_loc(data_host),c_loc(data_dev),&
      shape(data_host), opt_lbounds ,stream,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
  function gpufort_array3_wrap_c_double(&
      data_host,data_dev,lbounds,&
      sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    real(c_double),intent(in),target,dimension(:,:,:) :: data_host 
    real(c_double),intent(in),target,dimension(:,:,:) :: data_dev 
    integer(c_int),dimension(3),intent(in),optional :: lbounds
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array3) :: array
    !
    integer(c_int),dimension(3) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array3_init(&
      array,&
      int(c_double, c_int),&
      c_loc(data_host),c_loc(data_dev),&
      shape(data_host), opt_lbounds ,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
   
  function gpufort_array3_wrap_async_c_double_cptr(&
      data_host,data_dev,lbounds,&
      stream,sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    real(c_double),intent(in),target,dimension(:,:,:) :: data_host 
    type(c_ptr),intent(in) :: data_dev
    integer(c_int),dimension(3),intent(in),optional :: lbounds 
    type(c_ptr),intent(in) :: stream
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array3) :: array
    !
    integer(c_int),dimension(3) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array3_init_async(&
      array,&
      int(c_double, c_int),&
      c_loc(data_host),data_dev,&
      shape(data_host), opt_lbounds ,stream,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
  function gpufort_array3_wrap_c_double_cptr(&
      data_host,data_dev,lbounds,&
      sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    real(c_double),intent(in),target,dimension(:,:,:) :: data_host 
    type(c_ptr),intent(in) :: data_dev
    integer(c_int),dimension(3),intent(in),optional :: lbounds
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array3) :: array
    !
    integer(c_int),dimension(3) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array3_init(&
      array,&
      int(c_double, c_int),&
      c_loc(data_host),data_dev,&
      shape(data_host), opt_lbounds ,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
   
  function gpufort_array3_wrap_async_c_float_complex(&
      data_host,data_dev,lbounds,&
      stream,sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    complex(c_float_complex),intent(in),target,dimension(:,:,:) :: data_host 
    complex(c_float_complex),intent(in),target,dimension(:,:,:) :: data_dev 
    integer(c_int),dimension(3),intent(in),optional :: lbounds 
    type(c_ptr),intent(in) :: stream
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array3) :: array
    !
    integer(c_int),dimension(3) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array3_init_async(&
      array,&
      int(2*c_float_complex, c_int),&
      c_loc(data_host),c_loc(data_dev),&
      shape(data_host), opt_lbounds ,stream,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
  function gpufort_array3_wrap_c_float_complex(&
      data_host,data_dev,lbounds,&
      sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    complex(c_float_complex),intent(in),target,dimension(:,:,:) :: data_host 
    complex(c_float_complex),intent(in),target,dimension(:,:,:) :: data_dev 
    integer(c_int),dimension(3),intent(in),optional :: lbounds
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array3) :: array
    !
    integer(c_int),dimension(3) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array3_init(&
      array,&
      int(2*c_float_complex, c_int),&
      c_loc(data_host),c_loc(data_dev),&
      shape(data_host), opt_lbounds ,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
   
  function gpufort_array3_wrap_async_c_float_complex_cptr(&
      data_host,data_dev,lbounds,&
      stream,sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    complex(c_float_complex),intent(in),target,dimension(:,:,:) :: data_host 
    type(c_ptr),intent(in) :: data_dev
    integer(c_int),dimension(3),intent(in),optional :: lbounds 
    type(c_ptr),intent(in) :: stream
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array3) :: array
    !
    integer(c_int),dimension(3) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array3_init_async(&
      array,&
      int(2*c_float_complex, c_int),&
      c_loc(data_host),data_dev,&
      shape(data_host), opt_lbounds ,stream,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
  function gpufort_array3_wrap_c_float_complex_cptr(&
      data_host,data_dev,lbounds,&
      sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    complex(c_float_complex),intent(in),target,dimension(:,:,:) :: data_host 
    type(c_ptr),intent(in) :: data_dev
    integer(c_int),dimension(3),intent(in),optional :: lbounds
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array3) :: array
    !
    integer(c_int),dimension(3) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array3_init(&
      array,&
      int(2*c_float_complex, c_int),&
      c_loc(data_host),data_dev,&
      shape(data_host), opt_lbounds ,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
   
  function gpufort_array3_wrap_async_c_double_complex(&
      data_host,data_dev,lbounds,&
      stream,sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    complex(c_double_complex),intent(in),target,dimension(:,:,:) :: data_host 
    complex(c_double_complex),intent(in),target,dimension(:,:,:) :: data_dev 
    integer(c_int),dimension(3),intent(in),optional :: lbounds 
    type(c_ptr),intent(in) :: stream
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array3) :: array
    !
    integer(c_int),dimension(3) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array3_init_async(&
      array,&
      int(2*c_double_complex, c_int),&
      c_loc(data_host),c_loc(data_dev),&
      shape(data_host), opt_lbounds ,stream,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
  function gpufort_array3_wrap_c_double_complex(&
      data_host,data_dev,lbounds,&
      sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    complex(c_double_complex),intent(in),target,dimension(:,:,:) :: data_host 
    complex(c_double_complex),intent(in),target,dimension(:,:,:) :: data_dev 
    integer(c_int),dimension(3),intent(in),optional :: lbounds
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array3) :: array
    !
    integer(c_int),dimension(3) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array3_init(&
      array,&
      int(2*c_double_complex, c_int),&
      c_loc(data_host),c_loc(data_dev),&
      shape(data_host), opt_lbounds ,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
   
  function gpufort_array3_wrap_async_c_double_complex_cptr(&
      data_host,data_dev,lbounds,&
      stream,sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    complex(c_double_complex),intent(in),target,dimension(:,:,:) :: data_host 
    type(c_ptr),intent(in) :: data_dev
    integer(c_int),dimension(3),intent(in),optional :: lbounds 
    type(c_ptr),intent(in) :: stream
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array3) :: array
    !
    integer(c_int),dimension(3) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array3_init_async(&
      array,&
      int(2*c_double_complex, c_int),&
      c_loc(data_host),data_dev,&
      shape(data_host), opt_lbounds ,stream,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
  function gpufort_array3_wrap_c_double_complex_cptr(&
      data_host,data_dev,lbounds,&
      sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    complex(c_double_complex),intent(in),target,dimension(:,:,:) :: data_host 
    type(c_ptr),intent(in) :: data_dev
    integer(c_int),dimension(3),intent(in),optional :: lbounds
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array3) :: array
    !
    integer(c_int),dimension(3) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array3_init(&
      array,&
      int(2*c_double_complex, c_int),&
      c_loc(data_host),data_dev,&
      shape(data_host), opt_lbounds ,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
  function gpufort_array3_wrap_device_cptr(&
      data_dev,sizes,lbounds,bytes_per_element) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(c_ptr),intent(in) :: data_dev 
    integer(c_int),dimension(3),intent(in) :: sizes
    integer(c_int),dimension(3),intent(in),optional :: lbounds
    integer(c_int),intent(in),optional :: bytes_per_element
    !
    type(gpufort_array3) :: array
    !
    integer(c_int),dimension(3) :: opt_lbounds
    integer(c_int) :: opt_bytes_per_element
    !
    integer(kind(hipSuccess)) :: ierr
    !
    opt_lbounds = 1
    opt_bytes_per_element = 1
    if ( present(lbounds) ) opt_lbounds = lbounds             
    if ( present(bytes_per_element) ) opt_bytes_per_element = bytes_per_element             
    ierr = gpufort_array3_init(&
      array,&
      opt_bytes_per_element,&
      c_null_ptr,data_dev,&
      sizes, opt_lbounds,&
      gpufort_array_wrap_host_wrap_device,&
      gpufort_array_sync_none)
  end function
  function gpufort_array3_wrap_device_ptr_c_bool(&
      data_dev,lbounds) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    logical(c_bool),intent(in),pointer,dimension(:,:,:) :: data_dev 
    integer(c_int),dimension(3),intent(in),optional :: lbounds
    !
    type(gpufort_array3) :: array
    !
    integer(c_int),dimension(3) :: opt_lbounds
    !
    integer(kind(hipSuccess)) :: ierr
    !
    opt_lbounds    = 1
    if ( present(lbounds) ) opt_lbounds = lbounds             
    ierr = gpufort_array3_init(&
      array,&
      int(c_bool, c_int),&
      c_null_ptr,c_loc(data_dev),&
      shape(data_dev), opt_lbounds,&
      gpufort_array_wrap_host_wrap_device,&
      gpufort_array_sync_none)
  end function
  function gpufort_array3_wrap_device_ptr_c_short(&
      data_dev,lbounds) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    integer(c_short),intent(in),pointer,dimension(:,:,:) :: data_dev 
    integer(c_int),dimension(3),intent(in),optional :: lbounds
    !
    type(gpufort_array3) :: array
    !
    integer(c_int),dimension(3) :: opt_lbounds
    !
    integer(kind(hipSuccess)) :: ierr
    !
    opt_lbounds    = 1
    if ( present(lbounds) ) opt_lbounds = lbounds             
    ierr = gpufort_array3_init(&
      array,&
      int(c_short, c_int),&
      c_null_ptr,c_loc(data_dev),&
      shape(data_dev), opt_lbounds,&
      gpufort_array_wrap_host_wrap_device,&
      gpufort_array_sync_none)
  end function
  function gpufort_array3_wrap_device_ptr_c_int(&
      data_dev,lbounds) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    integer(c_int),intent(in),pointer,dimension(:,:,:) :: data_dev 
    integer(c_int),dimension(3),intent(in),optional :: lbounds
    !
    type(gpufort_array3) :: array
    !
    integer(c_int),dimension(3) :: opt_lbounds
    !
    integer(kind(hipSuccess)) :: ierr
    !
    opt_lbounds    = 1
    if ( present(lbounds) ) opt_lbounds = lbounds             
    ierr = gpufort_array3_init(&
      array,&
      int(c_int, c_int),&
      c_null_ptr,c_loc(data_dev),&
      shape(data_dev), opt_lbounds,&
      gpufort_array_wrap_host_wrap_device,&
      gpufort_array_sync_none)
  end function
  function gpufort_array3_wrap_device_ptr_c_long(&
      data_dev,lbounds) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    integer(c_long),intent(in),pointer,dimension(:,:,:) :: data_dev 
    integer(c_int),dimension(3),intent(in),optional :: lbounds
    !
    type(gpufort_array3) :: array
    !
    integer(c_int),dimension(3) :: opt_lbounds
    !
    integer(kind(hipSuccess)) :: ierr
    !
    opt_lbounds    = 1
    if ( present(lbounds) ) opt_lbounds = lbounds             
    ierr = gpufort_array3_init(&
      array,&
      int(c_long, c_int),&
      c_null_ptr,c_loc(data_dev),&
      shape(data_dev), opt_lbounds,&
      gpufort_array_wrap_host_wrap_device,&
      gpufort_array_sync_none)
  end function
  function gpufort_array3_wrap_device_ptr_c_float(&
      data_dev,lbounds) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    real(c_float),intent(in),pointer,dimension(:,:,:) :: data_dev 
    integer(c_int),dimension(3),intent(in),optional :: lbounds
    !
    type(gpufort_array3) :: array
    !
    integer(c_int),dimension(3) :: opt_lbounds
    !
    integer(kind(hipSuccess)) :: ierr
    !
    opt_lbounds    = 1
    if ( present(lbounds) ) opt_lbounds = lbounds             
    ierr = gpufort_array3_init(&
      array,&
      int(c_float, c_int),&
      c_null_ptr,c_loc(data_dev),&
      shape(data_dev), opt_lbounds,&
      gpufort_array_wrap_host_wrap_device,&
      gpufort_array_sync_none)
  end function
  function gpufort_array3_wrap_device_ptr_c_double(&
      data_dev,lbounds) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    real(c_double),intent(in),pointer,dimension(:,:,:) :: data_dev 
    integer(c_int),dimension(3),intent(in),optional :: lbounds
    !
    type(gpufort_array3) :: array
    !
    integer(c_int),dimension(3) :: opt_lbounds
    !
    integer(kind(hipSuccess)) :: ierr
    !
    opt_lbounds    = 1
    if ( present(lbounds) ) opt_lbounds = lbounds             
    ierr = gpufort_array3_init(&
      array,&
      int(c_double, c_int),&
      c_null_ptr,c_loc(data_dev),&
      shape(data_dev), opt_lbounds,&
      gpufort_array_wrap_host_wrap_device,&
      gpufort_array_sync_none)
  end function
  function gpufort_array3_wrap_device_ptr_c_float_complex(&
      data_dev,lbounds) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    complex(c_float_complex),intent(in),pointer,dimension(:,:,:) :: data_dev 
    integer(c_int),dimension(3),intent(in),optional :: lbounds
    !
    type(gpufort_array3) :: array
    !
    integer(c_int),dimension(3) :: opt_lbounds
    !
    integer(kind(hipSuccess)) :: ierr
    !
    opt_lbounds    = 1
    if ( present(lbounds) ) opt_lbounds = lbounds             
    ierr = gpufort_array3_init(&
      array,&
      int(2*c_float_complex, c_int),&
      c_null_ptr,c_loc(data_dev),&
      shape(data_dev), opt_lbounds,&
      gpufort_array_wrap_host_wrap_device,&
      gpufort_array_sync_none)
  end function
  function gpufort_array3_wrap_device_ptr_c_double_complex(&
      data_dev,lbounds) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    complex(c_double_complex),intent(in),pointer,dimension(:,:,:) :: data_dev 
    integer(c_int),dimension(3),intent(in),optional :: lbounds
    !
    type(gpufort_array3) :: array
    !
    integer(c_int),dimension(3) :: opt_lbounds
    !
    integer(kind(hipSuccess)) :: ierr
    !
    opt_lbounds    = 1
    if ( present(lbounds) ) opt_lbounds = lbounds             
    ierr = gpufort_array3_init(&
      array,&
      int(2*c_double_complex, c_int),&
      c_null_ptr,c_loc(data_dev),&
      shape(data_dev), opt_lbounds,&
      gpufort_array_wrap_host_wrap_device,&
      gpufort_array_sync_none)
  end function
   
  function gpufort_array4_wrap_async_c_bool(&
      data_host,data_dev,lbounds,&
      stream,sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    logical(c_bool),intent(in),target,dimension(:,:,:,:) :: data_host 
    logical(c_bool),intent(in),target,dimension(:,:,:,:) :: data_dev 
    integer(c_int),dimension(4),intent(in),optional :: lbounds 
    type(c_ptr),intent(in) :: stream
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array4) :: array
    !
    integer(c_int),dimension(4) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array4_init_async(&
      array,&
      int(c_bool, c_int),&
      c_loc(data_host),c_loc(data_dev),&
      shape(data_host), opt_lbounds ,stream,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
  function gpufort_array4_wrap_c_bool(&
      data_host,data_dev,lbounds,&
      sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    logical(c_bool),intent(in),target,dimension(:,:,:,:) :: data_host 
    logical(c_bool),intent(in),target,dimension(:,:,:,:) :: data_dev 
    integer(c_int),dimension(4),intent(in),optional :: lbounds
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array4) :: array
    !
    integer(c_int),dimension(4) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array4_init(&
      array,&
      int(c_bool, c_int),&
      c_loc(data_host),c_loc(data_dev),&
      shape(data_host), opt_lbounds ,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
   
  function gpufort_array4_wrap_async_c_bool_cptr(&
      data_host,data_dev,lbounds,&
      stream,sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    logical(c_bool),intent(in),target,dimension(:,:,:,:) :: data_host 
    type(c_ptr),intent(in) :: data_dev
    integer(c_int),dimension(4),intent(in),optional :: lbounds 
    type(c_ptr),intent(in) :: stream
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array4) :: array
    !
    integer(c_int),dimension(4) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array4_init_async(&
      array,&
      int(c_bool, c_int),&
      c_loc(data_host),data_dev,&
      shape(data_host), opt_lbounds ,stream,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
  function gpufort_array4_wrap_c_bool_cptr(&
      data_host,data_dev,lbounds,&
      sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    logical(c_bool),intent(in),target,dimension(:,:,:,:) :: data_host 
    type(c_ptr),intent(in) :: data_dev
    integer(c_int),dimension(4),intent(in),optional :: lbounds
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array4) :: array
    !
    integer(c_int),dimension(4) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array4_init(&
      array,&
      int(c_bool, c_int),&
      c_loc(data_host),data_dev,&
      shape(data_host), opt_lbounds ,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
   
  function gpufort_array4_wrap_async_c_short(&
      data_host,data_dev,lbounds,&
      stream,sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    integer(c_short),intent(in),target,dimension(:,:,:,:) :: data_host 
    integer(c_short),intent(in),target,dimension(:,:,:,:) :: data_dev 
    integer(c_int),dimension(4),intent(in),optional :: lbounds 
    type(c_ptr),intent(in) :: stream
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array4) :: array
    !
    integer(c_int),dimension(4) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array4_init_async(&
      array,&
      int(c_short, c_int),&
      c_loc(data_host),c_loc(data_dev),&
      shape(data_host), opt_lbounds ,stream,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
  function gpufort_array4_wrap_c_short(&
      data_host,data_dev,lbounds,&
      sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    integer(c_short),intent(in),target,dimension(:,:,:,:) :: data_host 
    integer(c_short),intent(in),target,dimension(:,:,:,:) :: data_dev 
    integer(c_int),dimension(4),intent(in),optional :: lbounds
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array4) :: array
    !
    integer(c_int),dimension(4) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array4_init(&
      array,&
      int(c_short, c_int),&
      c_loc(data_host),c_loc(data_dev),&
      shape(data_host), opt_lbounds ,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
   
  function gpufort_array4_wrap_async_c_short_cptr(&
      data_host,data_dev,lbounds,&
      stream,sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    integer(c_short),intent(in),target,dimension(:,:,:,:) :: data_host 
    type(c_ptr),intent(in) :: data_dev
    integer(c_int),dimension(4),intent(in),optional :: lbounds 
    type(c_ptr),intent(in) :: stream
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array4) :: array
    !
    integer(c_int),dimension(4) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array4_init_async(&
      array,&
      int(c_short, c_int),&
      c_loc(data_host),data_dev,&
      shape(data_host), opt_lbounds ,stream,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
  function gpufort_array4_wrap_c_short_cptr(&
      data_host,data_dev,lbounds,&
      sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    integer(c_short),intent(in),target,dimension(:,:,:,:) :: data_host 
    type(c_ptr),intent(in) :: data_dev
    integer(c_int),dimension(4),intent(in),optional :: lbounds
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array4) :: array
    !
    integer(c_int),dimension(4) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array4_init(&
      array,&
      int(c_short, c_int),&
      c_loc(data_host),data_dev,&
      shape(data_host), opt_lbounds ,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
   
  function gpufort_array4_wrap_async_c_int(&
      data_host,data_dev,lbounds,&
      stream,sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    integer(c_int),intent(in),target,dimension(:,:,:,:) :: data_host 
    integer(c_int),intent(in),target,dimension(:,:,:,:) :: data_dev 
    integer(c_int),dimension(4),intent(in),optional :: lbounds 
    type(c_ptr),intent(in) :: stream
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array4) :: array
    !
    integer(c_int),dimension(4) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array4_init_async(&
      array,&
      int(c_int, c_int),&
      c_loc(data_host),c_loc(data_dev),&
      shape(data_host), opt_lbounds ,stream,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
  function gpufort_array4_wrap_c_int(&
      data_host,data_dev,lbounds,&
      sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    integer(c_int),intent(in),target,dimension(:,:,:,:) :: data_host 
    integer(c_int),intent(in),target,dimension(:,:,:,:) :: data_dev 
    integer(c_int),dimension(4),intent(in),optional :: lbounds
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array4) :: array
    !
    integer(c_int),dimension(4) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array4_init(&
      array,&
      int(c_int, c_int),&
      c_loc(data_host),c_loc(data_dev),&
      shape(data_host), opt_lbounds ,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
   
  function gpufort_array4_wrap_async_c_int_cptr(&
      data_host,data_dev,lbounds,&
      stream,sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    integer(c_int),intent(in),target,dimension(:,:,:,:) :: data_host 
    type(c_ptr),intent(in) :: data_dev
    integer(c_int),dimension(4),intent(in),optional :: lbounds 
    type(c_ptr),intent(in) :: stream
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array4) :: array
    !
    integer(c_int),dimension(4) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array4_init_async(&
      array,&
      int(c_int, c_int),&
      c_loc(data_host),data_dev,&
      shape(data_host), opt_lbounds ,stream,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
  function gpufort_array4_wrap_c_int_cptr(&
      data_host,data_dev,lbounds,&
      sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    integer(c_int),intent(in),target,dimension(:,:,:,:) :: data_host 
    type(c_ptr),intent(in) :: data_dev
    integer(c_int),dimension(4),intent(in),optional :: lbounds
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array4) :: array
    !
    integer(c_int),dimension(4) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array4_init(&
      array,&
      int(c_int, c_int),&
      c_loc(data_host),data_dev,&
      shape(data_host), opt_lbounds ,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
   
  function gpufort_array4_wrap_async_c_long(&
      data_host,data_dev,lbounds,&
      stream,sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    integer(c_long),intent(in),target,dimension(:,:,:,:) :: data_host 
    integer(c_long),intent(in),target,dimension(:,:,:,:) :: data_dev 
    integer(c_int),dimension(4),intent(in),optional :: lbounds 
    type(c_ptr),intent(in) :: stream
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array4) :: array
    !
    integer(c_int),dimension(4) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array4_init_async(&
      array,&
      int(c_long, c_int),&
      c_loc(data_host),c_loc(data_dev),&
      shape(data_host), opt_lbounds ,stream,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
  function gpufort_array4_wrap_c_long(&
      data_host,data_dev,lbounds,&
      sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    integer(c_long),intent(in),target,dimension(:,:,:,:) :: data_host 
    integer(c_long),intent(in),target,dimension(:,:,:,:) :: data_dev 
    integer(c_int),dimension(4),intent(in),optional :: lbounds
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array4) :: array
    !
    integer(c_int),dimension(4) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array4_init(&
      array,&
      int(c_long, c_int),&
      c_loc(data_host),c_loc(data_dev),&
      shape(data_host), opt_lbounds ,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
   
  function gpufort_array4_wrap_async_c_long_cptr(&
      data_host,data_dev,lbounds,&
      stream,sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    integer(c_long),intent(in),target,dimension(:,:,:,:) :: data_host 
    type(c_ptr),intent(in) :: data_dev
    integer(c_int),dimension(4),intent(in),optional :: lbounds 
    type(c_ptr),intent(in) :: stream
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array4) :: array
    !
    integer(c_int),dimension(4) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array4_init_async(&
      array,&
      int(c_long, c_int),&
      c_loc(data_host),data_dev,&
      shape(data_host), opt_lbounds ,stream,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
  function gpufort_array4_wrap_c_long_cptr(&
      data_host,data_dev,lbounds,&
      sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    integer(c_long),intent(in),target,dimension(:,:,:,:) :: data_host 
    type(c_ptr),intent(in) :: data_dev
    integer(c_int),dimension(4),intent(in),optional :: lbounds
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array4) :: array
    !
    integer(c_int),dimension(4) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array4_init(&
      array,&
      int(c_long, c_int),&
      c_loc(data_host),data_dev,&
      shape(data_host), opt_lbounds ,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
   
  function gpufort_array4_wrap_async_c_float(&
      data_host,data_dev,lbounds,&
      stream,sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    real(c_float),intent(in),target,dimension(:,:,:,:) :: data_host 
    real(c_float),intent(in),target,dimension(:,:,:,:) :: data_dev 
    integer(c_int),dimension(4),intent(in),optional :: lbounds 
    type(c_ptr),intent(in) :: stream
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array4) :: array
    !
    integer(c_int),dimension(4) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array4_init_async(&
      array,&
      int(c_float, c_int),&
      c_loc(data_host),c_loc(data_dev),&
      shape(data_host), opt_lbounds ,stream,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
  function gpufort_array4_wrap_c_float(&
      data_host,data_dev,lbounds,&
      sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    real(c_float),intent(in),target,dimension(:,:,:,:) :: data_host 
    real(c_float),intent(in),target,dimension(:,:,:,:) :: data_dev 
    integer(c_int),dimension(4),intent(in),optional :: lbounds
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array4) :: array
    !
    integer(c_int),dimension(4) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array4_init(&
      array,&
      int(c_float, c_int),&
      c_loc(data_host),c_loc(data_dev),&
      shape(data_host), opt_lbounds ,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
   
  function gpufort_array4_wrap_async_c_float_cptr(&
      data_host,data_dev,lbounds,&
      stream,sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    real(c_float),intent(in),target,dimension(:,:,:,:) :: data_host 
    type(c_ptr),intent(in) :: data_dev
    integer(c_int),dimension(4),intent(in),optional :: lbounds 
    type(c_ptr),intent(in) :: stream
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array4) :: array
    !
    integer(c_int),dimension(4) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array4_init_async(&
      array,&
      int(c_float, c_int),&
      c_loc(data_host),data_dev,&
      shape(data_host), opt_lbounds ,stream,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
  function gpufort_array4_wrap_c_float_cptr(&
      data_host,data_dev,lbounds,&
      sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    real(c_float),intent(in),target,dimension(:,:,:,:) :: data_host 
    type(c_ptr),intent(in) :: data_dev
    integer(c_int),dimension(4),intent(in),optional :: lbounds
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array4) :: array
    !
    integer(c_int),dimension(4) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array4_init(&
      array,&
      int(c_float, c_int),&
      c_loc(data_host),data_dev,&
      shape(data_host), opt_lbounds ,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
   
  function gpufort_array4_wrap_async_c_double(&
      data_host,data_dev,lbounds,&
      stream,sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    real(c_double),intent(in),target,dimension(:,:,:,:) :: data_host 
    real(c_double),intent(in),target,dimension(:,:,:,:) :: data_dev 
    integer(c_int),dimension(4),intent(in),optional :: lbounds 
    type(c_ptr),intent(in) :: stream
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array4) :: array
    !
    integer(c_int),dimension(4) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array4_init_async(&
      array,&
      int(c_double, c_int),&
      c_loc(data_host),c_loc(data_dev),&
      shape(data_host), opt_lbounds ,stream,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
  function gpufort_array4_wrap_c_double(&
      data_host,data_dev,lbounds,&
      sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    real(c_double),intent(in),target,dimension(:,:,:,:) :: data_host 
    real(c_double),intent(in),target,dimension(:,:,:,:) :: data_dev 
    integer(c_int),dimension(4),intent(in),optional :: lbounds
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array4) :: array
    !
    integer(c_int),dimension(4) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array4_init(&
      array,&
      int(c_double, c_int),&
      c_loc(data_host),c_loc(data_dev),&
      shape(data_host), opt_lbounds ,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
   
  function gpufort_array4_wrap_async_c_double_cptr(&
      data_host,data_dev,lbounds,&
      stream,sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    real(c_double),intent(in),target,dimension(:,:,:,:) :: data_host 
    type(c_ptr),intent(in) :: data_dev
    integer(c_int),dimension(4),intent(in),optional :: lbounds 
    type(c_ptr),intent(in) :: stream
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array4) :: array
    !
    integer(c_int),dimension(4) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array4_init_async(&
      array,&
      int(c_double, c_int),&
      c_loc(data_host),data_dev,&
      shape(data_host), opt_lbounds ,stream,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
  function gpufort_array4_wrap_c_double_cptr(&
      data_host,data_dev,lbounds,&
      sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    real(c_double),intent(in),target,dimension(:,:,:,:) :: data_host 
    type(c_ptr),intent(in) :: data_dev
    integer(c_int),dimension(4),intent(in),optional :: lbounds
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array4) :: array
    !
    integer(c_int),dimension(4) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array4_init(&
      array,&
      int(c_double, c_int),&
      c_loc(data_host),data_dev,&
      shape(data_host), opt_lbounds ,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
   
  function gpufort_array4_wrap_async_c_float_complex(&
      data_host,data_dev,lbounds,&
      stream,sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    complex(c_float_complex),intent(in),target,dimension(:,:,:,:) :: data_host 
    complex(c_float_complex),intent(in),target,dimension(:,:,:,:) :: data_dev 
    integer(c_int),dimension(4),intent(in),optional :: lbounds 
    type(c_ptr),intent(in) :: stream
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array4) :: array
    !
    integer(c_int),dimension(4) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array4_init_async(&
      array,&
      int(2*c_float_complex, c_int),&
      c_loc(data_host),c_loc(data_dev),&
      shape(data_host), opt_lbounds ,stream,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
  function gpufort_array4_wrap_c_float_complex(&
      data_host,data_dev,lbounds,&
      sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    complex(c_float_complex),intent(in),target,dimension(:,:,:,:) :: data_host 
    complex(c_float_complex),intent(in),target,dimension(:,:,:,:) :: data_dev 
    integer(c_int),dimension(4),intent(in),optional :: lbounds
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array4) :: array
    !
    integer(c_int),dimension(4) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array4_init(&
      array,&
      int(2*c_float_complex, c_int),&
      c_loc(data_host),c_loc(data_dev),&
      shape(data_host), opt_lbounds ,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
   
  function gpufort_array4_wrap_async_c_float_complex_cptr(&
      data_host,data_dev,lbounds,&
      stream,sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    complex(c_float_complex),intent(in),target,dimension(:,:,:,:) :: data_host 
    type(c_ptr),intent(in) :: data_dev
    integer(c_int),dimension(4),intent(in),optional :: lbounds 
    type(c_ptr),intent(in) :: stream
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array4) :: array
    !
    integer(c_int),dimension(4) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array4_init_async(&
      array,&
      int(2*c_float_complex, c_int),&
      c_loc(data_host),data_dev,&
      shape(data_host), opt_lbounds ,stream,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
  function gpufort_array4_wrap_c_float_complex_cptr(&
      data_host,data_dev,lbounds,&
      sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    complex(c_float_complex),intent(in),target,dimension(:,:,:,:) :: data_host 
    type(c_ptr),intent(in) :: data_dev
    integer(c_int),dimension(4),intent(in),optional :: lbounds
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array4) :: array
    !
    integer(c_int),dimension(4) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array4_init(&
      array,&
      int(2*c_float_complex, c_int),&
      c_loc(data_host),data_dev,&
      shape(data_host), opt_lbounds ,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
   
  function gpufort_array4_wrap_async_c_double_complex(&
      data_host,data_dev,lbounds,&
      stream,sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    complex(c_double_complex),intent(in),target,dimension(:,:,:,:) :: data_host 
    complex(c_double_complex),intent(in),target,dimension(:,:,:,:) :: data_dev 
    integer(c_int),dimension(4),intent(in),optional :: lbounds 
    type(c_ptr),intent(in) :: stream
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array4) :: array
    !
    integer(c_int),dimension(4) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array4_init_async(&
      array,&
      int(2*c_double_complex, c_int),&
      c_loc(data_host),c_loc(data_dev),&
      shape(data_host), opt_lbounds ,stream,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
  function gpufort_array4_wrap_c_double_complex(&
      data_host,data_dev,lbounds,&
      sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    complex(c_double_complex),intent(in),target,dimension(:,:,:,:) :: data_host 
    complex(c_double_complex),intent(in),target,dimension(:,:,:,:) :: data_dev 
    integer(c_int),dimension(4),intent(in),optional :: lbounds
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array4) :: array
    !
    integer(c_int),dimension(4) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array4_init(&
      array,&
      int(2*c_double_complex, c_int),&
      c_loc(data_host),c_loc(data_dev),&
      shape(data_host), opt_lbounds ,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
   
  function gpufort_array4_wrap_async_c_double_complex_cptr(&
      data_host,data_dev,lbounds,&
      stream,sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    complex(c_double_complex),intent(in),target,dimension(:,:,:,:) :: data_host 
    type(c_ptr),intent(in) :: data_dev
    integer(c_int),dimension(4),intent(in),optional :: lbounds 
    type(c_ptr),intent(in) :: stream
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array4) :: array
    !
    integer(c_int),dimension(4) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array4_init_async(&
      array,&
      int(2*c_double_complex, c_int),&
      c_loc(data_host),data_dev,&
      shape(data_host), opt_lbounds ,stream,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
  function gpufort_array4_wrap_c_double_complex_cptr(&
      data_host,data_dev,lbounds,&
      sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    complex(c_double_complex),intent(in),target,dimension(:,:,:,:) :: data_host 
    type(c_ptr),intent(in) :: data_dev
    integer(c_int),dimension(4),intent(in),optional :: lbounds
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array4) :: array
    !
    integer(c_int),dimension(4) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array4_init(&
      array,&
      int(2*c_double_complex, c_int),&
      c_loc(data_host),data_dev,&
      shape(data_host), opt_lbounds ,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
  function gpufort_array4_wrap_device_cptr(&
      data_dev,sizes,lbounds,bytes_per_element) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(c_ptr),intent(in) :: data_dev 
    integer(c_int),dimension(4),intent(in) :: sizes
    integer(c_int),dimension(4),intent(in),optional :: lbounds
    integer(c_int),intent(in),optional :: bytes_per_element
    !
    type(gpufort_array4) :: array
    !
    integer(c_int),dimension(4) :: opt_lbounds
    integer(c_int) :: opt_bytes_per_element
    !
    integer(kind(hipSuccess)) :: ierr
    !
    opt_lbounds = 1
    opt_bytes_per_element = 1
    if ( present(lbounds) ) opt_lbounds = lbounds             
    if ( present(bytes_per_element) ) opt_bytes_per_element = bytes_per_element             
    ierr = gpufort_array4_init(&
      array,&
      opt_bytes_per_element,&
      c_null_ptr,data_dev,&
      sizes, opt_lbounds,&
      gpufort_array_wrap_host_wrap_device,&
      gpufort_array_sync_none)
  end function
  function gpufort_array4_wrap_device_ptr_c_bool(&
      data_dev,lbounds) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    logical(c_bool),intent(in),pointer,dimension(:,:,:,:) :: data_dev 
    integer(c_int),dimension(4),intent(in),optional :: lbounds
    !
    type(gpufort_array4) :: array
    !
    integer(c_int),dimension(4) :: opt_lbounds
    !
    integer(kind(hipSuccess)) :: ierr
    !
    opt_lbounds    = 1
    if ( present(lbounds) ) opt_lbounds = lbounds             
    ierr = gpufort_array4_init(&
      array,&
      int(c_bool, c_int),&
      c_null_ptr,c_loc(data_dev),&
      shape(data_dev), opt_lbounds,&
      gpufort_array_wrap_host_wrap_device,&
      gpufort_array_sync_none)
  end function
  function gpufort_array4_wrap_device_ptr_c_short(&
      data_dev,lbounds) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    integer(c_short),intent(in),pointer,dimension(:,:,:,:) :: data_dev 
    integer(c_int),dimension(4),intent(in),optional :: lbounds
    !
    type(gpufort_array4) :: array
    !
    integer(c_int),dimension(4) :: opt_lbounds
    !
    integer(kind(hipSuccess)) :: ierr
    !
    opt_lbounds    = 1
    if ( present(lbounds) ) opt_lbounds = lbounds             
    ierr = gpufort_array4_init(&
      array,&
      int(c_short, c_int),&
      c_null_ptr,c_loc(data_dev),&
      shape(data_dev), opt_lbounds,&
      gpufort_array_wrap_host_wrap_device,&
      gpufort_array_sync_none)
  end function
  function gpufort_array4_wrap_device_ptr_c_int(&
      data_dev,lbounds) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    integer(c_int),intent(in),pointer,dimension(:,:,:,:) :: data_dev 
    integer(c_int),dimension(4),intent(in),optional :: lbounds
    !
    type(gpufort_array4) :: array
    !
    integer(c_int),dimension(4) :: opt_lbounds
    !
    integer(kind(hipSuccess)) :: ierr
    !
    opt_lbounds    = 1
    if ( present(lbounds) ) opt_lbounds = lbounds             
    ierr = gpufort_array4_init(&
      array,&
      int(c_int, c_int),&
      c_null_ptr,c_loc(data_dev),&
      shape(data_dev), opt_lbounds,&
      gpufort_array_wrap_host_wrap_device,&
      gpufort_array_sync_none)
  end function
  function gpufort_array4_wrap_device_ptr_c_long(&
      data_dev,lbounds) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    integer(c_long),intent(in),pointer,dimension(:,:,:,:) :: data_dev 
    integer(c_int),dimension(4),intent(in),optional :: lbounds
    !
    type(gpufort_array4) :: array
    !
    integer(c_int),dimension(4) :: opt_lbounds
    !
    integer(kind(hipSuccess)) :: ierr
    !
    opt_lbounds    = 1
    if ( present(lbounds) ) opt_lbounds = lbounds             
    ierr = gpufort_array4_init(&
      array,&
      int(c_long, c_int),&
      c_null_ptr,c_loc(data_dev),&
      shape(data_dev), opt_lbounds,&
      gpufort_array_wrap_host_wrap_device,&
      gpufort_array_sync_none)
  end function
  function gpufort_array4_wrap_device_ptr_c_float(&
      data_dev,lbounds) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    real(c_float),intent(in),pointer,dimension(:,:,:,:) :: data_dev 
    integer(c_int),dimension(4),intent(in),optional :: lbounds
    !
    type(gpufort_array4) :: array
    !
    integer(c_int),dimension(4) :: opt_lbounds
    !
    integer(kind(hipSuccess)) :: ierr
    !
    opt_lbounds    = 1
    if ( present(lbounds) ) opt_lbounds = lbounds             
    ierr = gpufort_array4_init(&
      array,&
      int(c_float, c_int),&
      c_null_ptr,c_loc(data_dev),&
      shape(data_dev), opt_lbounds,&
      gpufort_array_wrap_host_wrap_device,&
      gpufort_array_sync_none)
  end function
  function gpufort_array4_wrap_device_ptr_c_double(&
      data_dev,lbounds) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    real(c_double),intent(in),pointer,dimension(:,:,:,:) :: data_dev 
    integer(c_int),dimension(4),intent(in),optional :: lbounds
    !
    type(gpufort_array4) :: array
    !
    integer(c_int),dimension(4) :: opt_lbounds
    !
    integer(kind(hipSuccess)) :: ierr
    !
    opt_lbounds    = 1
    if ( present(lbounds) ) opt_lbounds = lbounds             
    ierr = gpufort_array4_init(&
      array,&
      int(c_double, c_int),&
      c_null_ptr,c_loc(data_dev),&
      shape(data_dev), opt_lbounds,&
      gpufort_array_wrap_host_wrap_device,&
      gpufort_array_sync_none)
  end function
  function gpufort_array4_wrap_device_ptr_c_float_complex(&
      data_dev,lbounds) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    complex(c_float_complex),intent(in),pointer,dimension(:,:,:,:) :: data_dev 
    integer(c_int),dimension(4),intent(in),optional :: lbounds
    !
    type(gpufort_array4) :: array
    !
    integer(c_int),dimension(4) :: opt_lbounds
    !
    integer(kind(hipSuccess)) :: ierr
    !
    opt_lbounds    = 1
    if ( present(lbounds) ) opt_lbounds = lbounds             
    ierr = gpufort_array4_init(&
      array,&
      int(2*c_float_complex, c_int),&
      c_null_ptr,c_loc(data_dev),&
      shape(data_dev), opt_lbounds,&
      gpufort_array_wrap_host_wrap_device,&
      gpufort_array_sync_none)
  end function
  function gpufort_array4_wrap_device_ptr_c_double_complex(&
      data_dev,lbounds) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    complex(c_double_complex),intent(in),pointer,dimension(:,:,:,:) :: data_dev 
    integer(c_int),dimension(4),intent(in),optional :: lbounds
    !
    type(gpufort_array4) :: array
    !
    integer(c_int),dimension(4) :: opt_lbounds
    !
    integer(kind(hipSuccess)) :: ierr
    !
    opt_lbounds    = 1
    if ( present(lbounds) ) opt_lbounds = lbounds             
    ierr = gpufort_array4_init(&
      array,&
      int(2*c_double_complex, c_int),&
      c_null_ptr,c_loc(data_dev),&
      shape(data_dev), opt_lbounds,&
      gpufort_array_wrap_host_wrap_device,&
      gpufort_array_sync_none)
  end function
   
  function gpufort_array5_wrap_async_c_bool(&
      data_host,data_dev,lbounds,&
      stream,sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    logical(c_bool),intent(in),target,dimension(:,:,:,:,:) :: data_host 
    logical(c_bool),intent(in),target,dimension(:,:,:,:,:) :: data_dev 
    integer(c_int),dimension(5),intent(in),optional :: lbounds 
    type(c_ptr),intent(in) :: stream
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array5) :: array
    !
    integer(c_int),dimension(5) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array5_init_async(&
      array,&
      int(c_bool, c_int),&
      c_loc(data_host),c_loc(data_dev),&
      shape(data_host), opt_lbounds ,stream,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
  function gpufort_array5_wrap_c_bool(&
      data_host,data_dev,lbounds,&
      sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    logical(c_bool),intent(in),target,dimension(:,:,:,:,:) :: data_host 
    logical(c_bool),intent(in),target,dimension(:,:,:,:,:) :: data_dev 
    integer(c_int),dimension(5),intent(in),optional :: lbounds
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array5) :: array
    !
    integer(c_int),dimension(5) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array5_init(&
      array,&
      int(c_bool, c_int),&
      c_loc(data_host),c_loc(data_dev),&
      shape(data_host), opt_lbounds ,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
   
  function gpufort_array5_wrap_async_c_bool_cptr(&
      data_host,data_dev,lbounds,&
      stream,sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    logical(c_bool),intent(in),target,dimension(:,:,:,:,:) :: data_host 
    type(c_ptr),intent(in) :: data_dev
    integer(c_int),dimension(5),intent(in),optional :: lbounds 
    type(c_ptr),intent(in) :: stream
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array5) :: array
    !
    integer(c_int),dimension(5) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array5_init_async(&
      array,&
      int(c_bool, c_int),&
      c_loc(data_host),data_dev,&
      shape(data_host), opt_lbounds ,stream,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
  function gpufort_array5_wrap_c_bool_cptr(&
      data_host,data_dev,lbounds,&
      sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    logical(c_bool),intent(in),target,dimension(:,:,:,:,:) :: data_host 
    type(c_ptr),intent(in) :: data_dev
    integer(c_int),dimension(5),intent(in),optional :: lbounds
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array5) :: array
    !
    integer(c_int),dimension(5) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array5_init(&
      array,&
      int(c_bool, c_int),&
      c_loc(data_host),data_dev,&
      shape(data_host), opt_lbounds ,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
   
  function gpufort_array5_wrap_async_c_short(&
      data_host,data_dev,lbounds,&
      stream,sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    integer(c_short),intent(in),target,dimension(:,:,:,:,:) :: data_host 
    integer(c_short),intent(in),target,dimension(:,:,:,:,:) :: data_dev 
    integer(c_int),dimension(5),intent(in),optional :: lbounds 
    type(c_ptr),intent(in) :: stream
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array5) :: array
    !
    integer(c_int),dimension(5) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array5_init_async(&
      array,&
      int(c_short, c_int),&
      c_loc(data_host),c_loc(data_dev),&
      shape(data_host), opt_lbounds ,stream,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
  function gpufort_array5_wrap_c_short(&
      data_host,data_dev,lbounds,&
      sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    integer(c_short),intent(in),target,dimension(:,:,:,:,:) :: data_host 
    integer(c_short),intent(in),target,dimension(:,:,:,:,:) :: data_dev 
    integer(c_int),dimension(5),intent(in),optional :: lbounds
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array5) :: array
    !
    integer(c_int),dimension(5) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array5_init(&
      array,&
      int(c_short, c_int),&
      c_loc(data_host),c_loc(data_dev),&
      shape(data_host), opt_lbounds ,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
   
  function gpufort_array5_wrap_async_c_short_cptr(&
      data_host,data_dev,lbounds,&
      stream,sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    integer(c_short),intent(in),target,dimension(:,:,:,:,:) :: data_host 
    type(c_ptr),intent(in) :: data_dev
    integer(c_int),dimension(5),intent(in),optional :: lbounds 
    type(c_ptr),intent(in) :: stream
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array5) :: array
    !
    integer(c_int),dimension(5) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array5_init_async(&
      array,&
      int(c_short, c_int),&
      c_loc(data_host),data_dev,&
      shape(data_host), opt_lbounds ,stream,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
  function gpufort_array5_wrap_c_short_cptr(&
      data_host,data_dev,lbounds,&
      sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    integer(c_short),intent(in),target,dimension(:,:,:,:,:) :: data_host 
    type(c_ptr),intent(in) :: data_dev
    integer(c_int),dimension(5),intent(in),optional :: lbounds
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array5) :: array
    !
    integer(c_int),dimension(5) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array5_init(&
      array,&
      int(c_short, c_int),&
      c_loc(data_host),data_dev,&
      shape(data_host), opt_lbounds ,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
   
  function gpufort_array5_wrap_async_c_int(&
      data_host,data_dev,lbounds,&
      stream,sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    integer(c_int),intent(in),target,dimension(:,:,:,:,:) :: data_host 
    integer(c_int),intent(in),target,dimension(:,:,:,:,:) :: data_dev 
    integer(c_int),dimension(5),intent(in),optional :: lbounds 
    type(c_ptr),intent(in) :: stream
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array5) :: array
    !
    integer(c_int),dimension(5) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array5_init_async(&
      array,&
      int(c_int, c_int),&
      c_loc(data_host),c_loc(data_dev),&
      shape(data_host), opt_lbounds ,stream,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
  function gpufort_array5_wrap_c_int(&
      data_host,data_dev,lbounds,&
      sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    integer(c_int),intent(in),target,dimension(:,:,:,:,:) :: data_host 
    integer(c_int),intent(in),target,dimension(:,:,:,:,:) :: data_dev 
    integer(c_int),dimension(5),intent(in),optional :: lbounds
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array5) :: array
    !
    integer(c_int),dimension(5) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array5_init(&
      array,&
      int(c_int, c_int),&
      c_loc(data_host),c_loc(data_dev),&
      shape(data_host), opt_lbounds ,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
   
  function gpufort_array5_wrap_async_c_int_cptr(&
      data_host,data_dev,lbounds,&
      stream,sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    integer(c_int),intent(in),target,dimension(:,:,:,:,:) :: data_host 
    type(c_ptr),intent(in) :: data_dev
    integer(c_int),dimension(5),intent(in),optional :: lbounds 
    type(c_ptr),intent(in) :: stream
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array5) :: array
    !
    integer(c_int),dimension(5) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array5_init_async(&
      array,&
      int(c_int, c_int),&
      c_loc(data_host),data_dev,&
      shape(data_host), opt_lbounds ,stream,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
  function gpufort_array5_wrap_c_int_cptr(&
      data_host,data_dev,lbounds,&
      sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    integer(c_int),intent(in),target,dimension(:,:,:,:,:) :: data_host 
    type(c_ptr),intent(in) :: data_dev
    integer(c_int),dimension(5),intent(in),optional :: lbounds
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array5) :: array
    !
    integer(c_int),dimension(5) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array5_init(&
      array,&
      int(c_int, c_int),&
      c_loc(data_host),data_dev,&
      shape(data_host), opt_lbounds ,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
   
  function gpufort_array5_wrap_async_c_long(&
      data_host,data_dev,lbounds,&
      stream,sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    integer(c_long),intent(in),target,dimension(:,:,:,:,:) :: data_host 
    integer(c_long),intent(in),target,dimension(:,:,:,:,:) :: data_dev 
    integer(c_int),dimension(5),intent(in),optional :: lbounds 
    type(c_ptr),intent(in) :: stream
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array5) :: array
    !
    integer(c_int),dimension(5) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array5_init_async(&
      array,&
      int(c_long, c_int),&
      c_loc(data_host),c_loc(data_dev),&
      shape(data_host), opt_lbounds ,stream,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
  function gpufort_array5_wrap_c_long(&
      data_host,data_dev,lbounds,&
      sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    integer(c_long),intent(in),target,dimension(:,:,:,:,:) :: data_host 
    integer(c_long),intent(in),target,dimension(:,:,:,:,:) :: data_dev 
    integer(c_int),dimension(5),intent(in),optional :: lbounds
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array5) :: array
    !
    integer(c_int),dimension(5) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array5_init(&
      array,&
      int(c_long, c_int),&
      c_loc(data_host),c_loc(data_dev),&
      shape(data_host), opt_lbounds ,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
   
  function gpufort_array5_wrap_async_c_long_cptr(&
      data_host,data_dev,lbounds,&
      stream,sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    integer(c_long),intent(in),target,dimension(:,:,:,:,:) :: data_host 
    type(c_ptr),intent(in) :: data_dev
    integer(c_int),dimension(5),intent(in),optional :: lbounds 
    type(c_ptr),intent(in) :: stream
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array5) :: array
    !
    integer(c_int),dimension(5) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array5_init_async(&
      array,&
      int(c_long, c_int),&
      c_loc(data_host),data_dev,&
      shape(data_host), opt_lbounds ,stream,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
  function gpufort_array5_wrap_c_long_cptr(&
      data_host,data_dev,lbounds,&
      sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    integer(c_long),intent(in),target,dimension(:,:,:,:,:) :: data_host 
    type(c_ptr),intent(in) :: data_dev
    integer(c_int),dimension(5),intent(in),optional :: lbounds
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array5) :: array
    !
    integer(c_int),dimension(5) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array5_init(&
      array,&
      int(c_long, c_int),&
      c_loc(data_host),data_dev,&
      shape(data_host), opt_lbounds ,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
   
  function gpufort_array5_wrap_async_c_float(&
      data_host,data_dev,lbounds,&
      stream,sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    real(c_float),intent(in),target,dimension(:,:,:,:,:) :: data_host 
    real(c_float),intent(in),target,dimension(:,:,:,:,:) :: data_dev 
    integer(c_int),dimension(5),intent(in),optional :: lbounds 
    type(c_ptr),intent(in) :: stream
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array5) :: array
    !
    integer(c_int),dimension(5) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array5_init_async(&
      array,&
      int(c_float, c_int),&
      c_loc(data_host),c_loc(data_dev),&
      shape(data_host), opt_lbounds ,stream,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
  function gpufort_array5_wrap_c_float(&
      data_host,data_dev,lbounds,&
      sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    real(c_float),intent(in),target,dimension(:,:,:,:,:) :: data_host 
    real(c_float),intent(in),target,dimension(:,:,:,:,:) :: data_dev 
    integer(c_int),dimension(5),intent(in),optional :: lbounds
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array5) :: array
    !
    integer(c_int),dimension(5) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array5_init(&
      array,&
      int(c_float, c_int),&
      c_loc(data_host),c_loc(data_dev),&
      shape(data_host), opt_lbounds ,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
   
  function gpufort_array5_wrap_async_c_float_cptr(&
      data_host,data_dev,lbounds,&
      stream,sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    real(c_float),intent(in),target,dimension(:,:,:,:,:) :: data_host 
    type(c_ptr),intent(in) :: data_dev
    integer(c_int),dimension(5),intent(in),optional :: lbounds 
    type(c_ptr),intent(in) :: stream
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array5) :: array
    !
    integer(c_int),dimension(5) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array5_init_async(&
      array,&
      int(c_float, c_int),&
      c_loc(data_host),data_dev,&
      shape(data_host), opt_lbounds ,stream,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
  function gpufort_array5_wrap_c_float_cptr(&
      data_host,data_dev,lbounds,&
      sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    real(c_float),intent(in),target,dimension(:,:,:,:,:) :: data_host 
    type(c_ptr),intent(in) :: data_dev
    integer(c_int),dimension(5),intent(in),optional :: lbounds
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array5) :: array
    !
    integer(c_int),dimension(5) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array5_init(&
      array,&
      int(c_float, c_int),&
      c_loc(data_host),data_dev,&
      shape(data_host), opt_lbounds ,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
   
  function gpufort_array5_wrap_async_c_double(&
      data_host,data_dev,lbounds,&
      stream,sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    real(c_double),intent(in),target,dimension(:,:,:,:,:) :: data_host 
    real(c_double),intent(in),target,dimension(:,:,:,:,:) :: data_dev 
    integer(c_int),dimension(5),intent(in),optional :: lbounds 
    type(c_ptr),intent(in) :: stream
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array5) :: array
    !
    integer(c_int),dimension(5) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array5_init_async(&
      array,&
      int(c_double, c_int),&
      c_loc(data_host),c_loc(data_dev),&
      shape(data_host), opt_lbounds ,stream,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
  function gpufort_array5_wrap_c_double(&
      data_host,data_dev,lbounds,&
      sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    real(c_double),intent(in),target,dimension(:,:,:,:,:) :: data_host 
    real(c_double),intent(in),target,dimension(:,:,:,:,:) :: data_dev 
    integer(c_int),dimension(5),intent(in),optional :: lbounds
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array5) :: array
    !
    integer(c_int),dimension(5) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array5_init(&
      array,&
      int(c_double, c_int),&
      c_loc(data_host),c_loc(data_dev),&
      shape(data_host), opt_lbounds ,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
   
  function gpufort_array5_wrap_async_c_double_cptr(&
      data_host,data_dev,lbounds,&
      stream,sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    real(c_double),intent(in),target,dimension(:,:,:,:,:) :: data_host 
    type(c_ptr),intent(in) :: data_dev
    integer(c_int),dimension(5),intent(in),optional :: lbounds 
    type(c_ptr),intent(in) :: stream
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array5) :: array
    !
    integer(c_int),dimension(5) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array5_init_async(&
      array,&
      int(c_double, c_int),&
      c_loc(data_host),data_dev,&
      shape(data_host), opt_lbounds ,stream,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
  function gpufort_array5_wrap_c_double_cptr(&
      data_host,data_dev,lbounds,&
      sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    real(c_double),intent(in),target,dimension(:,:,:,:,:) :: data_host 
    type(c_ptr),intent(in) :: data_dev
    integer(c_int),dimension(5),intent(in),optional :: lbounds
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array5) :: array
    !
    integer(c_int),dimension(5) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array5_init(&
      array,&
      int(c_double, c_int),&
      c_loc(data_host),data_dev,&
      shape(data_host), opt_lbounds ,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
   
  function gpufort_array5_wrap_async_c_float_complex(&
      data_host,data_dev,lbounds,&
      stream,sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    complex(c_float_complex),intent(in),target,dimension(:,:,:,:,:) :: data_host 
    complex(c_float_complex),intent(in),target,dimension(:,:,:,:,:) :: data_dev 
    integer(c_int),dimension(5),intent(in),optional :: lbounds 
    type(c_ptr),intent(in) :: stream
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array5) :: array
    !
    integer(c_int),dimension(5) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array5_init_async(&
      array,&
      int(2*c_float_complex, c_int),&
      c_loc(data_host),c_loc(data_dev),&
      shape(data_host), opt_lbounds ,stream,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
  function gpufort_array5_wrap_c_float_complex(&
      data_host,data_dev,lbounds,&
      sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    complex(c_float_complex),intent(in),target,dimension(:,:,:,:,:) :: data_host 
    complex(c_float_complex),intent(in),target,dimension(:,:,:,:,:) :: data_dev 
    integer(c_int),dimension(5),intent(in),optional :: lbounds
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array5) :: array
    !
    integer(c_int),dimension(5) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array5_init(&
      array,&
      int(2*c_float_complex, c_int),&
      c_loc(data_host),c_loc(data_dev),&
      shape(data_host), opt_lbounds ,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
   
  function gpufort_array5_wrap_async_c_float_complex_cptr(&
      data_host,data_dev,lbounds,&
      stream,sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    complex(c_float_complex),intent(in),target,dimension(:,:,:,:,:) :: data_host 
    type(c_ptr),intent(in) :: data_dev
    integer(c_int),dimension(5),intent(in),optional :: lbounds 
    type(c_ptr),intent(in) :: stream
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array5) :: array
    !
    integer(c_int),dimension(5) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array5_init_async(&
      array,&
      int(2*c_float_complex, c_int),&
      c_loc(data_host),data_dev,&
      shape(data_host), opt_lbounds ,stream,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
  function gpufort_array5_wrap_c_float_complex_cptr(&
      data_host,data_dev,lbounds,&
      sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    complex(c_float_complex),intent(in),target,dimension(:,:,:,:,:) :: data_host 
    type(c_ptr),intent(in) :: data_dev
    integer(c_int),dimension(5),intent(in),optional :: lbounds
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array5) :: array
    !
    integer(c_int),dimension(5) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array5_init(&
      array,&
      int(2*c_float_complex, c_int),&
      c_loc(data_host),data_dev,&
      shape(data_host), opt_lbounds ,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
   
  function gpufort_array5_wrap_async_c_double_complex(&
      data_host,data_dev,lbounds,&
      stream,sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    complex(c_double_complex),intent(in),target,dimension(:,:,:,:,:) :: data_host 
    complex(c_double_complex),intent(in),target,dimension(:,:,:,:,:) :: data_dev 
    integer(c_int),dimension(5),intent(in),optional :: lbounds 
    type(c_ptr),intent(in) :: stream
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array5) :: array
    !
    integer(c_int),dimension(5) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array5_init_async(&
      array,&
      int(2*c_double_complex, c_int),&
      c_loc(data_host),c_loc(data_dev),&
      shape(data_host), opt_lbounds ,stream,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
  function gpufort_array5_wrap_c_double_complex(&
      data_host,data_dev,lbounds,&
      sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    complex(c_double_complex),intent(in),target,dimension(:,:,:,:,:) :: data_host 
    complex(c_double_complex),intent(in),target,dimension(:,:,:,:,:) :: data_dev 
    integer(c_int),dimension(5),intent(in),optional :: lbounds
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array5) :: array
    !
    integer(c_int),dimension(5) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array5_init(&
      array,&
      int(2*c_double_complex, c_int),&
      c_loc(data_host),c_loc(data_dev),&
      shape(data_host), opt_lbounds ,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
   
  function gpufort_array5_wrap_async_c_double_complex_cptr(&
      data_host,data_dev,lbounds,&
      stream,sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    complex(c_double_complex),intent(in),target,dimension(:,:,:,:,:) :: data_host 
    type(c_ptr),intent(in) :: data_dev
    integer(c_int),dimension(5),intent(in),optional :: lbounds 
    type(c_ptr),intent(in) :: stream
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array5) :: array
    !
    integer(c_int),dimension(5) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array5_init_async(&
      array,&
      int(2*c_double_complex, c_int),&
      c_loc(data_host),data_dev,&
      shape(data_host), opt_lbounds ,stream,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
  function gpufort_array5_wrap_c_double_complex_cptr(&
      data_host,data_dev,lbounds,&
      sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    complex(c_double_complex),intent(in),target,dimension(:,:,:,:,:) :: data_host 
    type(c_ptr),intent(in) :: data_dev
    integer(c_int),dimension(5),intent(in),optional :: lbounds
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array5) :: array
    !
    integer(c_int),dimension(5) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array5_init(&
      array,&
      int(2*c_double_complex, c_int),&
      c_loc(data_host),data_dev,&
      shape(data_host), opt_lbounds ,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
  function gpufort_array5_wrap_device_cptr(&
      data_dev,sizes,lbounds,bytes_per_element) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(c_ptr),intent(in) :: data_dev 
    integer(c_int),dimension(5),intent(in) :: sizes
    integer(c_int),dimension(5),intent(in),optional :: lbounds
    integer(c_int),intent(in),optional :: bytes_per_element
    !
    type(gpufort_array5) :: array
    !
    integer(c_int),dimension(5) :: opt_lbounds
    integer(c_int) :: opt_bytes_per_element
    !
    integer(kind(hipSuccess)) :: ierr
    !
    opt_lbounds = 1
    opt_bytes_per_element = 1
    if ( present(lbounds) ) opt_lbounds = lbounds             
    if ( present(bytes_per_element) ) opt_bytes_per_element = bytes_per_element             
    ierr = gpufort_array5_init(&
      array,&
      opt_bytes_per_element,&
      c_null_ptr,data_dev,&
      sizes, opt_lbounds,&
      gpufort_array_wrap_host_wrap_device,&
      gpufort_array_sync_none)
  end function
  function gpufort_array5_wrap_device_ptr_c_bool(&
      data_dev,lbounds) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    logical(c_bool),intent(in),pointer,dimension(:,:,:,:,:) :: data_dev 
    integer(c_int),dimension(5),intent(in),optional :: lbounds
    !
    type(gpufort_array5) :: array
    !
    integer(c_int),dimension(5) :: opt_lbounds
    !
    integer(kind(hipSuccess)) :: ierr
    !
    opt_lbounds    = 1
    if ( present(lbounds) ) opt_lbounds = lbounds             
    ierr = gpufort_array5_init(&
      array,&
      int(c_bool, c_int),&
      c_null_ptr,c_loc(data_dev),&
      shape(data_dev), opt_lbounds,&
      gpufort_array_wrap_host_wrap_device,&
      gpufort_array_sync_none)
  end function
  function gpufort_array5_wrap_device_ptr_c_short(&
      data_dev,lbounds) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    integer(c_short),intent(in),pointer,dimension(:,:,:,:,:) :: data_dev 
    integer(c_int),dimension(5),intent(in),optional :: lbounds
    !
    type(gpufort_array5) :: array
    !
    integer(c_int),dimension(5) :: opt_lbounds
    !
    integer(kind(hipSuccess)) :: ierr
    !
    opt_lbounds    = 1
    if ( present(lbounds) ) opt_lbounds = lbounds             
    ierr = gpufort_array5_init(&
      array,&
      int(c_short, c_int),&
      c_null_ptr,c_loc(data_dev),&
      shape(data_dev), opt_lbounds,&
      gpufort_array_wrap_host_wrap_device,&
      gpufort_array_sync_none)
  end function
  function gpufort_array5_wrap_device_ptr_c_int(&
      data_dev,lbounds) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    integer(c_int),intent(in),pointer,dimension(:,:,:,:,:) :: data_dev 
    integer(c_int),dimension(5),intent(in),optional :: lbounds
    !
    type(gpufort_array5) :: array
    !
    integer(c_int),dimension(5) :: opt_lbounds
    !
    integer(kind(hipSuccess)) :: ierr
    !
    opt_lbounds    = 1
    if ( present(lbounds) ) opt_lbounds = lbounds             
    ierr = gpufort_array5_init(&
      array,&
      int(c_int, c_int),&
      c_null_ptr,c_loc(data_dev),&
      shape(data_dev), opt_lbounds,&
      gpufort_array_wrap_host_wrap_device,&
      gpufort_array_sync_none)
  end function
  function gpufort_array5_wrap_device_ptr_c_long(&
      data_dev,lbounds) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    integer(c_long),intent(in),pointer,dimension(:,:,:,:,:) :: data_dev 
    integer(c_int),dimension(5),intent(in),optional :: lbounds
    !
    type(gpufort_array5) :: array
    !
    integer(c_int),dimension(5) :: opt_lbounds
    !
    integer(kind(hipSuccess)) :: ierr
    !
    opt_lbounds    = 1
    if ( present(lbounds) ) opt_lbounds = lbounds             
    ierr = gpufort_array5_init(&
      array,&
      int(c_long, c_int),&
      c_null_ptr,c_loc(data_dev),&
      shape(data_dev), opt_lbounds,&
      gpufort_array_wrap_host_wrap_device,&
      gpufort_array_sync_none)
  end function
  function gpufort_array5_wrap_device_ptr_c_float(&
      data_dev,lbounds) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    real(c_float),intent(in),pointer,dimension(:,:,:,:,:) :: data_dev 
    integer(c_int),dimension(5),intent(in),optional :: lbounds
    !
    type(gpufort_array5) :: array
    !
    integer(c_int),dimension(5) :: opt_lbounds
    !
    integer(kind(hipSuccess)) :: ierr
    !
    opt_lbounds    = 1
    if ( present(lbounds) ) opt_lbounds = lbounds             
    ierr = gpufort_array5_init(&
      array,&
      int(c_float, c_int),&
      c_null_ptr,c_loc(data_dev),&
      shape(data_dev), opt_lbounds,&
      gpufort_array_wrap_host_wrap_device,&
      gpufort_array_sync_none)
  end function
  function gpufort_array5_wrap_device_ptr_c_double(&
      data_dev,lbounds) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    real(c_double),intent(in),pointer,dimension(:,:,:,:,:) :: data_dev 
    integer(c_int),dimension(5),intent(in),optional :: lbounds
    !
    type(gpufort_array5) :: array
    !
    integer(c_int),dimension(5) :: opt_lbounds
    !
    integer(kind(hipSuccess)) :: ierr
    !
    opt_lbounds    = 1
    if ( present(lbounds) ) opt_lbounds = lbounds             
    ierr = gpufort_array5_init(&
      array,&
      int(c_double, c_int),&
      c_null_ptr,c_loc(data_dev),&
      shape(data_dev), opt_lbounds,&
      gpufort_array_wrap_host_wrap_device,&
      gpufort_array_sync_none)
  end function
  function gpufort_array5_wrap_device_ptr_c_float_complex(&
      data_dev,lbounds) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    complex(c_float_complex),intent(in),pointer,dimension(:,:,:,:,:) :: data_dev 
    integer(c_int),dimension(5),intent(in),optional :: lbounds
    !
    type(gpufort_array5) :: array
    !
    integer(c_int),dimension(5) :: opt_lbounds
    !
    integer(kind(hipSuccess)) :: ierr
    !
    opt_lbounds    = 1
    if ( present(lbounds) ) opt_lbounds = lbounds             
    ierr = gpufort_array5_init(&
      array,&
      int(2*c_float_complex, c_int),&
      c_null_ptr,c_loc(data_dev),&
      shape(data_dev), opt_lbounds,&
      gpufort_array_wrap_host_wrap_device,&
      gpufort_array_sync_none)
  end function
  function gpufort_array5_wrap_device_ptr_c_double_complex(&
      data_dev,lbounds) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    complex(c_double_complex),intent(in),pointer,dimension(:,:,:,:,:) :: data_dev 
    integer(c_int),dimension(5),intent(in),optional :: lbounds
    !
    type(gpufort_array5) :: array
    !
    integer(c_int),dimension(5) :: opt_lbounds
    !
    integer(kind(hipSuccess)) :: ierr
    !
    opt_lbounds    = 1
    if ( present(lbounds) ) opt_lbounds = lbounds             
    ierr = gpufort_array5_init(&
      array,&
      int(2*c_double_complex, c_int),&
      c_null_ptr,c_loc(data_dev),&
      shape(data_dev), opt_lbounds,&
      gpufort_array_wrap_host_wrap_device,&
      gpufort_array_sync_none)
  end function
   
  function gpufort_array6_wrap_async_c_bool(&
      data_host,data_dev,lbounds,&
      stream,sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    logical(c_bool),intent(in),target,dimension(:,:,:,:,:,:) :: data_host 
    logical(c_bool),intent(in),target,dimension(:,:,:,:,:,:) :: data_dev 
    integer(c_int),dimension(6),intent(in),optional :: lbounds 
    type(c_ptr),intent(in) :: stream
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array6) :: array
    !
    integer(c_int),dimension(6) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array6_init_async(&
      array,&
      int(c_bool, c_int),&
      c_loc(data_host),c_loc(data_dev),&
      shape(data_host), opt_lbounds ,stream,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
  function gpufort_array6_wrap_c_bool(&
      data_host,data_dev,lbounds,&
      sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    logical(c_bool),intent(in),target,dimension(:,:,:,:,:,:) :: data_host 
    logical(c_bool),intent(in),target,dimension(:,:,:,:,:,:) :: data_dev 
    integer(c_int),dimension(6),intent(in),optional :: lbounds
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array6) :: array
    !
    integer(c_int),dimension(6) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array6_init(&
      array,&
      int(c_bool, c_int),&
      c_loc(data_host),c_loc(data_dev),&
      shape(data_host), opt_lbounds ,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
   
  function gpufort_array6_wrap_async_c_bool_cptr(&
      data_host,data_dev,lbounds,&
      stream,sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    logical(c_bool),intent(in),target,dimension(:,:,:,:,:,:) :: data_host 
    type(c_ptr),intent(in) :: data_dev
    integer(c_int),dimension(6),intent(in),optional :: lbounds 
    type(c_ptr),intent(in) :: stream
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array6) :: array
    !
    integer(c_int),dimension(6) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array6_init_async(&
      array,&
      int(c_bool, c_int),&
      c_loc(data_host),data_dev,&
      shape(data_host), opt_lbounds ,stream,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
  function gpufort_array6_wrap_c_bool_cptr(&
      data_host,data_dev,lbounds,&
      sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    logical(c_bool),intent(in),target,dimension(:,:,:,:,:,:) :: data_host 
    type(c_ptr),intent(in) :: data_dev
    integer(c_int),dimension(6),intent(in),optional :: lbounds
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array6) :: array
    !
    integer(c_int),dimension(6) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array6_init(&
      array,&
      int(c_bool, c_int),&
      c_loc(data_host),data_dev,&
      shape(data_host), opt_lbounds ,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
   
  function gpufort_array6_wrap_async_c_short(&
      data_host,data_dev,lbounds,&
      stream,sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    integer(c_short),intent(in),target,dimension(:,:,:,:,:,:) :: data_host 
    integer(c_short),intent(in),target,dimension(:,:,:,:,:,:) :: data_dev 
    integer(c_int),dimension(6),intent(in),optional :: lbounds 
    type(c_ptr),intent(in) :: stream
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array6) :: array
    !
    integer(c_int),dimension(6) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array6_init_async(&
      array,&
      int(c_short, c_int),&
      c_loc(data_host),c_loc(data_dev),&
      shape(data_host), opt_lbounds ,stream,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
  function gpufort_array6_wrap_c_short(&
      data_host,data_dev,lbounds,&
      sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    integer(c_short),intent(in),target,dimension(:,:,:,:,:,:) :: data_host 
    integer(c_short),intent(in),target,dimension(:,:,:,:,:,:) :: data_dev 
    integer(c_int),dimension(6),intent(in),optional :: lbounds
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array6) :: array
    !
    integer(c_int),dimension(6) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array6_init(&
      array,&
      int(c_short, c_int),&
      c_loc(data_host),c_loc(data_dev),&
      shape(data_host), opt_lbounds ,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
   
  function gpufort_array6_wrap_async_c_short_cptr(&
      data_host,data_dev,lbounds,&
      stream,sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    integer(c_short),intent(in),target,dimension(:,:,:,:,:,:) :: data_host 
    type(c_ptr),intent(in) :: data_dev
    integer(c_int),dimension(6),intent(in),optional :: lbounds 
    type(c_ptr),intent(in) :: stream
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array6) :: array
    !
    integer(c_int),dimension(6) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array6_init_async(&
      array,&
      int(c_short, c_int),&
      c_loc(data_host),data_dev,&
      shape(data_host), opt_lbounds ,stream,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
  function gpufort_array6_wrap_c_short_cptr(&
      data_host,data_dev,lbounds,&
      sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    integer(c_short),intent(in),target,dimension(:,:,:,:,:,:) :: data_host 
    type(c_ptr),intent(in) :: data_dev
    integer(c_int),dimension(6),intent(in),optional :: lbounds
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array6) :: array
    !
    integer(c_int),dimension(6) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array6_init(&
      array,&
      int(c_short, c_int),&
      c_loc(data_host),data_dev,&
      shape(data_host), opt_lbounds ,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
   
  function gpufort_array6_wrap_async_c_int(&
      data_host,data_dev,lbounds,&
      stream,sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    integer(c_int),intent(in),target,dimension(:,:,:,:,:,:) :: data_host 
    integer(c_int),intent(in),target,dimension(:,:,:,:,:,:) :: data_dev 
    integer(c_int),dimension(6),intent(in),optional :: lbounds 
    type(c_ptr),intent(in) :: stream
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array6) :: array
    !
    integer(c_int),dimension(6) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array6_init_async(&
      array,&
      int(c_int, c_int),&
      c_loc(data_host),c_loc(data_dev),&
      shape(data_host), opt_lbounds ,stream,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
  function gpufort_array6_wrap_c_int(&
      data_host,data_dev,lbounds,&
      sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    integer(c_int),intent(in),target,dimension(:,:,:,:,:,:) :: data_host 
    integer(c_int),intent(in),target,dimension(:,:,:,:,:,:) :: data_dev 
    integer(c_int),dimension(6),intent(in),optional :: lbounds
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array6) :: array
    !
    integer(c_int),dimension(6) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array6_init(&
      array,&
      int(c_int, c_int),&
      c_loc(data_host),c_loc(data_dev),&
      shape(data_host), opt_lbounds ,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
   
  function gpufort_array6_wrap_async_c_int_cptr(&
      data_host,data_dev,lbounds,&
      stream,sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    integer(c_int),intent(in),target,dimension(:,:,:,:,:,:) :: data_host 
    type(c_ptr),intent(in) :: data_dev
    integer(c_int),dimension(6),intent(in),optional :: lbounds 
    type(c_ptr),intent(in) :: stream
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array6) :: array
    !
    integer(c_int),dimension(6) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array6_init_async(&
      array,&
      int(c_int, c_int),&
      c_loc(data_host),data_dev,&
      shape(data_host), opt_lbounds ,stream,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
  function gpufort_array6_wrap_c_int_cptr(&
      data_host,data_dev,lbounds,&
      sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    integer(c_int),intent(in),target,dimension(:,:,:,:,:,:) :: data_host 
    type(c_ptr),intent(in) :: data_dev
    integer(c_int),dimension(6),intent(in),optional :: lbounds
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array6) :: array
    !
    integer(c_int),dimension(6) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array6_init(&
      array,&
      int(c_int, c_int),&
      c_loc(data_host),data_dev,&
      shape(data_host), opt_lbounds ,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
   
  function gpufort_array6_wrap_async_c_long(&
      data_host,data_dev,lbounds,&
      stream,sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    integer(c_long),intent(in),target,dimension(:,:,:,:,:,:) :: data_host 
    integer(c_long),intent(in),target,dimension(:,:,:,:,:,:) :: data_dev 
    integer(c_int),dimension(6),intent(in),optional :: lbounds 
    type(c_ptr),intent(in) :: stream
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array6) :: array
    !
    integer(c_int),dimension(6) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array6_init_async(&
      array,&
      int(c_long, c_int),&
      c_loc(data_host),c_loc(data_dev),&
      shape(data_host), opt_lbounds ,stream,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
  function gpufort_array6_wrap_c_long(&
      data_host,data_dev,lbounds,&
      sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    integer(c_long),intent(in),target,dimension(:,:,:,:,:,:) :: data_host 
    integer(c_long),intent(in),target,dimension(:,:,:,:,:,:) :: data_dev 
    integer(c_int),dimension(6),intent(in),optional :: lbounds
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array6) :: array
    !
    integer(c_int),dimension(6) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array6_init(&
      array,&
      int(c_long, c_int),&
      c_loc(data_host),c_loc(data_dev),&
      shape(data_host), opt_lbounds ,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
   
  function gpufort_array6_wrap_async_c_long_cptr(&
      data_host,data_dev,lbounds,&
      stream,sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    integer(c_long),intent(in),target,dimension(:,:,:,:,:,:) :: data_host 
    type(c_ptr),intent(in) :: data_dev
    integer(c_int),dimension(6),intent(in),optional :: lbounds 
    type(c_ptr),intent(in) :: stream
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array6) :: array
    !
    integer(c_int),dimension(6) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array6_init_async(&
      array,&
      int(c_long, c_int),&
      c_loc(data_host),data_dev,&
      shape(data_host), opt_lbounds ,stream,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
  function gpufort_array6_wrap_c_long_cptr(&
      data_host,data_dev,lbounds,&
      sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    integer(c_long),intent(in),target,dimension(:,:,:,:,:,:) :: data_host 
    type(c_ptr),intent(in) :: data_dev
    integer(c_int),dimension(6),intent(in),optional :: lbounds
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array6) :: array
    !
    integer(c_int),dimension(6) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array6_init(&
      array,&
      int(c_long, c_int),&
      c_loc(data_host),data_dev,&
      shape(data_host), opt_lbounds ,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
   
  function gpufort_array6_wrap_async_c_float(&
      data_host,data_dev,lbounds,&
      stream,sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    real(c_float),intent(in),target,dimension(:,:,:,:,:,:) :: data_host 
    real(c_float),intent(in),target,dimension(:,:,:,:,:,:) :: data_dev 
    integer(c_int),dimension(6),intent(in),optional :: lbounds 
    type(c_ptr),intent(in) :: stream
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array6) :: array
    !
    integer(c_int),dimension(6) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array6_init_async(&
      array,&
      int(c_float, c_int),&
      c_loc(data_host),c_loc(data_dev),&
      shape(data_host), opt_lbounds ,stream,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
  function gpufort_array6_wrap_c_float(&
      data_host,data_dev,lbounds,&
      sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    real(c_float),intent(in),target,dimension(:,:,:,:,:,:) :: data_host 
    real(c_float),intent(in),target,dimension(:,:,:,:,:,:) :: data_dev 
    integer(c_int),dimension(6),intent(in),optional :: lbounds
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array6) :: array
    !
    integer(c_int),dimension(6) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array6_init(&
      array,&
      int(c_float, c_int),&
      c_loc(data_host),c_loc(data_dev),&
      shape(data_host), opt_lbounds ,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
   
  function gpufort_array6_wrap_async_c_float_cptr(&
      data_host,data_dev,lbounds,&
      stream,sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    real(c_float),intent(in),target,dimension(:,:,:,:,:,:) :: data_host 
    type(c_ptr),intent(in) :: data_dev
    integer(c_int),dimension(6),intent(in),optional :: lbounds 
    type(c_ptr),intent(in) :: stream
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array6) :: array
    !
    integer(c_int),dimension(6) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array6_init_async(&
      array,&
      int(c_float, c_int),&
      c_loc(data_host),data_dev,&
      shape(data_host), opt_lbounds ,stream,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
  function gpufort_array6_wrap_c_float_cptr(&
      data_host,data_dev,lbounds,&
      sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    real(c_float),intent(in),target,dimension(:,:,:,:,:,:) :: data_host 
    type(c_ptr),intent(in) :: data_dev
    integer(c_int),dimension(6),intent(in),optional :: lbounds
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array6) :: array
    !
    integer(c_int),dimension(6) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array6_init(&
      array,&
      int(c_float, c_int),&
      c_loc(data_host),data_dev,&
      shape(data_host), opt_lbounds ,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
   
  function gpufort_array6_wrap_async_c_double(&
      data_host,data_dev,lbounds,&
      stream,sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    real(c_double),intent(in),target,dimension(:,:,:,:,:,:) :: data_host 
    real(c_double),intent(in),target,dimension(:,:,:,:,:,:) :: data_dev 
    integer(c_int),dimension(6),intent(in),optional :: lbounds 
    type(c_ptr),intent(in) :: stream
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array6) :: array
    !
    integer(c_int),dimension(6) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array6_init_async(&
      array,&
      int(c_double, c_int),&
      c_loc(data_host),c_loc(data_dev),&
      shape(data_host), opt_lbounds ,stream,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
  function gpufort_array6_wrap_c_double(&
      data_host,data_dev,lbounds,&
      sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    real(c_double),intent(in),target,dimension(:,:,:,:,:,:) :: data_host 
    real(c_double),intent(in),target,dimension(:,:,:,:,:,:) :: data_dev 
    integer(c_int),dimension(6),intent(in),optional :: lbounds
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array6) :: array
    !
    integer(c_int),dimension(6) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array6_init(&
      array,&
      int(c_double, c_int),&
      c_loc(data_host),c_loc(data_dev),&
      shape(data_host), opt_lbounds ,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
   
  function gpufort_array6_wrap_async_c_double_cptr(&
      data_host,data_dev,lbounds,&
      stream,sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    real(c_double),intent(in),target,dimension(:,:,:,:,:,:) :: data_host 
    type(c_ptr),intent(in) :: data_dev
    integer(c_int),dimension(6),intent(in),optional :: lbounds 
    type(c_ptr),intent(in) :: stream
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array6) :: array
    !
    integer(c_int),dimension(6) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array6_init_async(&
      array,&
      int(c_double, c_int),&
      c_loc(data_host),data_dev,&
      shape(data_host), opt_lbounds ,stream,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
  function gpufort_array6_wrap_c_double_cptr(&
      data_host,data_dev,lbounds,&
      sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    real(c_double),intent(in),target,dimension(:,:,:,:,:,:) :: data_host 
    type(c_ptr),intent(in) :: data_dev
    integer(c_int),dimension(6),intent(in),optional :: lbounds
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array6) :: array
    !
    integer(c_int),dimension(6) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array6_init(&
      array,&
      int(c_double, c_int),&
      c_loc(data_host),data_dev,&
      shape(data_host), opt_lbounds ,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
   
  function gpufort_array6_wrap_async_c_float_complex(&
      data_host,data_dev,lbounds,&
      stream,sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    complex(c_float_complex),intent(in),target,dimension(:,:,:,:,:,:) :: data_host 
    complex(c_float_complex),intent(in),target,dimension(:,:,:,:,:,:) :: data_dev 
    integer(c_int),dimension(6),intent(in),optional :: lbounds 
    type(c_ptr),intent(in) :: stream
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array6) :: array
    !
    integer(c_int),dimension(6) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array6_init_async(&
      array,&
      int(2*c_float_complex, c_int),&
      c_loc(data_host),c_loc(data_dev),&
      shape(data_host), opt_lbounds ,stream,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
  function gpufort_array6_wrap_c_float_complex(&
      data_host,data_dev,lbounds,&
      sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    complex(c_float_complex),intent(in),target,dimension(:,:,:,:,:,:) :: data_host 
    complex(c_float_complex),intent(in),target,dimension(:,:,:,:,:,:) :: data_dev 
    integer(c_int),dimension(6),intent(in),optional :: lbounds
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array6) :: array
    !
    integer(c_int),dimension(6) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array6_init(&
      array,&
      int(2*c_float_complex, c_int),&
      c_loc(data_host),c_loc(data_dev),&
      shape(data_host), opt_lbounds ,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
   
  function gpufort_array6_wrap_async_c_float_complex_cptr(&
      data_host,data_dev,lbounds,&
      stream,sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    complex(c_float_complex),intent(in),target,dimension(:,:,:,:,:,:) :: data_host 
    type(c_ptr),intent(in) :: data_dev
    integer(c_int),dimension(6),intent(in),optional :: lbounds 
    type(c_ptr),intent(in) :: stream
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array6) :: array
    !
    integer(c_int),dimension(6) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array6_init_async(&
      array,&
      int(2*c_float_complex, c_int),&
      c_loc(data_host),data_dev,&
      shape(data_host), opt_lbounds ,stream,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
  function gpufort_array6_wrap_c_float_complex_cptr(&
      data_host,data_dev,lbounds,&
      sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    complex(c_float_complex),intent(in),target,dimension(:,:,:,:,:,:) :: data_host 
    type(c_ptr),intent(in) :: data_dev
    integer(c_int),dimension(6),intent(in),optional :: lbounds
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array6) :: array
    !
    integer(c_int),dimension(6) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array6_init(&
      array,&
      int(2*c_float_complex, c_int),&
      c_loc(data_host),data_dev,&
      shape(data_host), opt_lbounds ,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
   
  function gpufort_array6_wrap_async_c_double_complex(&
      data_host,data_dev,lbounds,&
      stream,sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    complex(c_double_complex),intent(in),target,dimension(:,:,:,:,:,:) :: data_host 
    complex(c_double_complex),intent(in),target,dimension(:,:,:,:,:,:) :: data_dev 
    integer(c_int),dimension(6),intent(in),optional :: lbounds 
    type(c_ptr),intent(in) :: stream
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array6) :: array
    !
    integer(c_int),dimension(6) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array6_init_async(&
      array,&
      int(2*c_double_complex, c_int),&
      c_loc(data_host),c_loc(data_dev),&
      shape(data_host), opt_lbounds ,stream,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
  function gpufort_array6_wrap_c_double_complex(&
      data_host,data_dev,lbounds,&
      sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    complex(c_double_complex),intent(in),target,dimension(:,:,:,:,:,:) :: data_host 
    complex(c_double_complex),intent(in),target,dimension(:,:,:,:,:,:) :: data_dev 
    integer(c_int),dimension(6),intent(in),optional :: lbounds
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array6) :: array
    !
    integer(c_int),dimension(6) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array6_init(&
      array,&
      int(2*c_double_complex, c_int),&
      c_loc(data_host),c_loc(data_dev),&
      shape(data_host), opt_lbounds ,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
   
  function gpufort_array6_wrap_async_c_double_complex_cptr(&
      data_host,data_dev,lbounds,&
      stream,sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    complex(c_double_complex),intent(in),target,dimension(:,:,:,:,:,:) :: data_host 
    type(c_ptr),intent(in) :: data_dev
    integer(c_int),dimension(6),intent(in),optional :: lbounds 
    type(c_ptr),intent(in) :: stream
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array6) :: array
    !
    integer(c_int),dimension(6) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array6_init_async(&
      array,&
      int(2*c_double_complex, c_int),&
      c_loc(data_host),data_dev,&
      shape(data_host), opt_lbounds ,stream,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
  function gpufort_array6_wrap_c_double_complex_cptr(&
      data_host,data_dev,lbounds,&
      sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    complex(c_double_complex),intent(in),target,dimension(:,:,:,:,:,:) :: data_host 
    type(c_ptr),intent(in) :: data_dev
    integer(c_int),dimension(6),intent(in),optional :: lbounds
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array6) :: array
    !
    integer(c_int),dimension(6) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array6_init(&
      array,&
      int(2*c_double_complex, c_int),&
      c_loc(data_host),data_dev,&
      shape(data_host), opt_lbounds ,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
  function gpufort_array6_wrap_device_cptr(&
      data_dev,sizes,lbounds,bytes_per_element) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(c_ptr),intent(in) :: data_dev 
    integer(c_int),dimension(6),intent(in) :: sizes
    integer(c_int),dimension(6),intent(in),optional :: lbounds
    integer(c_int),intent(in),optional :: bytes_per_element
    !
    type(gpufort_array6) :: array
    !
    integer(c_int),dimension(6) :: opt_lbounds
    integer(c_int) :: opt_bytes_per_element
    !
    integer(kind(hipSuccess)) :: ierr
    !
    opt_lbounds = 1
    opt_bytes_per_element = 1
    if ( present(lbounds) ) opt_lbounds = lbounds             
    if ( present(bytes_per_element) ) opt_bytes_per_element = bytes_per_element             
    ierr = gpufort_array6_init(&
      array,&
      opt_bytes_per_element,&
      c_null_ptr,data_dev,&
      sizes, opt_lbounds,&
      gpufort_array_wrap_host_wrap_device,&
      gpufort_array_sync_none)
  end function
  function gpufort_array6_wrap_device_ptr_c_bool(&
      data_dev,lbounds) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    logical(c_bool),intent(in),pointer,dimension(:,:,:,:,:,:) :: data_dev 
    integer(c_int),dimension(6),intent(in),optional :: lbounds
    !
    type(gpufort_array6) :: array
    !
    integer(c_int),dimension(6) :: opt_lbounds
    !
    integer(kind(hipSuccess)) :: ierr
    !
    opt_lbounds    = 1
    if ( present(lbounds) ) opt_lbounds = lbounds             
    ierr = gpufort_array6_init(&
      array,&
      int(c_bool, c_int),&
      c_null_ptr,c_loc(data_dev),&
      shape(data_dev), opt_lbounds,&
      gpufort_array_wrap_host_wrap_device,&
      gpufort_array_sync_none)
  end function
  function gpufort_array6_wrap_device_ptr_c_short(&
      data_dev,lbounds) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    integer(c_short),intent(in),pointer,dimension(:,:,:,:,:,:) :: data_dev 
    integer(c_int),dimension(6),intent(in),optional :: lbounds
    !
    type(gpufort_array6) :: array
    !
    integer(c_int),dimension(6) :: opt_lbounds
    !
    integer(kind(hipSuccess)) :: ierr
    !
    opt_lbounds    = 1
    if ( present(lbounds) ) opt_lbounds = lbounds             
    ierr = gpufort_array6_init(&
      array,&
      int(c_short, c_int),&
      c_null_ptr,c_loc(data_dev),&
      shape(data_dev), opt_lbounds,&
      gpufort_array_wrap_host_wrap_device,&
      gpufort_array_sync_none)
  end function
  function gpufort_array6_wrap_device_ptr_c_int(&
      data_dev,lbounds) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    integer(c_int),intent(in),pointer,dimension(:,:,:,:,:,:) :: data_dev 
    integer(c_int),dimension(6),intent(in),optional :: lbounds
    !
    type(gpufort_array6) :: array
    !
    integer(c_int),dimension(6) :: opt_lbounds
    !
    integer(kind(hipSuccess)) :: ierr
    !
    opt_lbounds    = 1
    if ( present(lbounds) ) opt_lbounds = lbounds             
    ierr = gpufort_array6_init(&
      array,&
      int(c_int, c_int),&
      c_null_ptr,c_loc(data_dev),&
      shape(data_dev), opt_lbounds,&
      gpufort_array_wrap_host_wrap_device,&
      gpufort_array_sync_none)
  end function
  function gpufort_array6_wrap_device_ptr_c_long(&
      data_dev,lbounds) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    integer(c_long),intent(in),pointer,dimension(:,:,:,:,:,:) :: data_dev 
    integer(c_int),dimension(6),intent(in),optional :: lbounds
    !
    type(gpufort_array6) :: array
    !
    integer(c_int),dimension(6) :: opt_lbounds
    !
    integer(kind(hipSuccess)) :: ierr
    !
    opt_lbounds    = 1
    if ( present(lbounds) ) opt_lbounds = lbounds             
    ierr = gpufort_array6_init(&
      array,&
      int(c_long, c_int),&
      c_null_ptr,c_loc(data_dev),&
      shape(data_dev), opt_lbounds,&
      gpufort_array_wrap_host_wrap_device,&
      gpufort_array_sync_none)
  end function
  function gpufort_array6_wrap_device_ptr_c_float(&
      data_dev,lbounds) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    real(c_float),intent(in),pointer,dimension(:,:,:,:,:,:) :: data_dev 
    integer(c_int),dimension(6),intent(in),optional :: lbounds
    !
    type(gpufort_array6) :: array
    !
    integer(c_int),dimension(6) :: opt_lbounds
    !
    integer(kind(hipSuccess)) :: ierr
    !
    opt_lbounds    = 1
    if ( present(lbounds) ) opt_lbounds = lbounds             
    ierr = gpufort_array6_init(&
      array,&
      int(c_float, c_int),&
      c_null_ptr,c_loc(data_dev),&
      shape(data_dev), opt_lbounds,&
      gpufort_array_wrap_host_wrap_device,&
      gpufort_array_sync_none)
  end function
  function gpufort_array6_wrap_device_ptr_c_double(&
      data_dev,lbounds) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    real(c_double),intent(in),pointer,dimension(:,:,:,:,:,:) :: data_dev 
    integer(c_int),dimension(6),intent(in),optional :: lbounds
    !
    type(gpufort_array6) :: array
    !
    integer(c_int),dimension(6) :: opt_lbounds
    !
    integer(kind(hipSuccess)) :: ierr
    !
    opt_lbounds    = 1
    if ( present(lbounds) ) opt_lbounds = lbounds             
    ierr = gpufort_array6_init(&
      array,&
      int(c_double, c_int),&
      c_null_ptr,c_loc(data_dev),&
      shape(data_dev), opt_lbounds,&
      gpufort_array_wrap_host_wrap_device,&
      gpufort_array_sync_none)
  end function
  function gpufort_array6_wrap_device_ptr_c_float_complex(&
      data_dev,lbounds) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    complex(c_float_complex),intent(in),pointer,dimension(:,:,:,:,:,:) :: data_dev 
    integer(c_int),dimension(6),intent(in),optional :: lbounds
    !
    type(gpufort_array6) :: array
    !
    integer(c_int),dimension(6) :: opt_lbounds
    !
    integer(kind(hipSuccess)) :: ierr
    !
    opt_lbounds    = 1
    if ( present(lbounds) ) opt_lbounds = lbounds             
    ierr = gpufort_array6_init(&
      array,&
      int(2*c_float_complex, c_int),&
      c_null_ptr,c_loc(data_dev),&
      shape(data_dev), opt_lbounds,&
      gpufort_array_wrap_host_wrap_device,&
      gpufort_array_sync_none)
  end function
  function gpufort_array6_wrap_device_ptr_c_double_complex(&
      data_dev,lbounds) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    complex(c_double_complex),intent(in),pointer,dimension(:,:,:,:,:,:) :: data_dev 
    integer(c_int),dimension(6),intent(in),optional :: lbounds
    !
    type(gpufort_array6) :: array
    !
    integer(c_int),dimension(6) :: opt_lbounds
    !
    integer(kind(hipSuccess)) :: ierr
    !
    opt_lbounds    = 1
    if ( present(lbounds) ) opt_lbounds = lbounds             
    ierr = gpufort_array6_init(&
      array,&
      int(2*c_double_complex, c_int),&
      c_null_ptr,c_loc(data_dev),&
      shape(data_dev), opt_lbounds,&
      gpufort_array_wrap_host_wrap_device,&
      gpufort_array_sync_none)
  end function
   
  function gpufort_array7_wrap_async_c_bool(&
      data_host,data_dev,lbounds,&
      stream,sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    logical(c_bool),intent(in),target,dimension(:,:,:,:,:,:,:) :: data_host 
    logical(c_bool),intent(in),target,dimension(:,:,:,:,:,:,:) :: data_dev 
    integer(c_int),dimension(7),intent(in),optional :: lbounds 
    type(c_ptr),intent(in) :: stream
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array7) :: array
    !
    integer(c_int),dimension(7) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array7_init_async(&
      array,&
      int(c_bool, c_int),&
      c_loc(data_host),c_loc(data_dev),&
      shape(data_host), opt_lbounds ,stream,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
  function gpufort_array7_wrap_c_bool(&
      data_host,data_dev,lbounds,&
      sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    logical(c_bool),intent(in),target,dimension(:,:,:,:,:,:,:) :: data_host 
    logical(c_bool),intent(in),target,dimension(:,:,:,:,:,:,:) :: data_dev 
    integer(c_int),dimension(7),intent(in),optional :: lbounds
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array7) :: array
    !
    integer(c_int),dimension(7) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array7_init(&
      array,&
      int(c_bool, c_int),&
      c_loc(data_host),c_loc(data_dev),&
      shape(data_host), opt_lbounds ,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
   
  function gpufort_array7_wrap_async_c_bool_cptr(&
      data_host,data_dev,lbounds,&
      stream,sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    logical(c_bool),intent(in),target,dimension(:,:,:,:,:,:,:) :: data_host 
    type(c_ptr),intent(in) :: data_dev
    integer(c_int),dimension(7),intent(in),optional :: lbounds 
    type(c_ptr),intent(in) :: stream
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array7) :: array
    !
    integer(c_int),dimension(7) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array7_init_async(&
      array,&
      int(c_bool, c_int),&
      c_loc(data_host),data_dev,&
      shape(data_host), opt_lbounds ,stream,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
  function gpufort_array7_wrap_c_bool_cptr(&
      data_host,data_dev,lbounds,&
      sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    logical(c_bool),intent(in),target,dimension(:,:,:,:,:,:,:) :: data_host 
    type(c_ptr),intent(in) :: data_dev
    integer(c_int),dimension(7),intent(in),optional :: lbounds
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array7) :: array
    !
    integer(c_int),dimension(7) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array7_init(&
      array,&
      int(c_bool, c_int),&
      c_loc(data_host),data_dev,&
      shape(data_host), opt_lbounds ,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
   
  function gpufort_array7_wrap_async_c_short(&
      data_host,data_dev,lbounds,&
      stream,sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    integer(c_short),intent(in),target,dimension(:,:,:,:,:,:,:) :: data_host 
    integer(c_short),intent(in),target,dimension(:,:,:,:,:,:,:) :: data_dev 
    integer(c_int),dimension(7),intent(in),optional :: lbounds 
    type(c_ptr),intent(in) :: stream
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array7) :: array
    !
    integer(c_int),dimension(7) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array7_init_async(&
      array,&
      int(c_short, c_int),&
      c_loc(data_host),c_loc(data_dev),&
      shape(data_host), opt_lbounds ,stream,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
  function gpufort_array7_wrap_c_short(&
      data_host,data_dev,lbounds,&
      sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    integer(c_short),intent(in),target,dimension(:,:,:,:,:,:,:) :: data_host 
    integer(c_short),intent(in),target,dimension(:,:,:,:,:,:,:) :: data_dev 
    integer(c_int),dimension(7),intent(in),optional :: lbounds
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array7) :: array
    !
    integer(c_int),dimension(7) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array7_init(&
      array,&
      int(c_short, c_int),&
      c_loc(data_host),c_loc(data_dev),&
      shape(data_host), opt_lbounds ,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
   
  function gpufort_array7_wrap_async_c_short_cptr(&
      data_host,data_dev,lbounds,&
      stream,sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    integer(c_short),intent(in),target,dimension(:,:,:,:,:,:,:) :: data_host 
    type(c_ptr),intent(in) :: data_dev
    integer(c_int),dimension(7),intent(in),optional :: lbounds 
    type(c_ptr),intent(in) :: stream
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array7) :: array
    !
    integer(c_int),dimension(7) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array7_init_async(&
      array,&
      int(c_short, c_int),&
      c_loc(data_host),data_dev,&
      shape(data_host), opt_lbounds ,stream,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
  function gpufort_array7_wrap_c_short_cptr(&
      data_host,data_dev,lbounds,&
      sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    integer(c_short),intent(in),target,dimension(:,:,:,:,:,:,:) :: data_host 
    type(c_ptr),intent(in) :: data_dev
    integer(c_int),dimension(7),intent(in),optional :: lbounds
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array7) :: array
    !
    integer(c_int),dimension(7) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array7_init(&
      array,&
      int(c_short, c_int),&
      c_loc(data_host),data_dev,&
      shape(data_host), opt_lbounds ,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
   
  function gpufort_array7_wrap_async_c_int(&
      data_host,data_dev,lbounds,&
      stream,sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    integer(c_int),intent(in),target,dimension(:,:,:,:,:,:,:) :: data_host 
    integer(c_int),intent(in),target,dimension(:,:,:,:,:,:,:) :: data_dev 
    integer(c_int),dimension(7),intent(in),optional :: lbounds 
    type(c_ptr),intent(in) :: stream
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array7) :: array
    !
    integer(c_int),dimension(7) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array7_init_async(&
      array,&
      int(c_int, c_int),&
      c_loc(data_host),c_loc(data_dev),&
      shape(data_host), opt_lbounds ,stream,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
  function gpufort_array7_wrap_c_int(&
      data_host,data_dev,lbounds,&
      sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    integer(c_int),intent(in),target,dimension(:,:,:,:,:,:,:) :: data_host 
    integer(c_int),intent(in),target,dimension(:,:,:,:,:,:,:) :: data_dev 
    integer(c_int),dimension(7),intent(in),optional :: lbounds
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array7) :: array
    !
    integer(c_int),dimension(7) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array7_init(&
      array,&
      int(c_int, c_int),&
      c_loc(data_host),c_loc(data_dev),&
      shape(data_host), opt_lbounds ,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
   
  function gpufort_array7_wrap_async_c_int_cptr(&
      data_host,data_dev,lbounds,&
      stream,sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    integer(c_int),intent(in),target,dimension(:,:,:,:,:,:,:) :: data_host 
    type(c_ptr),intent(in) :: data_dev
    integer(c_int),dimension(7),intent(in),optional :: lbounds 
    type(c_ptr),intent(in) :: stream
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array7) :: array
    !
    integer(c_int),dimension(7) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array7_init_async(&
      array,&
      int(c_int, c_int),&
      c_loc(data_host),data_dev,&
      shape(data_host), opt_lbounds ,stream,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
  function gpufort_array7_wrap_c_int_cptr(&
      data_host,data_dev,lbounds,&
      sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    integer(c_int),intent(in),target,dimension(:,:,:,:,:,:,:) :: data_host 
    type(c_ptr),intent(in) :: data_dev
    integer(c_int),dimension(7),intent(in),optional :: lbounds
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array7) :: array
    !
    integer(c_int),dimension(7) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array7_init(&
      array,&
      int(c_int, c_int),&
      c_loc(data_host),data_dev,&
      shape(data_host), opt_lbounds ,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
   
  function gpufort_array7_wrap_async_c_long(&
      data_host,data_dev,lbounds,&
      stream,sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    integer(c_long),intent(in),target,dimension(:,:,:,:,:,:,:) :: data_host 
    integer(c_long),intent(in),target,dimension(:,:,:,:,:,:,:) :: data_dev 
    integer(c_int),dimension(7),intent(in),optional :: lbounds 
    type(c_ptr),intent(in) :: stream
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array7) :: array
    !
    integer(c_int),dimension(7) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array7_init_async(&
      array,&
      int(c_long, c_int),&
      c_loc(data_host),c_loc(data_dev),&
      shape(data_host), opt_lbounds ,stream,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
  function gpufort_array7_wrap_c_long(&
      data_host,data_dev,lbounds,&
      sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    integer(c_long),intent(in),target,dimension(:,:,:,:,:,:,:) :: data_host 
    integer(c_long),intent(in),target,dimension(:,:,:,:,:,:,:) :: data_dev 
    integer(c_int),dimension(7),intent(in),optional :: lbounds
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array7) :: array
    !
    integer(c_int),dimension(7) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array7_init(&
      array,&
      int(c_long, c_int),&
      c_loc(data_host),c_loc(data_dev),&
      shape(data_host), opt_lbounds ,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
   
  function gpufort_array7_wrap_async_c_long_cptr(&
      data_host,data_dev,lbounds,&
      stream,sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    integer(c_long),intent(in),target,dimension(:,:,:,:,:,:,:) :: data_host 
    type(c_ptr),intent(in) :: data_dev
    integer(c_int),dimension(7),intent(in),optional :: lbounds 
    type(c_ptr),intent(in) :: stream
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array7) :: array
    !
    integer(c_int),dimension(7) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array7_init_async(&
      array,&
      int(c_long, c_int),&
      c_loc(data_host),data_dev,&
      shape(data_host), opt_lbounds ,stream,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
  function gpufort_array7_wrap_c_long_cptr(&
      data_host,data_dev,lbounds,&
      sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    integer(c_long),intent(in),target,dimension(:,:,:,:,:,:,:) :: data_host 
    type(c_ptr),intent(in) :: data_dev
    integer(c_int),dimension(7),intent(in),optional :: lbounds
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array7) :: array
    !
    integer(c_int),dimension(7) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array7_init(&
      array,&
      int(c_long, c_int),&
      c_loc(data_host),data_dev,&
      shape(data_host), opt_lbounds ,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
   
  function gpufort_array7_wrap_async_c_float(&
      data_host,data_dev,lbounds,&
      stream,sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    real(c_float),intent(in),target,dimension(:,:,:,:,:,:,:) :: data_host 
    real(c_float),intent(in),target,dimension(:,:,:,:,:,:,:) :: data_dev 
    integer(c_int),dimension(7),intent(in),optional :: lbounds 
    type(c_ptr),intent(in) :: stream
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array7) :: array
    !
    integer(c_int),dimension(7) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array7_init_async(&
      array,&
      int(c_float, c_int),&
      c_loc(data_host),c_loc(data_dev),&
      shape(data_host), opt_lbounds ,stream,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
  function gpufort_array7_wrap_c_float(&
      data_host,data_dev,lbounds,&
      sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    real(c_float),intent(in),target,dimension(:,:,:,:,:,:,:) :: data_host 
    real(c_float),intent(in),target,dimension(:,:,:,:,:,:,:) :: data_dev 
    integer(c_int),dimension(7),intent(in),optional :: lbounds
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array7) :: array
    !
    integer(c_int),dimension(7) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array7_init(&
      array,&
      int(c_float, c_int),&
      c_loc(data_host),c_loc(data_dev),&
      shape(data_host), opt_lbounds ,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
   
  function gpufort_array7_wrap_async_c_float_cptr(&
      data_host,data_dev,lbounds,&
      stream,sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    real(c_float),intent(in),target,dimension(:,:,:,:,:,:,:) :: data_host 
    type(c_ptr),intent(in) :: data_dev
    integer(c_int),dimension(7),intent(in),optional :: lbounds 
    type(c_ptr),intent(in) :: stream
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array7) :: array
    !
    integer(c_int),dimension(7) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array7_init_async(&
      array,&
      int(c_float, c_int),&
      c_loc(data_host),data_dev,&
      shape(data_host), opt_lbounds ,stream,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
  function gpufort_array7_wrap_c_float_cptr(&
      data_host,data_dev,lbounds,&
      sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    real(c_float),intent(in),target,dimension(:,:,:,:,:,:,:) :: data_host 
    type(c_ptr),intent(in) :: data_dev
    integer(c_int),dimension(7),intent(in),optional :: lbounds
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array7) :: array
    !
    integer(c_int),dimension(7) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array7_init(&
      array,&
      int(c_float, c_int),&
      c_loc(data_host),data_dev,&
      shape(data_host), opt_lbounds ,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
   
  function gpufort_array7_wrap_async_c_double(&
      data_host,data_dev,lbounds,&
      stream,sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    real(c_double),intent(in),target,dimension(:,:,:,:,:,:,:) :: data_host 
    real(c_double),intent(in),target,dimension(:,:,:,:,:,:,:) :: data_dev 
    integer(c_int),dimension(7),intent(in),optional :: lbounds 
    type(c_ptr),intent(in) :: stream
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array7) :: array
    !
    integer(c_int),dimension(7) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array7_init_async(&
      array,&
      int(c_double, c_int),&
      c_loc(data_host),c_loc(data_dev),&
      shape(data_host), opt_lbounds ,stream,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
  function gpufort_array7_wrap_c_double(&
      data_host,data_dev,lbounds,&
      sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    real(c_double),intent(in),target,dimension(:,:,:,:,:,:,:) :: data_host 
    real(c_double),intent(in),target,dimension(:,:,:,:,:,:,:) :: data_dev 
    integer(c_int),dimension(7),intent(in),optional :: lbounds
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array7) :: array
    !
    integer(c_int),dimension(7) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array7_init(&
      array,&
      int(c_double, c_int),&
      c_loc(data_host),c_loc(data_dev),&
      shape(data_host), opt_lbounds ,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
   
  function gpufort_array7_wrap_async_c_double_cptr(&
      data_host,data_dev,lbounds,&
      stream,sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    real(c_double),intent(in),target,dimension(:,:,:,:,:,:,:) :: data_host 
    type(c_ptr),intent(in) :: data_dev
    integer(c_int),dimension(7),intent(in),optional :: lbounds 
    type(c_ptr),intent(in) :: stream
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array7) :: array
    !
    integer(c_int),dimension(7) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array7_init_async(&
      array,&
      int(c_double, c_int),&
      c_loc(data_host),data_dev,&
      shape(data_host), opt_lbounds ,stream,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
  function gpufort_array7_wrap_c_double_cptr(&
      data_host,data_dev,lbounds,&
      sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    real(c_double),intent(in),target,dimension(:,:,:,:,:,:,:) :: data_host 
    type(c_ptr),intent(in) :: data_dev
    integer(c_int),dimension(7),intent(in),optional :: lbounds
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array7) :: array
    !
    integer(c_int),dimension(7) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array7_init(&
      array,&
      int(c_double, c_int),&
      c_loc(data_host),data_dev,&
      shape(data_host), opt_lbounds ,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
   
  function gpufort_array7_wrap_async_c_float_complex(&
      data_host,data_dev,lbounds,&
      stream,sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    complex(c_float_complex),intent(in),target,dimension(:,:,:,:,:,:,:) :: data_host 
    complex(c_float_complex),intent(in),target,dimension(:,:,:,:,:,:,:) :: data_dev 
    integer(c_int),dimension(7),intent(in),optional :: lbounds 
    type(c_ptr),intent(in) :: stream
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array7) :: array
    !
    integer(c_int),dimension(7) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array7_init_async(&
      array,&
      int(2*c_float_complex, c_int),&
      c_loc(data_host),c_loc(data_dev),&
      shape(data_host), opt_lbounds ,stream,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
  function gpufort_array7_wrap_c_float_complex(&
      data_host,data_dev,lbounds,&
      sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    complex(c_float_complex),intent(in),target,dimension(:,:,:,:,:,:,:) :: data_host 
    complex(c_float_complex),intent(in),target,dimension(:,:,:,:,:,:,:) :: data_dev 
    integer(c_int),dimension(7),intent(in),optional :: lbounds
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array7) :: array
    !
    integer(c_int),dimension(7) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array7_init(&
      array,&
      int(2*c_float_complex, c_int),&
      c_loc(data_host),c_loc(data_dev),&
      shape(data_host), opt_lbounds ,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
   
  function gpufort_array7_wrap_async_c_float_complex_cptr(&
      data_host,data_dev,lbounds,&
      stream,sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    complex(c_float_complex),intent(in),target,dimension(:,:,:,:,:,:,:) :: data_host 
    type(c_ptr),intent(in) :: data_dev
    integer(c_int),dimension(7),intent(in),optional :: lbounds 
    type(c_ptr),intent(in) :: stream
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array7) :: array
    !
    integer(c_int),dimension(7) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array7_init_async(&
      array,&
      int(2*c_float_complex, c_int),&
      c_loc(data_host),data_dev,&
      shape(data_host), opt_lbounds ,stream,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
  function gpufort_array7_wrap_c_float_complex_cptr(&
      data_host,data_dev,lbounds,&
      sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    complex(c_float_complex),intent(in),target,dimension(:,:,:,:,:,:,:) :: data_host 
    type(c_ptr),intent(in) :: data_dev
    integer(c_int),dimension(7),intent(in),optional :: lbounds
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array7) :: array
    !
    integer(c_int),dimension(7) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array7_init(&
      array,&
      int(2*c_float_complex, c_int),&
      c_loc(data_host),data_dev,&
      shape(data_host), opt_lbounds ,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
   
  function gpufort_array7_wrap_async_c_double_complex(&
      data_host,data_dev,lbounds,&
      stream,sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    complex(c_double_complex),intent(in),target,dimension(:,:,:,:,:,:,:) :: data_host 
    complex(c_double_complex),intent(in),target,dimension(:,:,:,:,:,:,:) :: data_dev 
    integer(c_int),dimension(7),intent(in),optional :: lbounds 
    type(c_ptr),intent(in) :: stream
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array7) :: array
    !
    integer(c_int),dimension(7) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array7_init_async(&
      array,&
      int(2*c_double_complex, c_int),&
      c_loc(data_host),c_loc(data_dev),&
      shape(data_host), opt_lbounds ,stream,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
  function gpufort_array7_wrap_c_double_complex(&
      data_host,data_dev,lbounds,&
      sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    complex(c_double_complex),intent(in),target,dimension(:,:,:,:,:,:,:) :: data_host 
    complex(c_double_complex),intent(in),target,dimension(:,:,:,:,:,:,:) :: data_dev 
    integer(c_int),dimension(7),intent(in),optional :: lbounds
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array7) :: array
    !
    integer(c_int),dimension(7) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array7_init(&
      array,&
      int(2*c_double_complex, c_int),&
      c_loc(data_host),c_loc(data_dev),&
      shape(data_host), opt_lbounds ,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
   
  function gpufort_array7_wrap_async_c_double_complex_cptr(&
      data_host,data_dev,lbounds,&
      stream,sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    complex(c_double_complex),intent(in),target,dimension(:,:,:,:,:,:,:) :: data_host 
    type(c_ptr),intent(in) :: data_dev
    integer(c_int),dimension(7),intent(in),optional :: lbounds 
    type(c_ptr),intent(in) :: stream
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array7) :: array
    !
    integer(c_int),dimension(7) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array7_init_async(&
      array,&
      int(2*c_double_complex, c_int),&
      c_loc(data_host),data_dev,&
      shape(data_host), opt_lbounds ,stream,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
  function gpufort_array7_wrap_c_double_complex_cptr(&
      data_host,data_dev,lbounds,&
      sync_mode,ierr) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    complex(c_double_complex),intent(in),target,dimension(:,:,:,:,:,:,:) :: data_host 
    type(c_ptr),intent(in) :: data_dev
    integer(c_int),dimension(7),intent(in),optional :: lbounds
    integer(kind(gpufort_array_sync_none)),intent(in),optional :: sync_mode
    integer(kind(hipSuccess)),intent(inout),optional :: ierr
    !
    type(gpufort_array7) :: array
    !
    integer(c_int),dimension(7) :: opt_lbounds
    integer(kind(gpufort_array_sync_none)) :: opt_sync_mode 
    integer(kind(hipSuccess)) :: opt_ierr
    !
    opt_lbounds    = 1
    opt_sync_mode  = gpufort_array_sync_none
    if ( present(lbounds) )   opt_lbounds    = lbounds             
    if ( present(sync_mode) ) opt_sync_mode  = sync_mode 
    opt_ierr = gpufort_array7_init(&
      array,&
      int(2*c_double_complex, c_int),&
      c_loc(data_host),data_dev,&
      shape(data_host), opt_lbounds ,&
      gpufort_array_wrap_host_wrap_device,&
      opt_sync_mode)
    if ( present(ierr) ) ierr = opt_ierr
  end function
  function gpufort_array7_wrap_device_cptr(&
      data_dev,sizes,lbounds,bytes_per_element) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(c_ptr),intent(in) :: data_dev 
    integer(c_int),dimension(7),intent(in) :: sizes
    integer(c_int),dimension(7),intent(in),optional :: lbounds
    integer(c_int),intent(in),optional :: bytes_per_element
    !
    type(gpufort_array7) :: array
    !
    integer(c_int),dimension(7) :: opt_lbounds
    integer(c_int) :: opt_bytes_per_element
    !
    integer(kind(hipSuccess)) :: ierr
    !
    opt_lbounds = 1
    opt_bytes_per_element = 1
    if ( present(lbounds) ) opt_lbounds = lbounds             
    if ( present(bytes_per_element) ) opt_bytes_per_element = bytes_per_element             
    ierr = gpufort_array7_init(&
      array,&
      opt_bytes_per_element,&
      c_null_ptr,data_dev,&
      sizes, opt_lbounds,&
      gpufort_array_wrap_host_wrap_device,&
      gpufort_array_sync_none)
  end function
  function gpufort_array7_wrap_device_ptr_c_bool(&
      data_dev,lbounds) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    logical(c_bool),intent(in),pointer,dimension(:,:,:,:,:,:,:) :: data_dev 
    integer(c_int),dimension(7),intent(in),optional :: lbounds
    !
    type(gpufort_array7) :: array
    !
    integer(c_int),dimension(7) :: opt_lbounds
    !
    integer(kind(hipSuccess)) :: ierr
    !
    opt_lbounds    = 1
    if ( present(lbounds) ) opt_lbounds = lbounds             
    ierr = gpufort_array7_init(&
      array,&
      int(c_bool, c_int),&
      c_null_ptr,c_loc(data_dev),&
      shape(data_dev), opt_lbounds,&
      gpufort_array_wrap_host_wrap_device,&
      gpufort_array_sync_none)
  end function
  function gpufort_array7_wrap_device_ptr_c_short(&
      data_dev,lbounds) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    integer(c_short),intent(in),pointer,dimension(:,:,:,:,:,:,:) :: data_dev 
    integer(c_int),dimension(7),intent(in),optional :: lbounds
    !
    type(gpufort_array7) :: array
    !
    integer(c_int),dimension(7) :: opt_lbounds
    !
    integer(kind(hipSuccess)) :: ierr
    !
    opt_lbounds    = 1
    if ( present(lbounds) ) opt_lbounds = lbounds             
    ierr = gpufort_array7_init(&
      array,&
      int(c_short, c_int),&
      c_null_ptr,c_loc(data_dev),&
      shape(data_dev), opt_lbounds,&
      gpufort_array_wrap_host_wrap_device,&
      gpufort_array_sync_none)
  end function
  function gpufort_array7_wrap_device_ptr_c_int(&
      data_dev,lbounds) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    integer(c_int),intent(in),pointer,dimension(:,:,:,:,:,:,:) :: data_dev 
    integer(c_int),dimension(7),intent(in),optional :: lbounds
    !
    type(gpufort_array7) :: array
    !
    integer(c_int),dimension(7) :: opt_lbounds
    !
    integer(kind(hipSuccess)) :: ierr
    !
    opt_lbounds    = 1
    if ( present(lbounds) ) opt_lbounds = lbounds             
    ierr = gpufort_array7_init(&
      array,&
      int(c_int, c_int),&
      c_null_ptr,c_loc(data_dev),&
      shape(data_dev), opt_lbounds,&
      gpufort_array_wrap_host_wrap_device,&
      gpufort_array_sync_none)
  end function
  function gpufort_array7_wrap_device_ptr_c_long(&
      data_dev,lbounds) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    integer(c_long),intent(in),pointer,dimension(:,:,:,:,:,:,:) :: data_dev 
    integer(c_int),dimension(7),intent(in),optional :: lbounds
    !
    type(gpufort_array7) :: array
    !
    integer(c_int),dimension(7) :: opt_lbounds
    !
    integer(kind(hipSuccess)) :: ierr
    !
    opt_lbounds    = 1
    if ( present(lbounds) ) opt_lbounds = lbounds             
    ierr = gpufort_array7_init(&
      array,&
      int(c_long, c_int),&
      c_null_ptr,c_loc(data_dev),&
      shape(data_dev), opt_lbounds,&
      gpufort_array_wrap_host_wrap_device,&
      gpufort_array_sync_none)
  end function
  function gpufort_array7_wrap_device_ptr_c_float(&
      data_dev,lbounds) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    real(c_float),intent(in),pointer,dimension(:,:,:,:,:,:,:) :: data_dev 
    integer(c_int),dimension(7),intent(in),optional :: lbounds
    !
    type(gpufort_array7) :: array
    !
    integer(c_int),dimension(7) :: opt_lbounds
    !
    integer(kind(hipSuccess)) :: ierr
    !
    opt_lbounds    = 1
    if ( present(lbounds) ) opt_lbounds = lbounds             
    ierr = gpufort_array7_init(&
      array,&
      int(c_float, c_int),&
      c_null_ptr,c_loc(data_dev),&
      shape(data_dev), opt_lbounds,&
      gpufort_array_wrap_host_wrap_device,&
      gpufort_array_sync_none)
  end function
  function gpufort_array7_wrap_device_ptr_c_double(&
      data_dev,lbounds) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    real(c_double),intent(in),pointer,dimension(:,:,:,:,:,:,:) :: data_dev 
    integer(c_int),dimension(7),intent(in),optional :: lbounds
    !
    type(gpufort_array7) :: array
    !
    integer(c_int),dimension(7) :: opt_lbounds
    !
    integer(kind(hipSuccess)) :: ierr
    !
    opt_lbounds    = 1
    if ( present(lbounds) ) opt_lbounds = lbounds             
    ierr = gpufort_array7_init(&
      array,&
      int(c_double, c_int),&
      c_null_ptr,c_loc(data_dev),&
      shape(data_dev), opt_lbounds,&
      gpufort_array_wrap_host_wrap_device,&
      gpufort_array_sync_none)
  end function
  function gpufort_array7_wrap_device_ptr_c_float_complex(&
      data_dev,lbounds) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    complex(c_float_complex),intent(in),pointer,dimension(:,:,:,:,:,:,:) :: data_dev 
    integer(c_int),dimension(7),intent(in),optional :: lbounds
    !
    type(gpufort_array7) :: array
    !
    integer(c_int),dimension(7) :: opt_lbounds
    !
    integer(kind(hipSuccess)) :: ierr
    !
    opt_lbounds    = 1
    if ( present(lbounds) ) opt_lbounds = lbounds             
    ierr = gpufort_array7_init(&
      array,&
      int(2*c_float_complex, c_int),&
      c_null_ptr,c_loc(data_dev),&
      shape(data_dev), opt_lbounds,&
      gpufort_array_wrap_host_wrap_device,&
      gpufort_array_sync_none)
  end function
  function gpufort_array7_wrap_device_ptr_c_double_complex(&
      data_dev,lbounds) result(array)
    use iso_c_binding
    use hipfort_enums
    implicit none
    complex(c_double_complex),intent(in),pointer,dimension(:,:,:,:,:,:,:) :: data_dev 
    integer(c_int),dimension(7),intent(in),optional :: lbounds
    !
    type(gpufort_array7) :: array
    !
    integer(c_int),dimension(7) :: opt_lbounds
    !
    integer(kind(hipSuccess)) :: ierr
    !
    opt_lbounds    = 1
    if ( present(lbounds) ) opt_lbounds = lbounds             
    ierr = gpufort_array7_init(&
      array,&
      int(2*c_double_complex, c_int),&
      c_null_ptr,c_loc(data_dev),&
      shape(data_dev), opt_lbounds,&
      gpufort_array_wrap_host_wrap_device,&
      gpufort_array_sync_none)
  end function

  function gpufort_array1_num_data_bytes(array) result(retval)
    implicit none
    type(gpufort_array1),intent(in) :: array
    integer(c_size_t) :: retval 
    !
    retval = int(array%data%num_elements,c_size_t)*int(array%bytes_per_element,c_size_t)
  end function

  function gpufort_array1_num_elements(array) result(retval)
    implicit none
    type(gpufort_array1),intent(in) :: array
    integer(c_int) :: retval 
    !
    retval = array%data%num_elements
  end function
  function gpufort_array2_num_data_bytes(array) result(retval)
    implicit none
    type(gpufort_array2),intent(in) :: array
    integer(c_size_t) :: retval 
    !
    retval = int(array%data%num_elements,c_size_t)*int(array%bytes_per_element,c_size_t)
  end function

  function gpufort_array2_num_elements(array) result(retval)
    implicit none
    type(gpufort_array2),intent(in) :: array
    integer(c_int) :: retval 
    !
    retval = array%data%num_elements
  end function
  function gpufort_array3_num_data_bytes(array) result(retval)
    implicit none
    type(gpufort_array3),intent(in) :: array
    integer(c_size_t) :: retval 
    !
    retval = int(array%data%num_elements,c_size_t)*int(array%bytes_per_element,c_size_t)
  end function

  function gpufort_array3_num_elements(array) result(retval)
    implicit none
    type(gpufort_array3),intent(in) :: array
    integer(c_int) :: retval 
    !
    retval = array%data%num_elements
  end function
  function gpufort_array4_num_data_bytes(array) result(retval)
    implicit none
    type(gpufort_array4),intent(in) :: array
    integer(c_size_t) :: retval 
    !
    retval = int(array%data%num_elements,c_size_t)*int(array%bytes_per_element,c_size_t)
  end function

  function gpufort_array4_num_elements(array) result(retval)
    implicit none
    type(gpufort_array4),intent(in) :: array
    integer(c_int) :: retval 
    !
    retval = array%data%num_elements
  end function
  function gpufort_array5_num_data_bytes(array) result(retval)
    implicit none
    type(gpufort_array5),intent(in) :: array
    integer(c_size_t) :: retval 
    !
    retval = int(array%data%num_elements,c_size_t)*int(array%bytes_per_element,c_size_t)
  end function

  function gpufort_array5_num_elements(array) result(retval)
    implicit none
    type(gpufort_array5),intent(in) :: array
    integer(c_int) :: retval 
    !
    retval = array%data%num_elements
  end function
  function gpufort_array6_num_data_bytes(array) result(retval)
    implicit none
    type(gpufort_array6),intent(in) :: array
    integer(c_size_t) :: retval 
    !
    retval = int(array%data%num_elements,c_size_t)*int(array%bytes_per_element,c_size_t)
  end function

  function gpufort_array6_num_elements(array) result(retval)
    implicit none
    type(gpufort_array6),intent(in) :: array
    integer(c_int) :: retval 
    !
    retval = array%data%num_elements
  end function
  function gpufort_array7_num_data_bytes(array) result(retval)
    implicit none
    type(gpufort_array7),intent(in) :: array
    integer(c_size_t) :: retval 
    !
    retval = int(array%data%num_elements,c_size_t)*int(array%bytes_per_element,c_size_t)
  end function

  function gpufort_array7_num_elements(array) result(retval)
    implicit none
    type(gpufort_array7),intent(in) :: array
    integer(c_int) :: retval 
    !
    retval = array%data%num_elements
  end function

  subroutine gpufort_array1_hostptr_c_bool(&
      array,&
      data_host)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array1),intent(in) :: array
    logical(c_bool),intent(inout),pointer,dimension(:) :: data_host 
    !
    integer(c_int) :: offset_remainder
    integer(c_int) :: n1,&
                      lb1
    !
    logical(c_bool),pointer,dimension(:) :: tmp
    !
    n1 = 1
    lb1 = 1
    ! 
    n1 = array%data%num_elements / 1
    !
    call c_f_pointer(array%data%data_host,tmp,SHAPE=[n1])
    !
    offset_remainder = array%data%index_offset
    lb1 = -offset_remainder / 1
    offset_remainder = offset_remainder + lb1*1
    !
    data_host(lb1:) => tmp
  end subroutine
  subroutine gpufort_array1_hostptr_c_short(&
      array,&
      data_host)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array1),intent(in) :: array
    integer(c_short),intent(inout),pointer,dimension(:) :: data_host 
    !
    integer(c_int) :: offset_remainder
    integer(c_int) :: n1,&
                      lb1
    !
    integer(c_short),pointer,dimension(:) :: tmp
    !
    n1 = 1
    lb1 = 1
    ! 
    n1 = array%data%num_elements / 1
    !
    call c_f_pointer(array%data%data_host,tmp,SHAPE=[n1])
    !
    offset_remainder = array%data%index_offset
    lb1 = -offset_remainder / 1
    offset_remainder = offset_remainder + lb1*1
    !
    data_host(lb1:) => tmp
  end subroutine
  subroutine gpufort_array1_hostptr_c_int(&
      array,&
      data_host)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array1),intent(in) :: array
    integer(c_int),intent(inout),pointer,dimension(:) :: data_host 
    !
    integer(c_int) :: offset_remainder
    integer(c_int) :: n1,&
                      lb1
    !
    integer(c_int),pointer,dimension(:) :: tmp
    !
    n1 = 1
    lb1 = 1
    ! 
    n1 = array%data%num_elements / 1
    !
    call c_f_pointer(array%data%data_host,tmp,SHAPE=[n1])
    !
    offset_remainder = array%data%index_offset
    lb1 = -offset_remainder / 1
    offset_remainder = offset_remainder + lb1*1
    !
    data_host(lb1:) => tmp
  end subroutine
  subroutine gpufort_array1_hostptr_c_long(&
      array,&
      data_host)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array1),intent(in) :: array
    integer(c_long),intent(inout),pointer,dimension(:) :: data_host 
    !
    integer(c_int) :: offset_remainder
    integer(c_int) :: n1,&
                      lb1
    !
    integer(c_long),pointer,dimension(:) :: tmp
    !
    n1 = 1
    lb1 = 1
    ! 
    n1 = array%data%num_elements / 1
    !
    call c_f_pointer(array%data%data_host,tmp,SHAPE=[n1])
    !
    offset_remainder = array%data%index_offset
    lb1 = -offset_remainder / 1
    offset_remainder = offset_remainder + lb1*1
    !
    data_host(lb1:) => tmp
  end subroutine
  subroutine gpufort_array1_hostptr_c_float(&
      array,&
      data_host)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array1),intent(in) :: array
    real(c_float),intent(inout),pointer,dimension(:) :: data_host 
    !
    integer(c_int) :: offset_remainder
    integer(c_int) :: n1,&
                      lb1
    !
    real(c_float),pointer,dimension(:) :: tmp
    !
    n1 = 1
    lb1 = 1
    ! 
    n1 = array%data%num_elements / 1
    !
    call c_f_pointer(array%data%data_host,tmp,SHAPE=[n1])
    !
    offset_remainder = array%data%index_offset
    lb1 = -offset_remainder / 1
    offset_remainder = offset_remainder + lb1*1
    !
    data_host(lb1:) => tmp
  end subroutine
  subroutine gpufort_array1_hostptr_c_double(&
      array,&
      data_host)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array1),intent(in) :: array
    real(c_double),intent(inout),pointer,dimension(:) :: data_host 
    !
    integer(c_int) :: offset_remainder
    integer(c_int) :: n1,&
                      lb1
    !
    real(c_double),pointer,dimension(:) :: tmp
    !
    n1 = 1
    lb1 = 1
    ! 
    n1 = array%data%num_elements / 1
    !
    call c_f_pointer(array%data%data_host,tmp,SHAPE=[n1])
    !
    offset_remainder = array%data%index_offset
    lb1 = -offset_remainder / 1
    offset_remainder = offset_remainder + lb1*1
    !
    data_host(lb1:) => tmp
  end subroutine
  subroutine gpufort_array1_hostptr_c_float_complex(&
      array,&
      data_host)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array1),intent(in) :: array
    complex(c_float_complex),intent(inout),pointer,dimension(:) :: data_host 
    !
    integer(c_int) :: offset_remainder
    integer(c_int) :: n1,&
                      lb1
    !
    complex(c_float_complex),pointer,dimension(:) :: tmp
    !
    n1 = 1
    lb1 = 1
    ! 
    n1 = array%data%num_elements / 1
    !
    call c_f_pointer(array%data%data_host,tmp,SHAPE=[n1])
    !
    offset_remainder = array%data%index_offset
    lb1 = -offset_remainder / 1
    offset_remainder = offset_remainder + lb1*1
    !
    data_host(lb1:) => tmp
  end subroutine
  subroutine gpufort_array1_hostptr_c_double_complex(&
      array,&
      data_host)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array1),intent(in) :: array
    complex(c_double_complex),intent(inout),pointer,dimension(:) :: data_host 
    !
    integer(c_int) :: offset_remainder
    integer(c_int) :: n1,&
                      lb1
    !
    complex(c_double_complex),pointer,dimension(:) :: tmp
    !
    n1 = 1
    lb1 = 1
    ! 
    n1 = array%data%num_elements / 1
    !
    call c_f_pointer(array%data%data_host,tmp,SHAPE=[n1])
    !
    offset_remainder = array%data%index_offset
    lb1 = -offset_remainder / 1
    offset_remainder = offset_remainder + lb1*1
    !
    data_host(lb1:) => tmp
  end subroutine
  subroutine gpufort_array2_hostptr_c_bool(&
      array,&
      data_host)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array2),intent(in) :: array
    logical(c_bool),intent(inout),pointer,dimension(:,:) :: data_host 
    !
    integer(c_int) :: offset_remainder
    integer(c_int) :: n1,n2,&
                      lb1,lb2
    !
    logical(c_bool),pointer,dimension(:,:) :: tmp
    !
    n1 = 1; n2 = 1
    lb1 = 1; lb2 = 1
    ! 
    n2 = array%data%num_elements / array%data%stride2
    n1 = array%data%stride2 / 1
    !
    call c_f_pointer(array%data%data_host,tmp,SHAPE=[n1,n2])
    !
    offset_remainder = array%data%index_offset
    lb2 = -offset_remainder / array%data%stride2
    offset_remainder = offset_remainder + lb2*array%data%stride2
    lb1 = -offset_remainder / 1
    offset_remainder = offset_remainder + lb1*1
    !
    data_host(lb1:,lb2:) => tmp
  end subroutine
  subroutine gpufort_array2_hostptr_c_short(&
      array,&
      data_host)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array2),intent(in) :: array
    integer(c_short),intent(inout),pointer,dimension(:,:) :: data_host 
    !
    integer(c_int) :: offset_remainder
    integer(c_int) :: n1,n2,&
                      lb1,lb2
    !
    integer(c_short),pointer,dimension(:,:) :: tmp
    !
    n1 = 1; n2 = 1
    lb1 = 1; lb2 = 1
    ! 
    n2 = array%data%num_elements / array%data%stride2
    n1 = array%data%stride2 / 1
    !
    call c_f_pointer(array%data%data_host,tmp,SHAPE=[n1,n2])
    !
    offset_remainder = array%data%index_offset
    lb2 = -offset_remainder / array%data%stride2
    offset_remainder = offset_remainder + lb2*array%data%stride2
    lb1 = -offset_remainder / 1
    offset_remainder = offset_remainder + lb1*1
    !
    data_host(lb1:,lb2:) => tmp
  end subroutine
  subroutine gpufort_array2_hostptr_c_int(&
      array,&
      data_host)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array2),intent(in) :: array
    integer(c_int),intent(inout),pointer,dimension(:,:) :: data_host 
    !
    integer(c_int) :: offset_remainder
    integer(c_int) :: n1,n2,&
                      lb1,lb2
    !
    integer(c_int),pointer,dimension(:,:) :: tmp
    !
    n1 = 1; n2 = 1
    lb1 = 1; lb2 = 1
    ! 
    n2 = array%data%num_elements / array%data%stride2
    n1 = array%data%stride2 / 1
    !
    call c_f_pointer(array%data%data_host,tmp,SHAPE=[n1,n2])
    !
    offset_remainder = array%data%index_offset
    lb2 = -offset_remainder / array%data%stride2
    offset_remainder = offset_remainder + lb2*array%data%stride2
    lb1 = -offset_remainder / 1
    offset_remainder = offset_remainder + lb1*1
    !
    data_host(lb1:,lb2:) => tmp
  end subroutine
  subroutine gpufort_array2_hostptr_c_long(&
      array,&
      data_host)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array2),intent(in) :: array
    integer(c_long),intent(inout),pointer,dimension(:,:) :: data_host 
    !
    integer(c_int) :: offset_remainder
    integer(c_int) :: n1,n2,&
                      lb1,lb2
    !
    integer(c_long),pointer,dimension(:,:) :: tmp
    !
    n1 = 1; n2 = 1
    lb1 = 1; lb2 = 1
    ! 
    n2 = array%data%num_elements / array%data%stride2
    n1 = array%data%stride2 / 1
    !
    call c_f_pointer(array%data%data_host,tmp,SHAPE=[n1,n2])
    !
    offset_remainder = array%data%index_offset
    lb2 = -offset_remainder / array%data%stride2
    offset_remainder = offset_remainder + lb2*array%data%stride2
    lb1 = -offset_remainder / 1
    offset_remainder = offset_remainder + lb1*1
    !
    data_host(lb1:,lb2:) => tmp
  end subroutine
  subroutine gpufort_array2_hostptr_c_float(&
      array,&
      data_host)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array2),intent(in) :: array
    real(c_float),intent(inout),pointer,dimension(:,:) :: data_host 
    !
    integer(c_int) :: offset_remainder
    integer(c_int) :: n1,n2,&
                      lb1,lb2
    !
    real(c_float),pointer,dimension(:,:) :: tmp
    !
    n1 = 1; n2 = 1
    lb1 = 1; lb2 = 1
    ! 
    n2 = array%data%num_elements / array%data%stride2
    n1 = array%data%stride2 / 1
    !
    call c_f_pointer(array%data%data_host,tmp,SHAPE=[n1,n2])
    !
    offset_remainder = array%data%index_offset
    lb2 = -offset_remainder / array%data%stride2
    offset_remainder = offset_remainder + lb2*array%data%stride2
    lb1 = -offset_remainder / 1
    offset_remainder = offset_remainder + lb1*1
    !
    data_host(lb1:,lb2:) => tmp
  end subroutine
  subroutine gpufort_array2_hostptr_c_double(&
      array,&
      data_host)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array2),intent(in) :: array
    real(c_double),intent(inout),pointer,dimension(:,:) :: data_host 
    !
    integer(c_int) :: offset_remainder
    integer(c_int) :: n1,n2,&
                      lb1,lb2
    !
    real(c_double),pointer,dimension(:,:) :: tmp
    !
    n1 = 1; n2 = 1
    lb1 = 1; lb2 = 1
    ! 
    n2 = array%data%num_elements / array%data%stride2
    n1 = array%data%stride2 / 1
    !
    call c_f_pointer(array%data%data_host,tmp,SHAPE=[n1,n2])
    !
    offset_remainder = array%data%index_offset
    lb2 = -offset_remainder / array%data%stride2
    offset_remainder = offset_remainder + lb2*array%data%stride2
    lb1 = -offset_remainder / 1
    offset_remainder = offset_remainder + lb1*1
    !
    data_host(lb1:,lb2:) => tmp
  end subroutine
  subroutine gpufort_array2_hostptr_c_float_complex(&
      array,&
      data_host)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array2),intent(in) :: array
    complex(c_float_complex),intent(inout),pointer,dimension(:,:) :: data_host 
    !
    integer(c_int) :: offset_remainder
    integer(c_int) :: n1,n2,&
                      lb1,lb2
    !
    complex(c_float_complex),pointer,dimension(:,:) :: tmp
    !
    n1 = 1; n2 = 1
    lb1 = 1; lb2 = 1
    ! 
    n2 = array%data%num_elements / array%data%stride2
    n1 = array%data%stride2 / 1
    !
    call c_f_pointer(array%data%data_host,tmp,SHAPE=[n1,n2])
    !
    offset_remainder = array%data%index_offset
    lb2 = -offset_remainder / array%data%stride2
    offset_remainder = offset_remainder + lb2*array%data%stride2
    lb1 = -offset_remainder / 1
    offset_remainder = offset_remainder + lb1*1
    !
    data_host(lb1:,lb2:) => tmp
  end subroutine
  subroutine gpufort_array2_hostptr_c_double_complex(&
      array,&
      data_host)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array2),intent(in) :: array
    complex(c_double_complex),intent(inout),pointer,dimension(:,:) :: data_host 
    !
    integer(c_int) :: offset_remainder
    integer(c_int) :: n1,n2,&
                      lb1,lb2
    !
    complex(c_double_complex),pointer,dimension(:,:) :: tmp
    !
    n1 = 1; n2 = 1
    lb1 = 1; lb2 = 1
    ! 
    n2 = array%data%num_elements / array%data%stride2
    n1 = array%data%stride2 / 1
    !
    call c_f_pointer(array%data%data_host,tmp,SHAPE=[n1,n2])
    !
    offset_remainder = array%data%index_offset
    lb2 = -offset_remainder / array%data%stride2
    offset_remainder = offset_remainder + lb2*array%data%stride2
    lb1 = -offset_remainder / 1
    offset_remainder = offset_remainder + lb1*1
    !
    data_host(lb1:,lb2:) => tmp
  end subroutine
  subroutine gpufort_array3_hostptr_c_bool(&
      array,&
      data_host)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array3),intent(in) :: array
    logical(c_bool),intent(inout),pointer,dimension(:,:,:) :: data_host 
    !
    integer(c_int) :: offset_remainder
    integer(c_int) :: n1,n2,n3,&
                      lb1,lb2,lb3
    !
    logical(c_bool),pointer,dimension(:,:,:) :: tmp
    !
    n1 = 1; n2 = 1; n3 = 1
    lb1 = 1; lb2 = 1; lb3 = 1
    ! 
    n3 = array%data%num_elements / array%data%stride3
    n2 = array%data%stride3 / array%data%stride2
    n1 = array%data%stride2 / 1
    !
    call c_f_pointer(array%data%data_host,tmp,SHAPE=[n1,n2,n3])
    !
    offset_remainder = array%data%index_offset
    lb3 = -offset_remainder / array%data%stride3
    offset_remainder = offset_remainder + lb3*array%data%stride3
    lb2 = -offset_remainder / array%data%stride2
    offset_remainder = offset_remainder + lb2*array%data%stride2
    lb1 = -offset_remainder / 1
    offset_remainder = offset_remainder + lb1*1
    !
    data_host(lb1:,lb2:,lb3:) => tmp
  end subroutine
  subroutine gpufort_array3_hostptr_c_short(&
      array,&
      data_host)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array3),intent(in) :: array
    integer(c_short),intent(inout),pointer,dimension(:,:,:) :: data_host 
    !
    integer(c_int) :: offset_remainder
    integer(c_int) :: n1,n2,n3,&
                      lb1,lb2,lb3
    !
    integer(c_short),pointer,dimension(:,:,:) :: tmp
    !
    n1 = 1; n2 = 1; n3 = 1
    lb1 = 1; lb2 = 1; lb3 = 1
    ! 
    n3 = array%data%num_elements / array%data%stride3
    n2 = array%data%stride3 / array%data%stride2
    n1 = array%data%stride2 / 1
    !
    call c_f_pointer(array%data%data_host,tmp,SHAPE=[n1,n2,n3])
    !
    offset_remainder = array%data%index_offset
    lb3 = -offset_remainder / array%data%stride3
    offset_remainder = offset_remainder + lb3*array%data%stride3
    lb2 = -offset_remainder / array%data%stride2
    offset_remainder = offset_remainder + lb2*array%data%stride2
    lb1 = -offset_remainder / 1
    offset_remainder = offset_remainder + lb1*1
    !
    data_host(lb1:,lb2:,lb3:) => tmp
  end subroutine
  subroutine gpufort_array3_hostptr_c_int(&
      array,&
      data_host)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array3),intent(in) :: array
    integer(c_int),intent(inout),pointer,dimension(:,:,:) :: data_host 
    !
    integer(c_int) :: offset_remainder
    integer(c_int) :: n1,n2,n3,&
                      lb1,lb2,lb3
    !
    integer(c_int),pointer,dimension(:,:,:) :: tmp
    !
    n1 = 1; n2 = 1; n3 = 1
    lb1 = 1; lb2 = 1; lb3 = 1
    ! 
    n3 = array%data%num_elements / array%data%stride3
    n2 = array%data%stride3 / array%data%stride2
    n1 = array%data%stride2 / 1
    !
    call c_f_pointer(array%data%data_host,tmp,SHAPE=[n1,n2,n3])
    !
    offset_remainder = array%data%index_offset
    lb3 = -offset_remainder / array%data%stride3
    offset_remainder = offset_remainder + lb3*array%data%stride3
    lb2 = -offset_remainder / array%data%stride2
    offset_remainder = offset_remainder + lb2*array%data%stride2
    lb1 = -offset_remainder / 1
    offset_remainder = offset_remainder + lb1*1
    !
    data_host(lb1:,lb2:,lb3:) => tmp
  end subroutine
  subroutine gpufort_array3_hostptr_c_long(&
      array,&
      data_host)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array3),intent(in) :: array
    integer(c_long),intent(inout),pointer,dimension(:,:,:) :: data_host 
    !
    integer(c_int) :: offset_remainder
    integer(c_int) :: n1,n2,n3,&
                      lb1,lb2,lb3
    !
    integer(c_long),pointer,dimension(:,:,:) :: tmp
    !
    n1 = 1; n2 = 1; n3 = 1
    lb1 = 1; lb2 = 1; lb3 = 1
    ! 
    n3 = array%data%num_elements / array%data%stride3
    n2 = array%data%stride3 / array%data%stride2
    n1 = array%data%stride2 / 1
    !
    call c_f_pointer(array%data%data_host,tmp,SHAPE=[n1,n2,n3])
    !
    offset_remainder = array%data%index_offset
    lb3 = -offset_remainder / array%data%stride3
    offset_remainder = offset_remainder + lb3*array%data%stride3
    lb2 = -offset_remainder / array%data%stride2
    offset_remainder = offset_remainder + lb2*array%data%stride2
    lb1 = -offset_remainder / 1
    offset_remainder = offset_remainder + lb1*1
    !
    data_host(lb1:,lb2:,lb3:) => tmp
  end subroutine
  subroutine gpufort_array3_hostptr_c_float(&
      array,&
      data_host)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array3),intent(in) :: array
    real(c_float),intent(inout),pointer,dimension(:,:,:) :: data_host 
    !
    integer(c_int) :: offset_remainder
    integer(c_int) :: n1,n2,n3,&
                      lb1,lb2,lb3
    !
    real(c_float),pointer,dimension(:,:,:) :: tmp
    !
    n1 = 1; n2 = 1; n3 = 1
    lb1 = 1; lb2 = 1; lb3 = 1
    ! 
    n3 = array%data%num_elements / array%data%stride3
    n2 = array%data%stride3 / array%data%stride2
    n1 = array%data%stride2 / 1
    !
    call c_f_pointer(array%data%data_host,tmp,SHAPE=[n1,n2,n3])
    !
    offset_remainder = array%data%index_offset
    lb3 = -offset_remainder / array%data%stride3
    offset_remainder = offset_remainder + lb3*array%data%stride3
    lb2 = -offset_remainder / array%data%stride2
    offset_remainder = offset_remainder + lb2*array%data%stride2
    lb1 = -offset_remainder / 1
    offset_remainder = offset_remainder + lb1*1
    !
    data_host(lb1:,lb2:,lb3:) => tmp
  end subroutine
  subroutine gpufort_array3_hostptr_c_double(&
      array,&
      data_host)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array3),intent(in) :: array
    real(c_double),intent(inout),pointer,dimension(:,:,:) :: data_host 
    !
    integer(c_int) :: offset_remainder
    integer(c_int) :: n1,n2,n3,&
                      lb1,lb2,lb3
    !
    real(c_double),pointer,dimension(:,:,:) :: tmp
    !
    n1 = 1; n2 = 1; n3 = 1
    lb1 = 1; lb2 = 1; lb3 = 1
    ! 
    n3 = array%data%num_elements / array%data%stride3
    n2 = array%data%stride3 / array%data%stride2
    n1 = array%data%stride2 / 1
    !
    call c_f_pointer(array%data%data_host,tmp,SHAPE=[n1,n2,n3])
    !
    offset_remainder = array%data%index_offset
    lb3 = -offset_remainder / array%data%stride3
    offset_remainder = offset_remainder + lb3*array%data%stride3
    lb2 = -offset_remainder / array%data%stride2
    offset_remainder = offset_remainder + lb2*array%data%stride2
    lb1 = -offset_remainder / 1
    offset_remainder = offset_remainder + lb1*1
    !
    data_host(lb1:,lb2:,lb3:) => tmp
  end subroutine
  subroutine gpufort_array3_hostptr_c_float_complex(&
      array,&
      data_host)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array3),intent(in) :: array
    complex(c_float_complex),intent(inout),pointer,dimension(:,:,:) :: data_host 
    !
    integer(c_int) :: offset_remainder
    integer(c_int) :: n1,n2,n3,&
                      lb1,lb2,lb3
    !
    complex(c_float_complex),pointer,dimension(:,:,:) :: tmp
    !
    n1 = 1; n2 = 1; n3 = 1
    lb1 = 1; lb2 = 1; lb3 = 1
    ! 
    n3 = array%data%num_elements / array%data%stride3
    n2 = array%data%stride3 / array%data%stride2
    n1 = array%data%stride2 / 1
    !
    call c_f_pointer(array%data%data_host,tmp,SHAPE=[n1,n2,n3])
    !
    offset_remainder = array%data%index_offset
    lb3 = -offset_remainder / array%data%stride3
    offset_remainder = offset_remainder + lb3*array%data%stride3
    lb2 = -offset_remainder / array%data%stride2
    offset_remainder = offset_remainder + lb2*array%data%stride2
    lb1 = -offset_remainder / 1
    offset_remainder = offset_remainder + lb1*1
    !
    data_host(lb1:,lb2:,lb3:) => tmp
  end subroutine
  subroutine gpufort_array3_hostptr_c_double_complex(&
      array,&
      data_host)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array3),intent(in) :: array
    complex(c_double_complex),intent(inout),pointer,dimension(:,:,:) :: data_host 
    !
    integer(c_int) :: offset_remainder
    integer(c_int) :: n1,n2,n3,&
                      lb1,lb2,lb3
    !
    complex(c_double_complex),pointer,dimension(:,:,:) :: tmp
    !
    n1 = 1; n2 = 1; n3 = 1
    lb1 = 1; lb2 = 1; lb3 = 1
    ! 
    n3 = array%data%num_elements / array%data%stride3
    n2 = array%data%stride3 / array%data%stride2
    n1 = array%data%stride2 / 1
    !
    call c_f_pointer(array%data%data_host,tmp,SHAPE=[n1,n2,n3])
    !
    offset_remainder = array%data%index_offset
    lb3 = -offset_remainder / array%data%stride3
    offset_remainder = offset_remainder + lb3*array%data%stride3
    lb2 = -offset_remainder / array%data%stride2
    offset_remainder = offset_remainder + lb2*array%data%stride2
    lb1 = -offset_remainder / 1
    offset_remainder = offset_remainder + lb1*1
    !
    data_host(lb1:,lb2:,lb3:) => tmp
  end subroutine
  subroutine gpufort_array4_hostptr_c_bool(&
      array,&
      data_host)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array4),intent(in) :: array
    logical(c_bool),intent(inout),pointer,dimension(:,:,:,:) :: data_host 
    !
    integer(c_int) :: offset_remainder
    integer(c_int) :: n1,n2,n3,n4,&
                      lb1,lb2,lb3,lb4
    !
    logical(c_bool),pointer,dimension(:,:,:,:) :: tmp
    !
    n1 = 1; n2 = 1; n3 = 1; n4 = 1
    lb1 = 1; lb2 = 1; lb3 = 1; lb4 = 1
    ! 
    n4 = array%data%num_elements / array%data%stride4
    n3 = array%data%stride4 / array%data%stride3
    n2 = array%data%stride3 / array%data%stride2
    n1 = array%data%stride2 / 1
    !
    call c_f_pointer(array%data%data_host,tmp,SHAPE=[n1,n2,n3,n4])
    !
    offset_remainder = array%data%index_offset
    lb4 = -offset_remainder / array%data%stride4
    offset_remainder = offset_remainder + lb4*array%data%stride4
    lb3 = -offset_remainder / array%data%stride3
    offset_remainder = offset_remainder + lb3*array%data%stride3
    lb2 = -offset_remainder / array%data%stride2
    offset_remainder = offset_remainder + lb2*array%data%stride2
    lb1 = -offset_remainder / 1
    offset_remainder = offset_remainder + lb1*1
    !
    data_host(lb1:,lb2:,lb3:,lb4:) => tmp
  end subroutine
  subroutine gpufort_array4_hostptr_c_short(&
      array,&
      data_host)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array4),intent(in) :: array
    integer(c_short),intent(inout),pointer,dimension(:,:,:,:) :: data_host 
    !
    integer(c_int) :: offset_remainder
    integer(c_int) :: n1,n2,n3,n4,&
                      lb1,lb2,lb3,lb4
    !
    integer(c_short),pointer,dimension(:,:,:,:) :: tmp
    !
    n1 = 1; n2 = 1; n3 = 1; n4 = 1
    lb1 = 1; lb2 = 1; lb3 = 1; lb4 = 1
    ! 
    n4 = array%data%num_elements / array%data%stride4
    n3 = array%data%stride4 / array%data%stride3
    n2 = array%data%stride3 / array%data%stride2
    n1 = array%data%stride2 / 1
    !
    call c_f_pointer(array%data%data_host,tmp,SHAPE=[n1,n2,n3,n4])
    !
    offset_remainder = array%data%index_offset
    lb4 = -offset_remainder / array%data%stride4
    offset_remainder = offset_remainder + lb4*array%data%stride4
    lb3 = -offset_remainder / array%data%stride3
    offset_remainder = offset_remainder + lb3*array%data%stride3
    lb2 = -offset_remainder / array%data%stride2
    offset_remainder = offset_remainder + lb2*array%data%stride2
    lb1 = -offset_remainder / 1
    offset_remainder = offset_remainder + lb1*1
    !
    data_host(lb1:,lb2:,lb3:,lb4:) => tmp
  end subroutine
  subroutine gpufort_array4_hostptr_c_int(&
      array,&
      data_host)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array4),intent(in) :: array
    integer(c_int),intent(inout),pointer,dimension(:,:,:,:) :: data_host 
    !
    integer(c_int) :: offset_remainder
    integer(c_int) :: n1,n2,n3,n4,&
                      lb1,lb2,lb3,lb4
    !
    integer(c_int),pointer,dimension(:,:,:,:) :: tmp
    !
    n1 = 1; n2 = 1; n3 = 1; n4 = 1
    lb1 = 1; lb2 = 1; lb3 = 1; lb4 = 1
    ! 
    n4 = array%data%num_elements / array%data%stride4
    n3 = array%data%stride4 / array%data%stride3
    n2 = array%data%stride3 / array%data%stride2
    n1 = array%data%stride2 / 1
    !
    call c_f_pointer(array%data%data_host,tmp,SHAPE=[n1,n2,n3,n4])
    !
    offset_remainder = array%data%index_offset
    lb4 = -offset_remainder / array%data%stride4
    offset_remainder = offset_remainder + lb4*array%data%stride4
    lb3 = -offset_remainder / array%data%stride3
    offset_remainder = offset_remainder + lb3*array%data%stride3
    lb2 = -offset_remainder / array%data%stride2
    offset_remainder = offset_remainder + lb2*array%data%stride2
    lb1 = -offset_remainder / 1
    offset_remainder = offset_remainder + lb1*1
    !
    data_host(lb1:,lb2:,lb3:,lb4:) => tmp
  end subroutine
  subroutine gpufort_array4_hostptr_c_long(&
      array,&
      data_host)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array4),intent(in) :: array
    integer(c_long),intent(inout),pointer,dimension(:,:,:,:) :: data_host 
    !
    integer(c_int) :: offset_remainder
    integer(c_int) :: n1,n2,n3,n4,&
                      lb1,lb2,lb3,lb4
    !
    integer(c_long),pointer,dimension(:,:,:,:) :: tmp
    !
    n1 = 1; n2 = 1; n3 = 1; n4 = 1
    lb1 = 1; lb2 = 1; lb3 = 1; lb4 = 1
    ! 
    n4 = array%data%num_elements / array%data%stride4
    n3 = array%data%stride4 / array%data%stride3
    n2 = array%data%stride3 / array%data%stride2
    n1 = array%data%stride2 / 1
    !
    call c_f_pointer(array%data%data_host,tmp,SHAPE=[n1,n2,n3,n4])
    !
    offset_remainder = array%data%index_offset
    lb4 = -offset_remainder / array%data%stride4
    offset_remainder = offset_remainder + lb4*array%data%stride4
    lb3 = -offset_remainder / array%data%stride3
    offset_remainder = offset_remainder + lb3*array%data%stride3
    lb2 = -offset_remainder / array%data%stride2
    offset_remainder = offset_remainder + lb2*array%data%stride2
    lb1 = -offset_remainder / 1
    offset_remainder = offset_remainder + lb1*1
    !
    data_host(lb1:,lb2:,lb3:,lb4:) => tmp
  end subroutine
  subroutine gpufort_array4_hostptr_c_float(&
      array,&
      data_host)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array4),intent(in) :: array
    real(c_float),intent(inout),pointer,dimension(:,:,:,:) :: data_host 
    !
    integer(c_int) :: offset_remainder
    integer(c_int) :: n1,n2,n3,n4,&
                      lb1,lb2,lb3,lb4
    !
    real(c_float),pointer,dimension(:,:,:,:) :: tmp
    !
    n1 = 1; n2 = 1; n3 = 1; n4 = 1
    lb1 = 1; lb2 = 1; lb3 = 1; lb4 = 1
    ! 
    n4 = array%data%num_elements / array%data%stride4
    n3 = array%data%stride4 / array%data%stride3
    n2 = array%data%stride3 / array%data%stride2
    n1 = array%data%stride2 / 1
    !
    call c_f_pointer(array%data%data_host,tmp,SHAPE=[n1,n2,n3,n4])
    !
    offset_remainder = array%data%index_offset
    lb4 = -offset_remainder / array%data%stride4
    offset_remainder = offset_remainder + lb4*array%data%stride4
    lb3 = -offset_remainder / array%data%stride3
    offset_remainder = offset_remainder + lb3*array%data%stride3
    lb2 = -offset_remainder / array%data%stride2
    offset_remainder = offset_remainder + lb2*array%data%stride2
    lb1 = -offset_remainder / 1
    offset_remainder = offset_remainder + lb1*1
    !
    data_host(lb1:,lb2:,lb3:,lb4:) => tmp
  end subroutine
  subroutine gpufort_array4_hostptr_c_double(&
      array,&
      data_host)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array4),intent(in) :: array
    real(c_double),intent(inout),pointer,dimension(:,:,:,:) :: data_host 
    !
    integer(c_int) :: offset_remainder
    integer(c_int) :: n1,n2,n3,n4,&
                      lb1,lb2,lb3,lb4
    !
    real(c_double),pointer,dimension(:,:,:,:) :: tmp
    !
    n1 = 1; n2 = 1; n3 = 1; n4 = 1
    lb1 = 1; lb2 = 1; lb3 = 1; lb4 = 1
    ! 
    n4 = array%data%num_elements / array%data%stride4
    n3 = array%data%stride4 / array%data%stride3
    n2 = array%data%stride3 / array%data%stride2
    n1 = array%data%stride2 / 1
    !
    call c_f_pointer(array%data%data_host,tmp,SHAPE=[n1,n2,n3,n4])
    !
    offset_remainder = array%data%index_offset
    lb4 = -offset_remainder / array%data%stride4
    offset_remainder = offset_remainder + lb4*array%data%stride4
    lb3 = -offset_remainder / array%data%stride3
    offset_remainder = offset_remainder + lb3*array%data%stride3
    lb2 = -offset_remainder / array%data%stride2
    offset_remainder = offset_remainder + lb2*array%data%stride2
    lb1 = -offset_remainder / 1
    offset_remainder = offset_remainder + lb1*1
    !
    data_host(lb1:,lb2:,lb3:,lb4:) => tmp
  end subroutine
  subroutine gpufort_array4_hostptr_c_float_complex(&
      array,&
      data_host)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array4),intent(in) :: array
    complex(c_float_complex),intent(inout),pointer,dimension(:,:,:,:) :: data_host 
    !
    integer(c_int) :: offset_remainder
    integer(c_int) :: n1,n2,n3,n4,&
                      lb1,lb2,lb3,lb4
    !
    complex(c_float_complex),pointer,dimension(:,:,:,:) :: tmp
    !
    n1 = 1; n2 = 1; n3 = 1; n4 = 1
    lb1 = 1; lb2 = 1; lb3 = 1; lb4 = 1
    ! 
    n4 = array%data%num_elements / array%data%stride4
    n3 = array%data%stride4 / array%data%stride3
    n2 = array%data%stride3 / array%data%stride2
    n1 = array%data%stride2 / 1
    !
    call c_f_pointer(array%data%data_host,tmp,SHAPE=[n1,n2,n3,n4])
    !
    offset_remainder = array%data%index_offset
    lb4 = -offset_remainder / array%data%stride4
    offset_remainder = offset_remainder + lb4*array%data%stride4
    lb3 = -offset_remainder / array%data%stride3
    offset_remainder = offset_remainder + lb3*array%data%stride3
    lb2 = -offset_remainder / array%data%stride2
    offset_remainder = offset_remainder + lb2*array%data%stride2
    lb1 = -offset_remainder / 1
    offset_remainder = offset_remainder + lb1*1
    !
    data_host(lb1:,lb2:,lb3:,lb4:) => tmp
  end subroutine
  subroutine gpufort_array4_hostptr_c_double_complex(&
      array,&
      data_host)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array4),intent(in) :: array
    complex(c_double_complex),intent(inout),pointer,dimension(:,:,:,:) :: data_host 
    !
    integer(c_int) :: offset_remainder
    integer(c_int) :: n1,n2,n3,n4,&
                      lb1,lb2,lb3,lb4
    !
    complex(c_double_complex),pointer,dimension(:,:,:,:) :: tmp
    !
    n1 = 1; n2 = 1; n3 = 1; n4 = 1
    lb1 = 1; lb2 = 1; lb3 = 1; lb4 = 1
    ! 
    n4 = array%data%num_elements / array%data%stride4
    n3 = array%data%stride4 / array%data%stride3
    n2 = array%data%stride3 / array%data%stride2
    n1 = array%data%stride2 / 1
    !
    call c_f_pointer(array%data%data_host,tmp,SHAPE=[n1,n2,n3,n4])
    !
    offset_remainder = array%data%index_offset
    lb4 = -offset_remainder / array%data%stride4
    offset_remainder = offset_remainder + lb4*array%data%stride4
    lb3 = -offset_remainder / array%data%stride3
    offset_remainder = offset_remainder + lb3*array%data%stride3
    lb2 = -offset_remainder / array%data%stride2
    offset_remainder = offset_remainder + lb2*array%data%stride2
    lb1 = -offset_remainder / 1
    offset_remainder = offset_remainder + lb1*1
    !
    data_host(lb1:,lb2:,lb3:,lb4:) => tmp
  end subroutine
  subroutine gpufort_array5_hostptr_c_bool(&
      array,&
      data_host)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array5),intent(in) :: array
    logical(c_bool),intent(inout),pointer,dimension(:,:,:,:,:) :: data_host 
    !
    integer(c_int) :: offset_remainder
    integer(c_int) :: n1,n2,n3,n4,n5,&
                      lb1,lb2,lb3,lb4,lb5
    !
    logical(c_bool),pointer,dimension(:,:,:,:,:) :: tmp
    !
    n1 = 1; n2 = 1; n3 = 1; n4 = 1; n5 = 1
    lb1 = 1; lb2 = 1; lb3 = 1; lb4 = 1; lb5 = 1
    ! 
    n5 = array%data%num_elements / array%data%stride5
    n4 = array%data%stride5 / array%data%stride4
    n3 = array%data%stride4 / array%data%stride3
    n2 = array%data%stride3 / array%data%stride2
    n1 = array%data%stride2 / 1
    !
    call c_f_pointer(array%data%data_host,tmp,SHAPE=[n1,n2,n3,n4,n5])
    !
    offset_remainder = array%data%index_offset
    lb5 = -offset_remainder / array%data%stride5
    offset_remainder = offset_remainder + lb5*array%data%stride5
    lb4 = -offset_remainder / array%data%stride4
    offset_remainder = offset_remainder + lb4*array%data%stride4
    lb3 = -offset_remainder / array%data%stride3
    offset_remainder = offset_remainder + lb3*array%data%stride3
    lb2 = -offset_remainder / array%data%stride2
    offset_remainder = offset_remainder + lb2*array%data%stride2
    lb1 = -offset_remainder / 1
    offset_remainder = offset_remainder + lb1*1
    !
    data_host(lb1:,lb2:,lb3:,lb4:,lb5:) => tmp
  end subroutine
  subroutine gpufort_array5_hostptr_c_short(&
      array,&
      data_host)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array5),intent(in) :: array
    integer(c_short),intent(inout),pointer,dimension(:,:,:,:,:) :: data_host 
    !
    integer(c_int) :: offset_remainder
    integer(c_int) :: n1,n2,n3,n4,n5,&
                      lb1,lb2,lb3,lb4,lb5
    !
    integer(c_short),pointer,dimension(:,:,:,:,:) :: tmp
    !
    n1 = 1; n2 = 1; n3 = 1; n4 = 1; n5 = 1
    lb1 = 1; lb2 = 1; lb3 = 1; lb4 = 1; lb5 = 1
    ! 
    n5 = array%data%num_elements / array%data%stride5
    n4 = array%data%stride5 / array%data%stride4
    n3 = array%data%stride4 / array%data%stride3
    n2 = array%data%stride3 / array%data%stride2
    n1 = array%data%stride2 / 1
    !
    call c_f_pointer(array%data%data_host,tmp,SHAPE=[n1,n2,n3,n4,n5])
    !
    offset_remainder = array%data%index_offset
    lb5 = -offset_remainder / array%data%stride5
    offset_remainder = offset_remainder + lb5*array%data%stride5
    lb4 = -offset_remainder / array%data%stride4
    offset_remainder = offset_remainder + lb4*array%data%stride4
    lb3 = -offset_remainder / array%data%stride3
    offset_remainder = offset_remainder + lb3*array%data%stride3
    lb2 = -offset_remainder / array%data%stride2
    offset_remainder = offset_remainder + lb2*array%data%stride2
    lb1 = -offset_remainder / 1
    offset_remainder = offset_remainder + lb1*1
    !
    data_host(lb1:,lb2:,lb3:,lb4:,lb5:) => tmp
  end subroutine
  subroutine gpufort_array5_hostptr_c_int(&
      array,&
      data_host)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array5),intent(in) :: array
    integer(c_int),intent(inout),pointer,dimension(:,:,:,:,:) :: data_host 
    !
    integer(c_int) :: offset_remainder
    integer(c_int) :: n1,n2,n3,n4,n5,&
                      lb1,lb2,lb3,lb4,lb5
    !
    integer(c_int),pointer,dimension(:,:,:,:,:) :: tmp
    !
    n1 = 1; n2 = 1; n3 = 1; n4 = 1; n5 = 1
    lb1 = 1; lb2 = 1; lb3 = 1; lb4 = 1; lb5 = 1
    ! 
    n5 = array%data%num_elements / array%data%stride5
    n4 = array%data%stride5 / array%data%stride4
    n3 = array%data%stride4 / array%data%stride3
    n2 = array%data%stride3 / array%data%stride2
    n1 = array%data%stride2 / 1
    !
    call c_f_pointer(array%data%data_host,tmp,SHAPE=[n1,n2,n3,n4,n5])
    !
    offset_remainder = array%data%index_offset
    lb5 = -offset_remainder / array%data%stride5
    offset_remainder = offset_remainder + lb5*array%data%stride5
    lb4 = -offset_remainder / array%data%stride4
    offset_remainder = offset_remainder + lb4*array%data%stride4
    lb3 = -offset_remainder / array%data%stride3
    offset_remainder = offset_remainder + lb3*array%data%stride3
    lb2 = -offset_remainder / array%data%stride2
    offset_remainder = offset_remainder + lb2*array%data%stride2
    lb1 = -offset_remainder / 1
    offset_remainder = offset_remainder + lb1*1
    !
    data_host(lb1:,lb2:,lb3:,lb4:,lb5:) => tmp
  end subroutine
  subroutine gpufort_array5_hostptr_c_long(&
      array,&
      data_host)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array5),intent(in) :: array
    integer(c_long),intent(inout),pointer,dimension(:,:,:,:,:) :: data_host 
    !
    integer(c_int) :: offset_remainder
    integer(c_int) :: n1,n2,n3,n4,n5,&
                      lb1,lb2,lb3,lb4,lb5
    !
    integer(c_long),pointer,dimension(:,:,:,:,:) :: tmp
    !
    n1 = 1; n2 = 1; n3 = 1; n4 = 1; n5 = 1
    lb1 = 1; lb2 = 1; lb3 = 1; lb4 = 1; lb5 = 1
    ! 
    n5 = array%data%num_elements / array%data%stride5
    n4 = array%data%stride5 / array%data%stride4
    n3 = array%data%stride4 / array%data%stride3
    n2 = array%data%stride3 / array%data%stride2
    n1 = array%data%stride2 / 1
    !
    call c_f_pointer(array%data%data_host,tmp,SHAPE=[n1,n2,n3,n4,n5])
    !
    offset_remainder = array%data%index_offset
    lb5 = -offset_remainder / array%data%stride5
    offset_remainder = offset_remainder + lb5*array%data%stride5
    lb4 = -offset_remainder / array%data%stride4
    offset_remainder = offset_remainder + lb4*array%data%stride4
    lb3 = -offset_remainder / array%data%stride3
    offset_remainder = offset_remainder + lb3*array%data%stride3
    lb2 = -offset_remainder / array%data%stride2
    offset_remainder = offset_remainder + lb2*array%data%stride2
    lb1 = -offset_remainder / 1
    offset_remainder = offset_remainder + lb1*1
    !
    data_host(lb1:,lb2:,lb3:,lb4:,lb5:) => tmp
  end subroutine
  subroutine gpufort_array5_hostptr_c_float(&
      array,&
      data_host)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array5),intent(in) :: array
    real(c_float),intent(inout),pointer,dimension(:,:,:,:,:) :: data_host 
    !
    integer(c_int) :: offset_remainder
    integer(c_int) :: n1,n2,n3,n4,n5,&
                      lb1,lb2,lb3,lb4,lb5
    !
    real(c_float),pointer,dimension(:,:,:,:,:) :: tmp
    !
    n1 = 1; n2 = 1; n3 = 1; n4 = 1; n5 = 1
    lb1 = 1; lb2 = 1; lb3 = 1; lb4 = 1; lb5 = 1
    ! 
    n5 = array%data%num_elements / array%data%stride5
    n4 = array%data%stride5 / array%data%stride4
    n3 = array%data%stride4 / array%data%stride3
    n2 = array%data%stride3 / array%data%stride2
    n1 = array%data%stride2 / 1
    !
    call c_f_pointer(array%data%data_host,tmp,SHAPE=[n1,n2,n3,n4,n5])
    !
    offset_remainder = array%data%index_offset
    lb5 = -offset_remainder / array%data%stride5
    offset_remainder = offset_remainder + lb5*array%data%stride5
    lb4 = -offset_remainder / array%data%stride4
    offset_remainder = offset_remainder + lb4*array%data%stride4
    lb3 = -offset_remainder / array%data%stride3
    offset_remainder = offset_remainder + lb3*array%data%stride3
    lb2 = -offset_remainder / array%data%stride2
    offset_remainder = offset_remainder + lb2*array%data%stride2
    lb1 = -offset_remainder / 1
    offset_remainder = offset_remainder + lb1*1
    !
    data_host(lb1:,lb2:,lb3:,lb4:,lb5:) => tmp
  end subroutine
  subroutine gpufort_array5_hostptr_c_double(&
      array,&
      data_host)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array5),intent(in) :: array
    real(c_double),intent(inout),pointer,dimension(:,:,:,:,:) :: data_host 
    !
    integer(c_int) :: offset_remainder
    integer(c_int) :: n1,n2,n3,n4,n5,&
                      lb1,lb2,lb3,lb4,lb5
    !
    real(c_double),pointer,dimension(:,:,:,:,:) :: tmp
    !
    n1 = 1; n2 = 1; n3 = 1; n4 = 1; n5 = 1
    lb1 = 1; lb2 = 1; lb3 = 1; lb4 = 1; lb5 = 1
    ! 
    n5 = array%data%num_elements / array%data%stride5
    n4 = array%data%stride5 / array%data%stride4
    n3 = array%data%stride4 / array%data%stride3
    n2 = array%data%stride3 / array%data%stride2
    n1 = array%data%stride2 / 1
    !
    call c_f_pointer(array%data%data_host,tmp,SHAPE=[n1,n2,n3,n4,n5])
    !
    offset_remainder = array%data%index_offset
    lb5 = -offset_remainder / array%data%stride5
    offset_remainder = offset_remainder + lb5*array%data%stride5
    lb4 = -offset_remainder / array%data%stride4
    offset_remainder = offset_remainder + lb4*array%data%stride4
    lb3 = -offset_remainder / array%data%stride3
    offset_remainder = offset_remainder + lb3*array%data%stride3
    lb2 = -offset_remainder / array%data%stride2
    offset_remainder = offset_remainder + lb2*array%data%stride2
    lb1 = -offset_remainder / 1
    offset_remainder = offset_remainder + lb1*1
    !
    data_host(lb1:,lb2:,lb3:,lb4:,lb5:) => tmp
  end subroutine
  subroutine gpufort_array5_hostptr_c_float_complex(&
      array,&
      data_host)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array5),intent(in) :: array
    complex(c_float_complex),intent(inout),pointer,dimension(:,:,:,:,:) :: data_host 
    !
    integer(c_int) :: offset_remainder
    integer(c_int) :: n1,n2,n3,n4,n5,&
                      lb1,lb2,lb3,lb4,lb5
    !
    complex(c_float_complex),pointer,dimension(:,:,:,:,:) :: tmp
    !
    n1 = 1; n2 = 1; n3 = 1; n4 = 1; n5 = 1
    lb1 = 1; lb2 = 1; lb3 = 1; lb4 = 1; lb5 = 1
    ! 
    n5 = array%data%num_elements / array%data%stride5
    n4 = array%data%stride5 / array%data%stride4
    n3 = array%data%stride4 / array%data%stride3
    n2 = array%data%stride3 / array%data%stride2
    n1 = array%data%stride2 / 1
    !
    call c_f_pointer(array%data%data_host,tmp,SHAPE=[n1,n2,n3,n4,n5])
    !
    offset_remainder = array%data%index_offset
    lb5 = -offset_remainder / array%data%stride5
    offset_remainder = offset_remainder + lb5*array%data%stride5
    lb4 = -offset_remainder / array%data%stride4
    offset_remainder = offset_remainder + lb4*array%data%stride4
    lb3 = -offset_remainder / array%data%stride3
    offset_remainder = offset_remainder + lb3*array%data%stride3
    lb2 = -offset_remainder / array%data%stride2
    offset_remainder = offset_remainder + lb2*array%data%stride2
    lb1 = -offset_remainder / 1
    offset_remainder = offset_remainder + lb1*1
    !
    data_host(lb1:,lb2:,lb3:,lb4:,lb5:) => tmp
  end subroutine
  subroutine gpufort_array5_hostptr_c_double_complex(&
      array,&
      data_host)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array5),intent(in) :: array
    complex(c_double_complex),intent(inout),pointer,dimension(:,:,:,:,:) :: data_host 
    !
    integer(c_int) :: offset_remainder
    integer(c_int) :: n1,n2,n3,n4,n5,&
                      lb1,lb2,lb3,lb4,lb5
    !
    complex(c_double_complex),pointer,dimension(:,:,:,:,:) :: tmp
    !
    n1 = 1; n2 = 1; n3 = 1; n4 = 1; n5 = 1
    lb1 = 1; lb2 = 1; lb3 = 1; lb4 = 1; lb5 = 1
    ! 
    n5 = array%data%num_elements / array%data%stride5
    n4 = array%data%stride5 / array%data%stride4
    n3 = array%data%stride4 / array%data%stride3
    n2 = array%data%stride3 / array%data%stride2
    n1 = array%data%stride2 / 1
    !
    call c_f_pointer(array%data%data_host,tmp,SHAPE=[n1,n2,n3,n4,n5])
    !
    offset_remainder = array%data%index_offset
    lb5 = -offset_remainder / array%data%stride5
    offset_remainder = offset_remainder + lb5*array%data%stride5
    lb4 = -offset_remainder / array%data%stride4
    offset_remainder = offset_remainder + lb4*array%data%stride4
    lb3 = -offset_remainder / array%data%stride3
    offset_remainder = offset_remainder + lb3*array%data%stride3
    lb2 = -offset_remainder / array%data%stride2
    offset_remainder = offset_remainder + lb2*array%data%stride2
    lb1 = -offset_remainder / 1
    offset_remainder = offset_remainder + lb1*1
    !
    data_host(lb1:,lb2:,lb3:,lb4:,lb5:) => tmp
  end subroutine
  subroutine gpufort_array6_hostptr_c_bool(&
      array,&
      data_host)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array6),intent(in) :: array
    logical(c_bool),intent(inout),pointer,dimension(:,:,:,:,:,:) :: data_host 
    !
    integer(c_int) :: offset_remainder
    integer(c_int) :: n1,n2,n3,n4,n5,n6,&
                      lb1,lb2,lb3,lb4,lb5,lb6
    !
    logical(c_bool),pointer,dimension(:,:,:,:,:,:) :: tmp
    !
    n1 = 1; n2 = 1; n3 = 1; n4 = 1; n5 = 1; n6 = 1
    lb1 = 1; lb2 = 1; lb3 = 1; lb4 = 1; lb5 = 1; lb6 = 1
    ! 
    n6 = array%data%num_elements / array%data%stride6
    n5 = array%data%stride6 / array%data%stride5
    n4 = array%data%stride5 / array%data%stride4
    n3 = array%data%stride4 / array%data%stride3
    n2 = array%data%stride3 / array%data%stride2
    n1 = array%data%stride2 / 1
    !
    call c_f_pointer(array%data%data_host,tmp,SHAPE=[n1,n2,n3,n4,n5,n6])
    !
    offset_remainder = array%data%index_offset
    lb6 = -offset_remainder / array%data%stride6
    offset_remainder = offset_remainder + lb6*array%data%stride6
    lb5 = -offset_remainder / array%data%stride5
    offset_remainder = offset_remainder + lb5*array%data%stride5
    lb4 = -offset_remainder / array%data%stride4
    offset_remainder = offset_remainder + lb4*array%data%stride4
    lb3 = -offset_remainder / array%data%stride3
    offset_remainder = offset_remainder + lb3*array%data%stride3
    lb2 = -offset_remainder / array%data%stride2
    offset_remainder = offset_remainder + lb2*array%data%stride2
    lb1 = -offset_remainder / 1
    offset_remainder = offset_remainder + lb1*1
    !
    data_host(lb1:,lb2:,lb3:,lb4:,lb5:,lb6:) => tmp
  end subroutine
  subroutine gpufort_array6_hostptr_c_short(&
      array,&
      data_host)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array6),intent(in) :: array
    integer(c_short),intent(inout),pointer,dimension(:,:,:,:,:,:) :: data_host 
    !
    integer(c_int) :: offset_remainder
    integer(c_int) :: n1,n2,n3,n4,n5,n6,&
                      lb1,lb2,lb3,lb4,lb5,lb6
    !
    integer(c_short),pointer,dimension(:,:,:,:,:,:) :: tmp
    !
    n1 = 1; n2 = 1; n3 = 1; n4 = 1; n5 = 1; n6 = 1
    lb1 = 1; lb2 = 1; lb3 = 1; lb4 = 1; lb5 = 1; lb6 = 1
    ! 
    n6 = array%data%num_elements / array%data%stride6
    n5 = array%data%stride6 / array%data%stride5
    n4 = array%data%stride5 / array%data%stride4
    n3 = array%data%stride4 / array%data%stride3
    n2 = array%data%stride3 / array%data%stride2
    n1 = array%data%stride2 / 1
    !
    call c_f_pointer(array%data%data_host,tmp,SHAPE=[n1,n2,n3,n4,n5,n6])
    !
    offset_remainder = array%data%index_offset
    lb6 = -offset_remainder / array%data%stride6
    offset_remainder = offset_remainder + lb6*array%data%stride6
    lb5 = -offset_remainder / array%data%stride5
    offset_remainder = offset_remainder + lb5*array%data%stride5
    lb4 = -offset_remainder / array%data%stride4
    offset_remainder = offset_remainder + lb4*array%data%stride4
    lb3 = -offset_remainder / array%data%stride3
    offset_remainder = offset_remainder + lb3*array%data%stride3
    lb2 = -offset_remainder / array%data%stride2
    offset_remainder = offset_remainder + lb2*array%data%stride2
    lb1 = -offset_remainder / 1
    offset_remainder = offset_remainder + lb1*1
    !
    data_host(lb1:,lb2:,lb3:,lb4:,lb5:,lb6:) => tmp
  end subroutine
  subroutine gpufort_array6_hostptr_c_int(&
      array,&
      data_host)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array6),intent(in) :: array
    integer(c_int),intent(inout),pointer,dimension(:,:,:,:,:,:) :: data_host 
    !
    integer(c_int) :: offset_remainder
    integer(c_int) :: n1,n2,n3,n4,n5,n6,&
                      lb1,lb2,lb3,lb4,lb5,lb6
    !
    integer(c_int),pointer,dimension(:,:,:,:,:,:) :: tmp
    !
    n1 = 1; n2 = 1; n3 = 1; n4 = 1; n5 = 1; n6 = 1
    lb1 = 1; lb2 = 1; lb3 = 1; lb4 = 1; lb5 = 1; lb6 = 1
    ! 
    n6 = array%data%num_elements / array%data%stride6
    n5 = array%data%stride6 / array%data%stride5
    n4 = array%data%stride5 / array%data%stride4
    n3 = array%data%stride4 / array%data%stride3
    n2 = array%data%stride3 / array%data%stride2
    n1 = array%data%stride2 / 1
    !
    call c_f_pointer(array%data%data_host,tmp,SHAPE=[n1,n2,n3,n4,n5,n6])
    !
    offset_remainder = array%data%index_offset
    lb6 = -offset_remainder / array%data%stride6
    offset_remainder = offset_remainder + lb6*array%data%stride6
    lb5 = -offset_remainder / array%data%stride5
    offset_remainder = offset_remainder + lb5*array%data%stride5
    lb4 = -offset_remainder / array%data%stride4
    offset_remainder = offset_remainder + lb4*array%data%stride4
    lb3 = -offset_remainder / array%data%stride3
    offset_remainder = offset_remainder + lb3*array%data%stride3
    lb2 = -offset_remainder / array%data%stride2
    offset_remainder = offset_remainder + lb2*array%data%stride2
    lb1 = -offset_remainder / 1
    offset_remainder = offset_remainder + lb1*1
    !
    data_host(lb1:,lb2:,lb3:,lb4:,lb5:,lb6:) => tmp
  end subroutine
  subroutine gpufort_array6_hostptr_c_long(&
      array,&
      data_host)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array6),intent(in) :: array
    integer(c_long),intent(inout),pointer,dimension(:,:,:,:,:,:) :: data_host 
    !
    integer(c_int) :: offset_remainder
    integer(c_int) :: n1,n2,n3,n4,n5,n6,&
                      lb1,lb2,lb3,lb4,lb5,lb6
    !
    integer(c_long),pointer,dimension(:,:,:,:,:,:) :: tmp
    !
    n1 = 1; n2 = 1; n3 = 1; n4 = 1; n5 = 1; n6 = 1
    lb1 = 1; lb2 = 1; lb3 = 1; lb4 = 1; lb5 = 1; lb6 = 1
    ! 
    n6 = array%data%num_elements / array%data%stride6
    n5 = array%data%stride6 / array%data%stride5
    n4 = array%data%stride5 / array%data%stride4
    n3 = array%data%stride4 / array%data%stride3
    n2 = array%data%stride3 / array%data%stride2
    n1 = array%data%stride2 / 1
    !
    call c_f_pointer(array%data%data_host,tmp,SHAPE=[n1,n2,n3,n4,n5,n6])
    !
    offset_remainder = array%data%index_offset
    lb6 = -offset_remainder / array%data%stride6
    offset_remainder = offset_remainder + lb6*array%data%stride6
    lb5 = -offset_remainder / array%data%stride5
    offset_remainder = offset_remainder + lb5*array%data%stride5
    lb4 = -offset_remainder / array%data%stride4
    offset_remainder = offset_remainder + lb4*array%data%stride4
    lb3 = -offset_remainder / array%data%stride3
    offset_remainder = offset_remainder + lb3*array%data%stride3
    lb2 = -offset_remainder / array%data%stride2
    offset_remainder = offset_remainder + lb2*array%data%stride2
    lb1 = -offset_remainder / 1
    offset_remainder = offset_remainder + lb1*1
    !
    data_host(lb1:,lb2:,lb3:,lb4:,lb5:,lb6:) => tmp
  end subroutine
  subroutine gpufort_array6_hostptr_c_float(&
      array,&
      data_host)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array6),intent(in) :: array
    real(c_float),intent(inout),pointer,dimension(:,:,:,:,:,:) :: data_host 
    !
    integer(c_int) :: offset_remainder
    integer(c_int) :: n1,n2,n3,n4,n5,n6,&
                      lb1,lb2,lb3,lb4,lb5,lb6
    !
    real(c_float),pointer,dimension(:,:,:,:,:,:) :: tmp
    !
    n1 = 1; n2 = 1; n3 = 1; n4 = 1; n5 = 1; n6 = 1
    lb1 = 1; lb2 = 1; lb3 = 1; lb4 = 1; lb5 = 1; lb6 = 1
    ! 
    n6 = array%data%num_elements / array%data%stride6
    n5 = array%data%stride6 / array%data%stride5
    n4 = array%data%stride5 / array%data%stride4
    n3 = array%data%stride4 / array%data%stride3
    n2 = array%data%stride3 / array%data%stride2
    n1 = array%data%stride2 / 1
    !
    call c_f_pointer(array%data%data_host,tmp,SHAPE=[n1,n2,n3,n4,n5,n6])
    !
    offset_remainder = array%data%index_offset
    lb6 = -offset_remainder / array%data%stride6
    offset_remainder = offset_remainder + lb6*array%data%stride6
    lb5 = -offset_remainder / array%data%stride5
    offset_remainder = offset_remainder + lb5*array%data%stride5
    lb4 = -offset_remainder / array%data%stride4
    offset_remainder = offset_remainder + lb4*array%data%stride4
    lb3 = -offset_remainder / array%data%stride3
    offset_remainder = offset_remainder + lb3*array%data%stride3
    lb2 = -offset_remainder / array%data%stride2
    offset_remainder = offset_remainder + lb2*array%data%stride2
    lb1 = -offset_remainder / 1
    offset_remainder = offset_remainder + lb1*1
    !
    data_host(lb1:,lb2:,lb3:,lb4:,lb5:,lb6:) => tmp
  end subroutine
  subroutine gpufort_array6_hostptr_c_double(&
      array,&
      data_host)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array6),intent(in) :: array
    real(c_double),intent(inout),pointer,dimension(:,:,:,:,:,:) :: data_host 
    !
    integer(c_int) :: offset_remainder
    integer(c_int) :: n1,n2,n3,n4,n5,n6,&
                      lb1,lb2,lb3,lb4,lb5,lb6
    !
    real(c_double),pointer,dimension(:,:,:,:,:,:) :: tmp
    !
    n1 = 1; n2 = 1; n3 = 1; n4 = 1; n5 = 1; n6 = 1
    lb1 = 1; lb2 = 1; lb3 = 1; lb4 = 1; lb5 = 1; lb6 = 1
    ! 
    n6 = array%data%num_elements / array%data%stride6
    n5 = array%data%stride6 / array%data%stride5
    n4 = array%data%stride5 / array%data%stride4
    n3 = array%data%stride4 / array%data%stride3
    n2 = array%data%stride3 / array%data%stride2
    n1 = array%data%stride2 / 1
    !
    call c_f_pointer(array%data%data_host,tmp,SHAPE=[n1,n2,n3,n4,n5,n6])
    !
    offset_remainder = array%data%index_offset
    lb6 = -offset_remainder / array%data%stride6
    offset_remainder = offset_remainder + lb6*array%data%stride6
    lb5 = -offset_remainder / array%data%stride5
    offset_remainder = offset_remainder + lb5*array%data%stride5
    lb4 = -offset_remainder / array%data%stride4
    offset_remainder = offset_remainder + lb4*array%data%stride4
    lb3 = -offset_remainder / array%data%stride3
    offset_remainder = offset_remainder + lb3*array%data%stride3
    lb2 = -offset_remainder / array%data%stride2
    offset_remainder = offset_remainder + lb2*array%data%stride2
    lb1 = -offset_remainder / 1
    offset_remainder = offset_remainder + lb1*1
    !
    data_host(lb1:,lb2:,lb3:,lb4:,lb5:,lb6:) => tmp
  end subroutine
  subroutine gpufort_array6_hostptr_c_float_complex(&
      array,&
      data_host)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array6),intent(in) :: array
    complex(c_float_complex),intent(inout),pointer,dimension(:,:,:,:,:,:) :: data_host 
    !
    integer(c_int) :: offset_remainder
    integer(c_int) :: n1,n2,n3,n4,n5,n6,&
                      lb1,lb2,lb3,lb4,lb5,lb6
    !
    complex(c_float_complex),pointer,dimension(:,:,:,:,:,:) :: tmp
    !
    n1 = 1; n2 = 1; n3 = 1; n4 = 1; n5 = 1; n6 = 1
    lb1 = 1; lb2 = 1; lb3 = 1; lb4 = 1; lb5 = 1; lb6 = 1
    ! 
    n6 = array%data%num_elements / array%data%stride6
    n5 = array%data%stride6 / array%data%stride5
    n4 = array%data%stride5 / array%data%stride4
    n3 = array%data%stride4 / array%data%stride3
    n2 = array%data%stride3 / array%data%stride2
    n1 = array%data%stride2 / 1
    !
    call c_f_pointer(array%data%data_host,tmp,SHAPE=[n1,n2,n3,n4,n5,n6])
    !
    offset_remainder = array%data%index_offset
    lb6 = -offset_remainder / array%data%stride6
    offset_remainder = offset_remainder + lb6*array%data%stride6
    lb5 = -offset_remainder / array%data%stride5
    offset_remainder = offset_remainder + lb5*array%data%stride5
    lb4 = -offset_remainder / array%data%stride4
    offset_remainder = offset_remainder + lb4*array%data%stride4
    lb3 = -offset_remainder / array%data%stride3
    offset_remainder = offset_remainder + lb3*array%data%stride3
    lb2 = -offset_remainder / array%data%stride2
    offset_remainder = offset_remainder + lb2*array%data%stride2
    lb1 = -offset_remainder / 1
    offset_remainder = offset_remainder + lb1*1
    !
    data_host(lb1:,lb2:,lb3:,lb4:,lb5:,lb6:) => tmp
  end subroutine
  subroutine gpufort_array6_hostptr_c_double_complex(&
      array,&
      data_host)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array6),intent(in) :: array
    complex(c_double_complex),intent(inout),pointer,dimension(:,:,:,:,:,:) :: data_host 
    !
    integer(c_int) :: offset_remainder
    integer(c_int) :: n1,n2,n3,n4,n5,n6,&
                      lb1,lb2,lb3,lb4,lb5,lb6
    !
    complex(c_double_complex),pointer,dimension(:,:,:,:,:,:) :: tmp
    !
    n1 = 1; n2 = 1; n3 = 1; n4 = 1; n5 = 1; n6 = 1
    lb1 = 1; lb2 = 1; lb3 = 1; lb4 = 1; lb5 = 1; lb6 = 1
    ! 
    n6 = array%data%num_elements / array%data%stride6
    n5 = array%data%stride6 / array%data%stride5
    n4 = array%data%stride5 / array%data%stride4
    n3 = array%data%stride4 / array%data%stride3
    n2 = array%data%stride3 / array%data%stride2
    n1 = array%data%stride2 / 1
    !
    call c_f_pointer(array%data%data_host,tmp,SHAPE=[n1,n2,n3,n4,n5,n6])
    !
    offset_remainder = array%data%index_offset
    lb6 = -offset_remainder / array%data%stride6
    offset_remainder = offset_remainder + lb6*array%data%stride6
    lb5 = -offset_remainder / array%data%stride5
    offset_remainder = offset_remainder + lb5*array%data%stride5
    lb4 = -offset_remainder / array%data%stride4
    offset_remainder = offset_remainder + lb4*array%data%stride4
    lb3 = -offset_remainder / array%data%stride3
    offset_remainder = offset_remainder + lb3*array%data%stride3
    lb2 = -offset_remainder / array%data%stride2
    offset_remainder = offset_remainder + lb2*array%data%stride2
    lb1 = -offset_remainder / 1
    offset_remainder = offset_remainder + lb1*1
    !
    data_host(lb1:,lb2:,lb3:,lb4:,lb5:,lb6:) => tmp
  end subroutine
  subroutine gpufort_array7_hostptr_c_bool(&
      array,&
      data_host)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array7),intent(in) :: array
    logical(c_bool),intent(inout),pointer,dimension(:,:,:,:,:,:,:) :: data_host 
    !
    integer(c_int) :: offset_remainder
    integer(c_int) :: n1,n2,n3,n4,n5,n6,n7,&
                      lb1,lb2,lb3,lb4,lb5,lb6,lb7
    !
    logical(c_bool),pointer,dimension(:,:,:,:,:,:,:) :: tmp
    !
    n1 = 1; n2 = 1; n3 = 1; n4 = 1; n5 = 1; n6 = 1; n7 = 1
    lb1 = 1; lb2 = 1; lb3 = 1; lb4 = 1; lb5 = 1; lb6 = 1; lb7 = 1
    ! 
    n7 = array%data%num_elements / array%data%stride7
    n6 = array%data%stride7 / array%data%stride6
    n5 = array%data%stride6 / array%data%stride5
    n4 = array%data%stride5 / array%data%stride4
    n3 = array%data%stride4 / array%data%stride3
    n2 = array%data%stride3 / array%data%stride2
    n1 = array%data%stride2 / 1
    !
    call c_f_pointer(array%data%data_host,tmp,SHAPE=[n1,n2,n3,n4,n5,n6,n7])
    !
    offset_remainder = array%data%index_offset
    lb7 = -offset_remainder / array%data%stride7
    offset_remainder = offset_remainder + lb7*array%data%stride7
    lb6 = -offset_remainder / array%data%stride6
    offset_remainder = offset_remainder + lb6*array%data%stride6
    lb5 = -offset_remainder / array%data%stride5
    offset_remainder = offset_remainder + lb5*array%data%stride5
    lb4 = -offset_remainder / array%data%stride4
    offset_remainder = offset_remainder + lb4*array%data%stride4
    lb3 = -offset_remainder / array%data%stride3
    offset_remainder = offset_remainder + lb3*array%data%stride3
    lb2 = -offset_remainder / array%data%stride2
    offset_remainder = offset_remainder + lb2*array%data%stride2
    lb1 = -offset_remainder / 1
    offset_remainder = offset_remainder + lb1*1
    !
    data_host(lb1:,lb2:,lb3:,lb4:,lb5:,lb6:,lb7:) => tmp
  end subroutine
  subroutine gpufort_array7_hostptr_c_short(&
      array,&
      data_host)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array7),intent(in) :: array
    integer(c_short),intent(inout),pointer,dimension(:,:,:,:,:,:,:) :: data_host 
    !
    integer(c_int) :: offset_remainder
    integer(c_int) :: n1,n2,n3,n4,n5,n6,n7,&
                      lb1,lb2,lb3,lb4,lb5,lb6,lb7
    !
    integer(c_short),pointer,dimension(:,:,:,:,:,:,:) :: tmp
    !
    n1 = 1; n2 = 1; n3 = 1; n4 = 1; n5 = 1; n6 = 1; n7 = 1
    lb1 = 1; lb2 = 1; lb3 = 1; lb4 = 1; lb5 = 1; lb6 = 1; lb7 = 1
    ! 
    n7 = array%data%num_elements / array%data%stride7
    n6 = array%data%stride7 / array%data%stride6
    n5 = array%data%stride6 / array%data%stride5
    n4 = array%data%stride5 / array%data%stride4
    n3 = array%data%stride4 / array%data%stride3
    n2 = array%data%stride3 / array%data%stride2
    n1 = array%data%stride2 / 1
    !
    call c_f_pointer(array%data%data_host,tmp,SHAPE=[n1,n2,n3,n4,n5,n6,n7])
    !
    offset_remainder = array%data%index_offset
    lb7 = -offset_remainder / array%data%stride7
    offset_remainder = offset_remainder + lb7*array%data%stride7
    lb6 = -offset_remainder / array%data%stride6
    offset_remainder = offset_remainder + lb6*array%data%stride6
    lb5 = -offset_remainder / array%data%stride5
    offset_remainder = offset_remainder + lb5*array%data%stride5
    lb4 = -offset_remainder / array%data%stride4
    offset_remainder = offset_remainder + lb4*array%data%stride4
    lb3 = -offset_remainder / array%data%stride3
    offset_remainder = offset_remainder + lb3*array%data%stride3
    lb2 = -offset_remainder / array%data%stride2
    offset_remainder = offset_remainder + lb2*array%data%stride2
    lb1 = -offset_remainder / 1
    offset_remainder = offset_remainder + lb1*1
    !
    data_host(lb1:,lb2:,lb3:,lb4:,lb5:,lb6:,lb7:) => tmp
  end subroutine
  subroutine gpufort_array7_hostptr_c_int(&
      array,&
      data_host)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array7),intent(in) :: array
    integer(c_int),intent(inout),pointer,dimension(:,:,:,:,:,:,:) :: data_host 
    !
    integer(c_int) :: offset_remainder
    integer(c_int) :: n1,n2,n3,n4,n5,n6,n7,&
                      lb1,lb2,lb3,lb4,lb5,lb6,lb7
    !
    integer(c_int),pointer,dimension(:,:,:,:,:,:,:) :: tmp
    !
    n1 = 1; n2 = 1; n3 = 1; n4 = 1; n5 = 1; n6 = 1; n7 = 1
    lb1 = 1; lb2 = 1; lb3 = 1; lb4 = 1; lb5 = 1; lb6 = 1; lb7 = 1
    ! 
    n7 = array%data%num_elements / array%data%stride7
    n6 = array%data%stride7 / array%data%stride6
    n5 = array%data%stride6 / array%data%stride5
    n4 = array%data%stride5 / array%data%stride4
    n3 = array%data%stride4 / array%data%stride3
    n2 = array%data%stride3 / array%data%stride2
    n1 = array%data%stride2 / 1
    !
    call c_f_pointer(array%data%data_host,tmp,SHAPE=[n1,n2,n3,n4,n5,n6,n7])
    !
    offset_remainder = array%data%index_offset
    lb7 = -offset_remainder / array%data%stride7
    offset_remainder = offset_remainder + lb7*array%data%stride7
    lb6 = -offset_remainder / array%data%stride6
    offset_remainder = offset_remainder + lb6*array%data%stride6
    lb5 = -offset_remainder / array%data%stride5
    offset_remainder = offset_remainder + lb5*array%data%stride5
    lb4 = -offset_remainder / array%data%stride4
    offset_remainder = offset_remainder + lb4*array%data%stride4
    lb3 = -offset_remainder / array%data%stride3
    offset_remainder = offset_remainder + lb3*array%data%stride3
    lb2 = -offset_remainder / array%data%stride2
    offset_remainder = offset_remainder + lb2*array%data%stride2
    lb1 = -offset_remainder / 1
    offset_remainder = offset_remainder + lb1*1
    !
    data_host(lb1:,lb2:,lb3:,lb4:,lb5:,lb6:,lb7:) => tmp
  end subroutine
  subroutine gpufort_array7_hostptr_c_long(&
      array,&
      data_host)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array7),intent(in) :: array
    integer(c_long),intent(inout),pointer,dimension(:,:,:,:,:,:,:) :: data_host 
    !
    integer(c_int) :: offset_remainder
    integer(c_int) :: n1,n2,n3,n4,n5,n6,n7,&
                      lb1,lb2,lb3,lb4,lb5,lb6,lb7
    !
    integer(c_long),pointer,dimension(:,:,:,:,:,:,:) :: tmp
    !
    n1 = 1; n2 = 1; n3 = 1; n4 = 1; n5 = 1; n6 = 1; n7 = 1
    lb1 = 1; lb2 = 1; lb3 = 1; lb4 = 1; lb5 = 1; lb6 = 1; lb7 = 1
    ! 
    n7 = array%data%num_elements / array%data%stride7
    n6 = array%data%stride7 / array%data%stride6
    n5 = array%data%stride6 / array%data%stride5
    n4 = array%data%stride5 / array%data%stride4
    n3 = array%data%stride4 / array%data%stride3
    n2 = array%data%stride3 / array%data%stride2
    n1 = array%data%stride2 / 1
    !
    call c_f_pointer(array%data%data_host,tmp,SHAPE=[n1,n2,n3,n4,n5,n6,n7])
    !
    offset_remainder = array%data%index_offset
    lb7 = -offset_remainder / array%data%stride7
    offset_remainder = offset_remainder + lb7*array%data%stride7
    lb6 = -offset_remainder / array%data%stride6
    offset_remainder = offset_remainder + lb6*array%data%stride6
    lb5 = -offset_remainder / array%data%stride5
    offset_remainder = offset_remainder + lb5*array%data%stride5
    lb4 = -offset_remainder / array%data%stride4
    offset_remainder = offset_remainder + lb4*array%data%stride4
    lb3 = -offset_remainder / array%data%stride3
    offset_remainder = offset_remainder + lb3*array%data%stride3
    lb2 = -offset_remainder / array%data%stride2
    offset_remainder = offset_remainder + lb2*array%data%stride2
    lb1 = -offset_remainder / 1
    offset_remainder = offset_remainder + lb1*1
    !
    data_host(lb1:,lb2:,lb3:,lb4:,lb5:,lb6:,lb7:) => tmp
  end subroutine
  subroutine gpufort_array7_hostptr_c_float(&
      array,&
      data_host)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array7),intent(in) :: array
    real(c_float),intent(inout),pointer,dimension(:,:,:,:,:,:,:) :: data_host 
    !
    integer(c_int) :: offset_remainder
    integer(c_int) :: n1,n2,n3,n4,n5,n6,n7,&
                      lb1,lb2,lb3,lb4,lb5,lb6,lb7
    !
    real(c_float),pointer,dimension(:,:,:,:,:,:,:) :: tmp
    !
    n1 = 1; n2 = 1; n3 = 1; n4 = 1; n5 = 1; n6 = 1; n7 = 1
    lb1 = 1; lb2 = 1; lb3 = 1; lb4 = 1; lb5 = 1; lb6 = 1; lb7 = 1
    ! 
    n7 = array%data%num_elements / array%data%stride7
    n6 = array%data%stride7 / array%data%stride6
    n5 = array%data%stride6 / array%data%stride5
    n4 = array%data%stride5 / array%data%stride4
    n3 = array%data%stride4 / array%data%stride3
    n2 = array%data%stride3 / array%data%stride2
    n1 = array%data%stride2 / 1
    !
    call c_f_pointer(array%data%data_host,tmp,SHAPE=[n1,n2,n3,n4,n5,n6,n7])
    !
    offset_remainder = array%data%index_offset
    lb7 = -offset_remainder / array%data%stride7
    offset_remainder = offset_remainder + lb7*array%data%stride7
    lb6 = -offset_remainder / array%data%stride6
    offset_remainder = offset_remainder + lb6*array%data%stride6
    lb5 = -offset_remainder / array%data%stride5
    offset_remainder = offset_remainder + lb5*array%data%stride5
    lb4 = -offset_remainder / array%data%stride4
    offset_remainder = offset_remainder + lb4*array%data%stride4
    lb3 = -offset_remainder / array%data%stride3
    offset_remainder = offset_remainder + lb3*array%data%stride3
    lb2 = -offset_remainder / array%data%stride2
    offset_remainder = offset_remainder + lb2*array%data%stride2
    lb1 = -offset_remainder / 1
    offset_remainder = offset_remainder + lb1*1
    !
    data_host(lb1:,lb2:,lb3:,lb4:,lb5:,lb6:,lb7:) => tmp
  end subroutine
  subroutine gpufort_array7_hostptr_c_double(&
      array,&
      data_host)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array7),intent(in) :: array
    real(c_double),intent(inout),pointer,dimension(:,:,:,:,:,:,:) :: data_host 
    !
    integer(c_int) :: offset_remainder
    integer(c_int) :: n1,n2,n3,n4,n5,n6,n7,&
                      lb1,lb2,lb3,lb4,lb5,lb6,lb7
    !
    real(c_double),pointer,dimension(:,:,:,:,:,:,:) :: tmp
    !
    n1 = 1; n2 = 1; n3 = 1; n4 = 1; n5 = 1; n6 = 1; n7 = 1
    lb1 = 1; lb2 = 1; lb3 = 1; lb4 = 1; lb5 = 1; lb6 = 1; lb7 = 1
    ! 
    n7 = array%data%num_elements / array%data%stride7
    n6 = array%data%stride7 / array%data%stride6
    n5 = array%data%stride6 / array%data%stride5
    n4 = array%data%stride5 / array%data%stride4
    n3 = array%data%stride4 / array%data%stride3
    n2 = array%data%stride3 / array%data%stride2
    n1 = array%data%stride2 / 1
    !
    call c_f_pointer(array%data%data_host,tmp,SHAPE=[n1,n2,n3,n4,n5,n6,n7])
    !
    offset_remainder = array%data%index_offset
    lb7 = -offset_remainder / array%data%stride7
    offset_remainder = offset_remainder + lb7*array%data%stride7
    lb6 = -offset_remainder / array%data%stride6
    offset_remainder = offset_remainder + lb6*array%data%stride6
    lb5 = -offset_remainder / array%data%stride5
    offset_remainder = offset_remainder + lb5*array%data%stride5
    lb4 = -offset_remainder / array%data%stride4
    offset_remainder = offset_remainder + lb4*array%data%stride4
    lb3 = -offset_remainder / array%data%stride3
    offset_remainder = offset_remainder + lb3*array%data%stride3
    lb2 = -offset_remainder / array%data%stride2
    offset_remainder = offset_remainder + lb2*array%data%stride2
    lb1 = -offset_remainder / 1
    offset_remainder = offset_remainder + lb1*1
    !
    data_host(lb1:,lb2:,lb3:,lb4:,lb5:,lb6:,lb7:) => tmp
  end subroutine
  subroutine gpufort_array7_hostptr_c_float_complex(&
      array,&
      data_host)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array7),intent(in) :: array
    complex(c_float_complex),intent(inout),pointer,dimension(:,:,:,:,:,:,:) :: data_host 
    !
    integer(c_int) :: offset_remainder
    integer(c_int) :: n1,n2,n3,n4,n5,n6,n7,&
                      lb1,lb2,lb3,lb4,lb5,lb6,lb7
    !
    complex(c_float_complex),pointer,dimension(:,:,:,:,:,:,:) :: tmp
    !
    n1 = 1; n2 = 1; n3 = 1; n4 = 1; n5 = 1; n6 = 1; n7 = 1
    lb1 = 1; lb2 = 1; lb3 = 1; lb4 = 1; lb5 = 1; lb6 = 1; lb7 = 1
    ! 
    n7 = array%data%num_elements / array%data%stride7
    n6 = array%data%stride7 / array%data%stride6
    n5 = array%data%stride6 / array%data%stride5
    n4 = array%data%stride5 / array%data%stride4
    n3 = array%data%stride4 / array%data%stride3
    n2 = array%data%stride3 / array%data%stride2
    n1 = array%data%stride2 / 1
    !
    call c_f_pointer(array%data%data_host,tmp,SHAPE=[n1,n2,n3,n4,n5,n6,n7])
    !
    offset_remainder = array%data%index_offset
    lb7 = -offset_remainder / array%data%stride7
    offset_remainder = offset_remainder + lb7*array%data%stride7
    lb6 = -offset_remainder / array%data%stride6
    offset_remainder = offset_remainder + lb6*array%data%stride6
    lb5 = -offset_remainder / array%data%stride5
    offset_remainder = offset_remainder + lb5*array%data%stride5
    lb4 = -offset_remainder / array%data%stride4
    offset_remainder = offset_remainder + lb4*array%data%stride4
    lb3 = -offset_remainder / array%data%stride3
    offset_remainder = offset_remainder + lb3*array%data%stride3
    lb2 = -offset_remainder / array%data%stride2
    offset_remainder = offset_remainder + lb2*array%data%stride2
    lb1 = -offset_remainder / 1
    offset_remainder = offset_remainder + lb1*1
    !
    data_host(lb1:,lb2:,lb3:,lb4:,lb5:,lb6:,lb7:) => tmp
  end subroutine
  subroutine gpufort_array7_hostptr_c_double_complex(&
      array,&
      data_host)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array7),intent(in) :: array
    complex(c_double_complex),intent(inout),pointer,dimension(:,:,:,:,:,:,:) :: data_host 
    !
    integer(c_int) :: offset_remainder
    integer(c_int) :: n1,n2,n3,n4,n5,n6,n7,&
                      lb1,lb2,lb3,lb4,lb5,lb6,lb7
    !
    complex(c_double_complex),pointer,dimension(:,:,:,:,:,:,:) :: tmp
    !
    n1 = 1; n2 = 1; n3 = 1; n4 = 1; n5 = 1; n6 = 1; n7 = 1
    lb1 = 1; lb2 = 1; lb3 = 1; lb4 = 1; lb5 = 1; lb6 = 1; lb7 = 1
    ! 
    n7 = array%data%num_elements / array%data%stride7
    n6 = array%data%stride7 / array%data%stride6
    n5 = array%data%stride6 / array%data%stride5
    n4 = array%data%stride5 / array%data%stride4
    n3 = array%data%stride4 / array%data%stride3
    n2 = array%data%stride3 / array%data%stride2
    n1 = array%data%stride2 / 1
    !
    call c_f_pointer(array%data%data_host,tmp,SHAPE=[n1,n2,n3,n4,n5,n6,n7])
    !
    offset_remainder = array%data%index_offset
    lb7 = -offset_remainder / array%data%stride7
    offset_remainder = offset_remainder + lb7*array%data%stride7
    lb6 = -offset_remainder / array%data%stride6
    offset_remainder = offset_remainder + lb6*array%data%stride6
    lb5 = -offset_remainder / array%data%stride5
    offset_remainder = offset_remainder + lb5*array%data%stride5
    lb4 = -offset_remainder / array%data%stride4
    offset_remainder = offset_remainder + lb4*array%data%stride4
    lb3 = -offset_remainder / array%data%stride3
    offset_remainder = offset_remainder + lb3*array%data%stride3
    lb2 = -offset_remainder / array%data%stride2
    offset_remainder = offset_remainder + lb2*array%data%stride2
    lb1 = -offset_remainder / 1
    offset_remainder = offset_remainder + lb1*1
    !
    data_host(lb1:,lb2:,lb3:,lb4:,lb5:,lb6:,lb7:) => tmp
  end subroutine
  subroutine gpufort_array1_deviceptr_c_bool(&
      array,&
      data_dev)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array1),intent(in) :: array
    logical(c_bool),intent(inout),pointer,dimension(:) :: data_dev 
    !
    integer(c_int) :: offset_remainder
    integer(c_int) :: n1,&
                      lb1
    !
    logical(c_bool),pointer,dimension(:) :: tmp
    !
    n1 = 1
    lb1 = 1
    ! 
    n1 = array%data%num_elements / 1
    !
    call c_f_pointer(array%data%data_dev,tmp,SHAPE=[n1])
    !
    offset_remainder = array%data%index_offset
    lb1 = -offset_remainder / 1
    offset_remainder = offset_remainder + lb1*1
    !
    data_dev(lb1:) => tmp
  end subroutine
  subroutine gpufort_array1_deviceptr_c_short(&
      array,&
      data_dev)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array1),intent(in) :: array
    integer(c_short),intent(inout),pointer,dimension(:) :: data_dev 
    !
    integer(c_int) :: offset_remainder
    integer(c_int) :: n1,&
                      lb1
    !
    integer(c_short),pointer,dimension(:) :: tmp
    !
    n1 = 1
    lb1 = 1
    ! 
    n1 = array%data%num_elements / 1
    !
    call c_f_pointer(array%data%data_dev,tmp,SHAPE=[n1])
    !
    offset_remainder = array%data%index_offset
    lb1 = -offset_remainder / 1
    offset_remainder = offset_remainder + lb1*1
    !
    data_dev(lb1:) => tmp
  end subroutine
  subroutine gpufort_array1_deviceptr_c_int(&
      array,&
      data_dev)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array1),intent(in) :: array
    integer(c_int),intent(inout),pointer,dimension(:) :: data_dev 
    !
    integer(c_int) :: offset_remainder
    integer(c_int) :: n1,&
                      lb1
    !
    integer(c_int),pointer,dimension(:) :: tmp
    !
    n1 = 1
    lb1 = 1
    ! 
    n1 = array%data%num_elements / 1
    !
    call c_f_pointer(array%data%data_dev,tmp,SHAPE=[n1])
    !
    offset_remainder = array%data%index_offset
    lb1 = -offset_remainder / 1
    offset_remainder = offset_remainder + lb1*1
    !
    data_dev(lb1:) => tmp
  end subroutine
  subroutine gpufort_array1_deviceptr_c_long(&
      array,&
      data_dev)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array1),intent(in) :: array
    integer(c_long),intent(inout),pointer,dimension(:) :: data_dev 
    !
    integer(c_int) :: offset_remainder
    integer(c_int) :: n1,&
                      lb1
    !
    integer(c_long),pointer,dimension(:) :: tmp
    !
    n1 = 1
    lb1 = 1
    ! 
    n1 = array%data%num_elements / 1
    !
    call c_f_pointer(array%data%data_dev,tmp,SHAPE=[n1])
    !
    offset_remainder = array%data%index_offset
    lb1 = -offset_remainder / 1
    offset_remainder = offset_remainder + lb1*1
    !
    data_dev(lb1:) => tmp
  end subroutine
  subroutine gpufort_array1_deviceptr_c_float(&
      array,&
      data_dev)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array1),intent(in) :: array
    real(c_float),intent(inout),pointer,dimension(:) :: data_dev 
    !
    integer(c_int) :: offset_remainder
    integer(c_int) :: n1,&
                      lb1
    !
    real(c_float),pointer,dimension(:) :: tmp
    !
    n1 = 1
    lb1 = 1
    ! 
    n1 = array%data%num_elements / 1
    !
    call c_f_pointer(array%data%data_dev,tmp,SHAPE=[n1])
    !
    offset_remainder = array%data%index_offset
    lb1 = -offset_remainder / 1
    offset_remainder = offset_remainder + lb1*1
    !
    data_dev(lb1:) => tmp
  end subroutine
  subroutine gpufort_array1_deviceptr_c_double(&
      array,&
      data_dev)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array1),intent(in) :: array
    real(c_double),intent(inout),pointer,dimension(:) :: data_dev 
    !
    integer(c_int) :: offset_remainder
    integer(c_int) :: n1,&
                      lb1
    !
    real(c_double),pointer,dimension(:) :: tmp
    !
    n1 = 1
    lb1 = 1
    ! 
    n1 = array%data%num_elements / 1
    !
    call c_f_pointer(array%data%data_dev,tmp,SHAPE=[n1])
    !
    offset_remainder = array%data%index_offset
    lb1 = -offset_remainder / 1
    offset_remainder = offset_remainder + lb1*1
    !
    data_dev(lb1:) => tmp
  end subroutine
  subroutine gpufort_array1_deviceptr_c_float_complex(&
      array,&
      data_dev)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array1),intent(in) :: array
    complex(c_float_complex),intent(inout),pointer,dimension(:) :: data_dev 
    !
    integer(c_int) :: offset_remainder
    integer(c_int) :: n1,&
                      lb1
    !
    complex(c_float_complex),pointer,dimension(:) :: tmp
    !
    n1 = 1
    lb1 = 1
    ! 
    n1 = array%data%num_elements / 1
    !
    call c_f_pointer(array%data%data_dev,tmp,SHAPE=[n1])
    !
    offset_remainder = array%data%index_offset
    lb1 = -offset_remainder / 1
    offset_remainder = offset_remainder + lb1*1
    !
    data_dev(lb1:) => tmp
  end subroutine
  subroutine gpufort_array1_deviceptr_c_double_complex(&
      array,&
      data_dev)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array1),intent(in) :: array
    complex(c_double_complex),intent(inout),pointer,dimension(:) :: data_dev 
    !
    integer(c_int) :: offset_remainder
    integer(c_int) :: n1,&
                      lb1
    !
    complex(c_double_complex),pointer,dimension(:) :: tmp
    !
    n1 = 1
    lb1 = 1
    ! 
    n1 = array%data%num_elements / 1
    !
    call c_f_pointer(array%data%data_dev,tmp,SHAPE=[n1])
    !
    offset_remainder = array%data%index_offset
    lb1 = -offset_remainder / 1
    offset_remainder = offset_remainder + lb1*1
    !
    data_dev(lb1:) => tmp
  end subroutine
  subroutine gpufort_array2_deviceptr_c_bool(&
      array,&
      data_dev)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array2),intent(in) :: array
    logical(c_bool),intent(inout),pointer,dimension(:,:) :: data_dev 
    !
    integer(c_int) :: offset_remainder
    integer(c_int) :: n1,n2,&
                      lb1,lb2
    !
    logical(c_bool),pointer,dimension(:,:) :: tmp
    !
    n1 = 1; n2 = 1
    lb1 = 1; lb2 = 1
    ! 
    n2 = array%data%num_elements / array%data%stride2
    n1 = array%data%stride2 / 1
    !
    call c_f_pointer(array%data%data_dev,tmp,SHAPE=[n1,n2])
    !
    offset_remainder = array%data%index_offset
    lb2 = -offset_remainder / array%data%stride2
    offset_remainder = offset_remainder + lb2*array%data%stride2
    lb1 = -offset_remainder / 1
    offset_remainder = offset_remainder + lb1*1
    !
    data_dev(lb1:,lb2:) => tmp
  end subroutine
  subroutine gpufort_array2_deviceptr_c_short(&
      array,&
      data_dev)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array2),intent(in) :: array
    integer(c_short),intent(inout),pointer,dimension(:,:) :: data_dev 
    !
    integer(c_int) :: offset_remainder
    integer(c_int) :: n1,n2,&
                      lb1,lb2
    !
    integer(c_short),pointer,dimension(:,:) :: tmp
    !
    n1 = 1; n2 = 1
    lb1 = 1; lb2 = 1
    ! 
    n2 = array%data%num_elements / array%data%stride2
    n1 = array%data%stride2 / 1
    !
    call c_f_pointer(array%data%data_dev,tmp,SHAPE=[n1,n2])
    !
    offset_remainder = array%data%index_offset
    lb2 = -offset_remainder / array%data%stride2
    offset_remainder = offset_remainder + lb2*array%data%stride2
    lb1 = -offset_remainder / 1
    offset_remainder = offset_remainder + lb1*1
    !
    data_dev(lb1:,lb2:) => tmp
  end subroutine
  subroutine gpufort_array2_deviceptr_c_int(&
      array,&
      data_dev)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array2),intent(in) :: array
    integer(c_int),intent(inout),pointer,dimension(:,:) :: data_dev 
    !
    integer(c_int) :: offset_remainder
    integer(c_int) :: n1,n2,&
                      lb1,lb2
    !
    integer(c_int),pointer,dimension(:,:) :: tmp
    !
    n1 = 1; n2 = 1
    lb1 = 1; lb2 = 1
    ! 
    n2 = array%data%num_elements / array%data%stride2
    n1 = array%data%stride2 / 1
    !
    call c_f_pointer(array%data%data_dev,tmp,SHAPE=[n1,n2])
    !
    offset_remainder = array%data%index_offset
    lb2 = -offset_remainder / array%data%stride2
    offset_remainder = offset_remainder + lb2*array%data%stride2
    lb1 = -offset_remainder / 1
    offset_remainder = offset_remainder + lb1*1
    !
    data_dev(lb1:,lb2:) => tmp
  end subroutine
  subroutine gpufort_array2_deviceptr_c_long(&
      array,&
      data_dev)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array2),intent(in) :: array
    integer(c_long),intent(inout),pointer,dimension(:,:) :: data_dev 
    !
    integer(c_int) :: offset_remainder
    integer(c_int) :: n1,n2,&
                      lb1,lb2
    !
    integer(c_long),pointer,dimension(:,:) :: tmp
    !
    n1 = 1; n2 = 1
    lb1 = 1; lb2 = 1
    ! 
    n2 = array%data%num_elements / array%data%stride2
    n1 = array%data%stride2 / 1
    !
    call c_f_pointer(array%data%data_dev,tmp,SHAPE=[n1,n2])
    !
    offset_remainder = array%data%index_offset
    lb2 = -offset_remainder / array%data%stride2
    offset_remainder = offset_remainder + lb2*array%data%stride2
    lb1 = -offset_remainder / 1
    offset_remainder = offset_remainder + lb1*1
    !
    data_dev(lb1:,lb2:) => tmp
  end subroutine
  subroutine gpufort_array2_deviceptr_c_float(&
      array,&
      data_dev)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array2),intent(in) :: array
    real(c_float),intent(inout),pointer,dimension(:,:) :: data_dev 
    !
    integer(c_int) :: offset_remainder
    integer(c_int) :: n1,n2,&
                      lb1,lb2
    !
    real(c_float),pointer,dimension(:,:) :: tmp
    !
    n1 = 1; n2 = 1
    lb1 = 1; lb2 = 1
    ! 
    n2 = array%data%num_elements / array%data%stride2
    n1 = array%data%stride2 / 1
    !
    call c_f_pointer(array%data%data_dev,tmp,SHAPE=[n1,n2])
    !
    offset_remainder = array%data%index_offset
    lb2 = -offset_remainder / array%data%stride2
    offset_remainder = offset_remainder + lb2*array%data%stride2
    lb1 = -offset_remainder / 1
    offset_remainder = offset_remainder + lb1*1
    !
    data_dev(lb1:,lb2:) => tmp
  end subroutine
  subroutine gpufort_array2_deviceptr_c_double(&
      array,&
      data_dev)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array2),intent(in) :: array
    real(c_double),intent(inout),pointer,dimension(:,:) :: data_dev 
    !
    integer(c_int) :: offset_remainder
    integer(c_int) :: n1,n2,&
                      lb1,lb2
    !
    real(c_double),pointer,dimension(:,:) :: tmp
    !
    n1 = 1; n2 = 1
    lb1 = 1; lb2 = 1
    ! 
    n2 = array%data%num_elements / array%data%stride2
    n1 = array%data%stride2 / 1
    !
    call c_f_pointer(array%data%data_dev,tmp,SHAPE=[n1,n2])
    !
    offset_remainder = array%data%index_offset
    lb2 = -offset_remainder / array%data%stride2
    offset_remainder = offset_remainder + lb2*array%data%stride2
    lb1 = -offset_remainder / 1
    offset_remainder = offset_remainder + lb1*1
    !
    data_dev(lb1:,lb2:) => tmp
  end subroutine
  subroutine gpufort_array2_deviceptr_c_float_complex(&
      array,&
      data_dev)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array2),intent(in) :: array
    complex(c_float_complex),intent(inout),pointer,dimension(:,:) :: data_dev 
    !
    integer(c_int) :: offset_remainder
    integer(c_int) :: n1,n2,&
                      lb1,lb2
    !
    complex(c_float_complex),pointer,dimension(:,:) :: tmp
    !
    n1 = 1; n2 = 1
    lb1 = 1; lb2 = 1
    ! 
    n2 = array%data%num_elements / array%data%stride2
    n1 = array%data%stride2 / 1
    !
    call c_f_pointer(array%data%data_dev,tmp,SHAPE=[n1,n2])
    !
    offset_remainder = array%data%index_offset
    lb2 = -offset_remainder / array%data%stride2
    offset_remainder = offset_remainder + lb2*array%data%stride2
    lb1 = -offset_remainder / 1
    offset_remainder = offset_remainder + lb1*1
    !
    data_dev(lb1:,lb2:) => tmp
  end subroutine
  subroutine gpufort_array2_deviceptr_c_double_complex(&
      array,&
      data_dev)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array2),intent(in) :: array
    complex(c_double_complex),intent(inout),pointer,dimension(:,:) :: data_dev 
    !
    integer(c_int) :: offset_remainder
    integer(c_int) :: n1,n2,&
                      lb1,lb2
    !
    complex(c_double_complex),pointer,dimension(:,:) :: tmp
    !
    n1 = 1; n2 = 1
    lb1 = 1; lb2 = 1
    ! 
    n2 = array%data%num_elements / array%data%stride2
    n1 = array%data%stride2 / 1
    !
    call c_f_pointer(array%data%data_dev,tmp,SHAPE=[n1,n2])
    !
    offset_remainder = array%data%index_offset
    lb2 = -offset_remainder / array%data%stride2
    offset_remainder = offset_remainder + lb2*array%data%stride2
    lb1 = -offset_remainder / 1
    offset_remainder = offset_remainder + lb1*1
    !
    data_dev(lb1:,lb2:) => tmp
  end subroutine
  subroutine gpufort_array3_deviceptr_c_bool(&
      array,&
      data_dev)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array3),intent(in) :: array
    logical(c_bool),intent(inout),pointer,dimension(:,:,:) :: data_dev 
    !
    integer(c_int) :: offset_remainder
    integer(c_int) :: n1,n2,n3,&
                      lb1,lb2,lb3
    !
    logical(c_bool),pointer,dimension(:,:,:) :: tmp
    !
    n1 = 1; n2 = 1; n3 = 1
    lb1 = 1; lb2 = 1; lb3 = 1
    ! 
    n3 = array%data%num_elements / array%data%stride3
    n2 = array%data%stride3 / array%data%stride2
    n1 = array%data%stride2 / 1
    !
    call c_f_pointer(array%data%data_dev,tmp,SHAPE=[n1,n2,n3])
    !
    offset_remainder = array%data%index_offset
    lb3 = -offset_remainder / array%data%stride3
    offset_remainder = offset_remainder + lb3*array%data%stride3
    lb2 = -offset_remainder / array%data%stride2
    offset_remainder = offset_remainder + lb2*array%data%stride2
    lb1 = -offset_remainder / 1
    offset_remainder = offset_remainder + lb1*1
    !
    data_dev(lb1:,lb2:,lb3:) => tmp
  end subroutine
  subroutine gpufort_array3_deviceptr_c_short(&
      array,&
      data_dev)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array3),intent(in) :: array
    integer(c_short),intent(inout),pointer,dimension(:,:,:) :: data_dev 
    !
    integer(c_int) :: offset_remainder
    integer(c_int) :: n1,n2,n3,&
                      lb1,lb2,lb3
    !
    integer(c_short),pointer,dimension(:,:,:) :: tmp
    !
    n1 = 1; n2 = 1; n3 = 1
    lb1 = 1; lb2 = 1; lb3 = 1
    ! 
    n3 = array%data%num_elements / array%data%stride3
    n2 = array%data%stride3 / array%data%stride2
    n1 = array%data%stride2 / 1
    !
    call c_f_pointer(array%data%data_dev,tmp,SHAPE=[n1,n2,n3])
    !
    offset_remainder = array%data%index_offset
    lb3 = -offset_remainder / array%data%stride3
    offset_remainder = offset_remainder + lb3*array%data%stride3
    lb2 = -offset_remainder / array%data%stride2
    offset_remainder = offset_remainder + lb2*array%data%stride2
    lb1 = -offset_remainder / 1
    offset_remainder = offset_remainder + lb1*1
    !
    data_dev(lb1:,lb2:,lb3:) => tmp
  end subroutine
  subroutine gpufort_array3_deviceptr_c_int(&
      array,&
      data_dev)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array3),intent(in) :: array
    integer(c_int),intent(inout),pointer,dimension(:,:,:) :: data_dev 
    !
    integer(c_int) :: offset_remainder
    integer(c_int) :: n1,n2,n3,&
                      lb1,lb2,lb3
    !
    integer(c_int),pointer,dimension(:,:,:) :: tmp
    !
    n1 = 1; n2 = 1; n3 = 1
    lb1 = 1; lb2 = 1; lb3 = 1
    ! 
    n3 = array%data%num_elements / array%data%stride3
    n2 = array%data%stride3 / array%data%stride2
    n1 = array%data%stride2 / 1
    !
    call c_f_pointer(array%data%data_dev,tmp,SHAPE=[n1,n2,n3])
    !
    offset_remainder = array%data%index_offset
    lb3 = -offset_remainder / array%data%stride3
    offset_remainder = offset_remainder + lb3*array%data%stride3
    lb2 = -offset_remainder / array%data%stride2
    offset_remainder = offset_remainder + lb2*array%data%stride2
    lb1 = -offset_remainder / 1
    offset_remainder = offset_remainder + lb1*1
    !
    data_dev(lb1:,lb2:,lb3:) => tmp
  end subroutine
  subroutine gpufort_array3_deviceptr_c_long(&
      array,&
      data_dev)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array3),intent(in) :: array
    integer(c_long),intent(inout),pointer,dimension(:,:,:) :: data_dev 
    !
    integer(c_int) :: offset_remainder
    integer(c_int) :: n1,n2,n3,&
                      lb1,lb2,lb3
    !
    integer(c_long),pointer,dimension(:,:,:) :: tmp
    !
    n1 = 1; n2 = 1; n3 = 1
    lb1 = 1; lb2 = 1; lb3 = 1
    ! 
    n3 = array%data%num_elements / array%data%stride3
    n2 = array%data%stride3 / array%data%stride2
    n1 = array%data%stride2 / 1
    !
    call c_f_pointer(array%data%data_dev,tmp,SHAPE=[n1,n2,n3])
    !
    offset_remainder = array%data%index_offset
    lb3 = -offset_remainder / array%data%stride3
    offset_remainder = offset_remainder + lb3*array%data%stride3
    lb2 = -offset_remainder / array%data%stride2
    offset_remainder = offset_remainder + lb2*array%data%stride2
    lb1 = -offset_remainder / 1
    offset_remainder = offset_remainder + lb1*1
    !
    data_dev(lb1:,lb2:,lb3:) => tmp
  end subroutine
  subroutine gpufort_array3_deviceptr_c_float(&
      array,&
      data_dev)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array3),intent(in) :: array
    real(c_float),intent(inout),pointer,dimension(:,:,:) :: data_dev 
    !
    integer(c_int) :: offset_remainder
    integer(c_int) :: n1,n2,n3,&
                      lb1,lb2,lb3
    !
    real(c_float),pointer,dimension(:,:,:) :: tmp
    !
    n1 = 1; n2 = 1; n3 = 1
    lb1 = 1; lb2 = 1; lb3 = 1
    ! 
    n3 = array%data%num_elements / array%data%stride3
    n2 = array%data%stride3 / array%data%stride2
    n1 = array%data%stride2 / 1
    !
    call c_f_pointer(array%data%data_dev,tmp,SHAPE=[n1,n2,n3])
    !
    offset_remainder = array%data%index_offset
    lb3 = -offset_remainder / array%data%stride3
    offset_remainder = offset_remainder + lb3*array%data%stride3
    lb2 = -offset_remainder / array%data%stride2
    offset_remainder = offset_remainder + lb2*array%data%stride2
    lb1 = -offset_remainder / 1
    offset_remainder = offset_remainder + lb1*1
    !
    data_dev(lb1:,lb2:,lb3:) => tmp
  end subroutine
  subroutine gpufort_array3_deviceptr_c_double(&
      array,&
      data_dev)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array3),intent(in) :: array
    real(c_double),intent(inout),pointer,dimension(:,:,:) :: data_dev 
    !
    integer(c_int) :: offset_remainder
    integer(c_int) :: n1,n2,n3,&
                      lb1,lb2,lb3
    !
    real(c_double),pointer,dimension(:,:,:) :: tmp
    !
    n1 = 1; n2 = 1; n3 = 1
    lb1 = 1; lb2 = 1; lb3 = 1
    ! 
    n3 = array%data%num_elements / array%data%stride3
    n2 = array%data%stride3 / array%data%stride2
    n1 = array%data%stride2 / 1
    !
    call c_f_pointer(array%data%data_dev,tmp,SHAPE=[n1,n2,n3])
    !
    offset_remainder = array%data%index_offset
    lb3 = -offset_remainder / array%data%stride3
    offset_remainder = offset_remainder + lb3*array%data%stride3
    lb2 = -offset_remainder / array%data%stride2
    offset_remainder = offset_remainder + lb2*array%data%stride2
    lb1 = -offset_remainder / 1
    offset_remainder = offset_remainder + lb1*1
    !
    data_dev(lb1:,lb2:,lb3:) => tmp
  end subroutine
  subroutine gpufort_array3_deviceptr_c_float_complex(&
      array,&
      data_dev)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array3),intent(in) :: array
    complex(c_float_complex),intent(inout),pointer,dimension(:,:,:) :: data_dev 
    !
    integer(c_int) :: offset_remainder
    integer(c_int) :: n1,n2,n3,&
                      lb1,lb2,lb3
    !
    complex(c_float_complex),pointer,dimension(:,:,:) :: tmp
    !
    n1 = 1; n2 = 1; n3 = 1
    lb1 = 1; lb2 = 1; lb3 = 1
    ! 
    n3 = array%data%num_elements / array%data%stride3
    n2 = array%data%stride3 / array%data%stride2
    n1 = array%data%stride2 / 1
    !
    call c_f_pointer(array%data%data_dev,tmp,SHAPE=[n1,n2,n3])
    !
    offset_remainder = array%data%index_offset
    lb3 = -offset_remainder / array%data%stride3
    offset_remainder = offset_remainder + lb3*array%data%stride3
    lb2 = -offset_remainder / array%data%stride2
    offset_remainder = offset_remainder + lb2*array%data%stride2
    lb1 = -offset_remainder / 1
    offset_remainder = offset_remainder + lb1*1
    !
    data_dev(lb1:,lb2:,lb3:) => tmp
  end subroutine
  subroutine gpufort_array3_deviceptr_c_double_complex(&
      array,&
      data_dev)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array3),intent(in) :: array
    complex(c_double_complex),intent(inout),pointer,dimension(:,:,:) :: data_dev 
    !
    integer(c_int) :: offset_remainder
    integer(c_int) :: n1,n2,n3,&
                      lb1,lb2,lb3
    !
    complex(c_double_complex),pointer,dimension(:,:,:) :: tmp
    !
    n1 = 1; n2 = 1; n3 = 1
    lb1 = 1; lb2 = 1; lb3 = 1
    ! 
    n3 = array%data%num_elements / array%data%stride3
    n2 = array%data%stride3 / array%data%stride2
    n1 = array%data%stride2 / 1
    !
    call c_f_pointer(array%data%data_dev,tmp,SHAPE=[n1,n2,n3])
    !
    offset_remainder = array%data%index_offset
    lb3 = -offset_remainder / array%data%stride3
    offset_remainder = offset_remainder + lb3*array%data%stride3
    lb2 = -offset_remainder / array%data%stride2
    offset_remainder = offset_remainder + lb2*array%data%stride2
    lb1 = -offset_remainder / 1
    offset_remainder = offset_remainder + lb1*1
    !
    data_dev(lb1:,lb2:,lb3:) => tmp
  end subroutine
  subroutine gpufort_array4_deviceptr_c_bool(&
      array,&
      data_dev)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array4),intent(in) :: array
    logical(c_bool),intent(inout),pointer,dimension(:,:,:,:) :: data_dev 
    !
    integer(c_int) :: offset_remainder
    integer(c_int) :: n1,n2,n3,n4,&
                      lb1,lb2,lb3,lb4
    !
    logical(c_bool),pointer,dimension(:,:,:,:) :: tmp
    !
    n1 = 1; n2 = 1; n3 = 1; n4 = 1
    lb1 = 1; lb2 = 1; lb3 = 1; lb4 = 1
    ! 
    n4 = array%data%num_elements / array%data%stride4
    n3 = array%data%stride4 / array%data%stride3
    n2 = array%data%stride3 / array%data%stride2
    n1 = array%data%stride2 / 1
    !
    call c_f_pointer(array%data%data_dev,tmp,SHAPE=[n1,n2,n3,n4])
    !
    offset_remainder = array%data%index_offset
    lb4 = -offset_remainder / array%data%stride4
    offset_remainder = offset_remainder + lb4*array%data%stride4
    lb3 = -offset_remainder / array%data%stride3
    offset_remainder = offset_remainder + lb3*array%data%stride3
    lb2 = -offset_remainder / array%data%stride2
    offset_remainder = offset_remainder + lb2*array%data%stride2
    lb1 = -offset_remainder / 1
    offset_remainder = offset_remainder + lb1*1
    !
    data_dev(lb1:,lb2:,lb3:,lb4:) => tmp
  end subroutine
  subroutine gpufort_array4_deviceptr_c_short(&
      array,&
      data_dev)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array4),intent(in) :: array
    integer(c_short),intent(inout),pointer,dimension(:,:,:,:) :: data_dev 
    !
    integer(c_int) :: offset_remainder
    integer(c_int) :: n1,n2,n3,n4,&
                      lb1,lb2,lb3,lb4
    !
    integer(c_short),pointer,dimension(:,:,:,:) :: tmp
    !
    n1 = 1; n2 = 1; n3 = 1; n4 = 1
    lb1 = 1; lb2 = 1; lb3 = 1; lb4 = 1
    ! 
    n4 = array%data%num_elements / array%data%stride4
    n3 = array%data%stride4 / array%data%stride3
    n2 = array%data%stride3 / array%data%stride2
    n1 = array%data%stride2 / 1
    !
    call c_f_pointer(array%data%data_dev,tmp,SHAPE=[n1,n2,n3,n4])
    !
    offset_remainder = array%data%index_offset
    lb4 = -offset_remainder / array%data%stride4
    offset_remainder = offset_remainder + lb4*array%data%stride4
    lb3 = -offset_remainder / array%data%stride3
    offset_remainder = offset_remainder + lb3*array%data%stride3
    lb2 = -offset_remainder / array%data%stride2
    offset_remainder = offset_remainder + lb2*array%data%stride2
    lb1 = -offset_remainder / 1
    offset_remainder = offset_remainder + lb1*1
    !
    data_dev(lb1:,lb2:,lb3:,lb4:) => tmp
  end subroutine
  subroutine gpufort_array4_deviceptr_c_int(&
      array,&
      data_dev)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array4),intent(in) :: array
    integer(c_int),intent(inout),pointer,dimension(:,:,:,:) :: data_dev 
    !
    integer(c_int) :: offset_remainder
    integer(c_int) :: n1,n2,n3,n4,&
                      lb1,lb2,lb3,lb4
    !
    integer(c_int),pointer,dimension(:,:,:,:) :: tmp
    !
    n1 = 1; n2 = 1; n3 = 1; n4 = 1
    lb1 = 1; lb2 = 1; lb3 = 1; lb4 = 1
    ! 
    n4 = array%data%num_elements / array%data%stride4
    n3 = array%data%stride4 / array%data%stride3
    n2 = array%data%stride3 / array%data%stride2
    n1 = array%data%stride2 / 1
    !
    call c_f_pointer(array%data%data_dev,tmp,SHAPE=[n1,n2,n3,n4])
    !
    offset_remainder = array%data%index_offset
    lb4 = -offset_remainder / array%data%stride4
    offset_remainder = offset_remainder + lb4*array%data%stride4
    lb3 = -offset_remainder / array%data%stride3
    offset_remainder = offset_remainder + lb3*array%data%stride3
    lb2 = -offset_remainder / array%data%stride2
    offset_remainder = offset_remainder + lb2*array%data%stride2
    lb1 = -offset_remainder / 1
    offset_remainder = offset_remainder + lb1*1
    !
    data_dev(lb1:,lb2:,lb3:,lb4:) => tmp
  end subroutine
  subroutine gpufort_array4_deviceptr_c_long(&
      array,&
      data_dev)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array4),intent(in) :: array
    integer(c_long),intent(inout),pointer,dimension(:,:,:,:) :: data_dev 
    !
    integer(c_int) :: offset_remainder
    integer(c_int) :: n1,n2,n3,n4,&
                      lb1,lb2,lb3,lb4
    !
    integer(c_long),pointer,dimension(:,:,:,:) :: tmp
    !
    n1 = 1; n2 = 1; n3 = 1; n4 = 1
    lb1 = 1; lb2 = 1; lb3 = 1; lb4 = 1
    ! 
    n4 = array%data%num_elements / array%data%stride4
    n3 = array%data%stride4 / array%data%stride3
    n2 = array%data%stride3 / array%data%stride2
    n1 = array%data%stride2 / 1
    !
    call c_f_pointer(array%data%data_dev,tmp,SHAPE=[n1,n2,n3,n4])
    !
    offset_remainder = array%data%index_offset
    lb4 = -offset_remainder / array%data%stride4
    offset_remainder = offset_remainder + lb4*array%data%stride4
    lb3 = -offset_remainder / array%data%stride3
    offset_remainder = offset_remainder + lb3*array%data%stride3
    lb2 = -offset_remainder / array%data%stride2
    offset_remainder = offset_remainder + lb2*array%data%stride2
    lb1 = -offset_remainder / 1
    offset_remainder = offset_remainder + lb1*1
    !
    data_dev(lb1:,lb2:,lb3:,lb4:) => tmp
  end subroutine
  subroutine gpufort_array4_deviceptr_c_float(&
      array,&
      data_dev)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array4),intent(in) :: array
    real(c_float),intent(inout),pointer,dimension(:,:,:,:) :: data_dev 
    !
    integer(c_int) :: offset_remainder
    integer(c_int) :: n1,n2,n3,n4,&
                      lb1,lb2,lb3,lb4
    !
    real(c_float),pointer,dimension(:,:,:,:) :: tmp
    !
    n1 = 1; n2 = 1; n3 = 1; n4 = 1
    lb1 = 1; lb2 = 1; lb3 = 1; lb4 = 1
    ! 
    n4 = array%data%num_elements / array%data%stride4
    n3 = array%data%stride4 / array%data%stride3
    n2 = array%data%stride3 / array%data%stride2
    n1 = array%data%stride2 / 1
    !
    call c_f_pointer(array%data%data_dev,tmp,SHAPE=[n1,n2,n3,n4])
    !
    offset_remainder = array%data%index_offset
    lb4 = -offset_remainder / array%data%stride4
    offset_remainder = offset_remainder + lb4*array%data%stride4
    lb3 = -offset_remainder / array%data%stride3
    offset_remainder = offset_remainder + lb3*array%data%stride3
    lb2 = -offset_remainder / array%data%stride2
    offset_remainder = offset_remainder + lb2*array%data%stride2
    lb1 = -offset_remainder / 1
    offset_remainder = offset_remainder + lb1*1
    !
    data_dev(lb1:,lb2:,lb3:,lb4:) => tmp
  end subroutine
  subroutine gpufort_array4_deviceptr_c_double(&
      array,&
      data_dev)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array4),intent(in) :: array
    real(c_double),intent(inout),pointer,dimension(:,:,:,:) :: data_dev 
    !
    integer(c_int) :: offset_remainder
    integer(c_int) :: n1,n2,n3,n4,&
                      lb1,lb2,lb3,lb4
    !
    real(c_double),pointer,dimension(:,:,:,:) :: tmp
    !
    n1 = 1; n2 = 1; n3 = 1; n4 = 1
    lb1 = 1; lb2 = 1; lb3 = 1; lb4 = 1
    ! 
    n4 = array%data%num_elements / array%data%stride4
    n3 = array%data%stride4 / array%data%stride3
    n2 = array%data%stride3 / array%data%stride2
    n1 = array%data%stride2 / 1
    !
    call c_f_pointer(array%data%data_dev,tmp,SHAPE=[n1,n2,n3,n4])
    !
    offset_remainder = array%data%index_offset
    lb4 = -offset_remainder / array%data%stride4
    offset_remainder = offset_remainder + lb4*array%data%stride4
    lb3 = -offset_remainder / array%data%stride3
    offset_remainder = offset_remainder + lb3*array%data%stride3
    lb2 = -offset_remainder / array%data%stride2
    offset_remainder = offset_remainder + lb2*array%data%stride2
    lb1 = -offset_remainder / 1
    offset_remainder = offset_remainder + lb1*1
    !
    data_dev(lb1:,lb2:,lb3:,lb4:) => tmp
  end subroutine
  subroutine gpufort_array4_deviceptr_c_float_complex(&
      array,&
      data_dev)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array4),intent(in) :: array
    complex(c_float_complex),intent(inout),pointer,dimension(:,:,:,:) :: data_dev 
    !
    integer(c_int) :: offset_remainder
    integer(c_int) :: n1,n2,n3,n4,&
                      lb1,lb2,lb3,lb4
    !
    complex(c_float_complex),pointer,dimension(:,:,:,:) :: tmp
    !
    n1 = 1; n2 = 1; n3 = 1; n4 = 1
    lb1 = 1; lb2 = 1; lb3 = 1; lb4 = 1
    ! 
    n4 = array%data%num_elements / array%data%stride4
    n3 = array%data%stride4 / array%data%stride3
    n2 = array%data%stride3 / array%data%stride2
    n1 = array%data%stride2 / 1
    !
    call c_f_pointer(array%data%data_dev,tmp,SHAPE=[n1,n2,n3,n4])
    !
    offset_remainder = array%data%index_offset
    lb4 = -offset_remainder / array%data%stride4
    offset_remainder = offset_remainder + lb4*array%data%stride4
    lb3 = -offset_remainder / array%data%stride3
    offset_remainder = offset_remainder + lb3*array%data%stride3
    lb2 = -offset_remainder / array%data%stride2
    offset_remainder = offset_remainder + lb2*array%data%stride2
    lb1 = -offset_remainder / 1
    offset_remainder = offset_remainder + lb1*1
    !
    data_dev(lb1:,lb2:,lb3:,lb4:) => tmp
  end subroutine
  subroutine gpufort_array4_deviceptr_c_double_complex(&
      array,&
      data_dev)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array4),intent(in) :: array
    complex(c_double_complex),intent(inout),pointer,dimension(:,:,:,:) :: data_dev 
    !
    integer(c_int) :: offset_remainder
    integer(c_int) :: n1,n2,n3,n4,&
                      lb1,lb2,lb3,lb4
    !
    complex(c_double_complex),pointer,dimension(:,:,:,:) :: tmp
    !
    n1 = 1; n2 = 1; n3 = 1; n4 = 1
    lb1 = 1; lb2 = 1; lb3 = 1; lb4 = 1
    ! 
    n4 = array%data%num_elements / array%data%stride4
    n3 = array%data%stride4 / array%data%stride3
    n2 = array%data%stride3 / array%data%stride2
    n1 = array%data%stride2 / 1
    !
    call c_f_pointer(array%data%data_dev,tmp,SHAPE=[n1,n2,n3,n4])
    !
    offset_remainder = array%data%index_offset
    lb4 = -offset_remainder / array%data%stride4
    offset_remainder = offset_remainder + lb4*array%data%stride4
    lb3 = -offset_remainder / array%data%stride3
    offset_remainder = offset_remainder + lb3*array%data%stride3
    lb2 = -offset_remainder / array%data%stride2
    offset_remainder = offset_remainder + lb2*array%data%stride2
    lb1 = -offset_remainder / 1
    offset_remainder = offset_remainder + lb1*1
    !
    data_dev(lb1:,lb2:,lb3:,lb4:) => tmp
  end subroutine
  subroutine gpufort_array5_deviceptr_c_bool(&
      array,&
      data_dev)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array5),intent(in) :: array
    logical(c_bool),intent(inout),pointer,dimension(:,:,:,:,:) :: data_dev 
    !
    integer(c_int) :: offset_remainder
    integer(c_int) :: n1,n2,n3,n4,n5,&
                      lb1,lb2,lb3,lb4,lb5
    !
    logical(c_bool),pointer,dimension(:,:,:,:,:) :: tmp
    !
    n1 = 1; n2 = 1; n3 = 1; n4 = 1; n5 = 1
    lb1 = 1; lb2 = 1; lb3 = 1; lb4 = 1; lb5 = 1
    ! 
    n5 = array%data%num_elements / array%data%stride5
    n4 = array%data%stride5 / array%data%stride4
    n3 = array%data%stride4 / array%data%stride3
    n2 = array%data%stride3 / array%data%stride2
    n1 = array%data%stride2 / 1
    !
    call c_f_pointer(array%data%data_dev,tmp,SHAPE=[n1,n2,n3,n4,n5])
    !
    offset_remainder = array%data%index_offset
    lb5 = -offset_remainder / array%data%stride5
    offset_remainder = offset_remainder + lb5*array%data%stride5
    lb4 = -offset_remainder / array%data%stride4
    offset_remainder = offset_remainder + lb4*array%data%stride4
    lb3 = -offset_remainder / array%data%stride3
    offset_remainder = offset_remainder + lb3*array%data%stride3
    lb2 = -offset_remainder / array%data%stride2
    offset_remainder = offset_remainder + lb2*array%data%stride2
    lb1 = -offset_remainder / 1
    offset_remainder = offset_remainder + lb1*1
    !
    data_dev(lb1:,lb2:,lb3:,lb4:,lb5:) => tmp
  end subroutine
  subroutine gpufort_array5_deviceptr_c_short(&
      array,&
      data_dev)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array5),intent(in) :: array
    integer(c_short),intent(inout),pointer,dimension(:,:,:,:,:) :: data_dev 
    !
    integer(c_int) :: offset_remainder
    integer(c_int) :: n1,n2,n3,n4,n5,&
                      lb1,lb2,lb3,lb4,lb5
    !
    integer(c_short),pointer,dimension(:,:,:,:,:) :: tmp
    !
    n1 = 1; n2 = 1; n3 = 1; n4 = 1; n5 = 1
    lb1 = 1; lb2 = 1; lb3 = 1; lb4 = 1; lb5 = 1
    ! 
    n5 = array%data%num_elements / array%data%stride5
    n4 = array%data%stride5 / array%data%stride4
    n3 = array%data%stride4 / array%data%stride3
    n2 = array%data%stride3 / array%data%stride2
    n1 = array%data%stride2 / 1
    !
    call c_f_pointer(array%data%data_dev,tmp,SHAPE=[n1,n2,n3,n4,n5])
    !
    offset_remainder = array%data%index_offset
    lb5 = -offset_remainder / array%data%stride5
    offset_remainder = offset_remainder + lb5*array%data%stride5
    lb4 = -offset_remainder / array%data%stride4
    offset_remainder = offset_remainder + lb4*array%data%stride4
    lb3 = -offset_remainder / array%data%stride3
    offset_remainder = offset_remainder + lb3*array%data%stride3
    lb2 = -offset_remainder / array%data%stride2
    offset_remainder = offset_remainder + lb2*array%data%stride2
    lb1 = -offset_remainder / 1
    offset_remainder = offset_remainder + lb1*1
    !
    data_dev(lb1:,lb2:,lb3:,lb4:,lb5:) => tmp
  end subroutine
  subroutine gpufort_array5_deviceptr_c_int(&
      array,&
      data_dev)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array5),intent(in) :: array
    integer(c_int),intent(inout),pointer,dimension(:,:,:,:,:) :: data_dev 
    !
    integer(c_int) :: offset_remainder
    integer(c_int) :: n1,n2,n3,n4,n5,&
                      lb1,lb2,lb3,lb4,lb5
    !
    integer(c_int),pointer,dimension(:,:,:,:,:) :: tmp
    !
    n1 = 1; n2 = 1; n3 = 1; n4 = 1; n5 = 1
    lb1 = 1; lb2 = 1; lb3 = 1; lb4 = 1; lb5 = 1
    ! 
    n5 = array%data%num_elements / array%data%stride5
    n4 = array%data%stride5 / array%data%stride4
    n3 = array%data%stride4 / array%data%stride3
    n2 = array%data%stride3 / array%data%stride2
    n1 = array%data%stride2 / 1
    !
    call c_f_pointer(array%data%data_dev,tmp,SHAPE=[n1,n2,n3,n4,n5])
    !
    offset_remainder = array%data%index_offset
    lb5 = -offset_remainder / array%data%stride5
    offset_remainder = offset_remainder + lb5*array%data%stride5
    lb4 = -offset_remainder / array%data%stride4
    offset_remainder = offset_remainder + lb4*array%data%stride4
    lb3 = -offset_remainder / array%data%stride3
    offset_remainder = offset_remainder + lb3*array%data%stride3
    lb2 = -offset_remainder / array%data%stride2
    offset_remainder = offset_remainder + lb2*array%data%stride2
    lb1 = -offset_remainder / 1
    offset_remainder = offset_remainder + lb1*1
    !
    data_dev(lb1:,lb2:,lb3:,lb4:,lb5:) => tmp
  end subroutine
  subroutine gpufort_array5_deviceptr_c_long(&
      array,&
      data_dev)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array5),intent(in) :: array
    integer(c_long),intent(inout),pointer,dimension(:,:,:,:,:) :: data_dev 
    !
    integer(c_int) :: offset_remainder
    integer(c_int) :: n1,n2,n3,n4,n5,&
                      lb1,lb2,lb3,lb4,lb5
    !
    integer(c_long),pointer,dimension(:,:,:,:,:) :: tmp
    !
    n1 = 1; n2 = 1; n3 = 1; n4 = 1; n5 = 1
    lb1 = 1; lb2 = 1; lb3 = 1; lb4 = 1; lb5 = 1
    ! 
    n5 = array%data%num_elements / array%data%stride5
    n4 = array%data%stride5 / array%data%stride4
    n3 = array%data%stride4 / array%data%stride3
    n2 = array%data%stride3 / array%data%stride2
    n1 = array%data%stride2 / 1
    !
    call c_f_pointer(array%data%data_dev,tmp,SHAPE=[n1,n2,n3,n4,n5])
    !
    offset_remainder = array%data%index_offset
    lb5 = -offset_remainder / array%data%stride5
    offset_remainder = offset_remainder + lb5*array%data%stride5
    lb4 = -offset_remainder / array%data%stride4
    offset_remainder = offset_remainder + lb4*array%data%stride4
    lb3 = -offset_remainder / array%data%stride3
    offset_remainder = offset_remainder + lb3*array%data%stride3
    lb2 = -offset_remainder / array%data%stride2
    offset_remainder = offset_remainder + lb2*array%data%stride2
    lb1 = -offset_remainder / 1
    offset_remainder = offset_remainder + lb1*1
    !
    data_dev(lb1:,lb2:,lb3:,lb4:,lb5:) => tmp
  end subroutine
  subroutine gpufort_array5_deviceptr_c_float(&
      array,&
      data_dev)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array5),intent(in) :: array
    real(c_float),intent(inout),pointer,dimension(:,:,:,:,:) :: data_dev 
    !
    integer(c_int) :: offset_remainder
    integer(c_int) :: n1,n2,n3,n4,n5,&
                      lb1,lb2,lb3,lb4,lb5
    !
    real(c_float),pointer,dimension(:,:,:,:,:) :: tmp
    !
    n1 = 1; n2 = 1; n3 = 1; n4 = 1; n5 = 1
    lb1 = 1; lb2 = 1; lb3 = 1; lb4 = 1; lb5 = 1
    ! 
    n5 = array%data%num_elements / array%data%stride5
    n4 = array%data%stride5 / array%data%stride4
    n3 = array%data%stride4 / array%data%stride3
    n2 = array%data%stride3 / array%data%stride2
    n1 = array%data%stride2 / 1
    !
    call c_f_pointer(array%data%data_dev,tmp,SHAPE=[n1,n2,n3,n4,n5])
    !
    offset_remainder = array%data%index_offset
    lb5 = -offset_remainder / array%data%stride5
    offset_remainder = offset_remainder + lb5*array%data%stride5
    lb4 = -offset_remainder / array%data%stride4
    offset_remainder = offset_remainder + lb4*array%data%stride4
    lb3 = -offset_remainder / array%data%stride3
    offset_remainder = offset_remainder + lb3*array%data%stride3
    lb2 = -offset_remainder / array%data%stride2
    offset_remainder = offset_remainder + lb2*array%data%stride2
    lb1 = -offset_remainder / 1
    offset_remainder = offset_remainder + lb1*1
    !
    data_dev(lb1:,lb2:,lb3:,lb4:,lb5:) => tmp
  end subroutine
  subroutine gpufort_array5_deviceptr_c_double(&
      array,&
      data_dev)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array5),intent(in) :: array
    real(c_double),intent(inout),pointer,dimension(:,:,:,:,:) :: data_dev 
    !
    integer(c_int) :: offset_remainder
    integer(c_int) :: n1,n2,n3,n4,n5,&
                      lb1,lb2,lb3,lb4,lb5
    !
    real(c_double),pointer,dimension(:,:,:,:,:) :: tmp
    !
    n1 = 1; n2 = 1; n3 = 1; n4 = 1; n5 = 1
    lb1 = 1; lb2 = 1; lb3 = 1; lb4 = 1; lb5 = 1
    ! 
    n5 = array%data%num_elements / array%data%stride5
    n4 = array%data%stride5 / array%data%stride4
    n3 = array%data%stride4 / array%data%stride3
    n2 = array%data%stride3 / array%data%stride2
    n1 = array%data%stride2 / 1
    !
    call c_f_pointer(array%data%data_dev,tmp,SHAPE=[n1,n2,n3,n4,n5])
    !
    offset_remainder = array%data%index_offset
    lb5 = -offset_remainder / array%data%stride5
    offset_remainder = offset_remainder + lb5*array%data%stride5
    lb4 = -offset_remainder / array%data%stride4
    offset_remainder = offset_remainder + lb4*array%data%stride4
    lb3 = -offset_remainder / array%data%stride3
    offset_remainder = offset_remainder + lb3*array%data%stride3
    lb2 = -offset_remainder / array%data%stride2
    offset_remainder = offset_remainder + lb2*array%data%stride2
    lb1 = -offset_remainder / 1
    offset_remainder = offset_remainder + lb1*1
    !
    data_dev(lb1:,lb2:,lb3:,lb4:,lb5:) => tmp
  end subroutine
  subroutine gpufort_array5_deviceptr_c_float_complex(&
      array,&
      data_dev)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array5),intent(in) :: array
    complex(c_float_complex),intent(inout),pointer,dimension(:,:,:,:,:) :: data_dev 
    !
    integer(c_int) :: offset_remainder
    integer(c_int) :: n1,n2,n3,n4,n5,&
                      lb1,lb2,lb3,lb4,lb5
    !
    complex(c_float_complex),pointer,dimension(:,:,:,:,:) :: tmp
    !
    n1 = 1; n2 = 1; n3 = 1; n4 = 1; n5 = 1
    lb1 = 1; lb2 = 1; lb3 = 1; lb4 = 1; lb5 = 1
    ! 
    n5 = array%data%num_elements / array%data%stride5
    n4 = array%data%stride5 / array%data%stride4
    n3 = array%data%stride4 / array%data%stride3
    n2 = array%data%stride3 / array%data%stride2
    n1 = array%data%stride2 / 1
    !
    call c_f_pointer(array%data%data_dev,tmp,SHAPE=[n1,n2,n3,n4,n5])
    !
    offset_remainder = array%data%index_offset
    lb5 = -offset_remainder / array%data%stride5
    offset_remainder = offset_remainder + lb5*array%data%stride5
    lb4 = -offset_remainder / array%data%stride4
    offset_remainder = offset_remainder + lb4*array%data%stride4
    lb3 = -offset_remainder / array%data%stride3
    offset_remainder = offset_remainder + lb3*array%data%stride3
    lb2 = -offset_remainder / array%data%stride2
    offset_remainder = offset_remainder + lb2*array%data%stride2
    lb1 = -offset_remainder / 1
    offset_remainder = offset_remainder + lb1*1
    !
    data_dev(lb1:,lb2:,lb3:,lb4:,lb5:) => tmp
  end subroutine
  subroutine gpufort_array5_deviceptr_c_double_complex(&
      array,&
      data_dev)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array5),intent(in) :: array
    complex(c_double_complex),intent(inout),pointer,dimension(:,:,:,:,:) :: data_dev 
    !
    integer(c_int) :: offset_remainder
    integer(c_int) :: n1,n2,n3,n4,n5,&
                      lb1,lb2,lb3,lb4,lb5
    !
    complex(c_double_complex),pointer,dimension(:,:,:,:,:) :: tmp
    !
    n1 = 1; n2 = 1; n3 = 1; n4 = 1; n5 = 1
    lb1 = 1; lb2 = 1; lb3 = 1; lb4 = 1; lb5 = 1
    ! 
    n5 = array%data%num_elements / array%data%stride5
    n4 = array%data%stride5 / array%data%stride4
    n3 = array%data%stride4 / array%data%stride3
    n2 = array%data%stride3 / array%data%stride2
    n1 = array%data%stride2 / 1
    !
    call c_f_pointer(array%data%data_dev,tmp,SHAPE=[n1,n2,n3,n4,n5])
    !
    offset_remainder = array%data%index_offset
    lb5 = -offset_remainder / array%data%stride5
    offset_remainder = offset_remainder + lb5*array%data%stride5
    lb4 = -offset_remainder / array%data%stride4
    offset_remainder = offset_remainder + lb4*array%data%stride4
    lb3 = -offset_remainder / array%data%stride3
    offset_remainder = offset_remainder + lb3*array%data%stride3
    lb2 = -offset_remainder / array%data%stride2
    offset_remainder = offset_remainder + lb2*array%data%stride2
    lb1 = -offset_remainder / 1
    offset_remainder = offset_remainder + lb1*1
    !
    data_dev(lb1:,lb2:,lb3:,lb4:,lb5:) => tmp
  end subroutine
  subroutine gpufort_array6_deviceptr_c_bool(&
      array,&
      data_dev)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array6),intent(in) :: array
    logical(c_bool),intent(inout),pointer,dimension(:,:,:,:,:,:) :: data_dev 
    !
    integer(c_int) :: offset_remainder
    integer(c_int) :: n1,n2,n3,n4,n5,n6,&
                      lb1,lb2,lb3,lb4,lb5,lb6
    !
    logical(c_bool),pointer,dimension(:,:,:,:,:,:) :: tmp
    !
    n1 = 1; n2 = 1; n3 = 1; n4 = 1; n5 = 1; n6 = 1
    lb1 = 1; lb2 = 1; lb3 = 1; lb4 = 1; lb5 = 1; lb6 = 1
    ! 
    n6 = array%data%num_elements / array%data%stride6
    n5 = array%data%stride6 / array%data%stride5
    n4 = array%data%stride5 / array%data%stride4
    n3 = array%data%stride4 / array%data%stride3
    n2 = array%data%stride3 / array%data%stride2
    n1 = array%data%stride2 / 1
    !
    call c_f_pointer(array%data%data_dev,tmp,SHAPE=[n1,n2,n3,n4,n5,n6])
    !
    offset_remainder = array%data%index_offset
    lb6 = -offset_remainder / array%data%stride6
    offset_remainder = offset_remainder + lb6*array%data%stride6
    lb5 = -offset_remainder / array%data%stride5
    offset_remainder = offset_remainder + lb5*array%data%stride5
    lb4 = -offset_remainder / array%data%stride4
    offset_remainder = offset_remainder + lb4*array%data%stride4
    lb3 = -offset_remainder / array%data%stride3
    offset_remainder = offset_remainder + lb3*array%data%stride3
    lb2 = -offset_remainder / array%data%stride2
    offset_remainder = offset_remainder + lb2*array%data%stride2
    lb1 = -offset_remainder / 1
    offset_remainder = offset_remainder + lb1*1
    !
    data_dev(lb1:,lb2:,lb3:,lb4:,lb5:,lb6:) => tmp
  end subroutine
  subroutine gpufort_array6_deviceptr_c_short(&
      array,&
      data_dev)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array6),intent(in) :: array
    integer(c_short),intent(inout),pointer,dimension(:,:,:,:,:,:) :: data_dev 
    !
    integer(c_int) :: offset_remainder
    integer(c_int) :: n1,n2,n3,n4,n5,n6,&
                      lb1,lb2,lb3,lb4,lb5,lb6
    !
    integer(c_short),pointer,dimension(:,:,:,:,:,:) :: tmp
    !
    n1 = 1; n2 = 1; n3 = 1; n4 = 1; n5 = 1; n6 = 1
    lb1 = 1; lb2 = 1; lb3 = 1; lb4 = 1; lb5 = 1; lb6 = 1
    ! 
    n6 = array%data%num_elements / array%data%stride6
    n5 = array%data%stride6 / array%data%stride5
    n4 = array%data%stride5 / array%data%stride4
    n3 = array%data%stride4 / array%data%stride3
    n2 = array%data%stride3 / array%data%stride2
    n1 = array%data%stride2 / 1
    !
    call c_f_pointer(array%data%data_dev,tmp,SHAPE=[n1,n2,n3,n4,n5,n6])
    !
    offset_remainder = array%data%index_offset
    lb6 = -offset_remainder / array%data%stride6
    offset_remainder = offset_remainder + lb6*array%data%stride6
    lb5 = -offset_remainder / array%data%stride5
    offset_remainder = offset_remainder + lb5*array%data%stride5
    lb4 = -offset_remainder / array%data%stride4
    offset_remainder = offset_remainder + lb4*array%data%stride4
    lb3 = -offset_remainder / array%data%stride3
    offset_remainder = offset_remainder + lb3*array%data%stride3
    lb2 = -offset_remainder / array%data%stride2
    offset_remainder = offset_remainder + lb2*array%data%stride2
    lb1 = -offset_remainder / 1
    offset_remainder = offset_remainder + lb1*1
    !
    data_dev(lb1:,lb2:,lb3:,lb4:,lb5:,lb6:) => tmp
  end subroutine
  subroutine gpufort_array6_deviceptr_c_int(&
      array,&
      data_dev)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array6),intent(in) :: array
    integer(c_int),intent(inout),pointer,dimension(:,:,:,:,:,:) :: data_dev 
    !
    integer(c_int) :: offset_remainder
    integer(c_int) :: n1,n2,n3,n4,n5,n6,&
                      lb1,lb2,lb3,lb4,lb5,lb6
    !
    integer(c_int),pointer,dimension(:,:,:,:,:,:) :: tmp
    !
    n1 = 1; n2 = 1; n3 = 1; n4 = 1; n5 = 1; n6 = 1
    lb1 = 1; lb2 = 1; lb3 = 1; lb4 = 1; lb5 = 1; lb6 = 1
    ! 
    n6 = array%data%num_elements / array%data%stride6
    n5 = array%data%stride6 / array%data%stride5
    n4 = array%data%stride5 / array%data%stride4
    n3 = array%data%stride4 / array%data%stride3
    n2 = array%data%stride3 / array%data%stride2
    n1 = array%data%stride2 / 1
    !
    call c_f_pointer(array%data%data_dev,tmp,SHAPE=[n1,n2,n3,n4,n5,n6])
    !
    offset_remainder = array%data%index_offset
    lb6 = -offset_remainder / array%data%stride6
    offset_remainder = offset_remainder + lb6*array%data%stride6
    lb5 = -offset_remainder / array%data%stride5
    offset_remainder = offset_remainder + lb5*array%data%stride5
    lb4 = -offset_remainder / array%data%stride4
    offset_remainder = offset_remainder + lb4*array%data%stride4
    lb3 = -offset_remainder / array%data%stride3
    offset_remainder = offset_remainder + lb3*array%data%stride3
    lb2 = -offset_remainder / array%data%stride2
    offset_remainder = offset_remainder + lb2*array%data%stride2
    lb1 = -offset_remainder / 1
    offset_remainder = offset_remainder + lb1*1
    !
    data_dev(lb1:,lb2:,lb3:,lb4:,lb5:,lb6:) => tmp
  end subroutine
  subroutine gpufort_array6_deviceptr_c_long(&
      array,&
      data_dev)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array6),intent(in) :: array
    integer(c_long),intent(inout),pointer,dimension(:,:,:,:,:,:) :: data_dev 
    !
    integer(c_int) :: offset_remainder
    integer(c_int) :: n1,n2,n3,n4,n5,n6,&
                      lb1,lb2,lb3,lb4,lb5,lb6
    !
    integer(c_long),pointer,dimension(:,:,:,:,:,:) :: tmp
    !
    n1 = 1; n2 = 1; n3 = 1; n4 = 1; n5 = 1; n6 = 1
    lb1 = 1; lb2 = 1; lb3 = 1; lb4 = 1; lb5 = 1; lb6 = 1
    ! 
    n6 = array%data%num_elements / array%data%stride6
    n5 = array%data%stride6 / array%data%stride5
    n4 = array%data%stride5 / array%data%stride4
    n3 = array%data%stride4 / array%data%stride3
    n2 = array%data%stride3 / array%data%stride2
    n1 = array%data%stride2 / 1
    !
    call c_f_pointer(array%data%data_dev,tmp,SHAPE=[n1,n2,n3,n4,n5,n6])
    !
    offset_remainder = array%data%index_offset
    lb6 = -offset_remainder / array%data%stride6
    offset_remainder = offset_remainder + lb6*array%data%stride6
    lb5 = -offset_remainder / array%data%stride5
    offset_remainder = offset_remainder + lb5*array%data%stride5
    lb4 = -offset_remainder / array%data%stride4
    offset_remainder = offset_remainder + lb4*array%data%stride4
    lb3 = -offset_remainder / array%data%stride3
    offset_remainder = offset_remainder + lb3*array%data%stride3
    lb2 = -offset_remainder / array%data%stride2
    offset_remainder = offset_remainder + lb2*array%data%stride2
    lb1 = -offset_remainder / 1
    offset_remainder = offset_remainder + lb1*1
    !
    data_dev(lb1:,lb2:,lb3:,lb4:,lb5:,lb6:) => tmp
  end subroutine
  subroutine gpufort_array6_deviceptr_c_float(&
      array,&
      data_dev)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array6),intent(in) :: array
    real(c_float),intent(inout),pointer,dimension(:,:,:,:,:,:) :: data_dev 
    !
    integer(c_int) :: offset_remainder
    integer(c_int) :: n1,n2,n3,n4,n5,n6,&
                      lb1,lb2,lb3,lb4,lb5,lb6
    !
    real(c_float),pointer,dimension(:,:,:,:,:,:) :: tmp
    !
    n1 = 1; n2 = 1; n3 = 1; n4 = 1; n5 = 1; n6 = 1
    lb1 = 1; lb2 = 1; lb3 = 1; lb4 = 1; lb5 = 1; lb6 = 1
    ! 
    n6 = array%data%num_elements / array%data%stride6
    n5 = array%data%stride6 / array%data%stride5
    n4 = array%data%stride5 / array%data%stride4
    n3 = array%data%stride4 / array%data%stride3
    n2 = array%data%stride3 / array%data%stride2
    n1 = array%data%stride2 / 1
    !
    call c_f_pointer(array%data%data_dev,tmp,SHAPE=[n1,n2,n3,n4,n5,n6])
    !
    offset_remainder = array%data%index_offset
    lb6 = -offset_remainder / array%data%stride6
    offset_remainder = offset_remainder + lb6*array%data%stride6
    lb5 = -offset_remainder / array%data%stride5
    offset_remainder = offset_remainder + lb5*array%data%stride5
    lb4 = -offset_remainder / array%data%stride4
    offset_remainder = offset_remainder + lb4*array%data%stride4
    lb3 = -offset_remainder / array%data%stride3
    offset_remainder = offset_remainder + lb3*array%data%stride3
    lb2 = -offset_remainder / array%data%stride2
    offset_remainder = offset_remainder + lb2*array%data%stride2
    lb1 = -offset_remainder / 1
    offset_remainder = offset_remainder + lb1*1
    !
    data_dev(lb1:,lb2:,lb3:,lb4:,lb5:,lb6:) => tmp
  end subroutine
  subroutine gpufort_array6_deviceptr_c_double(&
      array,&
      data_dev)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array6),intent(in) :: array
    real(c_double),intent(inout),pointer,dimension(:,:,:,:,:,:) :: data_dev 
    !
    integer(c_int) :: offset_remainder
    integer(c_int) :: n1,n2,n3,n4,n5,n6,&
                      lb1,lb2,lb3,lb4,lb5,lb6
    !
    real(c_double),pointer,dimension(:,:,:,:,:,:) :: tmp
    !
    n1 = 1; n2 = 1; n3 = 1; n4 = 1; n5 = 1; n6 = 1
    lb1 = 1; lb2 = 1; lb3 = 1; lb4 = 1; lb5 = 1; lb6 = 1
    ! 
    n6 = array%data%num_elements / array%data%stride6
    n5 = array%data%stride6 / array%data%stride5
    n4 = array%data%stride5 / array%data%stride4
    n3 = array%data%stride4 / array%data%stride3
    n2 = array%data%stride3 / array%data%stride2
    n1 = array%data%stride2 / 1
    !
    call c_f_pointer(array%data%data_dev,tmp,SHAPE=[n1,n2,n3,n4,n5,n6])
    !
    offset_remainder = array%data%index_offset
    lb6 = -offset_remainder / array%data%stride6
    offset_remainder = offset_remainder + lb6*array%data%stride6
    lb5 = -offset_remainder / array%data%stride5
    offset_remainder = offset_remainder + lb5*array%data%stride5
    lb4 = -offset_remainder / array%data%stride4
    offset_remainder = offset_remainder + lb4*array%data%stride4
    lb3 = -offset_remainder / array%data%stride3
    offset_remainder = offset_remainder + lb3*array%data%stride3
    lb2 = -offset_remainder / array%data%stride2
    offset_remainder = offset_remainder + lb2*array%data%stride2
    lb1 = -offset_remainder / 1
    offset_remainder = offset_remainder + lb1*1
    !
    data_dev(lb1:,lb2:,lb3:,lb4:,lb5:,lb6:) => tmp
  end subroutine
  subroutine gpufort_array6_deviceptr_c_float_complex(&
      array,&
      data_dev)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array6),intent(in) :: array
    complex(c_float_complex),intent(inout),pointer,dimension(:,:,:,:,:,:) :: data_dev 
    !
    integer(c_int) :: offset_remainder
    integer(c_int) :: n1,n2,n3,n4,n5,n6,&
                      lb1,lb2,lb3,lb4,lb5,lb6
    !
    complex(c_float_complex),pointer,dimension(:,:,:,:,:,:) :: tmp
    !
    n1 = 1; n2 = 1; n3 = 1; n4 = 1; n5 = 1; n6 = 1
    lb1 = 1; lb2 = 1; lb3 = 1; lb4 = 1; lb5 = 1; lb6 = 1
    ! 
    n6 = array%data%num_elements / array%data%stride6
    n5 = array%data%stride6 / array%data%stride5
    n4 = array%data%stride5 / array%data%stride4
    n3 = array%data%stride4 / array%data%stride3
    n2 = array%data%stride3 / array%data%stride2
    n1 = array%data%stride2 / 1
    !
    call c_f_pointer(array%data%data_dev,tmp,SHAPE=[n1,n2,n3,n4,n5,n6])
    !
    offset_remainder = array%data%index_offset
    lb6 = -offset_remainder / array%data%stride6
    offset_remainder = offset_remainder + lb6*array%data%stride6
    lb5 = -offset_remainder / array%data%stride5
    offset_remainder = offset_remainder + lb5*array%data%stride5
    lb4 = -offset_remainder / array%data%stride4
    offset_remainder = offset_remainder + lb4*array%data%stride4
    lb3 = -offset_remainder / array%data%stride3
    offset_remainder = offset_remainder + lb3*array%data%stride3
    lb2 = -offset_remainder / array%data%stride2
    offset_remainder = offset_remainder + lb2*array%data%stride2
    lb1 = -offset_remainder / 1
    offset_remainder = offset_remainder + lb1*1
    !
    data_dev(lb1:,lb2:,lb3:,lb4:,lb5:,lb6:) => tmp
  end subroutine
  subroutine gpufort_array6_deviceptr_c_double_complex(&
      array,&
      data_dev)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array6),intent(in) :: array
    complex(c_double_complex),intent(inout),pointer,dimension(:,:,:,:,:,:) :: data_dev 
    !
    integer(c_int) :: offset_remainder
    integer(c_int) :: n1,n2,n3,n4,n5,n6,&
                      lb1,lb2,lb3,lb4,lb5,lb6
    !
    complex(c_double_complex),pointer,dimension(:,:,:,:,:,:) :: tmp
    !
    n1 = 1; n2 = 1; n3 = 1; n4 = 1; n5 = 1; n6 = 1
    lb1 = 1; lb2 = 1; lb3 = 1; lb4 = 1; lb5 = 1; lb6 = 1
    ! 
    n6 = array%data%num_elements / array%data%stride6
    n5 = array%data%stride6 / array%data%stride5
    n4 = array%data%stride5 / array%data%stride4
    n3 = array%data%stride4 / array%data%stride3
    n2 = array%data%stride3 / array%data%stride2
    n1 = array%data%stride2 / 1
    !
    call c_f_pointer(array%data%data_dev,tmp,SHAPE=[n1,n2,n3,n4,n5,n6])
    !
    offset_remainder = array%data%index_offset
    lb6 = -offset_remainder / array%data%stride6
    offset_remainder = offset_remainder + lb6*array%data%stride6
    lb5 = -offset_remainder / array%data%stride5
    offset_remainder = offset_remainder + lb5*array%data%stride5
    lb4 = -offset_remainder / array%data%stride4
    offset_remainder = offset_remainder + lb4*array%data%stride4
    lb3 = -offset_remainder / array%data%stride3
    offset_remainder = offset_remainder + lb3*array%data%stride3
    lb2 = -offset_remainder / array%data%stride2
    offset_remainder = offset_remainder + lb2*array%data%stride2
    lb1 = -offset_remainder / 1
    offset_remainder = offset_remainder + lb1*1
    !
    data_dev(lb1:,lb2:,lb3:,lb4:,lb5:,lb6:) => tmp
  end subroutine
  subroutine gpufort_array7_deviceptr_c_bool(&
      array,&
      data_dev)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array7),intent(in) :: array
    logical(c_bool),intent(inout),pointer,dimension(:,:,:,:,:,:,:) :: data_dev 
    !
    integer(c_int) :: offset_remainder
    integer(c_int) :: n1,n2,n3,n4,n5,n6,n7,&
                      lb1,lb2,lb3,lb4,lb5,lb6,lb7
    !
    logical(c_bool),pointer,dimension(:,:,:,:,:,:,:) :: tmp
    !
    n1 = 1; n2 = 1; n3 = 1; n4 = 1; n5 = 1; n6 = 1; n7 = 1
    lb1 = 1; lb2 = 1; lb3 = 1; lb4 = 1; lb5 = 1; lb6 = 1; lb7 = 1
    ! 
    n7 = array%data%num_elements / array%data%stride7
    n6 = array%data%stride7 / array%data%stride6
    n5 = array%data%stride6 / array%data%stride5
    n4 = array%data%stride5 / array%data%stride4
    n3 = array%data%stride4 / array%data%stride3
    n2 = array%data%stride3 / array%data%stride2
    n1 = array%data%stride2 / 1
    !
    call c_f_pointer(array%data%data_dev,tmp,SHAPE=[n1,n2,n3,n4,n5,n6,n7])
    !
    offset_remainder = array%data%index_offset
    lb7 = -offset_remainder / array%data%stride7
    offset_remainder = offset_remainder + lb7*array%data%stride7
    lb6 = -offset_remainder / array%data%stride6
    offset_remainder = offset_remainder + lb6*array%data%stride6
    lb5 = -offset_remainder / array%data%stride5
    offset_remainder = offset_remainder + lb5*array%data%stride5
    lb4 = -offset_remainder / array%data%stride4
    offset_remainder = offset_remainder + lb4*array%data%stride4
    lb3 = -offset_remainder / array%data%stride3
    offset_remainder = offset_remainder + lb3*array%data%stride3
    lb2 = -offset_remainder / array%data%stride2
    offset_remainder = offset_remainder + lb2*array%data%stride2
    lb1 = -offset_remainder / 1
    offset_remainder = offset_remainder + lb1*1
    !
    data_dev(lb1:,lb2:,lb3:,lb4:,lb5:,lb6:,lb7:) => tmp
  end subroutine
  subroutine gpufort_array7_deviceptr_c_short(&
      array,&
      data_dev)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array7),intent(in) :: array
    integer(c_short),intent(inout),pointer,dimension(:,:,:,:,:,:,:) :: data_dev 
    !
    integer(c_int) :: offset_remainder
    integer(c_int) :: n1,n2,n3,n4,n5,n6,n7,&
                      lb1,lb2,lb3,lb4,lb5,lb6,lb7
    !
    integer(c_short),pointer,dimension(:,:,:,:,:,:,:) :: tmp
    !
    n1 = 1; n2 = 1; n3 = 1; n4 = 1; n5 = 1; n6 = 1; n7 = 1
    lb1 = 1; lb2 = 1; lb3 = 1; lb4 = 1; lb5 = 1; lb6 = 1; lb7 = 1
    ! 
    n7 = array%data%num_elements / array%data%stride7
    n6 = array%data%stride7 / array%data%stride6
    n5 = array%data%stride6 / array%data%stride5
    n4 = array%data%stride5 / array%data%stride4
    n3 = array%data%stride4 / array%data%stride3
    n2 = array%data%stride3 / array%data%stride2
    n1 = array%data%stride2 / 1
    !
    call c_f_pointer(array%data%data_dev,tmp,SHAPE=[n1,n2,n3,n4,n5,n6,n7])
    !
    offset_remainder = array%data%index_offset
    lb7 = -offset_remainder / array%data%stride7
    offset_remainder = offset_remainder + lb7*array%data%stride7
    lb6 = -offset_remainder / array%data%stride6
    offset_remainder = offset_remainder + lb6*array%data%stride6
    lb5 = -offset_remainder / array%data%stride5
    offset_remainder = offset_remainder + lb5*array%data%stride5
    lb4 = -offset_remainder / array%data%stride4
    offset_remainder = offset_remainder + lb4*array%data%stride4
    lb3 = -offset_remainder / array%data%stride3
    offset_remainder = offset_remainder + lb3*array%data%stride3
    lb2 = -offset_remainder / array%data%stride2
    offset_remainder = offset_remainder + lb2*array%data%stride2
    lb1 = -offset_remainder / 1
    offset_remainder = offset_remainder + lb1*1
    !
    data_dev(lb1:,lb2:,lb3:,lb4:,lb5:,lb6:,lb7:) => tmp
  end subroutine
  subroutine gpufort_array7_deviceptr_c_int(&
      array,&
      data_dev)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array7),intent(in) :: array
    integer(c_int),intent(inout),pointer,dimension(:,:,:,:,:,:,:) :: data_dev 
    !
    integer(c_int) :: offset_remainder
    integer(c_int) :: n1,n2,n3,n4,n5,n6,n7,&
                      lb1,lb2,lb3,lb4,lb5,lb6,lb7
    !
    integer(c_int),pointer,dimension(:,:,:,:,:,:,:) :: tmp
    !
    n1 = 1; n2 = 1; n3 = 1; n4 = 1; n5 = 1; n6 = 1; n7 = 1
    lb1 = 1; lb2 = 1; lb3 = 1; lb4 = 1; lb5 = 1; lb6 = 1; lb7 = 1
    ! 
    n7 = array%data%num_elements / array%data%stride7
    n6 = array%data%stride7 / array%data%stride6
    n5 = array%data%stride6 / array%data%stride5
    n4 = array%data%stride5 / array%data%stride4
    n3 = array%data%stride4 / array%data%stride3
    n2 = array%data%stride3 / array%data%stride2
    n1 = array%data%stride2 / 1
    !
    call c_f_pointer(array%data%data_dev,tmp,SHAPE=[n1,n2,n3,n4,n5,n6,n7])
    !
    offset_remainder = array%data%index_offset
    lb7 = -offset_remainder / array%data%stride7
    offset_remainder = offset_remainder + lb7*array%data%stride7
    lb6 = -offset_remainder / array%data%stride6
    offset_remainder = offset_remainder + lb6*array%data%stride6
    lb5 = -offset_remainder / array%data%stride5
    offset_remainder = offset_remainder + lb5*array%data%stride5
    lb4 = -offset_remainder / array%data%stride4
    offset_remainder = offset_remainder + lb4*array%data%stride4
    lb3 = -offset_remainder / array%data%stride3
    offset_remainder = offset_remainder + lb3*array%data%stride3
    lb2 = -offset_remainder / array%data%stride2
    offset_remainder = offset_remainder + lb2*array%data%stride2
    lb1 = -offset_remainder / 1
    offset_remainder = offset_remainder + lb1*1
    !
    data_dev(lb1:,lb2:,lb3:,lb4:,lb5:,lb6:,lb7:) => tmp
  end subroutine
  subroutine gpufort_array7_deviceptr_c_long(&
      array,&
      data_dev)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array7),intent(in) :: array
    integer(c_long),intent(inout),pointer,dimension(:,:,:,:,:,:,:) :: data_dev 
    !
    integer(c_int) :: offset_remainder
    integer(c_int) :: n1,n2,n3,n4,n5,n6,n7,&
                      lb1,lb2,lb3,lb4,lb5,lb6,lb7
    !
    integer(c_long),pointer,dimension(:,:,:,:,:,:,:) :: tmp
    !
    n1 = 1; n2 = 1; n3 = 1; n4 = 1; n5 = 1; n6 = 1; n7 = 1
    lb1 = 1; lb2 = 1; lb3 = 1; lb4 = 1; lb5 = 1; lb6 = 1; lb7 = 1
    ! 
    n7 = array%data%num_elements / array%data%stride7
    n6 = array%data%stride7 / array%data%stride6
    n5 = array%data%stride6 / array%data%stride5
    n4 = array%data%stride5 / array%data%stride4
    n3 = array%data%stride4 / array%data%stride3
    n2 = array%data%stride3 / array%data%stride2
    n1 = array%data%stride2 / 1
    !
    call c_f_pointer(array%data%data_dev,tmp,SHAPE=[n1,n2,n3,n4,n5,n6,n7])
    !
    offset_remainder = array%data%index_offset
    lb7 = -offset_remainder / array%data%stride7
    offset_remainder = offset_remainder + lb7*array%data%stride7
    lb6 = -offset_remainder / array%data%stride6
    offset_remainder = offset_remainder + lb6*array%data%stride6
    lb5 = -offset_remainder / array%data%stride5
    offset_remainder = offset_remainder + lb5*array%data%stride5
    lb4 = -offset_remainder / array%data%stride4
    offset_remainder = offset_remainder + lb4*array%data%stride4
    lb3 = -offset_remainder / array%data%stride3
    offset_remainder = offset_remainder + lb3*array%data%stride3
    lb2 = -offset_remainder / array%data%stride2
    offset_remainder = offset_remainder + lb2*array%data%stride2
    lb1 = -offset_remainder / 1
    offset_remainder = offset_remainder + lb1*1
    !
    data_dev(lb1:,lb2:,lb3:,lb4:,lb5:,lb6:,lb7:) => tmp
  end subroutine
  subroutine gpufort_array7_deviceptr_c_float(&
      array,&
      data_dev)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array7),intent(in) :: array
    real(c_float),intent(inout),pointer,dimension(:,:,:,:,:,:,:) :: data_dev 
    !
    integer(c_int) :: offset_remainder
    integer(c_int) :: n1,n2,n3,n4,n5,n6,n7,&
                      lb1,lb2,lb3,lb4,lb5,lb6,lb7
    !
    real(c_float),pointer,dimension(:,:,:,:,:,:,:) :: tmp
    !
    n1 = 1; n2 = 1; n3 = 1; n4 = 1; n5 = 1; n6 = 1; n7 = 1
    lb1 = 1; lb2 = 1; lb3 = 1; lb4 = 1; lb5 = 1; lb6 = 1; lb7 = 1
    ! 
    n7 = array%data%num_elements / array%data%stride7
    n6 = array%data%stride7 / array%data%stride6
    n5 = array%data%stride6 / array%data%stride5
    n4 = array%data%stride5 / array%data%stride4
    n3 = array%data%stride4 / array%data%stride3
    n2 = array%data%stride3 / array%data%stride2
    n1 = array%data%stride2 / 1
    !
    call c_f_pointer(array%data%data_dev,tmp,SHAPE=[n1,n2,n3,n4,n5,n6,n7])
    !
    offset_remainder = array%data%index_offset
    lb7 = -offset_remainder / array%data%stride7
    offset_remainder = offset_remainder + lb7*array%data%stride7
    lb6 = -offset_remainder / array%data%stride6
    offset_remainder = offset_remainder + lb6*array%data%stride6
    lb5 = -offset_remainder / array%data%stride5
    offset_remainder = offset_remainder + lb5*array%data%stride5
    lb4 = -offset_remainder / array%data%stride4
    offset_remainder = offset_remainder + lb4*array%data%stride4
    lb3 = -offset_remainder / array%data%stride3
    offset_remainder = offset_remainder + lb3*array%data%stride3
    lb2 = -offset_remainder / array%data%stride2
    offset_remainder = offset_remainder + lb2*array%data%stride2
    lb1 = -offset_remainder / 1
    offset_remainder = offset_remainder + lb1*1
    !
    data_dev(lb1:,lb2:,lb3:,lb4:,lb5:,lb6:,lb7:) => tmp
  end subroutine
  subroutine gpufort_array7_deviceptr_c_double(&
      array,&
      data_dev)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array7),intent(in) :: array
    real(c_double),intent(inout),pointer,dimension(:,:,:,:,:,:,:) :: data_dev 
    !
    integer(c_int) :: offset_remainder
    integer(c_int) :: n1,n2,n3,n4,n5,n6,n7,&
                      lb1,lb2,lb3,lb4,lb5,lb6,lb7
    !
    real(c_double),pointer,dimension(:,:,:,:,:,:,:) :: tmp
    !
    n1 = 1; n2 = 1; n3 = 1; n4 = 1; n5 = 1; n6 = 1; n7 = 1
    lb1 = 1; lb2 = 1; lb3 = 1; lb4 = 1; lb5 = 1; lb6 = 1; lb7 = 1
    ! 
    n7 = array%data%num_elements / array%data%stride7
    n6 = array%data%stride7 / array%data%stride6
    n5 = array%data%stride6 / array%data%stride5
    n4 = array%data%stride5 / array%data%stride4
    n3 = array%data%stride4 / array%data%stride3
    n2 = array%data%stride3 / array%data%stride2
    n1 = array%data%stride2 / 1
    !
    call c_f_pointer(array%data%data_dev,tmp,SHAPE=[n1,n2,n3,n4,n5,n6,n7])
    !
    offset_remainder = array%data%index_offset
    lb7 = -offset_remainder / array%data%stride7
    offset_remainder = offset_remainder + lb7*array%data%stride7
    lb6 = -offset_remainder / array%data%stride6
    offset_remainder = offset_remainder + lb6*array%data%stride6
    lb5 = -offset_remainder / array%data%stride5
    offset_remainder = offset_remainder + lb5*array%data%stride5
    lb4 = -offset_remainder / array%data%stride4
    offset_remainder = offset_remainder + lb4*array%data%stride4
    lb3 = -offset_remainder / array%data%stride3
    offset_remainder = offset_remainder + lb3*array%data%stride3
    lb2 = -offset_remainder / array%data%stride2
    offset_remainder = offset_remainder + lb2*array%data%stride2
    lb1 = -offset_remainder / 1
    offset_remainder = offset_remainder + lb1*1
    !
    data_dev(lb1:,lb2:,lb3:,lb4:,lb5:,lb6:,lb7:) => tmp
  end subroutine
  subroutine gpufort_array7_deviceptr_c_float_complex(&
      array,&
      data_dev)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array7),intent(in) :: array
    complex(c_float_complex),intent(inout),pointer,dimension(:,:,:,:,:,:,:) :: data_dev 
    !
    integer(c_int) :: offset_remainder
    integer(c_int) :: n1,n2,n3,n4,n5,n6,n7,&
                      lb1,lb2,lb3,lb4,lb5,lb6,lb7
    !
    complex(c_float_complex),pointer,dimension(:,:,:,:,:,:,:) :: tmp
    !
    n1 = 1; n2 = 1; n3 = 1; n4 = 1; n5 = 1; n6 = 1; n7 = 1
    lb1 = 1; lb2 = 1; lb3 = 1; lb4 = 1; lb5 = 1; lb6 = 1; lb7 = 1
    ! 
    n7 = array%data%num_elements / array%data%stride7
    n6 = array%data%stride7 / array%data%stride6
    n5 = array%data%stride6 / array%data%stride5
    n4 = array%data%stride5 / array%data%stride4
    n3 = array%data%stride4 / array%data%stride3
    n2 = array%data%stride3 / array%data%stride2
    n1 = array%data%stride2 / 1
    !
    call c_f_pointer(array%data%data_dev,tmp,SHAPE=[n1,n2,n3,n4,n5,n6,n7])
    !
    offset_remainder = array%data%index_offset
    lb7 = -offset_remainder / array%data%stride7
    offset_remainder = offset_remainder + lb7*array%data%stride7
    lb6 = -offset_remainder / array%data%stride6
    offset_remainder = offset_remainder + lb6*array%data%stride6
    lb5 = -offset_remainder / array%data%stride5
    offset_remainder = offset_remainder + lb5*array%data%stride5
    lb4 = -offset_remainder / array%data%stride4
    offset_remainder = offset_remainder + lb4*array%data%stride4
    lb3 = -offset_remainder / array%data%stride3
    offset_remainder = offset_remainder + lb3*array%data%stride3
    lb2 = -offset_remainder / array%data%stride2
    offset_remainder = offset_remainder + lb2*array%data%stride2
    lb1 = -offset_remainder / 1
    offset_remainder = offset_remainder + lb1*1
    !
    data_dev(lb1:,lb2:,lb3:,lb4:,lb5:,lb6:,lb7:) => tmp
  end subroutine
  subroutine gpufort_array7_deviceptr_c_double_complex(&
      array,&
      data_dev)
    use iso_c_binding
    use hipfort_enums
    implicit none
    type(gpufort_array7),intent(in) :: array
    complex(c_double_complex),intent(inout),pointer,dimension(:,:,:,:,:,:,:) :: data_dev 
    !
    integer(c_int) :: offset_remainder
    integer(c_int) :: n1,n2,n3,n4,n5,n6,n7,&
                      lb1,lb2,lb3,lb4,lb5,lb6,lb7
    !
    complex(c_double_complex),pointer,dimension(:,:,:,:,:,:,:) :: tmp
    !
    n1 = 1; n2 = 1; n3 = 1; n4 = 1; n5 = 1; n6 = 1; n7 = 1
    lb1 = 1; lb2 = 1; lb3 = 1; lb4 = 1; lb5 = 1; lb6 = 1; lb7 = 1
    ! 
    n7 = array%data%num_elements / array%data%stride7
    n6 = array%data%stride7 / array%data%stride6
    n5 = array%data%stride6 / array%data%stride5
    n4 = array%data%stride5 / array%data%stride4
    n3 = array%data%stride4 / array%data%stride3
    n2 = array%data%stride3 / array%data%stride2
    n1 = array%data%stride2 / 1
    !
    call c_f_pointer(array%data%data_dev,tmp,SHAPE=[n1,n2,n3,n4,n5,n6,n7])
    !
    offset_remainder = array%data%index_offset
    lb7 = -offset_remainder / array%data%stride7
    offset_remainder = offset_remainder + lb7*array%data%stride7
    lb6 = -offset_remainder / array%data%stride6
    offset_remainder = offset_remainder + lb6*array%data%stride6
    lb5 = -offset_remainder / array%data%stride5
    offset_remainder = offset_remainder + lb5*array%data%stride5
    lb4 = -offset_remainder / array%data%stride4
    offset_remainder = offset_remainder + lb4*array%data%stride4
    lb3 = -offset_remainder / array%data%stride3
    offset_remainder = offset_remainder + lb3*array%data%stride3
    lb2 = -offset_remainder / array%data%stride2
    offset_remainder = offset_remainder + lb2*array%data%stride2
    lb1 = -offset_remainder / 1
    offset_remainder = offset_remainder + lb1*1
    !
    data_dev(lb1:,lb2:,lb3:,lb4:,lb5:,lb6:,lb7:) => tmp
  end subroutine

    function gpufort_array1_allocate_host_buffer_c_bool(&
        array,buffer,&
        pinned,flags) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array1),intent(in) :: array
      logical(c_bool),intent(inout),pointer,dimension(:) :: buffer 
      logical(c_bool),value,optional,intent(in) :: pinned
      integer(c_int),value,optional,intent(in) :: flags
      integer(kind(hipSuccess)) :: ierr
      !
      logical(c_bool) :: opt_pinned
      integer(c_int) :: opt_flags
      !
      opt_pinned = .true.
      opt_flags  = 0
      if ( present(pinned) ) opt_pinned = pinned
      if ( present(flags) ) opt_flags = flags
      !
      ierr = gpufort_array1_allocate_host_buffer(&
        array,c_loc(buffer),opt_pinned,opt_flags)
      buffer(&
        gpufort_array1_lbound(array,1):)&
          => buffer
    end function
    function gpufort_array1_allocate_host_buffer_c_short(&
        array,buffer,&
        pinned,flags) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array1),intent(in) :: array
      integer(c_short),intent(inout),pointer,dimension(:) :: buffer 
      logical(c_bool),value,optional,intent(in) :: pinned
      integer(c_int),value,optional,intent(in) :: flags
      integer(kind(hipSuccess)) :: ierr
      !
      logical(c_bool) :: opt_pinned
      integer(c_int) :: opt_flags
      !
      opt_pinned = .true.
      opt_flags  = 0
      if ( present(pinned) ) opt_pinned = pinned
      if ( present(flags) ) opt_flags = flags
      !
      ierr = gpufort_array1_allocate_host_buffer(&
        array,c_loc(buffer),opt_pinned,opt_flags)
      buffer(&
        gpufort_array1_lbound(array,1):)&
          => buffer
    end function
    function gpufort_array1_allocate_host_buffer_c_int(&
        array,buffer,&
        pinned,flags) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array1),intent(in) :: array
      integer(c_int),intent(inout),pointer,dimension(:) :: buffer 
      logical(c_bool),value,optional,intent(in) :: pinned
      integer(c_int),value,optional,intent(in) :: flags
      integer(kind(hipSuccess)) :: ierr
      !
      logical(c_bool) :: opt_pinned
      integer(c_int) :: opt_flags
      !
      opt_pinned = .true.
      opt_flags  = 0
      if ( present(pinned) ) opt_pinned = pinned
      if ( present(flags) ) opt_flags = flags
      !
      ierr = gpufort_array1_allocate_host_buffer(&
        array,c_loc(buffer),opt_pinned,opt_flags)
      buffer(&
        gpufort_array1_lbound(array,1):)&
          => buffer
    end function
    function gpufort_array1_allocate_host_buffer_c_long(&
        array,buffer,&
        pinned,flags) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array1),intent(in) :: array
      integer(c_long),intent(inout),pointer,dimension(:) :: buffer 
      logical(c_bool),value,optional,intent(in) :: pinned
      integer(c_int),value,optional,intent(in) :: flags
      integer(kind(hipSuccess)) :: ierr
      !
      logical(c_bool) :: opt_pinned
      integer(c_int) :: opt_flags
      !
      opt_pinned = .true.
      opt_flags  = 0
      if ( present(pinned) ) opt_pinned = pinned
      if ( present(flags) ) opt_flags = flags
      !
      ierr = gpufort_array1_allocate_host_buffer(&
        array,c_loc(buffer),opt_pinned,opt_flags)
      buffer(&
        gpufort_array1_lbound(array,1):)&
          => buffer
    end function
    function gpufort_array1_allocate_host_buffer_c_float(&
        array,buffer,&
        pinned,flags) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array1),intent(in) :: array
      real(c_float),intent(inout),pointer,dimension(:) :: buffer 
      logical(c_bool),value,optional,intent(in) :: pinned
      integer(c_int),value,optional,intent(in) :: flags
      integer(kind(hipSuccess)) :: ierr
      !
      logical(c_bool) :: opt_pinned
      integer(c_int) :: opt_flags
      !
      opt_pinned = .true.
      opt_flags  = 0
      if ( present(pinned) ) opt_pinned = pinned
      if ( present(flags) ) opt_flags = flags
      !
      ierr = gpufort_array1_allocate_host_buffer(&
        array,c_loc(buffer),opt_pinned,opt_flags)
      buffer(&
        gpufort_array1_lbound(array,1):)&
          => buffer
    end function
    function gpufort_array1_allocate_host_buffer_c_double(&
        array,buffer,&
        pinned,flags) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array1),intent(in) :: array
      real(c_double),intent(inout),pointer,dimension(:) :: buffer 
      logical(c_bool),value,optional,intent(in) :: pinned
      integer(c_int),value,optional,intent(in) :: flags
      integer(kind(hipSuccess)) :: ierr
      !
      logical(c_bool) :: opt_pinned
      integer(c_int) :: opt_flags
      !
      opt_pinned = .true.
      opt_flags  = 0
      if ( present(pinned) ) opt_pinned = pinned
      if ( present(flags) ) opt_flags = flags
      !
      ierr = gpufort_array1_allocate_host_buffer(&
        array,c_loc(buffer),opt_pinned,opt_flags)
      buffer(&
        gpufort_array1_lbound(array,1):)&
          => buffer
    end function
    function gpufort_array1_allocate_host_buffer_c_float_complex(&
        array,buffer,&
        pinned,flags) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array1),intent(in) :: array
      complex(c_float_complex),intent(inout),pointer,dimension(:) :: buffer 
      logical(c_bool),value,optional,intent(in) :: pinned
      integer(c_int),value,optional,intent(in) :: flags
      integer(kind(hipSuccess)) :: ierr
      !
      logical(c_bool) :: opt_pinned
      integer(c_int) :: opt_flags
      !
      opt_pinned = .true.
      opt_flags  = 0
      if ( present(pinned) ) opt_pinned = pinned
      if ( present(flags) ) opt_flags = flags
      !
      ierr = gpufort_array1_allocate_host_buffer(&
        array,c_loc(buffer),opt_pinned,opt_flags)
      buffer(&
        gpufort_array1_lbound(array,1):)&
          => buffer
    end function
    function gpufort_array1_allocate_host_buffer_c_double_complex(&
        array,buffer,&
        pinned,flags) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array1),intent(in) :: array
      complex(c_double_complex),intent(inout),pointer,dimension(:) :: buffer 
      logical(c_bool),value,optional,intent(in) :: pinned
      integer(c_int),value,optional,intent(in) :: flags
      integer(kind(hipSuccess)) :: ierr
      !
      logical(c_bool) :: opt_pinned
      integer(c_int) :: opt_flags
      !
      opt_pinned = .true.
      opt_flags  = 0
      if ( present(pinned) ) opt_pinned = pinned
      if ( present(flags) ) opt_flags = flags
      !
      ierr = gpufort_array1_allocate_host_buffer(&
        array,c_loc(buffer),opt_pinned,opt_flags)
      buffer(&
        gpufort_array1_lbound(array,1):)&
          => buffer
    end function
    function gpufort_array2_allocate_host_buffer_c_bool(&
        array,buffer,&
        pinned,flags) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array2),intent(in) :: array
      logical(c_bool),intent(inout),pointer,dimension(:,:) :: buffer 
      logical(c_bool),value,optional,intent(in) :: pinned
      integer(c_int),value,optional,intent(in) :: flags
      integer(kind(hipSuccess)) :: ierr
      !
      logical(c_bool) :: opt_pinned
      integer(c_int) :: opt_flags
      !
      opt_pinned = .true.
      opt_flags  = 0
      if ( present(pinned) ) opt_pinned = pinned
      if ( present(flags) ) opt_flags = flags
      !
      ierr = gpufort_array2_allocate_host_buffer(&
        array,c_loc(buffer),opt_pinned,opt_flags)
      buffer(&
        gpufort_array2_lbound(array,1):,&
        gpufort_array2_lbound(array,2):)&
          => buffer
    end function
    function gpufort_array2_allocate_host_buffer_c_short(&
        array,buffer,&
        pinned,flags) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array2),intent(in) :: array
      integer(c_short),intent(inout),pointer,dimension(:,:) :: buffer 
      logical(c_bool),value,optional,intent(in) :: pinned
      integer(c_int),value,optional,intent(in) :: flags
      integer(kind(hipSuccess)) :: ierr
      !
      logical(c_bool) :: opt_pinned
      integer(c_int) :: opt_flags
      !
      opt_pinned = .true.
      opt_flags  = 0
      if ( present(pinned) ) opt_pinned = pinned
      if ( present(flags) ) opt_flags = flags
      !
      ierr = gpufort_array2_allocate_host_buffer(&
        array,c_loc(buffer),opt_pinned,opt_flags)
      buffer(&
        gpufort_array2_lbound(array,1):,&
        gpufort_array2_lbound(array,2):)&
          => buffer
    end function
    function gpufort_array2_allocate_host_buffer_c_int(&
        array,buffer,&
        pinned,flags) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array2),intent(in) :: array
      integer(c_int),intent(inout),pointer,dimension(:,:) :: buffer 
      logical(c_bool),value,optional,intent(in) :: pinned
      integer(c_int),value,optional,intent(in) :: flags
      integer(kind(hipSuccess)) :: ierr
      !
      logical(c_bool) :: opt_pinned
      integer(c_int) :: opt_flags
      !
      opt_pinned = .true.
      opt_flags  = 0
      if ( present(pinned) ) opt_pinned = pinned
      if ( present(flags) ) opt_flags = flags
      !
      ierr = gpufort_array2_allocate_host_buffer(&
        array,c_loc(buffer),opt_pinned,opt_flags)
      buffer(&
        gpufort_array2_lbound(array,1):,&
        gpufort_array2_lbound(array,2):)&
          => buffer
    end function
    function gpufort_array2_allocate_host_buffer_c_long(&
        array,buffer,&
        pinned,flags) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array2),intent(in) :: array
      integer(c_long),intent(inout),pointer,dimension(:,:) :: buffer 
      logical(c_bool),value,optional,intent(in) :: pinned
      integer(c_int),value,optional,intent(in) :: flags
      integer(kind(hipSuccess)) :: ierr
      !
      logical(c_bool) :: opt_pinned
      integer(c_int) :: opt_flags
      !
      opt_pinned = .true.
      opt_flags  = 0
      if ( present(pinned) ) opt_pinned = pinned
      if ( present(flags) ) opt_flags = flags
      !
      ierr = gpufort_array2_allocate_host_buffer(&
        array,c_loc(buffer),opt_pinned,opt_flags)
      buffer(&
        gpufort_array2_lbound(array,1):,&
        gpufort_array2_lbound(array,2):)&
          => buffer
    end function
    function gpufort_array2_allocate_host_buffer_c_float(&
        array,buffer,&
        pinned,flags) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array2),intent(in) :: array
      real(c_float),intent(inout),pointer,dimension(:,:) :: buffer 
      logical(c_bool),value,optional,intent(in) :: pinned
      integer(c_int),value,optional,intent(in) :: flags
      integer(kind(hipSuccess)) :: ierr
      !
      logical(c_bool) :: opt_pinned
      integer(c_int) :: opt_flags
      !
      opt_pinned = .true.
      opt_flags  = 0
      if ( present(pinned) ) opt_pinned = pinned
      if ( present(flags) ) opt_flags = flags
      !
      ierr = gpufort_array2_allocate_host_buffer(&
        array,c_loc(buffer),opt_pinned,opt_flags)
      buffer(&
        gpufort_array2_lbound(array,1):,&
        gpufort_array2_lbound(array,2):)&
          => buffer
    end function
    function gpufort_array2_allocate_host_buffer_c_double(&
        array,buffer,&
        pinned,flags) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array2),intent(in) :: array
      real(c_double),intent(inout),pointer,dimension(:,:) :: buffer 
      logical(c_bool),value,optional,intent(in) :: pinned
      integer(c_int),value,optional,intent(in) :: flags
      integer(kind(hipSuccess)) :: ierr
      !
      logical(c_bool) :: opt_pinned
      integer(c_int) :: opt_flags
      !
      opt_pinned = .true.
      opt_flags  = 0
      if ( present(pinned) ) opt_pinned = pinned
      if ( present(flags) ) opt_flags = flags
      !
      ierr = gpufort_array2_allocate_host_buffer(&
        array,c_loc(buffer),opt_pinned,opt_flags)
      buffer(&
        gpufort_array2_lbound(array,1):,&
        gpufort_array2_lbound(array,2):)&
          => buffer
    end function
    function gpufort_array2_allocate_host_buffer_c_float_complex(&
        array,buffer,&
        pinned,flags) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array2),intent(in) :: array
      complex(c_float_complex),intent(inout),pointer,dimension(:,:) :: buffer 
      logical(c_bool),value,optional,intent(in) :: pinned
      integer(c_int),value,optional,intent(in) :: flags
      integer(kind(hipSuccess)) :: ierr
      !
      logical(c_bool) :: opt_pinned
      integer(c_int) :: opt_flags
      !
      opt_pinned = .true.
      opt_flags  = 0
      if ( present(pinned) ) opt_pinned = pinned
      if ( present(flags) ) opt_flags = flags
      !
      ierr = gpufort_array2_allocate_host_buffer(&
        array,c_loc(buffer),opt_pinned,opt_flags)
      buffer(&
        gpufort_array2_lbound(array,1):,&
        gpufort_array2_lbound(array,2):)&
          => buffer
    end function
    function gpufort_array2_allocate_host_buffer_c_double_complex(&
        array,buffer,&
        pinned,flags) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array2),intent(in) :: array
      complex(c_double_complex),intent(inout),pointer,dimension(:,:) :: buffer 
      logical(c_bool),value,optional,intent(in) :: pinned
      integer(c_int),value,optional,intent(in) :: flags
      integer(kind(hipSuccess)) :: ierr
      !
      logical(c_bool) :: opt_pinned
      integer(c_int) :: opt_flags
      !
      opt_pinned = .true.
      opt_flags  = 0
      if ( present(pinned) ) opt_pinned = pinned
      if ( present(flags) ) opt_flags = flags
      !
      ierr = gpufort_array2_allocate_host_buffer(&
        array,c_loc(buffer),opt_pinned,opt_flags)
      buffer(&
        gpufort_array2_lbound(array,1):,&
        gpufort_array2_lbound(array,2):)&
          => buffer
    end function
    function gpufort_array3_allocate_host_buffer_c_bool(&
        array,buffer,&
        pinned,flags) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array3),intent(in) :: array
      logical(c_bool),intent(inout),pointer,dimension(:,:,:) :: buffer 
      logical(c_bool),value,optional,intent(in) :: pinned
      integer(c_int),value,optional,intent(in) :: flags
      integer(kind(hipSuccess)) :: ierr
      !
      logical(c_bool) :: opt_pinned
      integer(c_int) :: opt_flags
      !
      opt_pinned = .true.
      opt_flags  = 0
      if ( present(pinned) ) opt_pinned = pinned
      if ( present(flags) ) opt_flags = flags
      !
      ierr = gpufort_array3_allocate_host_buffer(&
        array,c_loc(buffer),opt_pinned,opt_flags)
      buffer(&
        gpufort_array3_lbound(array,1):,&
        gpufort_array3_lbound(array,2):,&
        gpufort_array3_lbound(array,3):)&
          => buffer
    end function
    function gpufort_array3_allocate_host_buffer_c_short(&
        array,buffer,&
        pinned,flags) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array3),intent(in) :: array
      integer(c_short),intent(inout),pointer,dimension(:,:,:) :: buffer 
      logical(c_bool),value,optional,intent(in) :: pinned
      integer(c_int),value,optional,intent(in) :: flags
      integer(kind(hipSuccess)) :: ierr
      !
      logical(c_bool) :: opt_pinned
      integer(c_int) :: opt_flags
      !
      opt_pinned = .true.
      opt_flags  = 0
      if ( present(pinned) ) opt_pinned = pinned
      if ( present(flags) ) opt_flags = flags
      !
      ierr = gpufort_array3_allocate_host_buffer(&
        array,c_loc(buffer),opt_pinned,opt_flags)
      buffer(&
        gpufort_array3_lbound(array,1):,&
        gpufort_array3_lbound(array,2):,&
        gpufort_array3_lbound(array,3):)&
          => buffer
    end function
    function gpufort_array3_allocate_host_buffer_c_int(&
        array,buffer,&
        pinned,flags) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array3),intent(in) :: array
      integer(c_int),intent(inout),pointer,dimension(:,:,:) :: buffer 
      logical(c_bool),value,optional,intent(in) :: pinned
      integer(c_int),value,optional,intent(in) :: flags
      integer(kind(hipSuccess)) :: ierr
      !
      logical(c_bool) :: opt_pinned
      integer(c_int) :: opt_flags
      !
      opt_pinned = .true.
      opt_flags  = 0
      if ( present(pinned) ) opt_pinned = pinned
      if ( present(flags) ) opt_flags = flags
      !
      ierr = gpufort_array3_allocate_host_buffer(&
        array,c_loc(buffer),opt_pinned,opt_flags)
      buffer(&
        gpufort_array3_lbound(array,1):,&
        gpufort_array3_lbound(array,2):,&
        gpufort_array3_lbound(array,3):)&
          => buffer
    end function
    function gpufort_array3_allocate_host_buffer_c_long(&
        array,buffer,&
        pinned,flags) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array3),intent(in) :: array
      integer(c_long),intent(inout),pointer,dimension(:,:,:) :: buffer 
      logical(c_bool),value,optional,intent(in) :: pinned
      integer(c_int),value,optional,intent(in) :: flags
      integer(kind(hipSuccess)) :: ierr
      !
      logical(c_bool) :: opt_pinned
      integer(c_int) :: opt_flags
      !
      opt_pinned = .true.
      opt_flags  = 0
      if ( present(pinned) ) opt_pinned = pinned
      if ( present(flags) ) opt_flags = flags
      !
      ierr = gpufort_array3_allocate_host_buffer(&
        array,c_loc(buffer),opt_pinned,opt_flags)
      buffer(&
        gpufort_array3_lbound(array,1):,&
        gpufort_array3_lbound(array,2):,&
        gpufort_array3_lbound(array,3):)&
          => buffer
    end function
    function gpufort_array3_allocate_host_buffer_c_float(&
        array,buffer,&
        pinned,flags) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array3),intent(in) :: array
      real(c_float),intent(inout),pointer,dimension(:,:,:) :: buffer 
      logical(c_bool),value,optional,intent(in) :: pinned
      integer(c_int),value,optional,intent(in) :: flags
      integer(kind(hipSuccess)) :: ierr
      !
      logical(c_bool) :: opt_pinned
      integer(c_int) :: opt_flags
      !
      opt_pinned = .true.
      opt_flags  = 0
      if ( present(pinned) ) opt_pinned = pinned
      if ( present(flags) ) opt_flags = flags
      !
      ierr = gpufort_array3_allocate_host_buffer(&
        array,c_loc(buffer),opt_pinned,opt_flags)
      buffer(&
        gpufort_array3_lbound(array,1):,&
        gpufort_array3_lbound(array,2):,&
        gpufort_array3_lbound(array,3):)&
          => buffer
    end function
    function gpufort_array3_allocate_host_buffer_c_double(&
        array,buffer,&
        pinned,flags) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array3),intent(in) :: array
      real(c_double),intent(inout),pointer,dimension(:,:,:) :: buffer 
      logical(c_bool),value,optional,intent(in) :: pinned
      integer(c_int),value,optional,intent(in) :: flags
      integer(kind(hipSuccess)) :: ierr
      !
      logical(c_bool) :: opt_pinned
      integer(c_int) :: opt_flags
      !
      opt_pinned = .true.
      opt_flags  = 0
      if ( present(pinned) ) opt_pinned = pinned
      if ( present(flags) ) opt_flags = flags
      !
      ierr = gpufort_array3_allocate_host_buffer(&
        array,c_loc(buffer),opt_pinned,opt_flags)
      buffer(&
        gpufort_array3_lbound(array,1):,&
        gpufort_array3_lbound(array,2):,&
        gpufort_array3_lbound(array,3):)&
          => buffer
    end function
    function gpufort_array3_allocate_host_buffer_c_float_complex(&
        array,buffer,&
        pinned,flags) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array3),intent(in) :: array
      complex(c_float_complex),intent(inout),pointer,dimension(:,:,:) :: buffer 
      logical(c_bool),value,optional,intent(in) :: pinned
      integer(c_int),value,optional,intent(in) :: flags
      integer(kind(hipSuccess)) :: ierr
      !
      logical(c_bool) :: opt_pinned
      integer(c_int) :: opt_flags
      !
      opt_pinned = .true.
      opt_flags  = 0
      if ( present(pinned) ) opt_pinned = pinned
      if ( present(flags) ) opt_flags = flags
      !
      ierr = gpufort_array3_allocate_host_buffer(&
        array,c_loc(buffer),opt_pinned,opt_flags)
      buffer(&
        gpufort_array3_lbound(array,1):,&
        gpufort_array3_lbound(array,2):,&
        gpufort_array3_lbound(array,3):)&
          => buffer
    end function
    function gpufort_array3_allocate_host_buffer_c_double_complex(&
        array,buffer,&
        pinned,flags) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array3),intent(in) :: array
      complex(c_double_complex),intent(inout),pointer,dimension(:,:,:) :: buffer 
      logical(c_bool),value,optional,intent(in) :: pinned
      integer(c_int),value,optional,intent(in) :: flags
      integer(kind(hipSuccess)) :: ierr
      !
      logical(c_bool) :: opt_pinned
      integer(c_int) :: opt_flags
      !
      opt_pinned = .true.
      opt_flags  = 0
      if ( present(pinned) ) opt_pinned = pinned
      if ( present(flags) ) opt_flags = flags
      !
      ierr = gpufort_array3_allocate_host_buffer(&
        array,c_loc(buffer),opt_pinned,opt_flags)
      buffer(&
        gpufort_array3_lbound(array,1):,&
        gpufort_array3_lbound(array,2):,&
        gpufort_array3_lbound(array,3):)&
          => buffer
    end function
    function gpufort_array4_allocate_host_buffer_c_bool(&
        array,buffer,&
        pinned,flags) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array4),intent(in) :: array
      logical(c_bool),intent(inout),pointer,dimension(:,:,:,:) :: buffer 
      logical(c_bool),value,optional,intent(in) :: pinned
      integer(c_int),value,optional,intent(in) :: flags
      integer(kind(hipSuccess)) :: ierr
      !
      logical(c_bool) :: opt_pinned
      integer(c_int) :: opt_flags
      !
      opt_pinned = .true.
      opt_flags  = 0
      if ( present(pinned) ) opt_pinned = pinned
      if ( present(flags) ) opt_flags = flags
      !
      ierr = gpufort_array4_allocate_host_buffer(&
        array,c_loc(buffer),opt_pinned,opt_flags)
      buffer(&
        gpufort_array4_lbound(array,1):,&
        gpufort_array4_lbound(array,2):,&
        gpufort_array4_lbound(array,3):,&
        gpufort_array4_lbound(array,4):)&
          => buffer
    end function
    function gpufort_array4_allocate_host_buffer_c_short(&
        array,buffer,&
        pinned,flags) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array4),intent(in) :: array
      integer(c_short),intent(inout),pointer,dimension(:,:,:,:) :: buffer 
      logical(c_bool),value,optional,intent(in) :: pinned
      integer(c_int),value,optional,intent(in) :: flags
      integer(kind(hipSuccess)) :: ierr
      !
      logical(c_bool) :: opt_pinned
      integer(c_int) :: opt_flags
      !
      opt_pinned = .true.
      opt_flags  = 0
      if ( present(pinned) ) opt_pinned = pinned
      if ( present(flags) ) opt_flags = flags
      !
      ierr = gpufort_array4_allocate_host_buffer(&
        array,c_loc(buffer),opt_pinned,opt_flags)
      buffer(&
        gpufort_array4_lbound(array,1):,&
        gpufort_array4_lbound(array,2):,&
        gpufort_array4_lbound(array,3):,&
        gpufort_array4_lbound(array,4):)&
          => buffer
    end function
    function gpufort_array4_allocate_host_buffer_c_int(&
        array,buffer,&
        pinned,flags) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array4),intent(in) :: array
      integer(c_int),intent(inout),pointer,dimension(:,:,:,:) :: buffer 
      logical(c_bool),value,optional,intent(in) :: pinned
      integer(c_int),value,optional,intent(in) :: flags
      integer(kind(hipSuccess)) :: ierr
      !
      logical(c_bool) :: opt_pinned
      integer(c_int) :: opt_flags
      !
      opt_pinned = .true.
      opt_flags  = 0
      if ( present(pinned) ) opt_pinned = pinned
      if ( present(flags) ) opt_flags = flags
      !
      ierr = gpufort_array4_allocate_host_buffer(&
        array,c_loc(buffer),opt_pinned,opt_flags)
      buffer(&
        gpufort_array4_lbound(array,1):,&
        gpufort_array4_lbound(array,2):,&
        gpufort_array4_lbound(array,3):,&
        gpufort_array4_lbound(array,4):)&
          => buffer
    end function
    function gpufort_array4_allocate_host_buffer_c_long(&
        array,buffer,&
        pinned,flags) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array4),intent(in) :: array
      integer(c_long),intent(inout),pointer,dimension(:,:,:,:) :: buffer 
      logical(c_bool),value,optional,intent(in) :: pinned
      integer(c_int),value,optional,intent(in) :: flags
      integer(kind(hipSuccess)) :: ierr
      !
      logical(c_bool) :: opt_pinned
      integer(c_int) :: opt_flags
      !
      opt_pinned = .true.
      opt_flags  = 0
      if ( present(pinned) ) opt_pinned = pinned
      if ( present(flags) ) opt_flags = flags
      !
      ierr = gpufort_array4_allocate_host_buffer(&
        array,c_loc(buffer),opt_pinned,opt_flags)
      buffer(&
        gpufort_array4_lbound(array,1):,&
        gpufort_array4_lbound(array,2):,&
        gpufort_array4_lbound(array,3):,&
        gpufort_array4_lbound(array,4):)&
          => buffer
    end function
    function gpufort_array4_allocate_host_buffer_c_float(&
        array,buffer,&
        pinned,flags) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array4),intent(in) :: array
      real(c_float),intent(inout),pointer,dimension(:,:,:,:) :: buffer 
      logical(c_bool),value,optional,intent(in) :: pinned
      integer(c_int),value,optional,intent(in) :: flags
      integer(kind(hipSuccess)) :: ierr
      !
      logical(c_bool) :: opt_pinned
      integer(c_int) :: opt_flags
      !
      opt_pinned = .true.
      opt_flags  = 0
      if ( present(pinned) ) opt_pinned = pinned
      if ( present(flags) ) opt_flags = flags
      !
      ierr = gpufort_array4_allocate_host_buffer(&
        array,c_loc(buffer),opt_pinned,opt_flags)
      buffer(&
        gpufort_array4_lbound(array,1):,&
        gpufort_array4_lbound(array,2):,&
        gpufort_array4_lbound(array,3):,&
        gpufort_array4_lbound(array,4):)&
          => buffer
    end function
    function gpufort_array4_allocate_host_buffer_c_double(&
        array,buffer,&
        pinned,flags) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array4),intent(in) :: array
      real(c_double),intent(inout),pointer,dimension(:,:,:,:) :: buffer 
      logical(c_bool),value,optional,intent(in) :: pinned
      integer(c_int),value,optional,intent(in) :: flags
      integer(kind(hipSuccess)) :: ierr
      !
      logical(c_bool) :: opt_pinned
      integer(c_int) :: opt_flags
      !
      opt_pinned = .true.
      opt_flags  = 0
      if ( present(pinned) ) opt_pinned = pinned
      if ( present(flags) ) opt_flags = flags
      !
      ierr = gpufort_array4_allocate_host_buffer(&
        array,c_loc(buffer),opt_pinned,opt_flags)
      buffer(&
        gpufort_array4_lbound(array,1):,&
        gpufort_array4_lbound(array,2):,&
        gpufort_array4_lbound(array,3):,&
        gpufort_array4_lbound(array,4):)&
          => buffer
    end function
    function gpufort_array4_allocate_host_buffer_c_float_complex(&
        array,buffer,&
        pinned,flags) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array4),intent(in) :: array
      complex(c_float_complex),intent(inout),pointer,dimension(:,:,:,:) :: buffer 
      logical(c_bool),value,optional,intent(in) :: pinned
      integer(c_int),value,optional,intent(in) :: flags
      integer(kind(hipSuccess)) :: ierr
      !
      logical(c_bool) :: opt_pinned
      integer(c_int) :: opt_flags
      !
      opt_pinned = .true.
      opt_flags  = 0
      if ( present(pinned) ) opt_pinned = pinned
      if ( present(flags) ) opt_flags = flags
      !
      ierr = gpufort_array4_allocate_host_buffer(&
        array,c_loc(buffer),opt_pinned,opt_flags)
      buffer(&
        gpufort_array4_lbound(array,1):,&
        gpufort_array4_lbound(array,2):,&
        gpufort_array4_lbound(array,3):,&
        gpufort_array4_lbound(array,4):)&
          => buffer
    end function
    function gpufort_array4_allocate_host_buffer_c_double_complex(&
        array,buffer,&
        pinned,flags) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array4),intent(in) :: array
      complex(c_double_complex),intent(inout),pointer,dimension(:,:,:,:) :: buffer 
      logical(c_bool),value,optional,intent(in) :: pinned
      integer(c_int),value,optional,intent(in) :: flags
      integer(kind(hipSuccess)) :: ierr
      !
      logical(c_bool) :: opt_pinned
      integer(c_int) :: opt_flags
      !
      opt_pinned = .true.
      opt_flags  = 0
      if ( present(pinned) ) opt_pinned = pinned
      if ( present(flags) ) opt_flags = flags
      !
      ierr = gpufort_array4_allocate_host_buffer(&
        array,c_loc(buffer),opt_pinned,opt_flags)
      buffer(&
        gpufort_array4_lbound(array,1):,&
        gpufort_array4_lbound(array,2):,&
        gpufort_array4_lbound(array,3):,&
        gpufort_array4_lbound(array,4):)&
          => buffer
    end function
    function gpufort_array5_allocate_host_buffer_c_bool(&
        array,buffer,&
        pinned,flags) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array5),intent(in) :: array
      logical(c_bool),intent(inout),pointer,dimension(:,:,:,:,:) :: buffer 
      logical(c_bool),value,optional,intent(in) :: pinned
      integer(c_int),value,optional,intent(in) :: flags
      integer(kind(hipSuccess)) :: ierr
      !
      logical(c_bool) :: opt_pinned
      integer(c_int) :: opt_flags
      !
      opt_pinned = .true.
      opt_flags  = 0
      if ( present(pinned) ) opt_pinned = pinned
      if ( present(flags) ) opt_flags = flags
      !
      ierr = gpufort_array5_allocate_host_buffer(&
        array,c_loc(buffer),opt_pinned,opt_flags)
      buffer(&
        gpufort_array5_lbound(array,1):,&
        gpufort_array5_lbound(array,2):,&
        gpufort_array5_lbound(array,3):,&
        gpufort_array5_lbound(array,4):,&
        gpufort_array5_lbound(array,5):)&
          => buffer
    end function
    function gpufort_array5_allocate_host_buffer_c_short(&
        array,buffer,&
        pinned,flags) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array5),intent(in) :: array
      integer(c_short),intent(inout),pointer,dimension(:,:,:,:,:) :: buffer 
      logical(c_bool),value,optional,intent(in) :: pinned
      integer(c_int),value,optional,intent(in) :: flags
      integer(kind(hipSuccess)) :: ierr
      !
      logical(c_bool) :: opt_pinned
      integer(c_int) :: opt_flags
      !
      opt_pinned = .true.
      opt_flags  = 0
      if ( present(pinned) ) opt_pinned = pinned
      if ( present(flags) ) opt_flags = flags
      !
      ierr = gpufort_array5_allocate_host_buffer(&
        array,c_loc(buffer),opt_pinned,opt_flags)
      buffer(&
        gpufort_array5_lbound(array,1):,&
        gpufort_array5_lbound(array,2):,&
        gpufort_array5_lbound(array,3):,&
        gpufort_array5_lbound(array,4):,&
        gpufort_array5_lbound(array,5):)&
          => buffer
    end function
    function gpufort_array5_allocate_host_buffer_c_int(&
        array,buffer,&
        pinned,flags) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array5),intent(in) :: array
      integer(c_int),intent(inout),pointer,dimension(:,:,:,:,:) :: buffer 
      logical(c_bool),value,optional,intent(in) :: pinned
      integer(c_int),value,optional,intent(in) :: flags
      integer(kind(hipSuccess)) :: ierr
      !
      logical(c_bool) :: opt_pinned
      integer(c_int) :: opt_flags
      !
      opt_pinned = .true.
      opt_flags  = 0
      if ( present(pinned) ) opt_pinned = pinned
      if ( present(flags) ) opt_flags = flags
      !
      ierr = gpufort_array5_allocate_host_buffer(&
        array,c_loc(buffer),opt_pinned,opt_flags)
      buffer(&
        gpufort_array5_lbound(array,1):,&
        gpufort_array5_lbound(array,2):,&
        gpufort_array5_lbound(array,3):,&
        gpufort_array5_lbound(array,4):,&
        gpufort_array5_lbound(array,5):)&
          => buffer
    end function
    function gpufort_array5_allocate_host_buffer_c_long(&
        array,buffer,&
        pinned,flags) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array5),intent(in) :: array
      integer(c_long),intent(inout),pointer,dimension(:,:,:,:,:) :: buffer 
      logical(c_bool),value,optional,intent(in) :: pinned
      integer(c_int),value,optional,intent(in) :: flags
      integer(kind(hipSuccess)) :: ierr
      !
      logical(c_bool) :: opt_pinned
      integer(c_int) :: opt_flags
      !
      opt_pinned = .true.
      opt_flags  = 0
      if ( present(pinned) ) opt_pinned = pinned
      if ( present(flags) ) opt_flags = flags
      !
      ierr = gpufort_array5_allocate_host_buffer(&
        array,c_loc(buffer),opt_pinned,opt_flags)
      buffer(&
        gpufort_array5_lbound(array,1):,&
        gpufort_array5_lbound(array,2):,&
        gpufort_array5_lbound(array,3):,&
        gpufort_array5_lbound(array,4):,&
        gpufort_array5_lbound(array,5):)&
          => buffer
    end function
    function gpufort_array5_allocate_host_buffer_c_float(&
        array,buffer,&
        pinned,flags) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array5),intent(in) :: array
      real(c_float),intent(inout),pointer,dimension(:,:,:,:,:) :: buffer 
      logical(c_bool),value,optional,intent(in) :: pinned
      integer(c_int),value,optional,intent(in) :: flags
      integer(kind(hipSuccess)) :: ierr
      !
      logical(c_bool) :: opt_pinned
      integer(c_int) :: opt_flags
      !
      opt_pinned = .true.
      opt_flags  = 0
      if ( present(pinned) ) opt_pinned = pinned
      if ( present(flags) ) opt_flags = flags
      !
      ierr = gpufort_array5_allocate_host_buffer(&
        array,c_loc(buffer),opt_pinned,opt_flags)
      buffer(&
        gpufort_array5_lbound(array,1):,&
        gpufort_array5_lbound(array,2):,&
        gpufort_array5_lbound(array,3):,&
        gpufort_array5_lbound(array,4):,&
        gpufort_array5_lbound(array,5):)&
          => buffer
    end function
    function gpufort_array5_allocate_host_buffer_c_double(&
        array,buffer,&
        pinned,flags) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array5),intent(in) :: array
      real(c_double),intent(inout),pointer,dimension(:,:,:,:,:) :: buffer 
      logical(c_bool),value,optional,intent(in) :: pinned
      integer(c_int),value,optional,intent(in) :: flags
      integer(kind(hipSuccess)) :: ierr
      !
      logical(c_bool) :: opt_pinned
      integer(c_int) :: opt_flags
      !
      opt_pinned = .true.
      opt_flags  = 0
      if ( present(pinned) ) opt_pinned = pinned
      if ( present(flags) ) opt_flags = flags
      !
      ierr = gpufort_array5_allocate_host_buffer(&
        array,c_loc(buffer),opt_pinned,opt_flags)
      buffer(&
        gpufort_array5_lbound(array,1):,&
        gpufort_array5_lbound(array,2):,&
        gpufort_array5_lbound(array,3):,&
        gpufort_array5_lbound(array,4):,&
        gpufort_array5_lbound(array,5):)&
          => buffer
    end function
    function gpufort_array5_allocate_host_buffer_c_float_complex(&
        array,buffer,&
        pinned,flags) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array5),intent(in) :: array
      complex(c_float_complex),intent(inout),pointer,dimension(:,:,:,:,:) :: buffer 
      logical(c_bool),value,optional,intent(in) :: pinned
      integer(c_int),value,optional,intent(in) :: flags
      integer(kind(hipSuccess)) :: ierr
      !
      logical(c_bool) :: opt_pinned
      integer(c_int) :: opt_flags
      !
      opt_pinned = .true.
      opt_flags  = 0
      if ( present(pinned) ) opt_pinned = pinned
      if ( present(flags) ) opt_flags = flags
      !
      ierr = gpufort_array5_allocate_host_buffer(&
        array,c_loc(buffer),opt_pinned,opt_flags)
      buffer(&
        gpufort_array5_lbound(array,1):,&
        gpufort_array5_lbound(array,2):,&
        gpufort_array5_lbound(array,3):,&
        gpufort_array5_lbound(array,4):,&
        gpufort_array5_lbound(array,5):)&
          => buffer
    end function
    function gpufort_array5_allocate_host_buffer_c_double_complex(&
        array,buffer,&
        pinned,flags) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array5),intent(in) :: array
      complex(c_double_complex),intent(inout),pointer,dimension(:,:,:,:,:) :: buffer 
      logical(c_bool),value,optional,intent(in) :: pinned
      integer(c_int),value,optional,intent(in) :: flags
      integer(kind(hipSuccess)) :: ierr
      !
      logical(c_bool) :: opt_pinned
      integer(c_int) :: opt_flags
      !
      opt_pinned = .true.
      opt_flags  = 0
      if ( present(pinned) ) opt_pinned = pinned
      if ( present(flags) ) opt_flags = flags
      !
      ierr = gpufort_array5_allocate_host_buffer(&
        array,c_loc(buffer),opt_pinned,opt_flags)
      buffer(&
        gpufort_array5_lbound(array,1):,&
        gpufort_array5_lbound(array,2):,&
        gpufort_array5_lbound(array,3):,&
        gpufort_array5_lbound(array,4):,&
        gpufort_array5_lbound(array,5):)&
          => buffer
    end function
    function gpufort_array6_allocate_host_buffer_c_bool(&
        array,buffer,&
        pinned,flags) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array6),intent(in) :: array
      logical(c_bool),intent(inout),pointer,dimension(:,:,:,:,:,:) :: buffer 
      logical(c_bool),value,optional,intent(in) :: pinned
      integer(c_int),value,optional,intent(in) :: flags
      integer(kind(hipSuccess)) :: ierr
      !
      logical(c_bool) :: opt_pinned
      integer(c_int) :: opt_flags
      !
      opt_pinned = .true.
      opt_flags  = 0
      if ( present(pinned) ) opt_pinned = pinned
      if ( present(flags) ) opt_flags = flags
      !
      ierr = gpufort_array6_allocate_host_buffer(&
        array,c_loc(buffer),opt_pinned,opt_flags)
      buffer(&
        gpufort_array6_lbound(array,1):,&
        gpufort_array6_lbound(array,2):,&
        gpufort_array6_lbound(array,3):,&
        gpufort_array6_lbound(array,4):,&
        gpufort_array6_lbound(array,5):,&
        gpufort_array6_lbound(array,6):)&
          => buffer
    end function
    function gpufort_array6_allocate_host_buffer_c_short(&
        array,buffer,&
        pinned,flags) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array6),intent(in) :: array
      integer(c_short),intent(inout),pointer,dimension(:,:,:,:,:,:) :: buffer 
      logical(c_bool),value,optional,intent(in) :: pinned
      integer(c_int),value,optional,intent(in) :: flags
      integer(kind(hipSuccess)) :: ierr
      !
      logical(c_bool) :: opt_pinned
      integer(c_int) :: opt_flags
      !
      opt_pinned = .true.
      opt_flags  = 0
      if ( present(pinned) ) opt_pinned = pinned
      if ( present(flags) ) opt_flags = flags
      !
      ierr = gpufort_array6_allocate_host_buffer(&
        array,c_loc(buffer),opt_pinned,opt_flags)
      buffer(&
        gpufort_array6_lbound(array,1):,&
        gpufort_array6_lbound(array,2):,&
        gpufort_array6_lbound(array,3):,&
        gpufort_array6_lbound(array,4):,&
        gpufort_array6_lbound(array,5):,&
        gpufort_array6_lbound(array,6):)&
          => buffer
    end function
    function gpufort_array6_allocate_host_buffer_c_int(&
        array,buffer,&
        pinned,flags) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array6),intent(in) :: array
      integer(c_int),intent(inout),pointer,dimension(:,:,:,:,:,:) :: buffer 
      logical(c_bool),value,optional,intent(in) :: pinned
      integer(c_int),value,optional,intent(in) :: flags
      integer(kind(hipSuccess)) :: ierr
      !
      logical(c_bool) :: opt_pinned
      integer(c_int) :: opt_flags
      !
      opt_pinned = .true.
      opt_flags  = 0
      if ( present(pinned) ) opt_pinned = pinned
      if ( present(flags) ) opt_flags = flags
      !
      ierr = gpufort_array6_allocate_host_buffer(&
        array,c_loc(buffer),opt_pinned,opt_flags)
      buffer(&
        gpufort_array6_lbound(array,1):,&
        gpufort_array6_lbound(array,2):,&
        gpufort_array6_lbound(array,3):,&
        gpufort_array6_lbound(array,4):,&
        gpufort_array6_lbound(array,5):,&
        gpufort_array6_lbound(array,6):)&
          => buffer
    end function
    function gpufort_array6_allocate_host_buffer_c_long(&
        array,buffer,&
        pinned,flags) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array6),intent(in) :: array
      integer(c_long),intent(inout),pointer,dimension(:,:,:,:,:,:) :: buffer 
      logical(c_bool),value,optional,intent(in) :: pinned
      integer(c_int),value,optional,intent(in) :: flags
      integer(kind(hipSuccess)) :: ierr
      !
      logical(c_bool) :: opt_pinned
      integer(c_int) :: opt_flags
      !
      opt_pinned = .true.
      opt_flags  = 0
      if ( present(pinned) ) opt_pinned = pinned
      if ( present(flags) ) opt_flags = flags
      !
      ierr = gpufort_array6_allocate_host_buffer(&
        array,c_loc(buffer),opt_pinned,opt_flags)
      buffer(&
        gpufort_array6_lbound(array,1):,&
        gpufort_array6_lbound(array,2):,&
        gpufort_array6_lbound(array,3):,&
        gpufort_array6_lbound(array,4):,&
        gpufort_array6_lbound(array,5):,&
        gpufort_array6_lbound(array,6):)&
          => buffer
    end function
    function gpufort_array6_allocate_host_buffer_c_float(&
        array,buffer,&
        pinned,flags) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array6),intent(in) :: array
      real(c_float),intent(inout),pointer,dimension(:,:,:,:,:,:) :: buffer 
      logical(c_bool),value,optional,intent(in) :: pinned
      integer(c_int),value,optional,intent(in) :: flags
      integer(kind(hipSuccess)) :: ierr
      !
      logical(c_bool) :: opt_pinned
      integer(c_int) :: opt_flags
      !
      opt_pinned = .true.
      opt_flags  = 0
      if ( present(pinned) ) opt_pinned = pinned
      if ( present(flags) ) opt_flags = flags
      !
      ierr = gpufort_array6_allocate_host_buffer(&
        array,c_loc(buffer),opt_pinned,opt_flags)
      buffer(&
        gpufort_array6_lbound(array,1):,&
        gpufort_array6_lbound(array,2):,&
        gpufort_array6_lbound(array,3):,&
        gpufort_array6_lbound(array,4):,&
        gpufort_array6_lbound(array,5):,&
        gpufort_array6_lbound(array,6):)&
          => buffer
    end function
    function gpufort_array6_allocate_host_buffer_c_double(&
        array,buffer,&
        pinned,flags) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array6),intent(in) :: array
      real(c_double),intent(inout),pointer,dimension(:,:,:,:,:,:) :: buffer 
      logical(c_bool),value,optional,intent(in) :: pinned
      integer(c_int),value,optional,intent(in) :: flags
      integer(kind(hipSuccess)) :: ierr
      !
      logical(c_bool) :: opt_pinned
      integer(c_int) :: opt_flags
      !
      opt_pinned = .true.
      opt_flags  = 0
      if ( present(pinned) ) opt_pinned = pinned
      if ( present(flags) ) opt_flags = flags
      !
      ierr = gpufort_array6_allocate_host_buffer(&
        array,c_loc(buffer),opt_pinned,opt_flags)
      buffer(&
        gpufort_array6_lbound(array,1):,&
        gpufort_array6_lbound(array,2):,&
        gpufort_array6_lbound(array,3):,&
        gpufort_array6_lbound(array,4):,&
        gpufort_array6_lbound(array,5):,&
        gpufort_array6_lbound(array,6):)&
          => buffer
    end function
    function gpufort_array6_allocate_host_buffer_c_float_complex(&
        array,buffer,&
        pinned,flags) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array6),intent(in) :: array
      complex(c_float_complex),intent(inout),pointer,dimension(:,:,:,:,:,:) :: buffer 
      logical(c_bool),value,optional,intent(in) :: pinned
      integer(c_int),value,optional,intent(in) :: flags
      integer(kind(hipSuccess)) :: ierr
      !
      logical(c_bool) :: opt_pinned
      integer(c_int) :: opt_flags
      !
      opt_pinned = .true.
      opt_flags  = 0
      if ( present(pinned) ) opt_pinned = pinned
      if ( present(flags) ) opt_flags = flags
      !
      ierr = gpufort_array6_allocate_host_buffer(&
        array,c_loc(buffer),opt_pinned,opt_flags)
      buffer(&
        gpufort_array6_lbound(array,1):,&
        gpufort_array6_lbound(array,2):,&
        gpufort_array6_lbound(array,3):,&
        gpufort_array6_lbound(array,4):,&
        gpufort_array6_lbound(array,5):,&
        gpufort_array6_lbound(array,6):)&
          => buffer
    end function
    function gpufort_array6_allocate_host_buffer_c_double_complex(&
        array,buffer,&
        pinned,flags) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array6),intent(in) :: array
      complex(c_double_complex),intent(inout),pointer,dimension(:,:,:,:,:,:) :: buffer 
      logical(c_bool),value,optional,intent(in) :: pinned
      integer(c_int),value,optional,intent(in) :: flags
      integer(kind(hipSuccess)) :: ierr
      !
      logical(c_bool) :: opt_pinned
      integer(c_int) :: opt_flags
      !
      opt_pinned = .true.
      opt_flags  = 0
      if ( present(pinned) ) opt_pinned = pinned
      if ( present(flags) ) opt_flags = flags
      !
      ierr = gpufort_array6_allocate_host_buffer(&
        array,c_loc(buffer),opt_pinned,opt_flags)
      buffer(&
        gpufort_array6_lbound(array,1):,&
        gpufort_array6_lbound(array,2):,&
        gpufort_array6_lbound(array,3):,&
        gpufort_array6_lbound(array,4):,&
        gpufort_array6_lbound(array,5):,&
        gpufort_array6_lbound(array,6):)&
          => buffer
    end function
    function gpufort_array7_allocate_host_buffer_c_bool(&
        array,buffer,&
        pinned,flags) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array7),intent(in) :: array
      logical(c_bool),intent(inout),pointer,dimension(:,:,:,:,:,:,:) :: buffer 
      logical(c_bool),value,optional,intent(in) :: pinned
      integer(c_int),value,optional,intent(in) :: flags
      integer(kind(hipSuccess)) :: ierr
      !
      logical(c_bool) :: opt_pinned
      integer(c_int) :: opt_flags
      !
      opt_pinned = .true.
      opt_flags  = 0
      if ( present(pinned) ) opt_pinned = pinned
      if ( present(flags) ) opt_flags = flags
      !
      ierr = gpufort_array7_allocate_host_buffer(&
        array,c_loc(buffer),opt_pinned,opt_flags)
      buffer(&
        gpufort_array7_lbound(array,1):,&
        gpufort_array7_lbound(array,2):,&
        gpufort_array7_lbound(array,3):,&
        gpufort_array7_lbound(array,4):,&
        gpufort_array7_lbound(array,5):,&
        gpufort_array7_lbound(array,6):,&
        gpufort_array7_lbound(array,7):)&
          => buffer
    end function
    function gpufort_array7_allocate_host_buffer_c_short(&
        array,buffer,&
        pinned,flags) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array7),intent(in) :: array
      integer(c_short),intent(inout),pointer,dimension(:,:,:,:,:,:,:) :: buffer 
      logical(c_bool),value,optional,intent(in) :: pinned
      integer(c_int),value,optional,intent(in) :: flags
      integer(kind(hipSuccess)) :: ierr
      !
      logical(c_bool) :: opt_pinned
      integer(c_int) :: opt_flags
      !
      opt_pinned = .true.
      opt_flags  = 0
      if ( present(pinned) ) opt_pinned = pinned
      if ( present(flags) ) opt_flags = flags
      !
      ierr = gpufort_array7_allocate_host_buffer(&
        array,c_loc(buffer),opt_pinned,opt_flags)
      buffer(&
        gpufort_array7_lbound(array,1):,&
        gpufort_array7_lbound(array,2):,&
        gpufort_array7_lbound(array,3):,&
        gpufort_array7_lbound(array,4):,&
        gpufort_array7_lbound(array,5):,&
        gpufort_array7_lbound(array,6):,&
        gpufort_array7_lbound(array,7):)&
          => buffer
    end function
    function gpufort_array7_allocate_host_buffer_c_int(&
        array,buffer,&
        pinned,flags) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array7),intent(in) :: array
      integer(c_int),intent(inout),pointer,dimension(:,:,:,:,:,:,:) :: buffer 
      logical(c_bool),value,optional,intent(in) :: pinned
      integer(c_int),value,optional,intent(in) :: flags
      integer(kind(hipSuccess)) :: ierr
      !
      logical(c_bool) :: opt_pinned
      integer(c_int) :: opt_flags
      !
      opt_pinned = .true.
      opt_flags  = 0
      if ( present(pinned) ) opt_pinned = pinned
      if ( present(flags) ) opt_flags = flags
      !
      ierr = gpufort_array7_allocate_host_buffer(&
        array,c_loc(buffer),opt_pinned,opt_flags)
      buffer(&
        gpufort_array7_lbound(array,1):,&
        gpufort_array7_lbound(array,2):,&
        gpufort_array7_lbound(array,3):,&
        gpufort_array7_lbound(array,4):,&
        gpufort_array7_lbound(array,5):,&
        gpufort_array7_lbound(array,6):,&
        gpufort_array7_lbound(array,7):)&
          => buffer
    end function
    function gpufort_array7_allocate_host_buffer_c_long(&
        array,buffer,&
        pinned,flags) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array7),intent(in) :: array
      integer(c_long),intent(inout),pointer,dimension(:,:,:,:,:,:,:) :: buffer 
      logical(c_bool),value,optional,intent(in) :: pinned
      integer(c_int),value,optional,intent(in) :: flags
      integer(kind(hipSuccess)) :: ierr
      !
      logical(c_bool) :: opt_pinned
      integer(c_int) :: opt_flags
      !
      opt_pinned = .true.
      opt_flags  = 0
      if ( present(pinned) ) opt_pinned = pinned
      if ( present(flags) ) opt_flags = flags
      !
      ierr = gpufort_array7_allocate_host_buffer(&
        array,c_loc(buffer),opt_pinned,opt_flags)
      buffer(&
        gpufort_array7_lbound(array,1):,&
        gpufort_array7_lbound(array,2):,&
        gpufort_array7_lbound(array,3):,&
        gpufort_array7_lbound(array,4):,&
        gpufort_array7_lbound(array,5):,&
        gpufort_array7_lbound(array,6):,&
        gpufort_array7_lbound(array,7):)&
          => buffer
    end function
    function gpufort_array7_allocate_host_buffer_c_float(&
        array,buffer,&
        pinned,flags) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array7),intent(in) :: array
      real(c_float),intent(inout),pointer,dimension(:,:,:,:,:,:,:) :: buffer 
      logical(c_bool),value,optional,intent(in) :: pinned
      integer(c_int),value,optional,intent(in) :: flags
      integer(kind(hipSuccess)) :: ierr
      !
      logical(c_bool) :: opt_pinned
      integer(c_int) :: opt_flags
      !
      opt_pinned = .true.
      opt_flags  = 0
      if ( present(pinned) ) opt_pinned = pinned
      if ( present(flags) ) opt_flags = flags
      !
      ierr = gpufort_array7_allocate_host_buffer(&
        array,c_loc(buffer),opt_pinned,opt_flags)
      buffer(&
        gpufort_array7_lbound(array,1):,&
        gpufort_array7_lbound(array,2):,&
        gpufort_array7_lbound(array,3):,&
        gpufort_array7_lbound(array,4):,&
        gpufort_array7_lbound(array,5):,&
        gpufort_array7_lbound(array,6):,&
        gpufort_array7_lbound(array,7):)&
          => buffer
    end function
    function gpufort_array7_allocate_host_buffer_c_double(&
        array,buffer,&
        pinned,flags) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array7),intent(in) :: array
      real(c_double),intent(inout),pointer,dimension(:,:,:,:,:,:,:) :: buffer 
      logical(c_bool),value,optional,intent(in) :: pinned
      integer(c_int),value,optional,intent(in) :: flags
      integer(kind(hipSuccess)) :: ierr
      !
      logical(c_bool) :: opt_pinned
      integer(c_int) :: opt_flags
      !
      opt_pinned = .true.
      opt_flags  = 0
      if ( present(pinned) ) opt_pinned = pinned
      if ( present(flags) ) opt_flags = flags
      !
      ierr = gpufort_array7_allocate_host_buffer(&
        array,c_loc(buffer),opt_pinned,opt_flags)
      buffer(&
        gpufort_array7_lbound(array,1):,&
        gpufort_array7_lbound(array,2):,&
        gpufort_array7_lbound(array,3):,&
        gpufort_array7_lbound(array,4):,&
        gpufort_array7_lbound(array,5):,&
        gpufort_array7_lbound(array,6):,&
        gpufort_array7_lbound(array,7):)&
          => buffer
    end function
    function gpufort_array7_allocate_host_buffer_c_float_complex(&
        array,buffer,&
        pinned,flags) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array7),intent(in) :: array
      complex(c_float_complex),intent(inout),pointer,dimension(:,:,:,:,:,:,:) :: buffer 
      logical(c_bool),value,optional,intent(in) :: pinned
      integer(c_int),value,optional,intent(in) :: flags
      integer(kind(hipSuccess)) :: ierr
      !
      logical(c_bool) :: opt_pinned
      integer(c_int) :: opt_flags
      !
      opt_pinned = .true.
      opt_flags  = 0
      if ( present(pinned) ) opt_pinned = pinned
      if ( present(flags) ) opt_flags = flags
      !
      ierr = gpufort_array7_allocate_host_buffer(&
        array,c_loc(buffer),opt_pinned,opt_flags)
      buffer(&
        gpufort_array7_lbound(array,1):,&
        gpufort_array7_lbound(array,2):,&
        gpufort_array7_lbound(array,3):,&
        gpufort_array7_lbound(array,4):,&
        gpufort_array7_lbound(array,5):,&
        gpufort_array7_lbound(array,6):,&
        gpufort_array7_lbound(array,7):)&
          => buffer
    end function
    function gpufort_array7_allocate_host_buffer_c_double_complex(&
        array,buffer,&
        pinned,flags) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array7),intent(in) :: array
      complex(c_double_complex),intent(inout),pointer,dimension(:,:,:,:,:,:,:) :: buffer 
      logical(c_bool),value,optional,intent(in) :: pinned
      integer(c_int),value,optional,intent(in) :: flags
      integer(kind(hipSuccess)) :: ierr
      !
      logical(c_bool) :: opt_pinned
      integer(c_int) :: opt_flags
      !
      opt_pinned = .true.
      opt_flags  = 0
      if ( present(pinned) ) opt_pinned = pinned
      if ( present(flags) ) opt_flags = flags
      !
      ierr = gpufort_array7_allocate_host_buffer(&
        array,c_loc(buffer),opt_pinned,opt_flags)
      buffer(&
        gpufort_array7_lbound(array,1):,&
        gpufort_array7_lbound(array,2):,&
        gpufort_array7_lbound(array,3):,&
        gpufort_array7_lbound(array,4):,&
        gpufort_array7_lbound(array,5):,&
        gpufort_array7_lbound(array,6):,&
        gpufort_array7_lbound(array,7):)&
          => buffer
    end function
    function gpufort_array1_allocate_device_buffer_c_bool(&
        array,buffer) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array1),intent(in) :: array
      logical(c_bool),intent(inout),pointer,dimension(:) :: buffer 
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array1_allocate_device_buffer(&
        array,c_loc(buffer))
      buffer(&
        gpufort_array1_lbound(array,1):)&
          => buffer
    end function
    function gpufort_array1_allocate_device_buffer_c_short(&
        array,buffer) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array1),intent(in) :: array
      integer(c_short),intent(inout),pointer,dimension(:) :: buffer 
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array1_allocate_device_buffer(&
        array,c_loc(buffer))
      buffer(&
        gpufort_array1_lbound(array,1):)&
          => buffer
    end function
    function gpufort_array1_allocate_device_buffer_c_int(&
        array,buffer) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array1),intent(in) :: array
      integer(c_int),intent(inout),pointer,dimension(:) :: buffer 
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array1_allocate_device_buffer(&
        array,c_loc(buffer))
      buffer(&
        gpufort_array1_lbound(array,1):)&
          => buffer
    end function
    function gpufort_array1_allocate_device_buffer_c_long(&
        array,buffer) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array1),intent(in) :: array
      integer(c_long),intent(inout),pointer,dimension(:) :: buffer 
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array1_allocate_device_buffer(&
        array,c_loc(buffer))
      buffer(&
        gpufort_array1_lbound(array,1):)&
          => buffer
    end function
    function gpufort_array1_allocate_device_buffer_c_float(&
        array,buffer) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array1),intent(in) :: array
      real(c_float),intent(inout),pointer,dimension(:) :: buffer 
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array1_allocate_device_buffer(&
        array,c_loc(buffer))
      buffer(&
        gpufort_array1_lbound(array,1):)&
          => buffer
    end function
    function gpufort_array1_allocate_device_buffer_c_double(&
        array,buffer) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array1),intent(in) :: array
      real(c_double),intent(inout),pointer,dimension(:) :: buffer 
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array1_allocate_device_buffer(&
        array,c_loc(buffer))
      buffer(&
        gpufort_array1_lbound(array,1):)&
          => buffer
    end function
    function gpufort_array1_allocate_device_buffer_c_float_complex(&
        array,buffer) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array1),intent(in) :: array
      complex(c_float_complex),intent(inout),pointer,dimension(:) :: buffer 
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array1_allocate_device_buffer(&
        array,c_loc(buffer))
      buffer(&
        gpufort_array1_lbound(array,1):)&
          => buffer
    end function
    function gpufort_array1_allocate_device_buffer_c_double_complex(&
        array,buffer) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array1),intent(in) :: array
      complex(c_double_complex),intent(inout),pointer,dimension(:) :: buffer 
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array1_allocate_device_buffer(&
        array,c_loc(buffer))
      buffer(&
        gpufort_array1_lbound(array,1):)&
          => buffer
    end function
    function gpufort_array2_allocate_device_buffer_c_bool(&
        array,buffer) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array2),intent(in) :: array
      logical(c_bool),intent(inout),pointer,dimension(:,:) :: buffer 
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array2_allocate_device_buffer(&
        array,c_loc(buffer))
      buffer(&
        gpufort_array2_lbound(array,1):,&
        gpufort_array2_lbound(array,2):)&
          => buffer
    end function
    function gpufort_array2_allocate_device_buffer_c_short(&
        array,buffer) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array2),intent(in) :: array
      integer(c_short),intent(inout),pointer,dimension(:,:) :: buffer 
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array2_allocate_device_buffer(&
        array,c_loc(buffer))
      buffer(&
        gpufort_array2_lbound(array,1):,&
        gpufort_array2_lbound(array,2):)&
          => buffer
    end function
    function gpufort_array2_allocate_device_buffer_c_int(&
        array,buffer) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array2),intent(in) :: array
      integer(c_int),intent(inout),pointer,dimension(:,:) :: buffer 
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array2_allocate_device_buffer(&
        array,c_loc(buffer))
      buffer(&
        gpufort_array2_lbound(array,1):,&
        gpufort_array2_lbound(array,2):)&
          => buffer
    end function
    function gpufort_array2_allocate_device_buffer_c_long(&
        array,buffer) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array2),intent(in) :: array
      integer(c_long),intent(inout),pointer,dimension(:,:) :: buffer 
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array2_allocate_device_buffer(&
        array,c_loc(buffer))
      buffer(&
        gpufort_array2_lbound(array,1):,&
        gpufort_array2_lbound(array,2):)&
          => buffer
    end function
    function gpufort_array2_allocate_device_buffer_c_float(&
        array,buffer) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array2),intent(in) :: array
      real(c_float),intent(inout),pointer,dimension(:,:) :: buffer 
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array2_allocate_device_buffer(&
        array,c_loc(buffer))
      buffer(&
        gpufort_array2_lbound(array,1):,&
        gpufort_array2_lbound(array,2):)&
          => buffer
    end function
    function gpufort_array2_allocate_device_buffer_c_double(&
        array,buffer) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array2),intent(in) :: array
      real(c_double),intent(inout),pointer,dimension(:,:) :: buffer 
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array2_allocate_device_buffer(&
        array,c_loc(buffer))
      buffer(&
        gpufort_array2_lbound(array,1):,&
        gpufort_array2_lbound(array,2):)&
          => buffer
    end function
    function gpufort_array2_allocate_device_buffer_c_float_complex(&
        array,buffer) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array2),intent(in) :: array
      complex(c_float_complex),intent(inout),pointer,dimension(:,:) :: buffer 
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array2_allocate_device_buffer(&
        array,c_loc(buffer))
      buffer(&
        gpufort_array2_lbound(array,1):,&
        gpufort_array2_lbound(array,2):)&
          => buffer
    end function
    function gpufort_array2_allocate_device_buffer_c_double_complex(&
        array,buffer) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array2),intent(in) :: array
      complex(c_double_complex),intent(inout),pointer,dimension(:,:) :: buffer 
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array2_allocate_device_buffer(&
        array,c_loc(buffer))
      buffer(&
        gpufort_array2_lbound(array,1):,&
        gpufort_array2_lbound(array,2):)&
          => buffer
    end function
    function gpufort_array3_allocate_device_buffer_c_bool(&
        array,buffer) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array3),intent(in) :: array
      logical(c_bool),intent(inout),pointer,dimension(:,:,:) :: buffer 
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array3_allocate_device_buffer(&
        array,c_loc(buffer))
      buffer(&
        gpufort_array3_lbound(array,1):,&
        gpufort_array3_lbound(array,2):,&
        gpufort_array3_lbound(array,3):)&
          => buffer
    end function
    function gpufort_array3_allocate_device_buffer_c_short(&
        array,buffer) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array3),intent(in) :: array
      integer(c_short),intent(inout),pointer,dimension(:,:,:) :: buffer 
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array3_allocate_device_buffer(&
        array,c_loc(buffer))
      buffer(&
        gpufort_array3_lbound(array,1):,&
        gpufort_array3_lbound(array,2):,&
        gpufort_array3_lbound(array,3):)&
          => buffer
    end function
    function gpufort_array3_allocate_device_buffer_c_int(&
        array,buffer) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array3),intent(in) :: array
      integer(c_int),intent(inout),pointer,dimension(:,:,:) :: buffer 
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array3_allocate_device_buffer(&
        array,c_loc(buffer))
      buffer(&
        gpufort_array3_lbound(array,1):,&
        gpufort_array3_lbound(array,2):,&
        gpufort_array3_lbound(array,3):)&
          => buffer
    end function
    function gpufort_array3_allocate_device_buffer_c_long(&
        array,buffer) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array3),intent(in) :: array
      integer(c_long),intent(inout),pointer,dimension(:,:,:) :: buffer 
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array3_allocate_device_buffer(&
        array,c_loc(buffer))
      buffer(&
        gpufort_array3_lbound(array,1):,&
        gpufort_array3_lbound(array,2):,&
        gpufort_array3_lbound(array,3):)&
          => buffer
    end function
    function gpufort_array3_allocate_device_buffer_c_float(&
        array,buffer) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array3),intent(in) :: array
      real(c_float),intent(inout),pointer,dimension(:,:,:) :: buffer 
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array3_allocate_device_buffer(&
        array,c_loc(buffer))
      buffer(&
        gpufort_array3_lbound(array,1):,&
        gpufort_array3_lbound(array,2):,&
        gpufort_array3_lbound(array,3):)&
          => buffer
    end function
    function gpufort_array3_allocate_device_buffer_c_double(&
        array,buffer) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array3),intent(in) :: array
      real(c_double),intent(inout),pointer,dimension(:,:,:) :: buffer 
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array3_allocate_device_buffer(&
        array,c_loc(buffer))
      buffer(&
        gpufort_array3_lbound(array,1):,&
        gpufort_array3_lbound(array,2):,&
        gpufort_array3_lbound(array,3):)&
          => buffer
    end function
    function gpufort_array3_allocate_device_buffer_c_float_complex(&
        array,buffer) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array3),intent(in) :: array
      complex(c_float_complex),intent(inout),pointer,dimension(:,:,:) :: buffer 
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array3_allocate_device_buffer(&
        array,c_loc(buffer))
      buffer(&
        gpufort_array3_lbound(array,1):,&
        gpufort_array3_lbound(array,2):,&
        gpufort_array3_lbound(array,3):)&
          => buffer
    end function
    function gpufort_array3_allocate_device_buffer_c_double_complex(&
        array,buffer) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array3),intent(in) :: array
      complex(c_double_complex),intent(inout),pointer,dimension(:,:,:) :: buffer 
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array3_allocate_device_buffer(&
        array,c_loc(buffer))
      buffer(&
        gpufort_array3_lbound(array,1):,&
        gpufort_array3_lbound(array,2):,&
        gpufort_array3_lbound(array,3):)&
          => buffer
    end function
    function gpufort_array4_allocate_device_buffer_c_bool(&
        array,buffer) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array4),intent(in) :: array
      logical(c_bool),intent(inout),pointer,dimension(:,:,:,:) :: buffer 
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array4_allocate_device_buffer(&
        array,c_loc(buffer))
      buffer(&
        gpufort_array4_lbound(array,1):,&
        gpufort_array4_lbound(array,2):,&
        gpufort_array4_lbound(array,3):,&
        gpufort_array4_lbound(array,4):)&
          => buffer
    end function
    function gpufort_array4_allocate_device_buffer_c_short(&
        array,buffer) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array4),intent(in) :: array
      integer(c_short),intent(inout),pointer,dimension(:,:,:,:) :: buffer 
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array4_allocate_device_buffer(&
        array,c_loc(buffer))
      buffer(&
        gpufort_array4_lbound(array,1):,&
        gpufort_array4_lbound(array,2):,&
        gpufort_array4_lbound(array,3):,&
        gpufort_array4_lbound(array,4):)&
          => buffer
    end function
    function gpufort_array4_allocate_device_buffer_c_int(&
        array,buffer) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array4),intent(in) :: array
      integer(c_int),intent(inout),pointer,dimension(:,:,:,:) :: buffer 
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array4_allocate_device_buffer(&
        array,c_loc(buffer))
      buffer(&
        gpufort_array4_lbound(array,1):,&
        gpufort_array4_lbound(array,2):,&
        gpufort_array4_lbound(array,3):,&
        gpufort_array4_lbound(array,4):)&
          => buffer
    end function
    function gpufort_array4_allocate_device_buffer_c_long(&
        array,buffer) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array4),intent(in) :: array
      integer(c_long),intent(inout),pointer,dimension(:,:,:,:) :: buffer 
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array4_allocate_device_buffer(&
        array,c_loc(buffer))
      buffer(&
        gpufort_array4_lbound(array,1):,&
        gpufort_array4_lbound(array,2):,&
        gpufort_array4_lbound(array,3):,&
        gpufort_array4_lbound(array,4):)&
          => buffer
    end function
    function gpufort_array4_allocate_device_buffer_c_float(&
        array,buffer) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array4),intent(in) :: array
      real(c_float),intent(inout),pointer,dimension(:,:,:,:) :: buffer 
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array4_allocate_device_buffer(&
        array,c_loc(buffer))
      buffer(&
        gpufort_array4_lbound(array,1):,&
        gpufort_array4_lbound(array,2):,&
        gpufort_array4_lbound(array,3):,&
        gpufort_array4_lbound(array,4):)&
          => buffer
    end function
    function gpufort_array4_allocate_device_buffer_c_double(&
        array,buffer) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array4),intent(in) :: array
      real(c_double),intent(inout),pointer,dimension(:,:,:,:) :: buffer 
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array4_allocate_device_buffer(&
        array,c_loc(buffer))
      buffer(&
        gpufort_array4_lbound(array,1):,&
        gpufort_array4_lbound(array,2):,&
        gpufort_array4_lbound(array,3):,&
        gpufort_array4_lbound(array,4):)&
          => buffer
    end function
    function gpufort_array4_allocate_device_buffer_c_float_complex(&
        array,buffer) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array4),intent(in) :: array
      complex(c_float_complex),intent(inout),pointer,dimension(:,:,:,:) :: buffer 
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array4_allocate_device_buffer(&
        array,c_loc(buffer))
      buffer(&
        gpufort_array4_lbound(array,1):,&
        gpufort_array4_lbound(array,2):,&
        gpufort_array4_lbound(array,3):,&
        gpufort_array4_lbound(array,4):)&
          => buffer
    end function
    function gpufort_array4_allocate_device_buffer_c_double_complex(&
        array,buffer) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array4),intent(in) :: array
      complex(c_double_complex),intent(inout),pointer,dimension(:,:,:,:) :: buffer 
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array4_allocate_device_buffer(&
        array,c_loc(buffer))
      buffer(&
        gpufort_array4_lbound(array,1):,&
        gpufort_array4_lbound(array,2):,&
        gpufort_array4_lbound(array,3):,&
        gpufort_array4_lbound(array,4):)&
          => buffer
    end function
    function gpufort_array5_allocate_device_buffer_c_bool(&
        array,buffer) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array5),intent(in) :: array
      logical(c_bool),intent(inout),pointer,dimension(:,:,:,:,:) :: buffer 
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array5_allocate_device_buffer(&
        array,c_loc(buffer))
      buffer(&
        gpufort_array5_lbound(array,1):,&
        gpufort_array5_lbound(array,2):,&
        gpufort_array5_lbound(array,3):,&
        gpufort_array5_lbound(array,4):,&
        gpufort_array5_lbound(array,5):)&
          => buffer
    end function
    function gpufort_array5_allocate_device_buffer_c_short(&
        array,buffer) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array5),intent(in) :: array
      integer(c_short),intent(inout),pointer,dimension(:,:,:,:,:) :: buffer 
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array5_allocate_device_buffer(&
        array,c_loc(buffer))
      buffer(&
        gpufort_array5_lbound(array,1):,&
        gpufort_array5_lbound(array,2):,&
        gpufort_array5_lbound(array,3):,&
        gpufort_array5_lbound(array,4):,&
        gpufort_array5_lbound(array,5):)&
          => buffer
    end function
    function gpufort_array5_allocate_device_buffer_c_int(&
        array,buffer) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array5),intent(in) :: array
      integer(c_int),intent(inout),pointer,dimension(:,:,:,:,:) :: buffer 
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array5_allocate_device_buffer(&
        array,c_loc(buffer))
      buffer(&
        gpufort_array5_lbound(array,1):,&
        gpufort_array5_lbound(array,2):,&
        gpufort_array5_lbound(array,3):,&
        gpufort_array5_lbound(array,4):,&
        gpufort_array5_lbound(array,5):)&
          => buffer
    end function
    function gpufort_array5_allocate_device_buffer_c_long(&
        array,buffer) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array5),intent(in) :: array
      integer(c_long),intent(inout),pointer,dimension(:,:,:,:,:) :: buffer 
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array5_allocate_device_buffer(&
        array,c_loc(buffer))
      buffer(&
        gpufort_array5_lbound(array,1):,&
        gpufort_array5_lbound(array,2):,&
        gpufort_array5_lbound(array,3):,&
        gpufort_array5_lbound(array,4):,&
        gpufort_array5_lbound(array,5):)&
          => buffer
    end function
    function gpufort_array5_allocate_device_buffer_c_float(&
        array,buffer) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array5),intent(in) :: array
      real(c_float),intent(inout),pointer,dimension(:,:,:,:,:) :: buffer 
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array5_allocate_device_buffer(&
        array,c_loc(buffer))
      buffer(&
        gpufort_array5_lbound(array,1):,&
        gpufort_array5_lbound(array,2):,&
        gpufort_array5_lbound(array,3):,&
        gpufort_array5_lbound(array,4):,&
        gpufort_array5_lbound(array,5):)&
          => buffer
    end function
    function gpufort_array5_allocate_device_buffer_c_double(&
        array,buffer) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array5),intent(in) :: array
      real(c_double),intent(inout),pointer,dimension(:,:,:,:,:) :: buffer 
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array5_allocate_device_buffer(&
        array,c_loc(buffer))
      buffer(&
        gpufort_array5_lbound(array,1):,&
        gpufort_array5_lbound(array,2):,&
        gpufort_array5_lbound(array,3):,&
        gpufort_array5_lbound(array,4):,&
        gpufort_array5_lbound(array,5):)&
          => buffer
    end function
    function gpufort_array5_allocate_device_buffer_c_float_complex(&
        array,buffer) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array5),intent(in) :: array
      complex(c_float_complex),intent(inout),pointer,dimension(:,:,:,:,:) :: buffer 
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array5_allocate_device_buffer(&
        array,c_loc(buffer))
      buffer(&
        gpufort_array5_lbound(array,1):,&
        gpufort_array5_lbound(array,2):,&
        gpufort_array5_lbound(array,3):,&
        gpufort_array5_lbound(array,4):,&
        gpufort_array5_lbound(array,5):)&
          => buffer
    end function
    function gpufort_array5_allocate_device_buffer_c_double_complex(&
        array,buffer) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array5),intent(in) :: array
      complex(c_double_complex),intent(inout),pointer,dimension(:,:,:,:,:) :: buffer 
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array5_allocate_device_buffer(&
        array,c_loc(buffer))
      buffer(&
        gpufort_array5_lbound(array,1):,&
        gpufort_array5_lbound(array,2):,&
        gpufort_array5_lbound(array,3):,&
        gpufort_array5_lbound(array,4):,&
        gpufort_array5_lbound(array,5):)&
          => buffer
    end function
    function gpufort_array6_allocate_device_buffer_c_bool(&
        array,buffer) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array6),intent(in) :: array
      logical(c_bool),intent(inout),pointer,dimension(:,:,:,:,:,:) :: buffer 
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array6_allocate_device_buffer(&
        array,c_loc(buffer))
      buffer(&
        gpufort_array6_lbound(array,1):,&
        gpufort_array6_lbound(array,2):,&
        gpufort_array6_lbound(array,3):,&
        gpufort_array6_lbound(array,4):,&
        gpufort_array6_lbound(array,5):,&
        gpufort_array6_lbound(array,6):)&
          => buffer
    end function
    function gpufort_array6_allocate_device_buffer_c_short(&
        array,buffer) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array6),intent(in) :: array
      integer(c_short),intent(inout),pointer,dimension(:,:,:,:,:,:) :: buffer 
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array6_allocate_device_buffer(&
        array,c_loc(buffer))
      buffer(&
        gpufort_array6_lbound(array,1):,&
        gpufort_array6_lbound(array,2):,&
        gpufort_array6_lbound(array,3):,&
        gpufort_array6_lbound(array,4):,&
        gpufort_array6_lbound(array,5):,&
        gpufort_array6_lbound(array,6):)&
          => buffer
    end function
    function gpufort_array6_allocate_device_buffer_c_int(&
        array,buffer) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array6),intent(in) :: array
      integer(c_int),intent(inout),pointer,dimension(:,:,:,:,:,:) :: buffer 
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array6_allocate_device_buffer(&
        array,c_loc(buffer))
      buffer(&
        gpufort_array6_lbound(array,1):,&
        gpufort_array6_lbound(array,2):,&
        gpufort_array6_lbound(array,3):,&
        gpufort_array6_lbound(array,4):,&
        gpufort_array6_lbound(array,5):,&
        gpufort_array6_lbound(array,6):)&
          => buffer
    end function
    function gpufort_array6_allocate_device_buffer_c_long(&
        array,buffer) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array6),intent(in) :: array
      integer(c_long),intent(inout),pointer,dimension(:,:,:,:,:,:) :: buffer 
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array6_allocate_device_buffer(&
        array,c_loc(buffer))
      buffer(&
        gpufort_array6_lbound(array,1):,&
        gpufort_array6_lbound(array,2):,&
        gpufort_array6_lbound(array,3):,&
        gpufort_array6_lbound(array,4):,&
        gpufort_array6_lbound(array,5):,&
        gpufort_array6_lbound(array,6):)&
          => buffer
    end function
    function gpufort_array6_allocate_device_buffer_c_float(&
        array,buffer) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array6),intent(in) :: array
      real(c_float),intent(inout),pointer,dimension(:,:,:,:,:,:) :: buffer 
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array6_allocate_device_buffer(&
        array,c_loc(buffer))
      buffer(&
        gpufort_array6_lbound(array,1):,&
        gpufort_array6_lbound(array,2):,&
        gpufort_array6_lbound(array,3):,&
        gpufort_array6_lbound(array,4):,&
        gpufort_array6_lbound(array,5):,&
        gpufort_array6_lbound(array,6):)&
          => buffer
    end function
    function gpufort_array6_allocate_device_buffer_c_double(&
        array,buffer) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array6),intent(in) :: array
      real(c_double),intent(inout),pointer,dimension(:,:,:,:,:,:) :: buffer 
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array6_allocate_device_buffer(&
        array,c_loc(buffer))
      buffer(&
        gpufort_array6_lbound(array,1):,&
        gpufort_array6_lbound(array,2):,&
        gpufort_array6_lbound(array,3):,&
        gpufort_array6_lbound(array,4):,&
        gpufort_array6_lbound(array,5):,&
        gpufort_array6_lbound(array,6):)&
          => buffer
    end function
    function gpufort_array6_allocate_device_buffer_c_float_complex(&
        array,buffer) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array6),intent(in) :: array
      complex(c_float_complex),intent(inout),pointer,dimension(:,:,:,:,:,:) :: buffer 
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array6_allocate_device_buffer(&
        array,c_loc(buffer))
      buffer(&
        gpufort_array6_lbound(array,1):,&
        gpufort_array6_lbound(array,2):,&
        gpufort_array6_lbound(array,3):,&
        gpufort_array6_lbound(array,4):,&
        gpufort_array6_lbound(array,5):,&
        gpufort_array6_lbound(array,6):)&
          => buffer
    end function
    function gpufort_array6_allocate_device_buffer_c_double_complex(&
        array,buffer) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array6),intent(in) :: array
      complex(c_double_complex),intent(inout),pointer,dimension(:,:,:,:,:,:) :: buffer 
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array6_allocate_device_buffer(&
        array,c_loc(buffer))
      buffer(&
        gpufort_array6_lbound(array,1):,&
        gpufort_array6_lbound(array,2):,&
        gpufort_array6_lbound(array,3):,&
        gpufort_array6_lbound(array,4):,&
        gpufort_array6_lbound(array,5):,&
        gpufort_array6_lbound(array,6):)&
          => buffer
    end function
    function gpufort_array7_allocate_device_buffer_c_bool(&
        array,buffer) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array7),intent(in) :: array
      logical(c_bool),intent(inout),pointer,dimension(:,:,:,:,:,:,:) :: buffer 
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array7_allocate_device_buffer(&
        array,c_loc(buffer))
      buffer(&
        gpufort_array7_lbound(array,1):,&
        gpufort_array7_lbound(array,2):,&
        gpufort_array7_lbound(array,3):,&
        gpufort_array7_lbound(array,4):,&
        gpufort_array7_lbound(array,5):,&
        gpufort_array7_lbound(array,6):,&
        gpufort_array7_lbound(array,7):)&
          => buffer
    end function
    function gpufort_array7_allocate_device_buffer_c_short(&
        array,buffer) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array7),intent(in) :: array
      integer(c_short),intent(inout),pointer,dimension(:,:,:,:,:,:,:) :: buffer 
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array7_allocate_device_buffer(&
        array,c_loc(buffer))
      buffer(&
        gpufort_array7_lbound(array,1):,&
        gpufort_array7_lbound(array,2):,&
        gpufort_array7_lbound(array,3):,&
        gpufort_array7_lbound(array,4):,&
        gpufort_array7_lbound(array,5):,&
        gpufort_array7_lbound(array,6):,&
        gpufort_array7_lbound(array,7):)&
          => buffer
    end function
    function gpufort_array7_allocate_device_buffer_c_int(&
        array,buffer) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array7),intent(in) :: array
      integer(c_int),intent(inout),pointer,dimension(:,:,:,:,:,:,:) :: buffer 
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array7_allocate_device_buffer(&
        array,c_loc(buffer))
      buffer(&
        gpufort_array7_lbound(array,1):,&
        gpufort_array7_lbound(array,2):,&
        gpufort_array7_lbound(array,3):,&
        gpufort_array7_lbound(array,4):,&
        gpufort_array7_lbound(array,5):,&
        gpufort_array7_lbound(array,6):,&
        gpufort_array7_lbound(array,7):)&
          => buffer
    end function
    function gpufort_array7_allocate_device_buffer_c_long(&
        array,buffer) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array7),intent(in) :: array
      integer(c_long),intent(inout),pointer,dimension(:,:,:,:,:,:,:) :: buffer 
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array7_allocate_device_buffer(&
        array,c_loc(buffer))
      buffer(&
        gpufort_array7_lbound(array,1):,&
        gpufort_array7_lbound(array,2):,&
        gpufort_array7_lbound(array,3):,&
        gpufort_array7_lbound(array,4):,&
        gpufort_array7_lbound(array,5):,&
        gpufort_array7_lbound(array,6):,&
        gpufort_array7_lbound(array,7):)&
          => buffer
    end function
    function gpufort_array7_allocate_device_buffer_c_float(&
        array,buffer) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array7),intent(in) :: array
      real(c_float),intent(inout),pointer,dimension(:,:,:,:,:,:,:) :: buffer 
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array7_allocate_device_buffer(&
        array,c_loc(buffer))
      buffer(&
        gpufort_array7_lbound(array,1):,&
        gpufort_array7_lbound(array,2):,&
        gpufort_array7_lbound(array,3):,&
        gpufort_array7_lbound(array,4):,&
        gpufort_array7_lbound(array,5):,&
        gpufort_array7_lbound(array,6):,&
        gpufort_array7_lbound(array,7):)&
          => buffer
    end function
    function gpufort_array7_allocate_device_buffer_c_double(&
        array,buffer) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array7),intent(in) :: array
      real(c_double),intent(inout),pointer,dimension(:,:,:,:,:,:,:) :: buffer 
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array7_allocate_device_buffer(&
        array,c_loc(buffer))
      buffer(&
        gpufort_array7_lbound(array,1):,&
        gpufort_array7_lbound(array,2):,&
        gpufort_array7_lbound(array,3):,&
        gpufort_array7_lbound(array,4):,&
        gpufort_array7_lbound(array,5):,&
        gpufort_array7_lbound(array,6):,&
        gpufort_array7_lbound(array,7):)&
          => buffer
    end function
    function gpufort_array7_allocate_device_buffer_c_float_complex(&
        array,buffer) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array7),intent(in) :: array
      complex(c_float_complex),intent(inout),pointer,dimension(:,:,:,:,:,:,:) :: buffer 
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array7_allocate_device_buffer(&
        array,c_loc(buffer))
      buffer(&
        gpufort_array7_lbound(array,1):,&
        gpufort_array7_lbound(array,2):,&
        gpufort_array7_lbound(array,3):,&
        gpufort_array7_lbound(array,4):,&
        gpufort_array7_lbound(array,5):,&
        gpufort_array7_lbound(array,6):,&
        gpufort_array7_lbound(array,7):)&
          => buffer
    end function
    function gpufort_array7_allocate_device_buffer_c_double_complex(&
        array,buffer) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array7),intent(in) :: array
      complex(c_double_complex),intent(inout),pointer,dimension(:,:,:,:,:,:,:) :: buffer 
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array7_allocate_device_buffer(&
        array,c_loc(buffer))
      buffer(&
        gpufort_array7_lbound(array,1):,&
        gpufort_array7_lbound(array,2):,&
        gpufort_array7_lbound(array,3):,&
        gpufort_array7_lbound(array,4):,&
        gpufort_array7_lbound(array,5):,&
        gpufort_array7_lbound(array,6):,&
        gpufort_array7_lbound(array,7):)&
          => buffer
    end function

    function gpufort_array1_deallocate_host_buffer_c_bool(&
        array,buffer,&
        pinned) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array1),intent(in) :: array
      logical(c_bool),intent(inout),pointer,dimension(:) :: buffer 
      logical(c_bool),value,optional,intent(in) :: pinned
      integer(kind(hipSuccess)) :: ierr
      !
      logical(c_bool) :: opt_pinned
      !
      opt_pinned = .true.
      if ( present(pinned) ) opt_pinned = pinned
      !
      ierr = gpufort_array1_deallocate_host_buffer(&
        array,c_loc(buffer),pinned)
    end function
    function gpufort_array1_deallocate_host_buffer_c_short(&
        array,buffer,&
        pinned) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array1),intent(in) :: array
      integer(c_short),intent(inout),pointer,dimension(:) :: buffer 
      logical(c_bool),value,optional,intent(in) :: pinned
      integer(kind(hipSuccess)) :: ierr
      !
      logical(c_bool) :: opt_pinned
      !
      opt_pinned = .true.
      if ( present(pinned) ) opt_pinned = pinned
      !
      ierr = gpufort_array1_deallocate_host_buffer(&
        array,c_loc(buffer),pinned)
    end function
    function gpufort_array1_deallocate_host_buffer_c_int(&
        array,buffer,&
        pinned) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array1),intent(in) :: array
      integer(c_int),intent(inout),pointer,dimension(:) :: buffer 
      logical(c_bool),value,optional,intent(in) :: pinned
      integer(kind(hipSuccess)) :: ierr
      !
      logical(c_bool) :: opt_pinned
      !
      opt_pinned = .true.
      if ( present(pinned) ) opt_pinned = pinned
      !
      ierr = gpufort_array1_deallocate_host_buffer(&
        array,c_loc(buffer),pinned)
    end function
    function gpufort_array1_deallocate_host_buffer_c_long(&
        array,buffer,&
        pinned) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array1),intent(in) :: array
      integer(c_long),intent(inout),pointer,dimension(:) :: buffer 
      logical(c_bool),value,optional,intent(in) :: pinned
      integer(kind(hipSuccess)) :: ierr
      !
      logical(c_bool) :: opt_pinned
      !
      opt_pinned = .true.
      if ( present(pinned) ) opt_pinned = pinned
      !
      ierr = gpufort_array1_deallocate_host_buffer(&
        array,c_loc(buffer),pinned)
    end function
    function gpufort_array1_deallocate_host_buffer_c_float(&
        array,buffer,&
        pinned) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array1),intent(in) :: array
      real(c_float),intent(inout),pointer,dimension(:) :: buffer 
      logical(c_bool),value,optional,intent(in) :: pinned
      integer(kind(hipSuccess)) :: ierr
      !
      logical(c_bool) :: opt_pinned
      !
      opt_pinned = .true.
      if ( present(pinned) ) opt_pinned = pinned
      !
      ierr = gpufort_array1_deallocate_host_buffer(&
        array,c_loc(buffer),pinned)
    end function
    function gpufort_array1_deallocate_host_buffer_c_double(&
        array,buffer,&
        pinned) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array1),intent(in) :: array
      real(c_double),intent(inout),pointer,dimension(:) :: buffer 
      logical(c_bool),value,optional,intent(in) :: pinned
      integer(kind(hipSuccess)) :: ierr
      !
      logical(c_bool) :: opt_pinned
      !
      opt_pinned = .true.
      if ( present(pinned) ) opt_pinned = pinned
      !
      ierr = gpufort_array1_deallocate_host_buffer(&
        array,c_loc(buffer),pinned)
    end function
    function gpufort_array1_deallocate_host_buffer_c_float_complex(&
        array,buffer,&
        pinned) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array1),intent(in) :: array
      complex(c_float_complex),intent(inout),pointer,dimension(:) :: buffer 
      logical(c_bool),value,optional,intent(in) :: pinned
      integer(kind(hipSuccess)) :: ierr
      !
      logical(c_bool) :: opt_pinned
      !
      opt_pinned = .true.
      if ( present(pinned) ) opt_pinned = pinned
      !
      ierr = gpufort_array1_deallocate_host_buffer(&
        array,c_loc(buffer),pinned)
    end function
    function gpufort_array1_deallocate_host_buffer_c_double_complex(&
        array,buffer,&
        pinned) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array1),intent(in) :: array
      complex(c_double_complex),intent(inout),pointer,dimension(:) :: buffer 
      logical(c_bool),value,optional,intent(in) :: pinned
      integer(kind(hipSuccess)) :: ierr
      !
      logical(c_bool) :: opt_pinned
      !
      opt_pinned = .true.
      if ( present(pinned) ) opt_pinned = pinned
      !
      ierr = gpufort_array1_deallocate_host_buffer(&
        array,c_loc(buffer),pinned)
    end function
    function gpufort_array2_deallocate_host_buffer_c_bool(&
        array,buffer,&
        pinned) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array2),intent(in) :: array
      logical(c_bool),intent(inout),pointer,dimension(:,:) :: buffer 
      logical(c_bool),value,optional,intent(in) :: pinned
      integer(kind(hipSuccess)) :: ierr
      !
      logical(c_bool) :: opt_pinned
      !
      opt_pinned = .true.
      if ( present(pinned) ) opt_pinned = pinned
      !
      ierr = gpufort_array2_deallocate_host_buffer(&
        array,c_loc(buffer),pinned)
    end function
    function gpufort_array2_deallocate_host_buffer_c_short(&
        array,buffer,&
        pinned) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array2),intent(in) :: array
      integer(c_short),intent(inout),pointer,dimension(:,:) :: buffer 
      logical(c_bool),value,optional,intent(in) :: pinned
      integer(kind(hipSuccess)) :: ierr
      !
      logical(c_bool) :: opt_pinned
      !
      opt_pinned = .true.
      if ( present(pinned) ) opt_pinned = pinned
      !
      ierr = gpufort_array2_deallocate_host_buffer(&
        array,c_loc(buffer),pinned)
    end function
    function gpufort_array2_deallocate_host_buffer_c_int(&
        array,buffer,&
        pinned) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array2),intent(in) :: array
      integer(c_int),intent(inout),pointer,dimension(:,:) :: buffer 
      logical(c_bool),value,optional,intent(in) :: pinned
      integer(kind(hipSuccess)) :: ierr
      !
      logical(c_bool) :: opt_pinned
      !
      opt_pinned = .true.
      if ( present(pinned) ) opt_pinned = pinned
      !
      ierr = gpufort_array2_deallocate_host_buffer(&
        array,c_loc(buffer),pinned)
    end function
    function gpufort_array2_deallocate_host_buffer_c_long(&
        array,buffer,&
        pinned) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array2),intent(in) :: array
      integer(c_long),intent(inout),pointer,dimension(:,:) :: buffer 
      logical(c_bool),value,optional,intent(in) :: pinned
      integer(kind(hipSuccess)) :: ierr
      !
      logical(c_bool) :: opt_pinned
      !
      opt_pinned = .true.
      if ( present(pinned) ) opt_pinned = pinned
      !
      ierr = gpufort_array2_deallocate_host_buffer(&
        array,c_loc(buffer),pinned)
    end function
    function gpufort_array2_deallocate_host_buffer_c_float(&
        array,buffer,&
        pinned) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array2),intent(in) :: array
      real(c_float),intent(inout),pointer,dimension(:,:) :: buffer 
      logical(c_bool),value,optional,intent(in) :: pinned
      integer(kind(hipSuccess)) :: ierr
      !
      logical(c_bool) :: opt_pinned
      !
      opt_pinned = .true.
      if ( present(pinned) ) opt_pinned = pinned
      !
      ierr = gpufort_array2_deallocate_host_buffer(&
        array,c_loc(buffer),pinned)
    end function
    function gpufort_array2_deallocate_host_buffer_c_double(&
        array,buffer,&
        pinned) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array2),intent(in) :: array
      real(c_double),intent(inout),pointer,dimension(:,:) :: buffer 
      logical(c_bool),value,optional,intent(in) :: pinned
      integer(kind(hipSuccess)) :: ierr
      !
      logical(c_bool) :: opt_pinned
      !
      opt_pinned = .true.
      if ( present(pinned) ) opt_pinned = pinned
      !
      ierr = gpufort_array2_deallocate_host_buffer(&
        array,c_loc(buffer),pinned)
    end function
    function gpufort_array2_deallocate_host_buffer_c_float_complex(&
        array,buffer,&
        pinned) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array2),intent(in) :: array
      complex(c_float_complex),intent(inout),pointer,dimension(:,:) :: buffer 
      logical(c_bool),value,optional,intent(in) :: pinned
      integer(kind(hipSuccess)) :: ierr
      !
      logical(c_bool) :: opt_pinned
      !
      opt_pinned = .true.
      if ( present(pinned) ) opt_pinned = pinned
      !
      ierr = gpufort_array2_deallocate_host_buffer(&
        array,c_loc(buffer),pinned)
    end function
    function gpufort_array2_deallocate_host_buffer_c_double_complex(&
        array,buffer,&
        pinned) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array2),intent(in) :: array
      complex(c_double_complex),intent(inout),pointer,dimension(:,:) :: buffer 
      logical(c_bool),value,optional,intent(in) :: pinned
      integer(kind(hipSuccess)) :: ierr
      !
      logical(c_bool) :: opt_pinned
      !
      opt_pinned = .true.
      if ( present(pinned) ) opt_pinned = pinned
      !
      ierr = gpufort_array2_deallocate_host_buffer(&
        array,c_loc(buffer),pinned)
    end function
    function gpufort_array3_deallocate_host_buffer_c_bool(&
        array,buffer,&
        pinned) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array3),intent(in) :: array
      logical(c_bool),intent(inout),pointer,dimension(:,:,:) :: buffer 
      logical(c_bool),value,optional,intent(in) :: pinned
      integer(kind(hipSuccess)) :: ierr
      !
      logical(c_bool) :: opt_pinned
      !
      opt_pinned = .true.
      if ( present(pinned) ) opt_pinned = pinned
      !
      ierr = gpufort_array3_deallocate_host_buffer(&
        array,c_loc(buffer),pinned)
    end function
    function gpufort_array3_deallocate_host_buffer_c_short(&
        array,buffer,&
        pinned) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array3),intent(in) :: array
      integer(c_short),intent(inout),pointer,dimension(:,:,:) :: buffer 
      logical(c_bool),value,optional,intent(in) :: pinned
      integer(kind(hipSuccess)) :: ierr
      !
      logical(c_bool) :: opt_pinned
      !
      opt_pinned = .true.
      if ( present(pinned) ) opt_pinned = pinned
      !
      ierr = gpufort_array3_deallocate_host_buffer(&
        array,c_loc(buffer),pinned)
    end function
    function gpufort_array3_deallocate_host_buffer_c_int(&
        array,buffer,&
        pinned) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array3),intent(in) :: array
      integer(c_int),intent(inout),pointer,dimension(:,:,:) :: buffer 
      logical(c_bool),value,optional,intent(in) :: pinned
      integer(kind(hipSuccess)) :: ierr
      !
      logical(c_bool) :: opt_pinned
      !
      opt_pinned = .true.
      if ( present(pinned) ) opt_pinned = pinned
      !
      ierr = gpufort_array3_deallocate_host_buffer(&
        array,c_loc(buffer),pinned)
    end function
    function gpufort_array3_deallocate_host_buffer_c_long(&
        array,buffer,&
        pinned) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array3),intent(in) :: array
      integer(c_long),intent(inout),pointer,dimension(:,:,:) :: buffer 
      logical(c_bool),value,optional,intent(in) :: pinned
      integer(kind(hipSuccess)) :: ierr
      !
      logical(c_bool) :: opt_pinned
      !
      opt_pinned = .true.
      if ( present(pinned) ) opt_pinned = pinned
      !
      ierr = gpufort_array3_deallocate_host_buffer(&
        array,c_loc(buffer),pinned)
    end function
    function gpufort_array3_deallocate_host_buffer_c_float(&
        array,buffer,&
        pinned) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array3),intent(in) :: array
      real(c_float),intent(inout),pointer,dimension(:,:,:) :: buffer 
      logical(c_bool),value,optional,intent(in) :: pinned
      integer(kind(hipSuccess)) :: ierr
      !
      logical(c_bool) :: opt_pinned
      !
      opt_pinned = .true.
      if ( present(pinned) ) opt_pinned = pinned
      !
      ierr = gpufort_array3_deallocate_host_buffer(&
        array,c_loc(buffer),pinned)
    end function
    function gpufort_array3_deallocate_host_buffer_c_double(&
        array,buffer,&
        pinned) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array3),intent(in) :: array
      real(c_double),intent(inout),pointer,dimension(:,:,:) :: buffer 
      logical(c_bool),value,optional,intent(in) :: pinned
      integer(kind(hipSuccess)) :: ierr
      !
      logical(c_bool) :: opt_pinned
      !
      opt_pinned = .true.
      if ( present(pinned) ) opt_pinned = pinned
      !
      ierr = gpufort_array3_deallocate_host_buffer(&
        array,c_loc(buffer),pinned)
    end function
    function gpufort_array3_deallocate_host_buffer_c_float_complex(&
        array,buffer,&
        pinned) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array3),intent(in) :: array
      complex(c_float_complex),intent(inout),pointer,dimension(:,:,:) :: buffer 
      logical(c_bool),value,optional,intent(in) :: pinned
      integer(kind(hipSuccess)) :: ierr
      !
      logical(c_bool) :: opt_pinned
      !
      opt_pinned = .true.
      if ( present(pinned) ) opt_pinned = pinned
      !
      ierr = gpufort_array3_deallocate_host_buffer(&
        array,c_loc(buffer),pinned)
    end function
    function gpufort_array3_deallocate_host_buffer_c_double_complex(&
        array,buffer,&
        pinned) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array3),intent(in) :: array
      complex(c_double_complex),intent(inout),pointer,dimension(:,:,:) :: buffer 
      logical(c_bool),value,optional,intent(in) :: pinned
      integer(kind(hipSuccess)) :: ierr
      !
      logical(c_bool) :: opt_pinned
      !
      opt_pinned = .true.
      if ( present(pinned) ) opt_pinned = pinned
      !
      ierr = gpufort_array3_deallocate_host_buffer(&
        array,c_loc(buffer),pinned)
    end function
    function gpufort_array4_deallocate_host_buffer_c_bool(&
        array,buffer,&
        pinned) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array4),intent(in) :: array
      logical(c_bool),intent(inout),pointer,dimension(:,:,:,:) :: buffer 
      logical(c_bool),value,optional,intent(in) :: pinned
      integer(kind(hipSuccess)) :: ierr
      !
      logical(c_bool) :: opt_pinned
      !
      opt_pinned = .true.
      if ( present(pinned) ) opt_pinned = pinned
      !
      ierr = gpufort_array4_deallocate_host_buffer(&
        array,c_loc(buffer),pinned)
    end function
    function gpufort_array4_deallocate_host_buffer_c_short(&
        array,buffer,&
        pinned) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array4),intent(in) :: array
      integer(c_short),intent(inout),pointer,dimension(:,:,:,:) :: buffer 
      logical(c_bool),value,optional,intent(in) :: pinned
      integer(kind(hipSuccess)) :: ierr
      !
      logical(c_bool) :: opt_pinned
      !
      opt_pinned = .true.
      if ( present(pinned) ) opt_pinned = pinned
      !
      ierr = gpufort_array4_deallocate_host_buffer(&
        array,c_loc(buffer),pinned)
    end function
    function gpufort_array4_deallocate_host_buffer_c_int(&
        array,buffer,&
        pinned) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array4),intent(in) :: array
      integer(c_int),intent(inout),pointer,dimension(:,:,:,:) :: buffer 
      logical(c_bool),value,optional,intent(in) :: pinned
      integer(kind(hipSuccess)) :: ierr
      !
      logical(c_bool) :: opt_pinned
      !
      opt_pinned = .true.
      if ( present(pinned) ) opt_pinned = pinned
      !
      ierr = gpufort_array4_deallocate_host_buffer(&
        array,c_loc(buffer),pinned)
    end function
    function gpufort_array4_deallocate_host_buffer_c_long(&
        array,buffer,&
        pinned) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array4),intent(in) :: array
      integer(c_long),intent(inout),pointer,dimension(:,:,:,:) :: buffer 
      logical(c_bool),value,optional,intent(in) :: pinned
      integer(kind(hipSuccess)) :: ierr
      !
      logical(c_bool) :: opt_pinned
      !
      opt_pinned = .true.
      if ( present(pinned) ) opt_pinned = pinned
      !
      ierr = gpufort_array4_deallocate_host_buffer(&
        array,c_loc(buffer),pinned)
    end function
    function gpufort_array4_deallocate_host_buffer_c_float(&
        array,buffer,&
        pinned) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array4),intent(in) :: array
      real(c_float),intent(inout),pointer,dimension(:,:,:,:) :: buffer 
      logical(c_bool),value,optional,intent(in) :: pinned
      integer(kind(hipSuccess)) :: ierr
      !
      logical(c_bool) :: opt_pinned
      !
      opt_pinned = .true.
      if ( present(pinned) ) opt_pinned = pinned
      !
      ierr = gpufort_array4_deallocate_host_buffer(&
        array,c_loc(buffer),pinned)
    end function
    function gpufort_array4_deallocate_host_buffer_c_double(&
        array,buffer,&
        pinned) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array4),intent(in) :: array
      real(c_double),intent(inout),pointer,dimension(:,:,:,:) :: buffer 
      logical(c_bool),value,optional,intent(in) :: pinned
      integer(kind(hipSuccess)) :: ierr
      !
      logical(c_bool) :: opt_pinned
      !
      opt_pinned = .true.
      if ( present(pinned) ) opt_pinned = pinned
      !
      ierr = gpufort_array4_deallocate_host_buffer(&
        array,c_loc(buffer),pinned)
    end function
    function gpufort_array4_deallocate_host_buffer_c_float_complex(&
        array,buffer,&
        pinned) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array4),intent(in) :: array
      complex(c_float_complex),intent(inout),pointer,dimension(:,:,:,:) :: buffer 
      logical(c_bool),value,optional,intent(in) :: pinned
      integer(kind(hipSuccess)) :: ierr
      !
      logical(c_bool) :: opt_pinned
      !
      opt_pinned = .true.
      if ( present(pinned) ) opt_pinned = pinned
      !
      ierr = gpufort_array4_deallocate_host_buffer(&
        array,c_loc(buffer),pinned)
    end function
    function gpufort_array4_deallocate_host_buffer_c_double_complex(&
        array,buffer,&
        pinned) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array4),intent(in) :: array
      complex(c_double_complex),intent(inout),pointer,dimension(:,:,:,:) :: buffer 
      logical(c_bool),value,optional,intent(in) :: pinned
      integer(kind(hipSuccess)) :: ierr
      !
      logical(c_bool) :: opt_pinned
      !
      opt_pinned = .true.
      if ( present(pinned) ) opt_pinned = pinned
      !
      ierr = gpufort_array4_deallocate_host_buffer(&
        array,c_loc(buffer),pinned)
    end function
    function gpufort_array5_deallocate_host_buffer_c_bool(&
        array,buffer,&
        pinned) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array5),intent(in) :: array
      logical(c_bool),intent(inout),pointer,dimension(:,:,:,:,:) :: buffer 
      logical(c_bool),value,optional,intent(in) :: pinned
      integer(kind(hipSuccess)) :: ierr
      !
      logical(c_bool) :: opt_pinned
      !
      opt_pinned = .true.
      if ( present(pinned) ) opt_pinned = pinned
      !
      ierr = gpufort_array5_deallocate_host_buffer(&
        array,c_loc(buffer),pinned)
    end function
    function gpufort_array5_deallocate_host_buffer_c_short(&
        array,buffer,&
        pinned) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array5),intent(in) :: array
      integer(c_short),intent(inout),pointer,dimension(:,:,:,:,:) :: buffer 
      logical(c_bool),value,optional,intent(in) :: pinned
      integer(kind(hipSuccess)) :: ierr
      !
      logical(c_bool) :: opt_pinned
      !
      opt_pinned = .true.
      if ( present(pinned) ) opt_pinned = pinned
      !
      ierr = gpufort_array5_deallocate_host_buffer(&
        array,c_loc(buffer),pinned)
    end function
    function gpufort_array5_deallocate_host_buffer_c_int(&
        array,buffer,&
        pinned) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array5),intent(in) :: array
      integer(c_int),intent(inout),pointer,dimension(:,:,:,:,:) :: buffer 
      logical(c_bool),value,optional,intent(in) :: pinned
      integer(kind(hipSuccess)) :: ierr
      !
      logical(c_bool) :: opt_pinned
      !
      opt_pinned = .true.
      if ( present(pinned) ) opt_pinned = pinned
      !
      ierr = gpufort_array5_deallocate_host_buffer(&
        array,c_loc(buffer),pinned)
    end function
    function gpufort_array5_deallocate_host_buffer_c_long(&
        array,buffer,&
        pinned) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array5),intent(in) :: array
      integer(c_long),intent(inout),pointer,dimension(:,:,:,:,:) :: buffer 
      logical(c_bool),value,optional,intent(in) :: pinned
      integer(kind(hipSuccess)) :: ierr
      !
      logical(c_bool) :: opt_pinned
      !
      opt_pinned = .true.
      if ( present(pinned) ) opt_pinned = pinned
      !
      ierr = gpufort_array5_deallocate_host_buffer(&
        array,c_loc(buffer),pinned)
    end function
    function gpufort_array5_deallocate_host_buffer_c_float(&
        array,buffer,&
        pinned) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array5),intent(in) :: array
      real(c_float),intent(inout),pointer,dimension(:,:,:,:,:) :: buffer 
      logical(c_bool),value,optional,intent(in) :: pinned
      integer(kind(hipSuccess)) :: ierr
      !
      logical(c_bool) :: opt_pinned
      !
      opt_pinned = .true.
      if ( present(pinned) ) opt_pinned = pinned
      !
      ierr = gpufort_array5_deallocate_host_buffer(&
        array,c_loc(buffer),pinned)
    end function
    function gpufort_array5_deallocate_host_buffer_c_double(&
        array,buffer,&
        pinned) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array5),intent(in) :: array
      real(c_double),intent(inout),pointer,dimension(:,:,:,:,:) :: buffer 
      logical(c_bool),value,optional,intent(in) :: pinned
      integer(kind(hipSuccess)) :: ierr
      !
      logical(c_bool) :: opt_pinned
      !
      opt_pinned = .true.
      if ( present(pinned) ) opt_pinned = pinned
      !
      ierr = gpufort_array5_deallocate_host_buffer(&
        array,c_loc(buffer),pinned)
    end function
    function gpufort_array5_deallocate_host_buffer_c_float_complex(&
        array,buffer,&
        pinned) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array5),intent(in) :: array
      complex(c_float_complex),intent(inout),pointer,dimension(:,:,:,:,:) :: buffer 
      logical(c_bool),value,optional,intent(in) :: pinned
      integer(kind(hipSuccess)) :: ierr
      !
      logical(c_bool) :: opt_pinned
      !
      opt_pinned = .true.
      if ( present(pinned) ) opt_pinned = pinned
      !
      ierr = gpufort_array5_deallocate_host_buffer(&
        array,c_loc(buffer),pinned)
    end function
    function gpufort_array5_deallocate_host_buffer_c_double_complex(&
        array,buffer,&
        pinned) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array5),intent(in) :: array
      complex(c_double_complex),intent(inout),pointer,dimension(:,:,:,:,:) :: buffer 
      logical(c_bool),value,optional,intent(in) :: pinned
      integer(kind(hipSuccess)) :: ierr
      !
      logical(c_bool) :: opt_pinned
      !
      opt_pinned = .true.
      if ( present(pinned) ) opt_pinned = pinned
      !
      ierr = gpufort_array5_deallocate_host_buffer(&
        array,c_loc(buffer),pinned)
    end function
    function gpufort_array6_deallocate_host_buffer_c_bool(&
        array,buffer,&
        pinned) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array6),intent(in) :: array
      logical(c_bool),intent(inout),pointer,dimension(:,:,:,:,:,:) :: buffer 
      logical(c_bool),value,optional,intent(in) :: pinned
      integer(kind(hipSuccess)) :: ierr
      !
      logical(c_bool) :: opt_pinned
      !
      opt_pinned = .true.
      if ( present(pinned) ) opt_pinned = pinned
      !
      ierr = gpufort_array6_deallocate_host_buffer(&
        array,c_loc(buffer),pinned)
    end function
    function gpufort_array6_deallocate_host_buffer_c_short(&
        array,buffer,&
        pinned) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array6),intent(in) :: array
      integer(c_short),intent(inout),pointer,dimension(:,:,:,:,:,:) :: buffer 
      logical(c_bool),value,optional,intent(in) :: pinned
      integer(kind(hipSuccess)) :: ierr
      !
      logical(c_bool) :: opt_pinned
      !
      opt_pinned = .true.
      if ( present(pinned) ) opt_pinned = pinned
      !
      ierr = gpufort_array6_deallocate_host_buffer(&
        array,c_loc(buffer),pinned)
    end function
    function gpufort_array6_deallocate_host_buffer_c_int(&
        array,buffer,&
        pinned) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array6),intent(in) :: array
      integer(c_int),intent(inout),pointer,dimension(:,:,:,:,:,:) :: buffer 
      logical(c_bool),value,optional,intent(in) :: pinned
      integer(kind(hipSuccess)) :: ierr
      !
      logical(c_bool) :: opt_pinned
      !
      opt_pinned = .true.
      if ( present(pinned) ) opt_pinned = pinned
      !
      ierr = gpufort_array6_deallocate_host_buffer(&
        array,c_loc(buffer),pinned)
    end function
    function gpufort_array6_deallocate_host_buffer_c_long(&
        array,buffer,&
        pinned) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array6),intent(in) :: array
      integer(c_long),intent(inout),pointer,dimension(:,:,:,:,:,:) :: buffer 
      logical(c_bool),value,optional,intent(in) :: pinned
      integer(kind(hipSuccess)) :: ierr
      !
      logical(c_bool) :: opt_pinned
      !
      opt_pinned = .true.
      if ( present(pinned) ) opt_pinned = pinned
      !
      ierr = gpufort_array6_deallocate_host_buffer(&
        array,c_loc(buffer),pinned)
    end function
    function gpufort_array6_deallocate_host_buffer_c_float(&
        array,buffer,&
        pinned) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array6),intent(in) :: array
      real(c_float),intent(inout),pointer,dimension(:,:,:,:,:,:) :: buffer 
      logical(c_bool),value,optional,intent(in) :: pinned
      integer(kind(hipSuccess)) :: ierr
      !
      logical(c_bool) :: opt_pinned
      !
      opt_pinned = .true.
      if ( present(pinned) ) opt_pinned = pinned
      !
      ierr = gpufort_array6_deallocate_host_buffer(&
        array,c_loc(buffer),pinned)
    end function
    function gpufort_array6_deallocate_host_buffer_c_double(&
        array,buffer,&
        pinned) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array6),intent(in) :: array
      real(c_double),intent(inout),pointer,dimension(:,:,:,:,:,:) :: buffer 
      logical(c_bool),value,optional,intent(in) :: pinned
      integer(kind(hipSuccess)) :: ierr
      !
      logical(c_bool) :: opt_pinned
      !
      opt_pinned = .true.
      if ( present(pinned) ) opt_pinned = pinned
      !
      ierr = gpufort_array6_deallocate_host_buffer(&
        array,c_loc(buffer),pinned)
    end function
    function gpufort_array6_deallocate_host_buffer_c_float_complex(&
        array,buffer,&
        pinned) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array6),intent(in) :: array
      complex(c_float_complex),intent(inout),pointer,dimension(:,:,:,:,:,:) :: buffer 
      logical(c_bool),value,optional,intent(in) :: pinned
      integer(kind(hipSuccess)) :: ierr
      !
      logical(c_bool) :: opt_pinned
      !
      opt_pinned = .true.
      if ( present(pinned) ) opt_pinned = pinned
      !
      ierr = gpufort_array6_deallocate_host_buffer(&
        array,c_loc(buffer),pinned)
    end function
    function gpufort_array6_deallocate_host_buffer_c_double_complex(&
        array,buffer,&
        pinned) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array6),intent(in) :: array
      complex(c_double_complex),intent(inout),pointer,dimension(:,:,:,:,:,:) :: buffer 
      logical(c_bool),value,optional,intent(in) :: pinned
      integer(kind(hipSuccess)) :: ierr
      !
      logical(c_bool) :: opt_pinned
      !
      opt_pinned = .true.
      if ( present(pinned) ) opt_pinned = pinned
      !
      ierr = gpufort_array6_deallocate_host_buffer(&
        array,c_loc(buffer),pinned)
    end function
    function gpufort_array7_deallocate_host_buffer_c_bool(&
        array,buffer,&
        pinned) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array7),intent(in) :: array
      logical(c_bool),intent(inout),pointer,dimension(:,:,:,:,:,:,:) :: buffer 
      logical(c_bool),value,optional,intent(in) :: pinned
      integer(kind(hipSuccess)) :: ierr
      !
      logical(c_bool) :: opt_pinned
      !
      opt_pinned = .true.
      if ( present(pinned) ) opt_pinned = pinned
      !
      ierr = gpufort_array7_deallocate_host_buffer(&
        array,c_loc(buffer),pinned)
    end function
    function gpufort_array7_deallocate_host_buffer_c_short(&
        array,buffer,&
        pinned) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array7),intent(in) :: array
      integer(c_short),intent(inout),pointer,dimension(:,:,:,:,:,:,:) :: buffer 
      logical(c_bool),value,optional,intent(in) :: pinned
      integer(kind(hipSuccess)) :: ierr
      !
      logical(c_bool) :: opt_pinned
      !
      opt_pinned = .true.
      if ( present(pinned) ) opt_pinned = pinned
      !
      ierr = gpufort_array7_deallocate_host_buffer(&
        array,c_loc(buffer),pinned)
    end function
    function gpufort_array7_deallocate_host_buffer_c_int(&
        array,buffer,&
        pinned) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array7),intent(in) :: array
      integer(c_int),intent(inout),pointer,dimension(:,:,:,:,:,:,:) :: buffer 
      logical(c_bool),value,optional,intent(in) :: pinned
      integer(kind(hipSuccess)) :: ierr
      !
      logical(c_bool) :: opt_pinned
      !
      opt_pinned = .true.
      if ( present(pinned) ) opt_pinned = pinned
      !
      ierr = gpufort_array7_deallocate_host_buffer(&
        array,c_loc(buffer),pinned)
    end function
    function gpufort_array7_deallocate_host_buffer_c_long(&
        array,buffer,&
        pinned) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array7),intent(in) :: array
      integer(c_long),intent(inout),pointer,dimension(:,:,:,:,:,:,:) :: buffer 
      logical(c_bool),value,optional,intent(in) :: pinned
      integer(kind(hipSuccess)) :: ierr
      !
      logical(c_bool) :: opt_pinned
      !
      opt_pinned = .true.
      if ( present(pinned) ) opt_pinned = pinned
      !
      ierr = gpufort_array7_deallocate_host_buffer(&
        array,c_loc(buffer),pinned)
    end function
    function gpufort_array7_deallocate_host_buffer_c_float(&
        array,buffer,&
        pinned) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array7),intent(in) :: array
      real(c_float),intent(inout),pointer,dimension(:,:,:,:,:,:,:) :: buffer 
      logical(c_bool),value,optional,intent(in) :: pinned
      integer(kind(hipSuccess)) :: ierr
      !
      logical(c_bool) :: opt_pinned
      !
      opt_pinned = .true.
      if ( present(pinned) ) opt_pinned = pinned
      !
      ierr = gpufort_array7_deallocate_host_buffer(&
        array,c_loc(buffer),pinned)
    end function
    function gpufort_array7_deallocate_host_buffer_c_double(&
        array,buffer,&
        pinned) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array7),intent(in) :: array
      real(c_double),intent(inout),pointer,dimension(:,:,:,:,:,:,:) :: buffer 
      logical(c_bool),value,optional,intent(in) :: pinned
      integer(kind(hipSuccess)) :: ierr
      !
      logical(c_bool) :: opt_pinned
      !
      opt_pinned = .true.
      if ( present(pinned) ) opt_pinned = pinned
      !
      ierr = gpufort_array7_deallocate_host_buffer(&
        array,c_loc(buffer),pinned)
    end function
    function gpufort_array7_deallocate_host_buffer_c_float_complex(&
        array,buffer,&
        pinned) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array7),intent(in) :: array
      complex(c_float_complex),intent(inout),pointer,dimension(:,:,:,:,:,:,:) :: buffer 
      logical(c_bool),value,optional,intent(in) :: pinned
      integer(kind(hipSuccess)) :: ierr
      !
      logical(c_bool) :: opt_pinned
      !
      opt_pinned = .true.
      if ( present(pinned) ) opt_pinned = pinned
      !
      ierr = gpufort_array7_deallocate_host_buffer(&
        array,c_loc(buffer),pinned)
    end function
    function gpufort_array7_deallocate_host_buffer_c_double_complex(&
        array,buffer,&
        pinned) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array7),intent(in) :: array
      complex(c_double_complex),intent(inout),pointer,dimension(:,:,:,:,:,:,:) :: buffer 
      logical(c_bool),value,optional,intent(in) :: pinned
      integer(kind(hipSuccess)) :: ierr
      !
      logical(c_bool) :: opt_pinned
      !
      opt_pinned = .true.
      if ( present(pinned) ) opt_pinned = pinned
      !
      ierr = gpufort_array7_deallocate_host_buffer(&
        array,c_loc(buffer),pinned)
    end function
    function gpufort_array1_deallocate_device_buffer_c_bool(&
        array,buffer) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array1),intent(in) :: array
      logical(c_bool),intent(inout),pointer,dimension(:) :: buffer 
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array1_deallocate_device_buffer(&
        array,c_loc(buffer))
    end function
    function gpufort_array1_deallocate_device_buffer_c_short(&
        array,buffer) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array1),intent(in) :: array
      integer(c_short),intent(inout),pointer,dimension(:) :: buffer 
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array1_deallocate_device_buffer(&
        array,c_loc(buffer))
    end function
    function gpufort_array1_deallocate_device_buffer_c_int(&
        array,buffer) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array1),intent(in) :: array
      integer(c_int),intent(inout),pointer,dimension(:) :: buffer 
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array1_deallocate_device_buffer(&
        array,c_loc(buffer))
    end function
    function gpufort_array1_deallocate_device_buffer_c_long(&
        array,buffer) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array1),intent(in) :: array
      integer(c_long),intent(inout),pointer,dimension(:) :: buffer 
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array1_deallocate_device_buffer(&
        array,c_loc(buffer))
    end function
    function gpufort_array1_deallocate_device_buffer_c_float(&
        array,buffer) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array1),intent(in) :: array
      real(c_float),intent(inout),pointer,dimension(:) :: buffer 
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array1_deallocate_device_buffer(&
        array,c_loc(buffer))
    end function
    function gpufort_array1_deallocate_device_buffer_c_double(&
        array,buffer) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array1),intent(in) :: array
      real(c_double),intent(inout),pointer,dimension(:) :: buffer 
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array1_deallocate_device_buffer(&
        array,c_loc(buffer))
    end function
    function gpufort_array1_deallocate_device_buffer_c_float_complex(&
        array,buffer) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array1),intent(in) :: array
      complex(c_float_complex),intent(inout),pointer,dimension(:) :: buffer 
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array1_deallocate_device_buffer(&
        array,c_loc(buffer))
    end function
    function gpufort_array1_deallocate_device_buffer_c_double_complex(&
        array,buffer) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array1),intent(in) :: array
      complex(c_double_complex),intent(inout),pointer,dimension(:) :: buffer 
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array1_deallocate_device_buffer(&
        array,c_loc(buffer))
    end function
    function gpufort_array2_deallocate_device_buffer_c_bool(&
        array,buffer) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array2),intent(in) :: array
      logical(c_bool),intent(inout),pointer,dimension(:,:) :: buffer 
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array2_deallocate_device_buffer(&
        array,c_loc(buffer))
    end function
    function gpufort_array2_deallocate_device_buffer_c_short(&
        array,buffer) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array2),intent(in) :: array
      integer(c_short),intent(inout),pointer,dimension(:,:) :: buffer 
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array2_deallocate_device_buffer(&
        array,c_loc(buffer))
    end function
    function gpufort_array2_deallocate_device_buffer_c_int(&
        array,buffer) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array2),intent(in) :: array
      integer(c_int),intent(inout),pointer,dimension(:,:) :: buffer 
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array2_deallocate_device_buffer(&
        array,c_loc(buffer))
    end function
    function gpufort_array2_deallocate_device_buffer_c_long(&
        array,buffer) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array2),intent(in) :: array
      integer(c_long),intent(inout),pointer,dimension(:,:) :: buffer 
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array2_deallocate_device_buffer(&
        array,c_loc(buffer))
    end function
    function gpufort_array2_deallocate_device_buffer_c_float(&
        array,buffer) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array2),intent(in) :: array
      real(c_float),intent(inout),pointer,dimension(:,:) :: buffer 
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array2_deallocate_device_buffer(&
        array,c_loc(buffer))
    end function
    function gpufort_array2_deallocate_device_buffer_c_double(&
        array,buffer) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array2),intent(in) :: array
      real(c_double),intent(inout),pointer,dimension(:,:) :: buffer 
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array2_deallocate_device_buffer(&
        array,c_loc(buffer))
    end function
    function gpufort_array2_deallocate_device_buffer_c_float_complex(&
        array,buffer) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array2),intent(in) :: array
      complex(c_float_complex),intent(inout),pointer,dimension(:,:) :: buffer 
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array2_deallocate_device_buffer(&
        array,c_loc(buffer))
    end function
    function gpufort_array2_deallocate_device_buffer_c_double_complex(&
        array,buffer) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array2),intent(in) :: array
      complex(c_double_complex),intent(inout),pointer,dimension(:,:) :: buffer 
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array2_deallocate_device_buffer(&
        array,c_loc(buffer))
    end function
    function gpufort_array3_deallocate_device_buffer_c_bool(&
        array,buffer) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array3),intent(in) :: array
      logical(c_bool),intent(inout),pointer,dimension(:,:,:) :: buffer 
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array3_deallocate_device_buffer(&
        array,c_loc(buffer))
    end function
    function gpufort_array3_deallocate_device_buffer_c_short(&
        array,buffer) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array3),intent(in) :: array
      integer(c_short),intent(inout),pointer,dimension(:,:,:) :: buffer 
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array3_deallocate_device_buffer(&
        array,c_loc(buffer))
    end function
    function gpufort_array3_deallocate_device_buffer_c_int(&
        array,buffer) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array3),intent(in) :: array
      integer(c_int),intent(inout),pointer,dimension(:,:,:) :: buffer 
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array3_deallocate_device_buffer(&
        array,c_loc(buffer))
    end function
    function gpufort_array3_deallocate_device_buffer_c_long(&
        array,buffer) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array3),intent(in) :: array
      integer(c_long),intent(inout),pointer,dimension(:,:,:) :: buffer 
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array3_deallocate_device_buffer(&
        array,c_loc(buffer))
    end function
    function gpufort_array3_deallocate_device_buffer_c_float(&
        array,buffer) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array3),intent(in) :: array
      real(c_float),intent(inout),pointer,dimension(:,:,:) :: buffer 
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array3_deallocate_device_buffer(&
        array,c_loc(buffer))
    end function
    function gpufort_array3_deallocate_device_buffer_c_double(&
        array,buffer) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array3),intent(in) :: array
      real(c_double),intent(inout),pointer,dimension(:,:,:) :: buffer 
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array3_deallocate_device_buffer(&
        array,c_loc(buffer))
    end function
    function gpufort_array3_deallocate_device_buffer_c_float_complex(&
        array,buffer) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array3),intent(in) :: array
      complex(c_float_complex),intent(inout),pointer,dimension(:,:,:) :: buffer 
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array3_deallocate_device_buffer(&
        array,c_loc(buffer))
    end function
    function gpufort_array3_deallocate_device_buffer_c_double_complex(&
        array,buffer) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array3),intent(in) :: array
      complex(c_double_complex),intent(inout),pointer,dimension(:,:,:) :: buffer 
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array3_deallocate_device_buffer(&
        array,c_loc(buffer))
    end function
    function gpufort_array4_deallocate_device_buffer_c_bool(&
        array,buffer) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array4),intent(in) :: array
      logical(c_bool),intent(inout),pointer,dimension(:,:,:,:) :: buffer 
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array4_deallocate_device_buffer(&
        array,c_loc(buffer))
    end function
    function gpufort_array4_deallocate_device_buffer_c_short(&
        array,buffer) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array4),intent(in) :: array
      integer(c_short),intent(inout),pointer,dimension(:,:,:,:) :: buffer 
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array4_deallocate_device_buffer(&
        array,c_loc(buffer))
    end function
    function gpufort_array4_deallocate_device_buffer_c_int(&
        array,buffer) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array4),intent(in) :: array
      integer(c_int),intent(inout),pointer,dimension(:,:,:,:) :: buffer 
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array4_deallocate_device_buffer(&
        array,c_loc(buffer))
    end function
    function gpufort_array4_deallocate_device_buffer_c_long(&
        array,buffer) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array4),intent(in) :: array
      integer(c_long),intent(inout),pointer,dimension(:,:,:,:) :: buffer 
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array4_deallocate_device_buffer(&
        array,c_loc(buffer))
    end function
    function gpufort_array4_deallocate_device_buffer_c_float(&
        array,buffer) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array4),intent(in) :: array
      real(c_float),intent(inout),pointer,dimension(:,:,:,:) :: buffer 
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array4_deallocate_device_buffer(&
        array,c_loc(buffer))
    end function
    function gpufort_array4_deallocate_device_buffer_c_double(&
        array,buffer) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array4),intent(in) :: array
      real(c_double),intent(inout),pointer,dimension(:,:,:,:) :: buffer 
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array4_deallocate_device_buffer(&
        array,c_loc(buffer))
    end function
    function gpufort_array4_deallocate_device_buffer_c_float_complex(&
        array,buffer) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array4),intent(in) :: array
      complex(c_float_complex),intent(inout),pointer,dimension(:,:,:,:) :: buffer 
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array4_deallocate_device_buffer(&
        array,c_loc(buffer))
    end function
    function gpufort_array4_deallocate_device_buffer_c_double_complex(&
        array,buffer) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array4),intent(in) :: array
      complex(c_double_complex),intent(inout),pointer,dimension(:,:,:,:) :: buffer 
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array4_deallocate_device_buffer(&
        array,c_loc(buffer))
    end function
    function gpufort_array5_deallocate_device_buffer_c_bool(&
        array,buffer) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array5),intent(in) :: array
      logical(c_bool),intent(inout),pointer,dimension(:,:,:,:,:) :: buffer 
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array5_deallocate_device_buffer(&
        array,c_loc(buffer))
    end function
    function gpufort_array5_deallocate_device_buffer_c_short(&
        array,buffer) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array5),intent(in) :: array
      integer(c_short),intent(inout),pointer,dimension(:,:,:,:,:) :: buffer 
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array5_deallocate_device_buffer(&
        array,c_loc(buffer))
    end function
    function gpufort_array5_deallocate_device_buffer_c_int(&
        array,buffer) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array5),intent(in) :: array
      integer(c_int),intent(inout),pointer,dimension(:,:,:,:,:) :: buffer 
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array5_deallocate_device_buffer(&
        array,c_loc(buffer))
    end function
    function gpufort_array5_deallocate_device_buffer_c_long(&
        array,buffer) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array5),intent(in) :: array
      integer(c_long),intent(inout),pointer,dimension(:,:,:,:,:) :: buffer 
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array5_deallocate_device_buffer(&
        array,c_loc(buffer))
    end function
    function gpufort_array5_deallocate_device_buffer_c_float(&
        array,buffer) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array5),intent(in) :: array
      real(c_float),intent(inout),pointer,dimension(:,:,:,:,:) :: buffer 
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array5_deallocate_device_buffer(&
        array,c_loc(buffer))
    end function
    function gpufort_array5_deallocate_device_buffer_c_double(&
        array,buffer) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array5),intent(in) :: array
      real(c_double),intent(inout),pointer,dimension(:,:,:,:,:) :: buffer 
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array5_deallocate_device_buffer(&
        array,c_loc(buffer))
    end function
    function gpufort_array5_deallocate_device_buffer_c_float_complex(&
        array,buffer) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array5),intent(in) :: array
      complex(c_float_complex),intent(inout),pointer,dimension(:,:,:,:,:) :: buffer 
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array5_deallocate_device_buffer(&
        array,c_loc(buffer))
    end function
    function gpufort_array5_deallocate_device_buffer_c_double_complex(&
        array,buffer) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array5),intent(in) :: array
      complex(c_double_complex),intent(inout),pointer,dimension(:,:,:,:,:) :: buffer 
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array5_deallocate_device_buffer(&
        array,c_loc(buffer))
    end function
    function gpufort_array6_deallocate_device_buffer_c_bool(&
        array,buffer) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array6),intent(in) :: array
      logical(c_bool),intent(inout),pointer,dimension(:,:,:,:,:,:) :: buffer 
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array6_deallocate_device_buffer(&
        array,c_loc(buffer))
    end function
    function gpufort_array6_deallocate_device_buffer_c_short(&
        array,buffer) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array6),intent(in) :: array
      integer(c_short),intent(inout),pointer,dimension(:,:,:,:,:,:) :: buffer 
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array6_deallocate_device_buffer(&
        array,c_loc(buffer))
    end function
    function gpufort_array6_deallocate_device_buffer_c_int(&
        array,buffer) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array6),intent(in) :: array
      integer(c_int),intent(inout),pointer,dimension(:,:,:,:,:,:) :: buffer 
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array6_deallocate_device_buffer(&
        array,c_loc(buffer))
    end function
    function gpufort_array6_deallocate_device_buffer_c_long(&
        array,buffer) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array6),intent(in) :: array
      integer(c_long),intent(inout),pointer,dimension(:,:,:,:,:,:) :: buffer 
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array6_deallocate_device_buffer(&
        array,c_loc(buffer))
    end function
    function gpufort_array6_deallocate_device_buffer_c_float(&
        array,buffer) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array6),intent(in) :: array
      real(c_float),intent(inout),pointer,dimension(:,:,:,:,:,:) :: buffer 
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array6_deallocate_device_buffer(&
        array,c_loc(buffer))
    end function
    function gpufort_array6_deallocate_device_buffer_c_double(&
        array,buffer) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array6),intent(in) :: array
      real(c_double),intent(inout),pointer,dimension(:,:,:,:,:,:) :: buffer 
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array6_deallocate_device_buffer(&
        array,c_loc(buffer))
    end function
    function gpufort_array6_deallocate_device_buffer_c_float_complex(&
        array,buffer) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array6),intent(in) :: array
      complex(c_float_complex),intent(inout),pointer,dimension(:,:,:,:,:,:) :: buffer 
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array6_deallocate_device_buffer(&
        array,c_loc(buffer))
    end function
    function gpufort_array6_deallocate_device_buffer_c_double_complex(&
        array,buffer) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array6),intent(in) :: array
      complex(c_double_complex),intent(inout),pointer,dimension(:,:,:,:,:,:) :: buffer 
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array6_deallocate_device_buffer(&
        array,c_loc(buffer))
    end function
    function gpufort_array7_deallocate_device_buffer_c_bool(&
        array,buffer) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array7),intent(in) :: array
      logical(c_bool),intent(inout),pointer,dimension(:,:,:,:,:,:,:) :: buffer 
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array7_deallocate_device_buffer(&
        array,c_loc(buffer))
    end function
    function gpufort_array7_deallocate_device_buffer_c_short(&
        array,buffer) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array7),intent(in) :: array
      integer(c_short),intent(inout),pointer,dimension(:,:,:,:,:,:,:) :: buffer 
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array7_deallocate_device_buffer(&
        array,c_loc(buffer))
    end function
    function gpufort_array7_deallocate_device_buffer_c_int(&
        array,buffer) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array7),intent(in) :: array
      integer(c_int),intent(inout),pointer,dimension(:,:,:,:,:,:,:) :: buffer 
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array7_deallocate_device_buffer(&
        array,c_loc(buffer))
    end function
    function gpufort_array7_deallocate_device_buffer_c_long(&
        array,buffer) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array7),intent(in) :: array
      integer(c_long),intent(inout),pointer,dimension(:,:,:,:,:,:,:) :: buffer 
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array7_deallocate_device_buffer(&
        array,c_loc(buffer))
    end function
    function gpufort_array7_deallocate_device_buffer_c_float(&
        array,buffer) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array7),intent(in) :: array
      real(c_float),intent(inout),pointer,dimension(:,:,:,:,:,:,:) :: buffer 
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array7_deallocate_device_buffer(&
        array,c_loc(buffer))
    end function
    function gpufort_array7_deallocate_device_buffer_c_double(&
        array,buffer) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array7),intent(in) :: array
      real(c_double),intent(inout),pointer,dimension(:,:,:,:,:,:,:) :: buffer 
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array7_deallocate_device_buffer(&
        array,c_loc(buffer))
    end function
    function gpufort_array7_deallocate_device_buffer_c_float_complex(&
        array,buffer) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array7),intent(in) :: array
      complex(c_float_complex),intent(inout),pointer,dimension(:,:,:,:,:,:,:) :: buffer 
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array7_deallocate_device_buffer(&
        array,c_loc(buffer))
    end function
    function gpufort_array7_deallocate_device_buffer_c_double_complex(&
        array,buffer) &
          result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array7),intent(in) :: array
      complex(c_double_complex),intent(inout),pointer,dimension(:,:,:,:,:,:,:) :: buffer 
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array7_deallocate_device_buffer(&
        array,c_loc(buffer))
    end function

    function gpufort_array1_copy_from_buffer_async_c_bool(&
      array,buffer,memcpy_kind,&
      stream) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array1),intent(inout) :: array
      logical(c_bool),intent(in),target,dimension(:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array1_copy_from_buffer_async(&
        array,c_loc(buffer),memcpy_kind,stream)
    end function
    function gpufort_array1_copy_from_buffer_c_bool(&
      array,buffer,memcpy_kind) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array1),intent(inout) :: array
      logical(c_bool),intent(in),target,dimension(:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array1_copy_from_buffer(&
        array,c_loc(buffer),memcpy_kind)
    end function
    function gpufort_array1_copy_from_buffer_async_c_short(&
      array,buffer,memcpy_kind,&
      stream) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array1),intent(inout) :: array
      integer(c_short),intent(in),target,dimension(:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array1_copy_from_buffer_async(&
        array,c_loc(buffer),memcpy_kind,stream)
    end function
    function gpufort_array1_copy_from_buffer_c_short(&
      array,buffer,memcpy_kind) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array1),intent(inout) :: array
      integer(c_short),intent(in),target,dimension(:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array1_copy_from_buffer(&
        array,c_loc(buffer),memcpy_kind)
    end function
    function gpufort_array1_copy_from_buffer_async_c_int(&
      array,buffer,memcpy_kind,&
      stream) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array1),intent(inout) :: array
      integer(c_int),intent(in),target,dimension(:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array1_copy_from_buffer_async(&
        array,c_loc(buffer),memcpy_kind,stream)
    end function
    function gpufort_array1_copy_from_buffer_c_int(&
      array,buffer,memcpy_kind) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array1),intent(inout) :: array
      integer(c_int),intent(in),target,dimension(:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array1_copy_from_buffer(&
        array,c_loc(buffer),memcpy_kind)
    end function
    function gpufort_array1_copy_from_buffer_async_c_long(&
      array,buffer,memcpy_kind,&
      stream) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array1),intent(inout) :: array
      integer(c_long),intent(in),target,dimension(:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array1_copy_from_buffer_async(&
        array,c_loc(buffer),memcpy_kind,stream)
    end function
    function gpufort_array1_copy_from_buffer_c_long(&
      array,buffer,memcpy_kind) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array1),intent(inout) :: array
      integer(c_long),intent(in),target,dimension(:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array1_copy_from_buffer(&
        array,c_loc(buffer),memcpy_kind)
    end function
    function gpufort_array1_copy_from_buffer_async_c_float(&
      array,buffer,memcpy_kind,&
      stream) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array1),intent(inout) :: array
      real(c_float),intent(in),target,dimension(:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array1_copy_from_buffer_async(&
        array,c_loc(buffer),memcpy_kind,stream)
    end function
    function gpufort_array1_copy_from_buffer_c_float(&
      array,buffer,memcpy_kind) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array1),intent(inout) :: array
      real(c_float),intent(in),target,dimension(:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array1_copy_from_buffer(&
        array,c_loc(buffer),memcpy_kind)
    end function
    function gpufort_array1_copy_from_buffer_async_c_double(&
      array,buffer,memcpy_kind,&
      stream) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array1),intent(inout) :: array
      real(c_double),intent(in),target,dimension(:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array1_copy_from_buffer_async(&
        array,c_loc(buffer),memcpy_kind,stream)
    end function
    function gpufort_array1_copy_from_buffer_c_double(&
      array,buffer,memcpy_kind) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array1),intent(inout) :: array
      real(c_double),intent(in),target,dimension(:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array1_copy_from_buffer(&
        array,c_loc(buffer),memcpy_kind)
    end function
    function gpufort_array1_copy_from_buffer_async_c_float_complex(&
      array,buffer,memcpy_kind,&
      stream) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array1),intent(inout) :: array
      complex(c_float_complex),intent(in),target,dimension(:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array1_copy_from_buffer_async(&
        array,c_loc(buffer),memcpy_kind,stream)
    end function
    function gpufort_array1_copy_from_buffer_c_float_complex(&
      array,buffer,memcpy_kind) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array1),intent(inout) :: array
      complex(c_float_complex),intent(in),target,dimension(:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array1_copy_from_buffer(&
        array,c_loc(buffer),memcpy_kind)
    end function
    function gpufort_array1_copy_from_buffer_async_c_double_complex(&
      array,buffer,memcpy_kind,&
      stream) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array1),intent(inout) :: array
      complex(c_double_complex),intent(in),target,dimension(:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array1_copy_from_buffer_async(&
        array,c_loc(buffer),memcpy_kind,stream)
    end function
    function gpufort_array1_copy_from_buffer_c_double_complex(&
      array,buffer,memcpy_kind) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array1),intent(inout) :: array
      complex(c_double_complex),intent(in),target,dimension(:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array1_copy_from_buffer(&
        array,c_loc(buffer),memcpy_kind)
    end function
    function gpufort_array1_copy_to_buffer_async_c_bool(&
      array,buffer,memcpy_kind,&
      stream) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array1),intent(inout) :: array
      logical(c_bool),intent(in),target,dimension(:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array1_copy_to_buffer_async(&
        array,c_loc(buffer),memcpy_kind,stream)
    end function
    function gpufort_array1_copy_to_buffer_c_bool(&
      array,buffer,memcpy_kind) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array1),intent(inout) :: array
      logical(c_bool),intent(in),target,dimension(:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array1_copy_to_buffer(&
        array,c_loc(buffer),memcpy_kind)
    end function
    function gpufort_array1_copy_to_buffer_async_c_short(&
      array,buffer,memcpy_kind,&
      stream) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array1),intent(inout) :: array
      integer(c_short),intent(in),target,dimension(:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array1_copy_to_buffer_async(&
        array,c_loc(buffer),memcpy_kind,stream)
    end function
    function gpufort_array1_copy_to_buffer_c_short(&
      array,buffer,memcpy_kind) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array1),intent(inout) :: array
      integer(c_short),intent(in),target,dimension(:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array1_copy_to_buffer(&
        array,c_loc(buffer),memcpy_kind)
    end function
    function gpufort_array1_copy_to_buffer_async_c_int(&
      array,buffer,memcpy_kind,&
      stream) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array1),intent(inout) :: array
      integer(c_int),intent(in),target,dimension(:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array1_copy_to_buffer_async(&
        array,c_loc(buffer),memcpy_kind,stream)
    end function
    function gpufort_array1_copy_to_buffer_c_int(&
      array,buffer,memcpy_kind) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array1),intent(inout) :: array
      integer(c_int),intent(in),target,dimension(:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array1_copy_to_buffer(&
        array,c_loc(buffer),memcpy_kind)
    end function
    function gpufort_array1_copy_to_buffer_async_c_long(&
      array,buffer,memcpy_kind,&
      stream) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array1),intent(inout) :: array
      integer(c_long),intent(in),target,dimension(:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array1_copy_to_buffer_async(&
        array,c_loc(buffer),memcpy_kind,stream)
    end function
    function gpufort_array1_copy_to_buffer_c_long(&
      array,buffer,memcpy_kind) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array1),intent(inout) :: array
      integer(c_long),intent(in),target,dimension(:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array1_copy_to_buffer(&
        array,c_loc(buffer),memcpy_kind)
    end function
    function gpufort_array1_copy_to_buffer_async_c_float(&
      array,buffer,memcpy_kind,&
      stream) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array1),intent(inout) :: array
      real(c_float),intent(in),target,dimension(:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array1_copy_to_buffer_async(&
        array,c_loc(buffer),memcpy_kind,stream)
    end function
    function gpufort_array1_copy_to_buffer_c_float(&
      array,buffer,memcpy_kind) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array1),intent(inout) :: array
      real(c_float),intent(in),target,dimension(:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array1_copy_to_buffer(&
        array,c_loc(buffer),memcpy_kind)
    end function
    function gpufort_array1_copy_to_buffer_async_c_double(&
      array,buffer,memcpy_kind,&
      stream) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array1),intent(inout) :: array
      real(c_double),intent(in),target,dimension(:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array1_copy_to_buffer_async(&
        array,c_loc(buffer),memcpy_kind,stream)
    end function
    function gpufort_array1_copy_to_buffer_c_double(&
      array,buffer,memcpy_kind) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array1),intent(inout) :: array
      real(c_double),intent(in),target,dimension(:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array1_copy_to_buffer(&
        array,c_loc(buffer),memcpy_kind)
    end function
    function gpufort_array1_copy_to_buffer_async_c_float_complex(&
      array,buffer,memcpy_kind,&
      stream) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array1),intent(inout) :: array
      complex(c_float_complex),intent(in),target,dimension(:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array1_copy_to_buffer_async(&
        array,c_loc(buffer),memcpy_kind,stream)
    end function
    function gpufort_array1_copy_to_buffer_c_float_complex(&
      array,buffer,memcpy_kind) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array1),intent(inout) :: array
      complex(c_float_complex),intent(in),target,dimension(:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array1_copy_to_buffer(&
        array,c_loc(buffer),memcpy_kind)
    end function
    function gpufort_array1_copy_to_buffer_async_c_double_complex(&
      array,buffer,memcpy_kind,&
      stream) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array1),intent(inout) :: array
      complex(c_double_complex),intent(in),target,dimension(:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array1_copy_to_buffer_async(&
        array,c_loc(buffer),memcpy_kind,stream)
    end function
    function gpufort_array1_copy_to_buffer_c_double_complex(&
      array,buffer,memcpy_kind) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array1),intent(inout) :: array
      complex(c_double_complex),intent(in),target,dimension(:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array1_copy_to_buffer(&
        array,c_loc(buffer),memcpy_kind)
    end function
    function gpufort_array2_copy_from_buffer_async_c_bool(&
      array,buffer,memcpy_kind,&
      stream) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array2),intent(inout) :: array
      logical(c_bool),intent(in),target,dimension(:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array2_copy_from_buffer_async(&
        array,c_loc(buffer),memcpy_kind,stream)
    end function
    function gpufort_array2_copy_from_buffer_c_bool(&
      array,buffer,memcpy_kind) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array2),intent(inout) :: array
      logical(c_bool),intent(in),target,dimension(:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array2_copy_from_buffer(&
        array,c_loc(buffer),memcpy_kind)
    end function
    function gpufort_array2_copy_from_buffer_async_c_short(&
      array,buffer,memcpy_kind,&
      stream) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array2),intent(inout) :: array
      integer(c_short),intent(in),target,dimension(:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array2_copy_from_buffer_async(&
        array,c_loc(buffer),memcpy_kind,stream)
    end function
    function gpufort_array2_copy_from_buffer_c_short(&
      array,buffer,memcpy_kind) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array2),intent(inout) :: array
      integer(c_short),intent(in),target,dimension(:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array2_copy_from_buffer(&
        array,c_loc(buffer),memcpy_kind)
    end function
    function gpufort_array2_copy_from_buffer_async_c_int(&
      array,buffer,memcpy_kind,&
      stream) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array2),intent(inout) :: array
      integer(c_int),intent(in),target,dimension(:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array2_copy_from_buffer_async(&
        array,c_loc(buffer),memcpy_kind,stream)
    end function
    function gpufort_array2_copy_from_buffer_c_int(&
      array,buffer,memcpy_kind) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array2),intent(inout) :: array
      integer(c_int),intent(in),target,dimension(:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array2_copy_from_buffer(&
        array,c_loc(buffer),memcpy_kind)
    end function
    function gpufort_array2_copy_from_buffer_async_c_long(&
      array,buffer,memcpy_kind,&
      stream) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array2),intent(inout) :: array
      integer(c_long),intent(in),target,dimension(:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array2_copy_from_buffer_async(&
        array,c_loc(buffer),memcpy_kind,stream)
    end function
    function gpufort_array2_copy_from_buffer_c_long(&
      array,buffer,memcpy_kind) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array2),intent(inout) :: array
      integer(c_long),intent(in),target,dimension(:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array2_copy_from_buffer(&
        array,c_loc(buffer),memcpy_kind)
    end function
    function gpufort_array2_copy_from_buffer_async_c_float(&
      array,buffer,memcpy_kind,&
      stream) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array2),intent(inout) :: array
      real(c_float),intent(in),target,dimension(:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array2_copy_from_buffer_async(&
        array,c_loc(buffer),memcpy_kind,stream)
    end function
    function gpufort_array2_copy_from_buffer_c_float(&
      array,buffer,memcpy_kind) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array2),intent(inout) :: array
      real(c_float),intent(in),target,dimension(:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array2_copy_from_buffer(&
        array,c_loc(buffer),memcpy_kind)
    end function
    function gpufort_array2_copy_from_buffer_async_c_double(&
      array,buffer,memcpy_kind,&
      stream) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array2),intent(inout) :: array
      real(c_double),intent(in),target,dimension(:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array2_copy_from_buffer_async(&
        array,c_loc(buffer),memcpy_kind,stream)
    end function
    function gpufort_array2_copy_from_buffer_c_double(&
      array,buffer,memcpy_kind) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array2),intent(inout) :: array
      real(c_double),intent(in),target,dimension(:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array2_copy_from_buffer(&
        array,c_loc(buffer),memcpy_kind)
    end function
    function gpufort_array2_copy_from_buffer_async_c_float_complex(&
      array,buffer,memcpy_kind,&
      stream) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array2),intent(inout) :: array
      complex(c_float_complex),intent(in),target,dimension(:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array2_copy_from_buffer_async(&
        array,c_loc(buffer),memcpy_kind,stream)
    end function
    function gpufort_array2_copy_from_buffer_c_float_complex(&
      array,buffer,memcpy_kind) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array2),intent(inout) :: array
      complex(c_float_complex),intent(in),target,dimension(:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array2_copy_from_buffer(&
        array,c_loc(buffer),memcpy_kind)
    end function
    function gpufort_array2_copy_from_buffer_async_c_double_complex(&
      array,buffer,memcpy_kind,&
      stream) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array2),intent(inout) :: array
      complex(c_double_complex),intent(in),target,dimension(:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array2_copy_from_buffer_async(&
        array,c_loc(buffer),memcpy_kind,stream)
    end function
    function gpufort_array2_copy_from_buffer_c_double_complex(&
      array,buffer,memcpy_kind) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array2),intent(inout) :: array
      complex(c_double_complex),intent(in),target,dimension(:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array2_copy_from_buffer(&
        array,c_loc(buffer),memcpy_kind)
    end function
    function gpufort_array2_copy_to_buffer_async_c_bool(&
      array,buffer,memcpy_kind,&
      stream) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array2),intent(inout) :: array
      logical(c_bool),intent(in),target,dimension(:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array2_copy_to_buffer_async(&
        array,c_loc(buffer),memcpy_kind,stream)
    end function
    function gpufort_array2_copy_to_buffer_c_bool(&
      array,buffer,memcpy_kind) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array2),intent(inout) :: array
      logical(c_bool),intent(in),target,dimension(:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array2_copy_to_buffer(&
        array,c_loc(buffer),memcpy_kind)
    end function
    function gpufort_array2_copy_to_buffer_async_c_short(&
      array,buffer,memcpy_kind,&
      stream) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array2),intent(inout) :: array
      integer(c_short),intent(in),target,dimension(:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array2_copy_to_buffer_async(&
        array,c_loc(buffer),memcpy_kind,stream)
    end function
    function gpufort_array2_copy_to_buffer_c_short(&
      array,buffer,memcpy_kind) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array2),intent(inout) :: array
      integer(c_short),intent(in),target,dimension(:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array2_copy_to_buffer(&
        array,c_loc(buffer),memcpy_kind)
    end function
    function gpufort_array2_copy_to_buffer_async_c_int(&
      array,buffer,memcpy_kind,&
      stream) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array2),intent(inout) :: array
      integer(c_int),intent(in),target,dimension(:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array2_copy_to_buffer_async(&
        array,c_loc(buffer),memcpy_kind,stream)
    end function
    function gpufort_array2_copy_to_buffer_c_int(&
      array,buffer,memcpy_kind) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array2),intent(inout) :: array
      integer(c_int),intent(in),target,dimension(:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array2_copy_to_buffer(&
        array,c_loc(buffer),memcpy_kind)
    end function
    function gpufort_array2_copy_to_buffer_async_c_long(&
      array,buffer,memcpy_kind,&
      stream) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array2),intent(inout) :: array
      integer(c_long),intent(in),target,dimension(:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array2_copy_to_buffer_async(&
        array,c_loc(buffer),memcpy_kind,stream)
    end function
    function gpufort_array2_copy_to_buffer_c_long(&
      array,buffer,memcpy_kind) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array2),intent(inout) :: array
      integer(c_long),intent(in),target,dimension(:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array2_copy_to_buffer(&
        array,c_loc(buffer),memcpy_kind)
    end function
    function gpufort_array2_copy_to_buffer_async_c_float(&
      array,buffer,memcpy_kind,&
      stream) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array2),intent(inout) :: array
      real(c_float),intent(in),target,dimension(:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array2_copy_to_buffer_async(&
        array,c_loc(buffer),memcpy_kind,stream)
    end function
    function gpufort_array2_copy_to_buffer_c_float(&
      array,buffer,memcpy_kind) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array2),intent(inout) :: array
      real(c_float),intent(in),target,dimension(:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array2_copy_to_buffer(&
        array,c_loc(buffer),memcpy_kind)
    end function
    function gpufort_array2_copy_to_buffer_async_c_double(&
      array,buffer,memcpy_kind,&
      stream) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array2),intent(inout) :: array
      real(c_double),intent(in),target,dimension(:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array2_copy_to_buffer_async(&
        array,c_loc(buffer),memcpy_kind,stream)
    end function
    function gpufort_array2_copy_to_buffer_c_double(&
      array,buffer,memcpy_kind) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array2),intent(inout) :: array
      real(c_double),intent(in),target,dimension(:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array2_copy_to_buffer(&
        array,c_loc(buffer),memcpy_kind)
    end function
    function gpufort_array2_copy_to_buffer_async_c_float_complex(&
      array,buffer,memcpy_kind,&
      stream) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array2),intent(inout) :: array
      complex(c_float_complex),intent(in),target,dimension(:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array2_copy_to_buffer_async(&
        array,c_loc(buffer),memcpy_kind,stream)
    end function
    function gpufort_array2_copy_to_buffer_c_float_complex(&
      array,buffer,memcpy_kind) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array2),intent(inout) :: array
      complex(c_float_complex),intent(in),target,dimension(:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array2_copy_to_buffer(&
        array,c_loc(buffer),memcpy_kind)
    end function
    function gpufort_array2_copy_to_buffer_async_c_double_complex(&
      array,buffer,memcpy_kind,&
      stream) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array2),intent(inout) :: array
      complex(c_double_complex),intent(in),target,dimension(:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array2_copy_to_buffer_async(&
        array,c_loc(buffer),memcpy_kind,stream)
    end function
    function gpufort_array2_copy_to_buffer_c_double_complex(&
      array,buffer,memcpy_kind) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array2),intent(inout) :: array
      complex(c_double_complex),intent(in),target,dimension(:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array2_copy_to_buffer(&
        array,c_loc(buffer),memcpy_kind)
    end function
    function gpufort_array3_copy_from_buffer_async_c_bool(&
      array,buffer,memcpy_kind,&
      stream) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array3),intent(inout) :: array
      logical(c_bool),intent(in),target,dimension(:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array3_copy_from_buffer_async(&
        array,c_loc(buffer),memcpy_kind,stream)
    end function
    function gpufort_array3_copy_from_buffer_c_bool(&
      array,buffer,memcpy_kind) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array3),intent(inout) :: array
      logical(c_bool),intent(in),target,dimension(:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array3_copy_from_buffer(&
        array,c_loc(buffer),memcpy_kind)
    end function
    function gpufort_array3_copy_from_buffer_async_c_short(&
      array,buffer,memcpy_kind,&
      stream) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array3),intent(inout) :: array
      integer(c_short),intent(in),target,dimension(:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array3_copy_from_buffer_async(&
        array,c_loc(buffer),memcpy_kind,stream)
    end function
    function gpufort_array3_copy_from_buffer_c_short(&
      array,buffer,memcpy_kind) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array3),intent(inout) :: array
      integer(c_short),intent(in),target,dimension(:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array3_copy_from_buffer(&
        array,c_loc(buffer),memcpy_kind)
    end function
    function gpufort_array3_copy_from_buffer_async_c_int(&
      array,buffer,memcpy_kind,&
      stream) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array3),intent(inout) :: array
      integer(c_int),intent(in),target,dimension(:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array3_copy_from_buffer_async(&
        array,c_loc(buffer),memcpy_kind,stream)
    end function
    function gpufort_array3_copy_from_buffer_c_int(&
      array,buffer,memcpy_kind) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array3),intent(inout) :: array
      integer(c_int),intent(in),target,dimension(:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array3_copy_from_buffer(&
        array,c_loc(buffer),memcpy_kind)
    end function
    function gpufort_array3_copy_from_buffer_async_c_long(&
      array,buffer,memcpy_kind,&
      stream) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array3),intent(inout) :: array
      integer(c_long),intent(in),target,dimension(:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array3_copy_from_buffer_async(&
        array,c_loc(buffer),memcpy_kind,stream)
    end function
    function gpufort_array3_copy_from_buffer_c_long(&
      array,buffer,memcpy_kind) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array3),intent(inout) :: array
      integer(c_long),intent(in),target,dimension(:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array3_copy_from_buffer(&
        array,c_loc(buffer),memcpy_kind)
    end function
    function gpufort_array3_copy_from_buffer_async_c_float(&
      array,buffer,memcpy_kind,&
      stream) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array3),intent(inout) :: array
      real(c_float),intent(in),target,dimension(:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array3_copy_from_buffer_async(&
        array,c_loc(buffer),memcpy_kind,stream)
    end function
    function gpufort_array3_copy_from_buffer_c_float(&
      array,buffer,memcpy_kind) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array3),intent(inout) :: array
      real(c_float),intent(in),target,dimension(:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array3_copy_from_buffer(&
        array,c_loc(buffer),memcpy_kind)
    end function
    function gpufort_array3_copy_from_buffer_async_c_double(&
      array,buffer,memcpy_kind,&
      stream) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array3),intent(inout) :: array
      real(c_double),intent(in),target,dimension(:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array3_copy_from_buffer_async(&
        array,c_loc(buffer),memcpy_kind,stream)
    end function
    function gpufort_array3_copy_from_buffer_c_double(&
      array,buffer,memcpy_kind) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array3),intent(inout) :: array
      real(c_double),intent(in),target,dimension(:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array3_copy_from_buffer(&
        array,c_loc(buffer),memcpy_kind)
    end function
    function gpufort_array3_copy_from_buffer_async_c_float_complex(&
      array,buffer,memcpy_kind,&
      stream) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array3),intent(inout) :: array
      complex(c_float_complex),intent(in),target,dimension(:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array3_copy_from_buffer_async(&
        array,c_loc(buffer),memcpy_kind,stream)
    end function
    function gpufort_array3_copy_from_buffer_c_float_complex(&
      array,buffer,memcpy_kind) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array3),intent(inout) :: array
      complex(c_float_complex),intent(in),target,dimension(:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array3_copy_from_buffer(&
        array,c_loc(buffer),memcpy_kind)
    end function
    function gpufort_array3_copy_from_buffer_async_c_double_complex(&
      array,buffer,memcpy_kind,&
      stream) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array3),intent(inout) :: array
      complex(c_double_complex),intent(in),target,dimension(:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array3_copy_from_buffer_async(&
        array,c_loc(buffer),memcpy_kind,stream)
    end function
    function gpufort_array3_copy_from_buffer_c_double_complex(&
      array,buffer,memcpy_kind) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array3),intent(inout) :: array
      complex(c_double_complex),intent(in),target,dimension(:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array3_copy_from_buffer(&
        array,c_loc(buffer),memcpy_kind)
    end function
    function gpufort_array3_copy_to_buffer_async_c_bool(&
      array,buffer,memcpy_kind,&
      stream) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array3),intent(inout) :: array
      logical(c_bool),intent(in),target,dimension(:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array3_copy_to_buffer_async(&
        array,c_loc(buffer),memcpy_kind,stream)
    end function
    function gpufort_array3_copy_to_buffer_c_bool(&
      array,buffer,memcpy_kind) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array3),intent(inout) :: array
      logical(c_bool),intent(in),target,dimension(:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array3_copy_to_buffer(&
        array,c_loc(buffer),memcpy_kind)
    end function
    function gpufort_array3_copy_to_buffer_async_c_short(&
      array,buffer,memcpy_kind,&
      stream) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array3),intent(inout) :: array
      integer(c_short),intent(in),target,dimension(:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array3_copy_to_buffer_async(&
        array,c_loc(buffer),memcpy_kind,stream)
    end function
    function gpufort_array3_copy_to_buffer_c_short(&
      array,buffer,memcpy_kind) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array3),intent(inout) :: array
      integer(c_short),intent(in),target,dimension(:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array3_copy_to_buffer(&
        array,c_loc(buffer),memcpy_kind)
    end function
    function gpufort_array3_copy_to_buffer_async_c_int(&
      array,buffer,memcpy_kind,&
      stream) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array3),intent(inout) :: array
      integer(c_int),intent(in),target,dimension(:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array3_copy_to_buffer_async(&
        array,c_loc(buffer),memcpy_kind,stream)
    end function
    function gpufort_array3_copy_to_buffer_c_int(&
      array,buffer,memcpy_kind) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array3),intent(inout) :: array
      integer(c_int),intent(in),target,dimension(:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array3_copy_to_buffer(&
        array,c_loc(buffer),memcpy_kind)
    end function
    function gpufort_array3_copy_to_buffer_async_c_long(&
      array,buffer,memcpy_kind,&
      stream) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array3),intent(inout) :: array
      integer(c_long),intent(in),target,dimension(:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array3_copy_to_buffer_async(&
        array,c_loc(buffer),memcpy_kind,stream)
    end function
    function gpufort_array3_copy_to_buffer_c_long(&
      array,buffer,memcpy_kind) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array3),intent(inout) :: array
      integer(c_long),intent(in),target,dimension(:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array3_copy_to_buffer(&
        array,c_loc(buffer),memcpy_kind)
    end function
    function gpufort_array3_copy_to_buffer_async_c_float(&
      array,buffer,memcpy_kind,&
      stream) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array3),intent(inout) :: array
      real(c_float),intent(in),target,dimension(:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array3_copy_to_buffer_async(&
        array,c_loc(buffer),memcpy_kind,stream)
    end function
    function gpufort_array3_copy_to_buffer_c_float(&
      array,buffer,memcpy_kind) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array3),intent(inout) :: array
      real(c_float),intent(in),target,dimension(:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array3_copy_to_buffer(&
        array,c_loc(buffer),memcpy_kind)
    end function
    function gpufort_array3_copy_to_buffer_async_c_double(&
      array,buffer,memcpy_kind,&
      stream) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array3),intent(inout) :: array
      real(c_double),intent(in),target,dimension(:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array3_copy_to_buffer_async(&
        array,c_loc(buffer),memcpy_kind,stream)
    end function
    function gpufort_array3_copy_to_buffer_c_double(&
      array,buffer,memcpy_kind) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array3),intent(inout) :: array
      real(c_double),intent(in),target,dimension(:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array3_copy_to_buffer(&
        array,c_loc(buffer),memcpy_kind)
    end function
    function gpufort_array3_copy_to_buffer_async_c_float_complex(&
      array,buffer,memcpy_kind,&
      stream) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array3),intent(inout) :: array
      complex(c_float_complex),intent(in),target,dimension(:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array3_copy_to_buffer_async(&
        array,c_loc(buffer),memcpy_kind,stream)
    end function
    function gpufort_array3_copy_to_buffer_c_float_complex(&
      array,buffer,memcpy_kind) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array3),intent(inout) :: array
      complex(c_float_complex),intent(in),target,dimension(:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array3_copy_to_buffer(&
        array,c_loc(buffer),memcpy_kind)
    end function
    function gpufort_array3_copy_to_buffer_async_c_double_complex(&
      array,buffer,memcpy_kind,&
      stream) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array3),intent(inout) :: array
      complex(c_double_complex),intent(in),target,dimension(:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array3_copy_to_buffer_async(&
        array,c_loc(buffer),memcpy_kind,stream)
    end function
    function gpufort_array3_copy_to_buffer_c_double_complex(&
      array,buffer,memcpy_kind) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array3),intent(inout) :: array
      complex(c_double_complex),intent(in),target,dimension(:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array3_copy_to_buffer(&
        array,c_loc(buffer),memcpy_kind)
    end function
    function gpufort_array4_copy_from_buffer_async_c_bool(&
      array,buffer,memcpy_kind,&
      stream) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array4),intent(inout) :: array
      logical(c_bool),intent(in),target,dimension(:,:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array4_copy_from_buffer_async(&
        array,c_loc(buffer),memcpy_kind,stream)
    end function
    function gpufort_array4_copy_from_buffer_c_bool(&
      array,buffer,memcpy_kind) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array4),intent(inout) :: array
      logical(c_bool),intent(in),target,dimension(:,:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array4_copy_from_buffer(&
        array,c_loc(buffer),memcpy_kind)
    end function
    function gpufort_array4_copy_from_buffer_async_c_short(&
      array,buffer,memcpy_kind,&
      stream) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array4),intent(inout) :: array
      integer(c_short),intent(in),target,dimension(:,:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array4_copy_from_buffer_async(&
        array,c_loc(buffer),memcpy_kind,stream)
    end function
    function gpufort_array4_copy_from_buffer_c_short(&
      array,buffer,memcpy_kind) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array4),intent(inout) :: array
      integer(c_short),intent(in),target,dimension(:,:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array4_copy_from_buffer(&
        array,c_loc(buffer),memcpy_kind)
    end function
    function gpufort_array4_copy_from_buffer_async_c_int(&
      array,buffer,memcpy_kind,&
      stream) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array4),intent(inout) :: array
      integer(c_int),intent(in),target,dimension(:,:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array4_copy_from_buffer_async(&
        array,c_loc(buffer),memcpy_kind,stream)
    end function
    function gpufort_array4_copy_from_buffer_c_int(&
      array,buffer,memcpy_kind) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array4),intent(inout) :: array
      integer(c_int),intent(in),target,dimension(:,:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array4_copy_from_buffer(&
        array,c_loc(buffer),memcpy_kind)
    end function
    function gpufort_array4_copy_from_buffer_async_c_long(&
      array,buffer,memcpy_kind,&
      stream) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array4),intent(inout) :: array
      integer(c_long),intent(in),target,dimension(:,:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array4_copy_from_buffer_async(&
        array,c_loc(buffer),memcpy_kind,stream)
    end function
    function gpufort_array4_copy_from_buffer_c_long(&
      array,buffer,memcpy_kind) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array4),intent(inout) :: array
      integer(c_long),intent(in),target,dimension(:,:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array4_copy_from_buffer(&
        array,c_loc(buffer),memcpy_kind)
    end function
    function gpufort_array4_copy_from_buffer_async_c_float(&
      array,buffer,memcpy_kind,&
      stream) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array4),intent(inout) :: array
      real(c_float),intent(in),target,dimension(:,:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array4_copy_from_buffer_async(&
        array,c_loc(buffer),memcpy_kind,stream)
    end function
    function gpufort_array4_copy_from_buffer_c_float(&
      array,buffer,memcpy_kind) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array4),intent(inout) :: array
      real(c_float),intent(in),target,dimension(:,:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array4_copy_from_buffer(&
        array,c_loc(buffer),memcpy_kind)
    end function
    function gpufort_array4_copy_from_buffer_async_c_double(&
      array,buffer,memcpy_kind,&
      stream) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array4),intent(inout) :: array
      real(c_double),intent(in),target,dimension(:,:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array4_copy_from_buffer_async(&
        array,c_loc(buffer),memcpy_kind,stream)
    end function
    function gpufort_array4_copy_from_buffer_c_double(&
      array,buffer,memcpy_kind) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array4),intent(inout) :: array
      real(c_double),intent(in),target,dimension(:,:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array4_copy_from_buffer(&
        array,c_loc(buffer),memcpy_kind)
    end function
    function gpufort_array4_copy_from_buffer_async_c_float_complex(&
      array,buffer,memcpy_kind,&
      stream) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array4),intent(inout) :: array
      complex(c_float_complex),intent(in),target,dimension(:,:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array4_copy_from_buffer_async(&
        array,c_loc(buffer),memcpy_kind,stream)
    end function
    function gpufort_array4_copy_from_buffer_c_float_complex(&
      array,buffer,memcpy_kind) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array4),intent(inout) :: array
      complex(c_float_complex),intent(in),target,dimension(:,:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array4_copy_from_buffer(&
        array,c_loc(buffer),memcpy_kind)
    end function
    function gpufort_array4_copy_from_buffer_async_c_double_complex(&
      array,buffer,memcpy_kind,&
      stream) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array4),intent(inout) :: array
      complex(c_double_complex),intent(in),target,dimension(:,:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array4_copy_from_buffer_async(&
        array,c_loc(buffer),memcpy_kind,stream)
    end function
    function gpufort_array4_copy_from_buffer_c_double_complex(&
      array,buffer,memcpy_kind) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array4),intent(inout) :: array
      complex(c_double_complex),intent(in),target,dimension(:,:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array4_copy_from_buffer(&
        array,c_loc(buffer),memcpy_kind)
    end function
    function gpufort_array4_copy_to_buffer_async_c_bool(&
      array,buffer,memcpy_kind,&
      stream) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array4),intent(inout) :: array
      logical(c_bool),intent(in),target,dimension(:,:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array4_copy_to_buffer_async(&
        array,c_loc(buffer),memcpy_kind,stream)
    end function
    function gpufort_array4_copy_to_buffer_c_bool(&
      array,buffer,memcpy_kind) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array4),intent(inout) :: array
      logical(c_bool),intent(in),target,dimension(:,:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array4_copy_to_buffer(&
        array,c_loc(buffer),memcpy_kind)
    end function
    function gpufort_array4_copy_to_buffer_async_c_short(&
      array,buffer,memcpy_kind,&
      stream) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array4),intent(inout) :: array
      integer(c_short),intent(in),target,dimension(:,:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array4_copy_to_buffer_async(&
        array,c_loc(buffer),memcpy_kind,stream)
    end function
    function gpufort_array4_copy_to_buffer_c_short(&
      array,buffer,memcpy_kind) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array4),intent(inout) :: array
      integer(c_short),intent(in),target,dimension(:,:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array4_copy_to_buffer(&
        array,c_loc(buffer),memcpy_kind)
    end function
    function gpufort_array4_copy_to_buffer_async_c_int(&
      array,buffer,memcpy_kind,&
      stream) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array4),intent(inout) :: array
      integer(c_int),intent(in),target,dimension(:,:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array4_copy_to_buffer_async(&
        array,c_loc(buffer),memcpy_kind,stream)
    end function
    function gpufort_array4_copy_to_buffer_c_int(&
      array,buffer,memcpy_kind) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array4),intent(inout) :: array
      integer(c_int),intent(in),target,dimension(:,:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array4_copy_to_buffer(&
        array,c_loc(buffer),memcpy_kind)
    end function
    function gpufort_array4_copy_to_buffer_async_c_long(&
      array,buffer,memcpy_kind,&
      stream) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array4),intent(inout) :: array
      integer(c_long),intent(in),target,dimension(:,:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array4_copy_to_buffer_async(&
        array,c_loc(buffer),memcpy_kind,stream)
    end function
    function gpufort_array4_copy_to_buffer_c_long(&
      array,buffer,memcpy_kind) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array4),intent(inout) :: array
      integer(c_long),intent(in),target,dimension(:,:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array4_copy_to_buffer(&
        array,c_loc(buffer),memcpy_kind)
    end function
    function gpufort_array4_copy_to_buffer_async_c_float(&
      array,buffer,memcpy_kind,&
      stream) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array4),intent(inout) :: array
      real(c_float),intent(in),target,dimension(:,:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array4_copy_to_buffer_async(&
        array,c_loc(buffer),memcpy_kind,stream)
    end function
    function gpufort_array4_copy_to_buffer_c_float(&
      array,buffer,memcpy_kind) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array4),intent(inout) :: array
      real(c_float),intent(in),target,dimension(:,:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array4_copy_to_buffer(&
        array,c_loc(buffer),memcpy_kind)
    end function
    function gpufort_array4_copy_to_buffer_async_c_double(&
      array,buffer,memcpy_kind,&
      stream) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array4),intent(inout) :: array
      real(c_double),intent(in),target,dimension(:,:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array4_copy_to_buffer_async(&
        array,c_loc(buffer),memcpy_kind,stream)
    end function
    function gpufort_array4_copy_to_buffer_c_double(&
      array,buffer,memcpy_kind) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array4),intent(inout) :: array
      real(c_double),intent(in),target,dimension(:,:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array4_copy_to_buffer(&
        array,c_loc(buffer),memcpy_kind)
    end function
    function gpufort_array4_copy_to_buffer_async_c_float_complex(&
      array,buffer,memcpy_kind,&
      stream) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array4),intent(inout) :: array
      complex(c_float_complex),intent(in),target,dimension(:,:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array4_copy_to_buffer_async(&
        array,c_loc(buffer),memcpy_kind,stream)
    end function
    function gpufort_array4_copy_to_buffer_c_float_complex(&
      array,buffer,memcpy_kind) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array4),intent(inout) :: array
      complex(c_float_complex),intent(in),target,dimension(:,:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array4_copy_to_buffer(&
        array,c_loc(buffer),memcpy_kind)
    end function
    function gpufort_array4_copy_to_buffer_async_c_double_complex(&
      array,buffer,memcpy_kind,&
      stream) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array4),intent(inout) :: array
      complex(c_double_complex),intent(in),target,dimension(:,:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array4_copy_to_buffer_async(&
        array,c_loc(buffer),memcpy_kind,stream)
    end function
    function gpufort_array4_copy_to_buffer_c_double_complex(&
      array,buffer,memcpy_kind) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array4),intent(inout) :: array
      complex(c_double_complex),intent(in),target,dimension(:,:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array4_copy_to_buffer(&
        array,c_loc(buffer),memcpy_kind)
    end function
    function gpufort_array5_copy_from_buffer_async_c_bool(&
      array,buffer,memcpy_kind,&
      stream) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array5),intent(inout) :: array
      logical(c_bool),intent(in),target,dimension(:,:,:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array5_copy_from_buffer_async(&
        array,c_loc(buffer),memcpy_kind,stream)
    end function
    function gpufort_array5_copy_from_buffer_c_bool(&
      array,buffer,memcpy_kind) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array5),intent(inout) :: array
      logical(c_bool),intent(in),target,dimension(:,:,:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array5_copy_from_buffer(&
        array,c_loc(buffer),memcpy_kind)
    end function
    function gpufort_array5_copy_from_buffer_async_c_short(&
      array,buffer,memcpy_kind,&
      stream) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array5),intent(inout) :: array
      integer(c_short),intent(in),target,dimension(:,:,:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array5_copy_from_buffer_async(&
        array,c_loc(buffer),memcpy_kind,stream)
    end function
    function gpufort_array5_copy_from_buffer_c_short(&
      array,buffer,memcpy_kind) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array5),intent(inout) :: array
      integer(c_short),intent(in),target,dimension(:,:,:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array5_copy_from_buffer(&
        array,c_loc(buffer),memcpy_kind)
    end function
    function gpufort_array5_copy_from_buffer_async_c_int(&
      array,buffer,memcpy_kind,&
      stream) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array5),intent(inout) :: array
      integer(c_int),intent(in),target,dimension(:,:,:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array5_copy_from_buffer_async(&
        array,c_loc(buffer),memcpy_kind,stream)
    end function
    function gpufort_array5_copy_from_buffer_c_int(&
      array,buffer,memcpy_kind) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array5),intent(inout) :: array
      integer(c_int),intent(in),target,dimension(:,:,:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array5_copy_from_buffer(&
        array,c_loc(buffer),memcpy_kind)
    end function
    function gpufort_array5_copy_from_buffer_async_c_long(&
      array,buffer,memcpy_kind,&
      stream) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array5),intent(inout) :: array
      integer(c_long),intent(in),target,dimension(:,:,:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array5_copy_from_buffer_async(&
        array,c_loc(buffer),memcpy_kind,stream)
    end function
    function gpufort_array5_copy_from_buffer_c_long(&
      array,buffer,memcpy_kind) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array5),intent(inout) :: array
      integer(c_long),intent(in),target,dimension(:,:,:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array5_copy_from_buffer(&
        array,c_loc(buffer),memcpy_kind)
    end function
    function gpufort_array5_copy_from_buffer_async_c_float(&
      array,buffer,memcpy_kind,&
      stream) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array5),intent(inout) :: array
      real(c_float),intent(in),target,dimension(:,:,:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array5_copy_from_buffer_async(&
        array,c_loc(buffer),memcpy_kind,stream)
    end function
    function gpufort_array5_copy_from_buffer_c_float(&
      array,buffer,memcpy_kind) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array5),intent(inout) :: array
      real(c_float),intent(in),target,dimension(:,:,:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array5_copy_from_buffer(&
        array,c_loc(buffer),memcpy_kind)
    end function
    function gpufort_array5_copy_from_buffer_async_c_double(&
      array,buffer,memcpy_kind,&
      stream) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array5),intent(inout) :: array
      real(c_double),intent(in),target,dimension(:,:,:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array5_copy_from_buffer_async(&
        array,c_loc(buffer),memcpy_kind,stream)
    end function
    function gpufort_array5_copy_from_buffer_c_double(&
      array,buffer,memcpy_kind) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array5),intent(inout) :: array
      real(c_double),intent(in),target,dimension(:,:,:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array5_copy_from_buffer(&
        array,c_loc(buffer),memcpy_kind)
    end function
    function gpufort_array5_copy_from_buffer_async_c_float_complex(&
      array,buffer,memcpy_kind,&
      stream) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array5),intent(inout) :: array
      complex(c_float_complex),intent(in),target,dimension(:,:,:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array5_copy_from_buffer_async(&
        array,c_loc(buffer),memcpy_kind,stream)
    end function
    function gpufort_array5_copy_from_buffer_c_float_complex(&
      array,buffer,memcpy_kind) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array5),intent(inout) :: array
      complex(c_float_complex),intent(in),target,dimension(:,:,:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array5_copy_from_buffer(&
        array,c_loc(buffer),memcpy_kind)
    end function
    function gpufort_array5_copy_from_buffer_async_c_double_complex(&
      array,buffer,memcpy_kind,&
      stream) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array5),intent(inout) :: array
      complex(c_double_complex),intent(in),target,dimension(:,:,:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array5_copy_from_buffer_async(&
        array,c_loc(buffer),memcpy_kind,stream)
    end function
    function gpufort_array5_copy_from_buffer_c_double_complex(&
      array,buffer,memcpy_kind) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array5),intent(inout) :: array
      complex(c_double_complex),intent(in),target,dimension(:,:,:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array5_copy_from_buffer(&
        array,c_loc(buffer),memcpy_kind)
    end function
    function gpufort_array5_copy_to_buffer_async_c_bool(&
      array,buffer,memcpy_kind,&
      stream) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array5),intent(inout) :: array
      logical(c_bool),intent(in),target,dimension(:,:,:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array5_copy_to_buffer_async(&
        array,c_loc(buffer),memcpy_kind,stream)
    end function
    function gpufort_array5_copy_to_buffer_c_bool(&
      array,buffer,memcpy_kind) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array5),intent(inout) :: array
      logical(c_bool),intent(in),target,dimension(:,:,:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array5_copy_to_buffer(&
        array,c_loc(buffer),memcpy_kind)
    end function
    function gpufort_array5_copy_to_buffer_async_c_short(&
      array,buffer,memcpy_kind,&
      stream) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array5),intent(inout) :: array
      integer(c_short),intent(in),target,dimension(:,:,:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array5_copy_to_buffer_async(&
        array,c_loc(buffer),memcpy_kind,stream)
    end function
    function gpufort_array5_copy_to_buffer_c_short(&
      array,buffer,memcpy_kind) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array5),intent(inout) :: array
      integer(c_short),intent(in),target,dimension(:,:,:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array5_copy_to_buffer(&
        array,c_loc(buffer),memcpy_kind)
    end function
    function gpufort_array5_copy_to_buffer_async_c_int(&
      array,buffer,memcpy_kind,&
      stream) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array5),intent(inout) :: array
      integer(c_int),intent(in),target,dimension(:,:,:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array5_copy_to_buffer_async(&
        array,c_loc(buffer),memcpy_kind,stream)
    end function
    function gpufort_array5_copy_to_buffer_c_int(&
      array,buffer,memcpy_kind) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array5),intent(inout) :: array
      integer(c_int),intent(in),target,dimension(:,:,:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array5_copy_to_buffer(&
        array,c_loc(buffer),memcpy_kind)
    end function
    function gpufort_array5_copy_to_buffer_async_c_long(&
      array,buffer,memcpy_kind,&
      stream) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array5),intent(inout) :: array
      integer(c_long),intent(in),target,dimension(:,:,:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array5_copy_to_buffer_async(&
        array,c_loc(buffer),memcpy_kind,stream)
    end function
    function gpufort_array5_copy_to_buffer_c_long(&
      array,buffer,memcpy_kind) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array5),intent(inout) :: array
      integer(c_long),intent(in),target,dimension(:,:,:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array5_copy_to_buffer(&
        array,c_loc(buffer),memcpy_kind)
    end function
    function gpufort_array5_copy_to_buffer_async_c_float(&
      array,buffer,memcpy_kind,&
      stream) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array5),intent(inout) :: array
      real(c_float),intent(in),target,dimension(:,:,:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array5_copy_to_buffer_async(&
        array,c_loc(buffer),memcpy_kind,stream)
    end function
    function gpufort_array5_copy_to_buffer_c_float(&
      array,buffer,memcpy_kind) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array5),intent(inout) :: array
      real(c_float),intent(in),target,dimension(:,:,:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array5_copy_to_buffer(&
        array,c_loc(buffer),memcpy_kind)
    end function
    function gpufort_array5_copy_to_buffer_async_c_double(&
      array,buffer,memcpy_kind,&
      stream) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array5),intent(inout) :: array
      real(c_double),intent(in),target,dimension(:,:,:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array5_copy_to_buffer_async(&
        array,c_loc(buffer),memcpy_kind,stream)
    end function
    function gpufort_array5_copy_to_buffer_c_double(&
      array,buffer,memcpy_kind) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array5),intent(inout) :: array
      real(c_double),intent(in),target,dimension(:,:,:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array5_copy_to_buffer(&
        array,c_loc(buffer),memcpy_kind)
    end function
    function gpufort_array5_copy_to_buffer_async_c_float_complex(&
      array,buffer,memcpy_kind,&
      stream) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array5),intent(inout) :: array
      complex(c_float_complex),intent(in),target,dimension(:,:,:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array5_copy_to_buffer_async(&
        array,c_loc(buffer),memcpy_kind,stream)
    end function
    function gpufort_array5_copy_to_buffer_c_float_complex(&
      array,buffer,memcpy_kind) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array5),intent(inout) :: array
      complex(c_float_complex),intent(in),target,dimension(:,:,:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array5_copy_to_buffer(&
        array,c_loc(buffer),memcpy_kind)
    end function
    function gpufort_array5_copy_to_buffer_async_c_double_complex(&
      array,buffer,memcpy_kind,&
      stream) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array5),intent(inout) :: array
      complex(c_double_complex),intent(in),target,dimension(:,:,:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array5_copy_to_buffer_async(&
        array,c_loc(buffer),memcpy_kind,stream)
    end function
    function gpufort_array5_copy_to_buffer_c_double_complex(&
      array,buffer,memcpy_kind) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array5),intent(inout) :: array
      complex(c_double_complex),intent(in),target,dimension(:,:,:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array5_copy_to_buffer(&
        array,c_loc(buffer),memcpy_kind)
    end function
    function gpufort_array6_copy_from_buffer_async_c_bool(&
      array,buffer,memcpy_kind,&
      stream) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array6),intent(inout) :: array
      logical(c_bool),intent(in),target,dimension(:,:,:,:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array6_copy_from_buffer_async(&
        array,c_loc(buffer),memcpy_kind,stream)
    end function
    function gpufort_array6_copy_from_buffer_c_bool(&
      array,buffer,memcpy_kind) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array6),intent(inout) :: array
      logical(c_bool),intent(in),target,dimension(:,:,:,:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array6_copy_from_buffer(&
        array,c_loc(buffer),memcpy_kind)
    end function
    function gpufort_array6_copy_from_buffer_async_c_short(&
      array,buffer,memcpy_kind,&
      stream) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array6),intent(inout) :: array
      integer(c_short),intent(in),target,dimension(:,:,:,:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array6_copy_from_buffer_async(&
        array,c_loc(buffer),memcpy_kind,stream)
    end function
    function gpufort_array6_copy_from_buffer_c_short(&
      array,buffer,memcpy_kind) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array6),intent(inout) :: array
      integer(c_short),intent(in),target,dimension(:,:,:,:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array6_copy_from_buffer(&
        array,c_loc(buffer),memcpy_kind)
    end function
    function gpufort_array6_copy_from_buffer_async_c_int(&
      array,buffer,memcpy_kind,&
      stream) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array6),intent(inout) :: array
      integer(c_int),intent(in),target,dimension(:,:,:,:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array6_copy_from_buffer_async(&
        array,c_loc(buffer),memcpy_kind,stream)
    end function
    function gpufort_array6_copy_from_buffer_c_int(&
      array,buffer,memcpy_kind) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array6),intent(inout) :: array
      integer(c_int),intent(in),target,dimension(:,:,:,:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array6_copy_from_buffer(&
        array,c_loc(buffer),memcpy_kind)
    end function
    function gpufort_array6_copy_from_buffer_async_c_long(&
      array,buffer,memcpy_kind,&
      stream) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array6),intent(inout) :: array
      integer(c_long),intent(in),target,dimension(:,:,:,:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array6_copy_from_buffer_async(&
        array,c_loc(buffer),memcpy_kind,stream)
    end function
    function gpufort_array6_copy_from_buffer_c_long(&
      array,buffer,memcpy_kind) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array6),intent(inout) :: array
      integer(c_long),intent(in),target,dimension(:,:,:,:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array6_copy_from_buffer(&
        array,c_loc(buffer),memcpy_kind)
    end function
    function gpufort_array6_copy_from_buffer_async_c_float(&
      array,buffer,memcpy_kind,&
      stream) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array6),intent(inout) :: array
      real(c_float),intent(in),target,dimension(:,:,:,:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array6_copy_from_buffer_async(&
        array,c_loc(buffer),memcpy_kind,stream)
    end function
    function gpufort_array6_copy_from_buffer_c_float(&
      array,buffer,memcpy_kind) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array6),intent(inout) :: array
      real(c_float),intent(in),target,dimension(:,:,:,:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array6_copy_from_buffer(&
        array,c_loc(buffer),memcpy_kind)
    end function
    function gpufort_array6_copy_from_buffer_async_c_double(&
      array,buffer,memcpy_kind,&
      stream) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array6),intent(inout) :: array
      real(c_double),intent(in),target,dimension(:,:,:,:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array6_copy_from_buffer_async(&
        array,c_loc(buffer),memcpy_kind,stream)
    end function
    function gpufort_array6_copy_from_buffer_c_double(&
      array,buffer,memcpy_kind) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array6),intent(inout) :: array
      real(c_double),intent(in),target,dimension(:,:,:,:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array6_copy_from_buffer(&
        array,c_loc(buffer),memcpy_kind)
    end function
    function gpufort_array6_copy_from_buffer_async_c_float_complex(&
      array,buffer,memcpy_kind,&
      stream) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array6),intent(inout) :: array
      complex(c_float_complex),intent(in),target,dimension(:,:,:,:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array6_copy_from_buffer_async(&
        array,c_loc(buffer),memcpy_kind,stream)
    end function
    function gpufort_array6_copy_from_buffer_c_float_complex(&
      array,buffer,memcpy_kind) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array6),intent(inout) :: array
      complex(c_float_complex),intent(in),target,dimension(:,:,:,:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array6_copy_from_buffer(&
        array,c_loc(buffer),memcpy_kind)
    end function
    function gpufort_array6_copy_from_buffer_async_c_double_complex(&
      array,buffer,memcpy_kind,&
      stream) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array6),intent(inout) :: array
      complex(c_double_complex),intent(in),target,dimension(:,:,:,:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array6_copy_from_buffer_async(&
        array,c_loc(buffer),memcpy_kind,stream)
    end function
    function gpufort_array6_copy_from_buffer_c_double_complex(&
      array,buffer,memcpy_kind) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array6),intent(inout) :: array
      complex(c_double_complex),intent(in),target,dimension(:,:,:,:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array6_copy_from_buffer(&
        array,c_loc(buffer),memcpy_kind)
    end function
    function gpufort_array6_copy_to_buffer_async_c_bool(&
      array,buffer,memcpy_kind,&
      stream) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array6),intent(inout) :: array
      logical(c_bool),intent(in),target,dimension(:,:,:,:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array6_copy_to_buffer_async(&
        array,c_loc(buffer),memcpy_kind,stream)
    end function
    function gpufort_array6_copy_to_buffer_c_bool(&
      array,buffer,memcpy_kind) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array6),intent(inout) :: array
      logical(c_bool),intent(in),target,dimension(:,:,:,:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array6_copy_to_buffer(&
        array,c_loc(buffer),memcpy_kind)
    end function
    function gpufort_array6_copy_to_buffer_async_c_short(&
      array,buffer,memcpy_kind,&
      stream) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array6),intent(inout) :: array
      integer(c_short),intent(in),target,dimension(:,:,:,:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array6_copy_to_buffer_async(&
        array,c_loc(buffer),memcpy_kind,stream)
    end function
    function gpufort_array6_copy_to_buffer_c_short(&
      array,buffer,memcpy_kind) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array6),intent(inout) :: array
      integer(c_short),intent(in),target,dimension(:,:,:,:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array6_copy_to_buffer(&
        array,c_loc(buffer),memcpy_kind)
    end function
    function gpufort_array6_copy_to_buffer_async_c_int(&
      array,buffer,memcpy_kind,&
      stream) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array6),intent(inout) :: array
      integer(c_int),intent(in),target,dimension(:,:,:,:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array6_copy_to_buffer_async(&
        array,c_loc(buffer),memcpy_kind,stream)
    end function
    function gpufort_array6_copy_to_buffer_c_int(&
      array,buffer,memcpy_kind) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array6),intent(inout) :: array
      integer(c_int),intent(in),target,dimension(:,:,:,:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array6_copy_to_buffer(&
        array,c_loc(buffer),memcpy_kind)
    end function
    function gpufort_array6_copy_to_buffer_async_c_long(&
      array,buffer,memcpy_kind,&
      stream) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array6),intent(inout) :: array
      integer(c_long),intent(in),target,dimension(:,:,:,:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array6_copy_to_buffer_async(&
        array,c_loc(buffer),memcpy_kind,stream)
    end function
    function gpufort_array6_copy_to_buffer_c_long(&
      array,buffer,memcpy_kind) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array6),intent(inout) :: array
      integer(c_long),intent(in),target,dimension(:,:,:,:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array6_copy_to_buffer(&
        array,c_loc(buffer),memcpy_kind)
    end function
    function gpufort_array6_copy_to_buffer_async_c_float(&
      array,buffer,memcpy_kind,&
      stream) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array6),intent(inout) :: array
      real(c_float),intent(in),target,dimension(:,:,:,:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array6_copy_to_buffer_async(&
        array,c_loc(buffer),memcpy_kind,stream)
    end function
    function gpufort_array6_copy_to_buffer_c_float(&
      array,buffer,memcpy_kind) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array6),intent(inout) :: array
      real(c_float),intent(in),target,dimension(:,:,:,:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array6_copy_to_buffer(&
        array,c_loc(buffer),memcpy_kind)
    end function
    function gpufort_array6_copy_to_buffer_async_c_double(&
      array,buffer,memcpy_kind,&
      stream) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array6),intent(inout) :: array
      real(c_double),intent(in),target,dimension(:,:,:,:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array6_copy_to_buffer_async(&
        array,c_loc(buffer),memcpy_kind,stream)
    end function
    function gpufort_array6_copy_to_buffer_c_double(&
      array,buffer,memcpy_kind) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array6),intent(inout) :: array
      real(c_double),intent(in),target,dimension(:,:,:,:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array6_copy_to_buffer(&
        array,c_loc(buffer),memcpy_kind)
    end function
    function gpufort_array6_copy_to_buffer_async_c_float_complex(&
      array,buffer,memcpy_kind,&
      stream) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array6),intent(inout) :: array
      complex(c_float_complex),intent(in),target,dimension(:,:,:,:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array6_copy_to_buffer_async(&
        array,c_loc(buffer),memcpy_kind,stream)
    end function
    function gpufort_array6_copy_to_buffer_c_float_complex(&
      array,buffer,memcpy_kind) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array6),intent(inout) :: array
      complex(c_float_complex),intent(in),target,dimension(:,:,:,:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array6_copy_to_buffer(&
        array,c_loc(buffer),memcpy_kind)
    end function
    function gpufort_array6_copy_to_buffer_async_c_double_complex(&
      array,buffer,memcpy_kind,&
      stream) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array6),intent(inout) :: array
      complex(c_double_complex),intent(in),target,dimension(:,:,:,:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array6_copy_to_buffer_async(&
        array,c_loc(buffer),memcpy_kind,stream)
    end function
    function gpufort_array6_copy_to_buffer_c_double_complex(&
      array,buffer,memcpy_kind) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array6),intent(inout) :: array
      complex(c_double_complex),intent(in),target,dimension(:,:,:,:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array6_copy_to_buffer(&
        array,c_loc(buffer),memcpy_kind)
    end function
    function gpufort_array7_copy_from_buffer_async_c_bool(&
      array,buffer,memcpy_kind,&
      stream) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array7),intent(inout) :: array
      logical(c_bool),intent(in),target,dimension(:,:,:,:,:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array7_copy_from_buffer_async(&
        array,c_loc(buffer),memcpy_kind,stream)
    end function
    function gpufort_array7_copy_from_buffer_c_bool(&
      array,buffer,memcpy_kind) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array7),intent(inout) :: array
      logical(c_bool),intent(in),target,dimension(:,:,:,:,:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array7_copy_from_buffer(&
        array,c_loc(buffer),memcpy_kind)
    end function
    function gpufort_array7_copy_from_buffer_async_c_short(&
      array,buffer,memcpy_kind,&
      stream) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array7),intent(inout) :: array
      integer(c_short),intent(in),target,dimension(:,:,:,:,:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array7_copy_from_buffer_async(&
        array,c_loc(buffer),memcpy_kind,stream)
    end function
    function gpufort_array7_copy_from_buffer_c_short(&
      array,buffer,memcpy_kind) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array7),intent(inout) :: array
      integer(c_short),intent(in),target,dimension(:,:,:,:,:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array7_copy_from_buffer(&
        array,c_loc(buffer),memcpy_kind)
    end function
    function gpufort_array7_copy_from_buffer_async_c_int(&
      array,buffer,memcpy_kind,&
      stream) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array7),intent(inout) :: array
      integer(c_int),intent(in),target,dimension(:,:,:,:,:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array7_copy_from_buffer_async(&
        array,c_loc(buffer),memcpy_kind,stream)
    end function
    function gpufort_array7_copy_from_buffer_c_int(&
      array,buffer,memcpy_kind) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array7),intent(inout) :: array
      integer(c_int),intent(in),target,dimension(:,:,:,:,:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array7_copy_from_buffer(&
        array,c_loc(buffer),memcpy_kind)
    end function
    function gpufort_array7_copy_from_buffer_async_c_long(&
      array,buffer,memcpy_kind,&
      stream) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array7),intent(inout) :: array
      integer(c_long),intent(in),target,dimension(:,:,:,:,:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array7_copy_from_buffer_async(&
        array,c_loc(buffer),memcpy_kind,stream)
    end function
    function gpufort_array7_copy_from_buffer_c_long(&
      array,buffer,memcpy_kind) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array7),intent(inout) :: array
      integer(c_long),intent(in),target,dimension(:,:,:,:,:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array7_copy_from_buffer(&
        array,c_loc(buffer),memcpy_kind)
    end function
    function gpufort_array7_copy_from_buffer_async_c_float(&
      array,buffer,memcpy_kind,&
      stream) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array7),intent(inout) :: array
      real(c_float),intent(in),target,dimension(:,:,:,:,:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array7_copy_from_buffer_async(&
        array,c_loc(buffer),memcpy_kind,stream)
    end function
    function gpufort_array7_copy_from_buffer_c_float(&
      array,buffer,memcpy_kind) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array7),intent(inout) :: array
      real(c_float),intent(in),target,dimension(:,:,:,:,:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array7_copy_from_buffer(&
        array,c_loc(buffer),memcpy_kind)
    end function
    function gpufort_array7_copy_from_buffer_async_c_double(&
      array,buffer,memcpy_kind,&
      stream) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array7),intent(inout) :: array
      real(c_double),intent(in),target,dimension(:,:,:,:,:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array7_copy_from_buffer_async(&
        array,c_loc(buffer),memcpy_kind,stream)
    end function
    function gpufort_array7_copy_from_buffer_c_double(&
      array,buffer,memcpy_kind) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array7),intent(inout) :: array
      real(c_double),intent(in),target,dimension(:,:,:,:,:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array7_copy_from_buffer(&
        array,c_loc(buffer),memcpy_kind)
    end function
    function gpufort_array7_copy_from_buffer_async_c_float_complex(&
      array,buffer,memcpy_kind,&
      stream) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array7),intent(inout) :: array
      complex(c_float_complex),intent(in),target,dimension(:,:,:,:,:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array7_copy_from_buffer_async(&
        array,c_loc(buffer),memcpy_kind,stream)
    end function
    function gpufort_array7_copy_from_buffer_c_float_complex(&
      array,buffer,memcpy_kind) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array7),intent(inout) :: array
      complex(c_float_complex),intent(in),target,dimension(:,:,:,:,:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array7_copy_from_buffer(&
        array,c_loc(buffer),memcpy_kind)
    end function
    function gpufort_array7_copy_from_buffer_async_c_double_complex(&
      array,buffer,memcpy_kind,&
      stream) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array7),intent(inout) :: array
      complex(c_double_complex),intent(in),target,dimension(:,:,:,:,:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array7_copy_from_buffer_async(&
        array,c_loc(buffer),memcpy_kind,stream)
    end function
    function gpufort_array7_copy_from_buffer_c_double_complex(&
      array,buffer,memcpy_kind) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array7),intent(inout) :: array
      complex(c_double_complex),intent(in),target,dimension(:,:,:,:,:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array7_copy_from_buffer(&
        array,c_loc(buffer),memcpy_kind)
    end function
    function gpufort_array7_copy_to_buffer_async_c_bool(&
      array,buffer,memcpy_kind,&
      stream) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array7),intent(inout) :: array
      logical(c_bool),intent(in),target,dimension(:,:,:,:,:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array7_copy_to_buffer_async(&
        array,c_loc(buffer),memcpy_kind,stream)
    end function
    function gpufort_array7_copy_to_buffer_c_bool(&
      array,buffer,memcpy_kind) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array7),intent(inout) :: array
      logical(c_bool),intent(in),target,dimension(:,:,:,:,:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array7_copy_to_buffer(&
        array,c_loc(buffer),memcpy_kind)
    end function
    function gpufort_array7_copy_to_buffer_async_c_short(&
      array,buffer,memcpy_kind,&
      stream) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array7),intent(inout) :: array
      integer(c_short),intent(in),target,dimension(:,:,:,:,:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array7_copy_to_buffer_async(&
        array,c_loc(buffer),memcpy_kind,stream)
    end function
    function gpufort_array7_copy_to_buffer_c_short(&
      array,buffer,memcpy_kind) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array7),intent(inout) :: array
      integer(c_short),intent(in),target,dimension(:,:,:,:,:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array7_copy_to_buffer(&
        array,c_loc(buffer),memcpy_kind)
    end function
    function gpufort_array7_copy_to_buffer_async_c_int(&
      array,buffer,memcpy_kind,&
      stream) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array7),intent(inout) :: array
      integer(c_int),intent(in),target,dimension(:,:,:,:,:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array7_copy_to_buffer_async(&
        array,c_loc(buffer),memcpy_kind,stream)
    end function
    function gpufort_array7_copy_to_buffer_c_int(&
      array,buffer,memcpy_kind) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array7),intent(inout) :: array
      integer(c_int),intent(in),target,dimension(:,:,:,:,:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array7_copy_to_buffer(&
        array,c_loc(buffer),memcpy_kind)
    end function
    function gpufort_array7_copy_to_buffer_async_c_long(&
      array,buffer,memcpy_kind,&
      stream) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array7),intent(inout) :: array
      integer(c_long),intent(in),target,dimension(:,:,:,:,:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array7_copy_to_buffer_async(&
        array,c_loc(buffer),memcpy_kind,stream)
    end function
    function gpufort_array7_copy_to_buffer_c_long(&
      array,buffer,memcpy_kind) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array7),intent(inout) :: array
      integer(c_long),intent(in),target,dimension(:,:,:,:,:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array7_copy_to_buffer(&
        array,c_loc(buffer),memcpy_kind)
    end function
    function gpufort_array7_copy_to_buffer_async_c_float(&
      array,buffer,memcpy_kind,&
      stream) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array7),intent(inout) :: array
      real(c_float),intent(in),target,dimension(:,:,:,:,:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array7_copy_to_buffer_async(&
        array,c_loc(buffer),memcpy_kind,stream)
    end function
    function gpufort_array7_copy_to_buffer_c_float(&
      array,buffer,memcpy_kind) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array7),intent(inout) :: array
      real(c_float),intent(in),target,dimension(:,:,:,:,:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array7_copy_to_buffer(&
        array,c_loc(buffer),memcpy_kind)
    end function
    function gpufort_array7_copy_to_buffer_async_c_double(&
      array,buffer,memcpy_kind,&
      stream) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array7),intent(inout) :: array
      real(c_double),intent(in),target,dimension(:,:,:,:,:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array7_copy_to_buffer_async(&
        array,c_loc(buffer),memcpy_kind,stream)
    end function
    function gpufort_array7_copy_to_buffer_c_double(&
      array,buffer,memcpy_kind) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array7),intent(inout) :: array
      real(c_double),intent(in),target,dimension(:,:,:,:,:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array7_copy_to_buffer(&
        array,c_loc(buffer),memcpy_kind)
    end function
    function gpufort_array7_copy_to_buffer_async_c_float_complex(&
      array,buffer,memcpy_kind,&
      stream) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array7),intent(inout) :: array
      complex(c_float_complex),intent(in),target,dimension(:,:,:,:,:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array7_copy_to_buffer_async(&
        array,c_loc(buffer),memcpy_kind,stream)
    end function
    function gpufort_array7_copy_to_buffer_c_float_complex(&
      array,buffer,memcpy_kind) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array7),intent(inout) :: array
      complex(c_float_complex),intent(in),target,dimension(:,:,:,:,:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array7_copy_to_buffer(&
        array,c_loc(buffer),memcpy_kind)
    end function
    function gpufort_array7_copy_to_buffer_async_c_double_complex(&
      array,buffer,memcpy_kind,&
      stream) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array7),intent(inout) :: array
      complex(c_double_complex),intent(in),target,dimension(:,:,:,:,:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      type(c_ptr),value,intent(in) :: stream
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array7_copy_to_buffer_async(&
        array,c_loc(buffer),memcpy_kind,stream)
    end function
    function gpufort_array7_copy_to_buffer_c_double_complex(&
      array,buffer,memcpy_kind) &
            result(ierr)
      use iso_c_binding
      use hipfort_enums
      implicit none
      type(gpufort_array7),intent(inout) :: array
      complex(c_double_complex),intent(in),target,dimension(:,:,:,:,:,:,:) :: buffer 
      integer(kind(hipMemcpyHostToDevice)),intent(in),value :: memcpy_kind
      integer(kind(hipSuccess)) :: ierr
      !
      ierr = gpufort_array7_copy_to_buffer(&
        array,c_loc(buffer),memcpy_kind)
    end function

end module gpufort_array 